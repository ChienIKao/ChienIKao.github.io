{
    "version": "https://jsonfeed.org/version/1",
    "title": "Nothing is true, everything is permitted",
    "subtitle": "",
    "icon": "https://chienikao.github.io/images/favicon.ico",
    "description": "This is a note blog",
    "home_page_url": "https://chienikao.github.io",
    "items": [
        {
            "id": "https://chienikao.github.io/2023/05/07/Coding/leetcode/Easy/2665%20Counter%20II/",
            "url": "https://chienikao.github.io/2023/05/07/Coding/leetcode/Easy/2665%20Counter%20II/",
            "title": "2665. Counter II",
            "date_published": "2023-05-07T12:27:35.000Z",
            "content_html": "<p>⭐️</p>\n<h2 id=\"題目敘述\"><a class=\"anchor\" href=\"#題目敘述\">#</a> <span class=\"exturl\" data-url=\"aHR0cHM6Ly9sZWV0Y29kZS5jb20vcHJvYmxlbXMvY291bnRlci1paS9kZXNjcmlwdGlvbi8/dXRtX2NhbXBhaWduPVBvc3REMyZhbXA7dXRtX21lZGl1bT1Qb3N0JmFtcDt1dG1fc291cmNlPVBvc3QmYW1wO2dpb19saW5rX2lkPXhSeFZZT1hv\">題目敘述</span></h2>\n<p>Write a function  <code>createCounter</code> . It should accept an initial integer  <code>init</code> . It should return an object with three functions.</p>\n<p>The three functions are:</p>\n<ul>\n<li><code>increment()</code>  increases the current value by 1 and then returns it.</li>\n<li><code>decrement()</code>  reduces the current value by 1 and then returns it.</li>\n<li><code>reset()</code>  sets the current value to  <code>init</code>  and then returns it.</li>\n</ul>\n<h3 id=\"example-1\"><a class=\"anchor\" href=\"#example-1\">#</a> Example 1</h3>\n<blockquote>\n<p><strong>Input</strong>: init = 5, calls = [“increment”,“reset”,“decrement”]<br>\n<strong>Output</strong>: [6,5,4]<br>\n<strong>Explanation</strong>:<br>\nconst counter = createCounter(5);<br>\ncounter.increment(); // 6<br>\ncounter.reset(); // 5<br>\ncounter.decrement(); // 4</p>\n</blockquote>\n<h3 id=\"example-2\"><a class=\"anchor\" href=\"#example-2\">#</a> Example 2</h3>\n<blockquote>\n<p><strong>Input</strong>: init = 0, calls = [“increment”,“increment”,“decrement”,“reset”,“reset”]<br>\n<strong>Output</strong>: [1,2,1,0,0]<br>\n<strong>Explanation</strong>:<br>\nconst counter = createCounter(0);<br>\ncounter.increment(); // 1<br>\ncounter.increment(); // 2<br>\ncounter.decrement(); // 1<br>\ncounter.reset(); // 0<br>\ncounter.reset(); // 0</p>\n</blockquote>\n<h2 id=\"solution\"><a class=\"anchor\" href=\"#solution\">#</a> Solution</h2>\n<div class=\"tab\" data-id=\"code\" data-title=\"Javascript\">\n<figure class=\"highlight javascript\"><figcaption data-lang=\"javascript\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre><span class=\"token comment\">/**</pre></td></tr><tr><td data-num=\"2\"></td><td><pre> * @param &#123;integer&#125; init</pre></td></tr><tr><td data-num=\"3\"></td><td><pre> * @return &#123; increment: Function, decrement: Function, reset: Function &#125;</pre></td></tr><tr><td data-num=\"4\"></td><td><pre> */</span></pre></td></tr><tr><td data-num=\"5\"></td><td><pre><span class=\"token keyword\">var</span> <span class=\"token function-variable function\">createCounter</span> <span class=\"token operator\">=</span> <span class=\"token keyword\">function</span><span class=\"token punctuation\">(</span><span class=\"token parameter\">init</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"6\"></td><td><pre>    <span class=\"token keyword\">let</span> tmp <span class=\"token operator\">=</span> init<span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"7\"></td><td><pre>    <span class=\"token function-variable function\">increment</span> <span class=\"token operator\">=</span> <span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token operator\">=></span> <span class=\"token operator\">++</span>tmp<span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"8\"></td><td><pre>    <span class=\"token function-variable function\">decrement</span> <span class=\"token operator\">=</span> <span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token operator\">=></span> <span class=\"token operator\">--</span>tmp<span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"9\"></td><td><pre>    <span class=\"token function-variable function\">reset</span> <span class=\"token operator\">=</span> <span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token operator\">=></span> tmp <span class=\"token operator\">=</span> init<span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"10\"></td><td><pre>    <span class=\"token keyword\">return</span> <span class=\"token punctuation\">&#123;</span>increment<span class=\"token punctuation\">,</span> decrement<span class=\"token punctuation\">,</span> reset<span class=\"token punctuation\">&#125;</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"11\"></td><td><pre><span class=\"token punctuation\">&#125;</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"12\"></td><td><pre></pre></td></tr><tr><td data-num=\"13\"></td><td><pre><span class=\"token comment\">/**</pre></td></tr><tr><td data-num=\"14\"></td><td><pre> * const counter = createCounter(5)</pre></td></tr><tr><td data-num=\"15\"></td><td><pre> * counter.increment(); // 6</pre></td></tr><tr><td data-num=\"16\"></td><td><pre> * counter.reset(); // 5</pre></td></tr><tr><td data-num=\"17\"></td><td><pre> * counter.decrement(); // 4</pre></td></tr><tr><td data-num=\"18\"></td><td><pre> */</span></pre></td></tr></table></figure></div>\n<div class=\"tab\" data-id=\"code\" data-title=\"Typescript\">\n<figure class=\"highlight typescript\"><figcaption data-lang=\"typescript\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre><span class=\"token keyword\">type</span> <span class=\"token class-name\">ReturnObj</span> <span class=\"token operator\">=</span> <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"2\"></td><td><pre>    <span class=\"token function-variable function\">increment</span><span class=\"token operator\">:</span> <span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token operator\">=></span> <span class=\"token builtin\">number</span><span class=\"token punctuation\">,</span></pre></td></tr><tr><td data-num=\"3\"></td><td><pre>    <span class=\"token function-variable function\">decrement</span><span class=\"token operator\">:</span> <span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token operator\">=></span> <span class=\"token builtin\">number</span><span class=\"token punctuation\">,</span></pre></td></tr><tr><td data-num=\"4\"></td><td><pre>    <span class=\"token function-variable function\">reset</span><span class=\"token operator\">:</span> <span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token operator\">=></span> <span class=\"token builtin\">number</span><span class=\"token punctuation\">,</span></pre></td></tr><tr><td data-num=\"5\"></td><td><pre><span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"6\"></td><td><pre></pre></td></tr><tr><td data-num=\"7\"></td><td><pre><span class=\"token keyword\">function</span> <span class=\"token function\">createCounter</span><span class=\"token punctuation\">(</span>init<span class=\"token operator\">:</span> <span class=\"token builtin\">number</span><span class=\"token punctuation\">)</span><span class=\"token operator\">:</span> ReturnObj <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"8\"></td><td><pre>    <span class=\"token keyword\">let</span> tmp<span class=\"token operator\">:</span> <span class=\"token builtin\">number</span> <span class=\"token operator\">=</span> init<span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"9\"></td><td><pre>    <span class=\"token keyword\">const</span> increment <span class=\"token operator\">=</span> <span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token operator\">:</span> <span class=\"token builtin\">number</span> <span class=\"token operator\">=></span> <span class=\"token operator\">++</span>tmp<span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"10\"></td><td><pre>    <span class=\"token keyword\">const</span> <span class=\"token function-variable function\">decrement</span> <span class=\"token operator\">=</span> <span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token operator\">=></span> <span class=\"token operator\">--</span>tmp<span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"11\"></td><td><pre>    <span class=\"token keyword\">const</span> reset <span class=\"token operator\">=</span> <span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token operator\">:</span> <span class=\"token builtin\">number</span> <span class=\"token operator\">=></span> tmp <span class=\"token operator\">=</span> init<span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"12\"></td><td><pre>    <span class=\"token keyword\">return</span> <span class=\"token punctuation\">&#123;</span>increment<span class=\"token punctuation\">,</span> decrement<span class=\"token punctuation\">,</span> reset<span class=\"token punctuation\">&#125;</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"13\"></td><td><pre><span class=\"token punctuation\">&#125;</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"14\"></td><td><pre></pre></td></tr><tr><td data-num=\"15\"></td><td><pre><span class=\"token comment\">/**</pre></td></tr><tr><td data-num=\"16\"></td><td><pre> * const counter = createCounter(5)</pre></td></tr><tr><td data-num=\"17\"></td><td><pre> * counter.increment(); // 6</pre></td></tr><tr><td data-num=\"18\"></td><td><pre> * counter.reset(); // 5</pre></td></tr><tr><td data-num=\"19\"></td><td><pre> * counter.decrement(); // 4</pre></td></tr><tr><td data-num=\"20\"></td><td><pre> */</span></pre></td></tr></table></figure></div>\n",
            "tags": [
                "Coding",
                "Leetcode",
                "Easy",
                "Leetcode",
                "Easy",
                "Javascript",
                "Typescript"
            ]
        },
        {
            "id": "https://chienikao.github.io/2023/05/07/Coding/leetcode/Medium/1498%20Number%20of%20Subsequences%20That%20Satisfy%20the%20Given%20Sum%20Condition/",
            "url": "https://chienikao.github.io/2023/05/07/Coding/leetcode/Medium/1498%20Number%20of%20Subsequences%20That%20Satisfy%20the%20Given%20Sum%20Condition/",
            "title": "1498. Number of Subsequences That Satisfy the Given Sum Condition",
            "date_published": "2023-05-07T12:23:22.000Z",
            "content_html": "<p>⭐️⭐️</p>\n<h2 id=\"題目敘述\"><a class=\"anchor\" href=\"#題目敘述\">#</a> <span class=\"exturl\" data-url=\"aHR0cHM6Ly9sZWV0Y29kZS5jb20vcHJvYmxlbXMvbnVtYmVyLW9mLXN1YnNlcXVlbmNlcy10aGF0LXNhdGlzZnktdGhlLWdpdmVuLXN1bS1jb25kaXRpb24v\">題目敘述</span></h2>\n<p>You are given an array of integers  <code>nums</code>  and an integer  <code>target</code> .</p>\n<p>Return <em>the number of non-empty subsequences of  <code>nums</code>  such that the sum of the minimum and maximum element on it is less or equal to  <code>target</code> </em>. Since the answer may be too large, return it <strong>modulo</strong>  <code>10^9 + 7</code> .</p>\n<h3 id=\"example-1\"><a class=\"anchor\" href=\"#example-1\">#</a> Example 1</h3>\n<blockquote>\n<p><strong>Input:</strong> nums = [3,5,6,7], target = 9<br>\n<strong>Output:</strong> 4<br>\n<strong>Explanation:</strong> There are 4 subsequences that satisfy the condition.<br>\n[3] -&gt; Min value + max value &lt;= target (3 + 3 &lt;= 9)<br>\n[3,5] -&gt; (3 + 5 &lt;= 9)<br>\n[3,5,6] -&gt; (3 + 6 &lt;= 9)<br>\n[3,6] -&gt; (3 + 6 &lt;= 9)</p>\n</blockquote>\n<h3 id=\"example-2\"><a class=\"anchor\" href=\"#example-2\">#</a> Example 2</h3>\n<blockquote>\n<p><strong>Input:</strong> nums = [3,3,6,8], target = 10<br>\n<strong>Output:</strong> 6<br>\n<strong>Explanation:</strong> There are 6 subsequences that satisfy the condition. (nums can have repeated numbers).<br>\n[3] , [3] , [3,3], [3,6] , [3,6] , [3,3,6]</p>\n</blockquote>\n<h3 id=\"example-3\"><a class=\"anchor\" href=\"#example-3\">#</a> Example 3</h3>\n<blockquote>\n<p><strong>Input:</strong> nums = [2,3,3,4,6,7], target = 12<br>\n<strong>Output:</strong> 61<br>\n<strong>Explanation:</strong> There are 63 non-empty subsequences, two of them do not satisfy the condition ([6,7], [7]).<br>\nNumber of valid subsequences (63 - 2 = 61).</p>\n</blockquote>\n<h2 id=\"solution\"><a class=\"anchor\" href=\"#solution\">#</a> Solution</h2>\n<div class=\"tab\" data-id=\"code\" data-title=\"C++\">\n<pre><code class=\"language-cpp\">\n</code></pre>\n</div>\n<div class=\"tab\" data-id=\"code\" data-title=\"Java\">\n<figure class=\"highlight java\"><figcaption data-lang=\"java\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre><span class=\"token keyword\">import</span> <span class=\"token import\"><span class=\"token namespace\">java<span class=\"token punctuation\">.</span>util<span class=\"token punctuation\">.</span></span><span class=\"token class-name\">Arrays</span></span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"2\"></td><td><pre></pre></td></tr><tr><td data-num=\"3\"></td><td><pre><span class=\"token keyword\">class</span> <span class=\"token class-name\">Solution</span> <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"4\"></td><td><pre>    <span class=\"token keyword\">public</span> <span class=\"token keyword\">int</span> <span class=\"token function\">numSubseq</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">int</span><span class=\"token punctuation\">[</span><span class=\"token punctuation\">]</span> nums<span class=\"token punctuation\">,</span> <span class=\"token keyword\">int</span> target<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"5\"></td><td><pre>        <span class=\"token keyword\">int</span> n <span class=\"token operator\">=</span> nums<span class=\"token punctuation\">.</span>length<span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"6\"></td><td><pre>        <span class=\"token keyword\">int</span> mod <span class=\"token operator\">=</span> <span class=\"token number\">1000000007</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"7\"></td><td><pre>        <span class=\"token keyword\">int</span> ans <span class=\"token operator\">=</span> <span class=\"token number\">0</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"8\"></td><td><pre>        <span class=\"token class-name\">Arrays</span><span class=\"token punctuation\">.</span><span class=\"token function\">sort</span><span class=\"token punctuation\">(</span>nums<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"9\"></td><td><pre></pre></td></tr><tr><td data-num=\"10\"></td><td><pre>        <span class=\"token keyword\">int</span><span class=\"token punctuation\">[</span><span class=\"token punctuation\">]</span> count <span class=\"token operator\">=</span> <span class=\"token keyword\">new</span> <span class=\"token keyword\">int</span><span class=\"token punctuation\">[</span>n<span class=\"token punctuation\">]</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"11\"></td><td><pre>        count<span class=\"token punctuation\">[</span><span class=\"token number\">0</span><span class=\"token punctuation\">]</span> <span class=\"token operator\">=</span> <span class=\"token number\">1</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"12\"></td><td><pre>        <span class=\"token keyword\">for</span> <span class=\"token punctuation\">(</span><span class=\"token keyword\">int</span> i <span class=\"token operator\">=</span> <span class=\"token number\">1</span><span class=\"token punctuation\">;</span> i <span class=\"token operator\">&lt;</span> n<span class=\"token punctuation\">;</span> i<span class=\"token operator\">++</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"13\"></td><td><pre>            count<span class=\"token punctuation\">[</span>i<span class=\"token punctuation\">]</span> <span class=\"token operator\">=</span> <span class=\"token punctuation\">(</span>count<span class=\"token punctuation\">[</span>i <span class=\"token operator\">-</span> <span class=\"token number\">1</span><span class=\"token punctuation\">]</span> <span class=\"token operator\">*</span> <span class=\"token number\">2</span><span class=\"token punctuation\">)</span> <span class=\"token operator\">%</span> mod<span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"14\"></td><td><pre>        <span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"15\"></td><td><pre></pre></td></tr><tr><td data-num=\"16\"></td><td><pre>        <span class=\"token keyword\">int</span> left <span class=\"token operator\">=</span> <span class=\"token number\">0</span><span class=\"token punctuation\">,</span> right <span class=\"token operator\">=</span> n <span class=\"token operator\">-</span> <span class=\"token number\">1</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"17\"></td><td><pre>        <span class=\"token keyword\">while</span> <span class=\"token punctuation\">(</span>left <span class=\"token operator\">&lt;=</span> right<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"18\"></td><td><pre>            <span class=\"token keyword\">if</span> <span class=\"token punctuation\">(</span>nums<span class=\"token punctuation\">[</span>left<span class=\"token punctuation\">]</span> <span class=\"token operator\">+</span> nums<span class=\"token punctuation\">[</span>right<span class=\"token punctuation\">]</span> <span class=\"token operator\">&lt;=</span> target<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"19\"></td><td><pre>                ans <span class=\"token operator\">=</span> <span class=\"token punctuation\">(</span>ans <span class=\"token operator\">+</span> count<span class=\"token punctuation\">[</span>right <span class=\"token operator\">-</span> left<span class=\"token punctuation\">]</span><span class=\"token punctuation\">)</span> <span class=\"token operator\">%</span> mod<span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"20\"></td><td><pre>                left<span class=\"token operator\">++</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"21\"></td><td><pre>            <span class=\"token punctuation\">&#125;</span> <span class=\"token keyword\">else</span> <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"22\"></td><td><pre>                right<span class=\"token operator\">--</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"23\"></td><td><pre>            <span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"24\"></td><td><pre>        <span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"25\"></td><td><pre>        </pre></td></tr><tr><td data-num=\"26\"></td><td><pre>        <span class=\"token keyword\">return</span> ans<span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"27\"></td><td><pre>    <span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"28\"></td><td><pre><span class=\"token punctuation\">&#125;</span></pre></td></tr></table></figure></div>\n<div class=\"tab\" data-id=\"code\" data-title=\"Python\">\n<pre><code class=\"language-python\">\n</code></pre>\n</div>\n",
            "tags": [
                "Coding",
                "Leetcode",
                "Medium",
                "Leetcode",
                "Array",
                "Sorting",
                "Two Pointers",
                "Medium",
                "Binary Search"
            ]
        },
        {
            "id": "https://chienikao.github.io/2023/05/07/Coding/leetcode/Easy/2620%20Counter/",
            "url": "https://chienikao.github.io/2023/05/07/Coding/leetcode/Easy/2620%20Counter/",
            "title": "2620. Counter",
            "date_published": "2023-05-07T12:21:30.000Z",
            "content_html": "<p>⭐️</p>\n<h2 id=\"題目敘述\"><a class=\"anchor\" href=\"#題目敘述\">#</a> <span class=\"exturl\" data-url=\"aHR0cHM6Ly9sZWV0Y29kZS5jb20vcHJvYmxlbXMvY291bnRlci8/dXRtX2NhbXBhaWduPVBvc3REMiZhbXA7dXRtX21lZGl1bT1Qb3N0JmFtcDt1dG1fc291cmNlPVBvc3QmYW1wO2dpb19saW5rX2lkPXhvZ2tWcUJv\">題目敘述</span></h2>\n<p>Given an integer  <code>n</code> , return a  <code>counter</code>  function. This counter function initially returns  <code>n</code>  and then returns 1 more than the previous value every subsequent time it is called ( <code>n</code> ,  <code>n + 1</code> ,  <code>n + 2</code> , etc).</p>\n<h3 id=\"example-1\"><a class=\"anchor\" href=\"#example-1\">#</a> Example 1</h3>\n<blockquote>\n<p><strong>Input:</strong><br>\nn = 10<br>\n[“call”,“call”,“call”]<br>\n<strong>Output:</strong> [10,11,12]<br>\n<strong>Explanation:</strong><br>\ncounter() = 10 // The first time counter() is called, it returns n.<br>\ncounter() = 11 // Returns 1 more than the previous time.<br>\ncounter() = 12 // Returns 1 more than the previous time.</p>\n</blockquote>\n<h3 id=\"example-2\"><a class=\"anchor\" href=\"#example-2\">#</a> Example 2</h3>\n<blockquote>\n<p><strong>Input:</strong><br>\nn = -2<br>\n[“call”,“call”,“call”,“call”,“call”]<br>\n<strong>Output:</strong> [-2,-1,0,1,2]<br>\n<strong>Explanation:</strong> counter() initially returns -2. Then increases after each sebsequent call.</p>\n</blockquote>\n<h2 id=\"solution\"><a class=\"anchor\" href=\"#solution\">#</a> Solution</h2>\n<div class=\"tab\" data-id=\"code\" data-title=\"Javascript\">\n<figure class=\"highlight javascript\"><figcaption data-lang=\"javascript\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre><span class=\"token comment\">/**</pre></td></tr><tr><td data-num=\"2\"></td><td><pre> * @param &#123;number&#125; n</pre></td></tr><tr><td data-num=\"3\"></td><td><pre> * @return &#123;Function&#125; counter</pre></td></tr><tr><td data-num=\"4\"></td><td><pre> */</span></pre></td></tr><tr><td data-num=\"5\"></td><td><pre><span class=\"token keyword\">var</span> <span class=\"token function-variable function\">createCounter</span> <span class=\"token operator\">=</span> <span class=\"token keyword\">function</span><span class=\"token punctuation\">(</span><span class=\"token parameter\">n</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"6\"></td><td><pre>    <span class=\"token keyword\">let</span> counter <span class=\"token operator\">=</span> n <span class=\"token operator\">-</span> <span class=\"token number\">1</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"7\"></td><td><pre>    <span class=\"token keyword\">return</span> <span class=\"token keyword\">function</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"8\"></td><td><pre>        counter <span class=\"token operator\">+=</span> <span class=\"token number\">1</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"9\"></td><td><pre>        <span class=\"token keyword\">return</span> counter<span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"10\"></td><td><pre>    <span class=\"token punctuation\">&#125;</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"11\"></td><td><pre><span class=\"token punctuation\">&#125;</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"12\"></td><td><pre></pre></td></tr><tr><td data-num=\"13\"></td><td><pre><span class=\"token comment\">/** </pre></td></tr><tr><td data-num=\"14\"></td><td><pre> * const counter = createCounter(10)</pre></td></tr><tr><td data-num=\"15\"></td><td><pre> * counter() // 10</pre></td></tr><tr><td data-num=\"16\"></td><td><pre> * counter() // 11</pre></td></tr><tr><td data-num=\"17\"></td><td><pre> * counter() // 12</pre></td></tr><tr><td data-num=\"18\"></td><td><pre> */</span></pre></td></tr></table></figure></div>\n<div class=\"tab\" data-id=\"code\" data-title=\"Typescript\">\n<figure class=\"highlight typescript\"><figcaption data-lang=\"typescript\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre><span class=\"token keyword\">function</span> <span class=\"token function\">createCounter</span><span class=\"token punctuation\">(</span>n<span class=\"token operator\">:</span> <span class=\"token builtin\">number</span><span class=\"token punctuation\">)</span><span class=\"token operator\">:</span> <span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token operator\">=></span> <span class=\"token builtin\">number</span> <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"2\"></td><td><pre>    <span class=\"token keyword\">let</span> counter <span class=\"token operator\">=</span> n <span class=\"token operator\">-</span> <span class=\"token number\">1</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"3\"></td><td><pre>    <span class=\"token keyword\">return</span> <span class=\"token keyword\">function</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"4\"></td><td><pre>        counter <span class=\"token operator\">+=</span> <span class=\"token number\">1</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"5\"></td><td><pre>        <span class=\"token keyword\">return</span> counter<span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"6\"></td><td><pre>    <span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"7\"></td><td><pre><span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"8\"></td><td><pre></pre></td></tr><tr><td data-num=\"9\"></td><td><pre></pre></td></tr><tr><td data-num=\"10\"></td><td><pre><span class=\"token comment\">/** </pre></td></tr><tr><td data-num=\"11\"></td><td><pre> * const counter = createCounter(10)</pre></td></tr><tr><td data-num=\"12\"></td><td><pre> * counter() // 10</pre></td></tr><tr><td data-num=\"13\"></td><td><pre> * counter() // 11</pre></td></tr><tr><td data-num=\"14\"></td><td><pre> * counter() // 12</pre></td></tr><tr><td data-num=\"15\"></td><td><pre> */</span></pre></td></tr></table></figure></div>\n",
            "tags": [
                "Coding",
                "Leetcode",
                "Easy",
                "Leetcode",
                "Easy",
                "Javascript",
                "Typescript"
            ]
        },
        {
            "id": "https://chienikao.github.io/2023/05/07/Coding/leetcode/Easy/2667%20Create%20Hello%20World%20Function/",
            "url": "https://chienikao.github.io/2023/05/07/Coding/leetcode/Easy/2667%20Create%20Hello%20World%20Function/",
            "title": "2667. Create Hello World Function",
            "date_published": "2023-05-07T12:19:25.000Z",
            "content_html": "<p>⭐️</p>\n<h2 id=\"題目敘述\"><a class=\"anchor\" href=\"#題目敘述\">#</a> <span class=\"exturl\" data-url=\"aHR0cHM6Ly9sZWV0Y29kZS5jb20vcHJvYmxlbXMvY3JlYXRlLWhlbGxvLXdvcmxkLWZ1bmN0aW9uLz91dG1fY2FtcGFpZ249UG9zdEQxJmFtcDt1dG1fbWVkaXVtPVBvc3QmYW1wO3V0bV9zb3VyY2U9UG9zdCZhbXA7Z2lvX2xpbmtfaWQ9UVBEdzBrSlI=\">題目敘述</span></h2>\n<p>Write a function  <code>createHelloWorld</code> . It should return a new function that always returns  <code>&quot;Hello World&quot;</code> .</p>\n<h3 id=\"example-1\"><a class=\"anchor\" href=\"#example-1\">#</a> Example 1</h3>\n<blockquote>\n<p><strong>Input:</strong> args = []<br>\n<strong>Output:</strong> “Hello World”<br>\n<strong>Explanation:</strong><br>\nconst f = createHelloWorld();<br>\nf(); // “Hello World”</p>\n<p>The function returned by createHelloWorld should always return “Hello World”.</p>\n</blockquote>\n<h3 id=\"example-2\"><a class=\"anchor\" href=\"#example-2\">#</a> Example 2</h3>\n<blockquote>\n<p><strong>Input:</strong> args = [{},null,42]<br>\n<strong>Output:</strong> “Hello World”<br>\n<strong>Explanation:</strong><br>\nconst f = createHelloWorld();<br>\nf({}, null, 42); // “Hello World”</p>\n<p>Any arguments could be passed to the function but it should still always return “Hello World”.</p>\n</blockquote>\n<h2 id=\"solution\"><a class=\"anchor\" href=\"#solution\">#</a> Solution</h2>\n<div class=\"tab\" data-id=\"code\" data-title=\"Javascript\">\n<figure class=\"highlight javascript\"><figcaption data-lang=\"javascript\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre><span class=\"token comment\">/**</pre></td></tr><tr><td data-num=\"2\"></td><td><pre> * @return &#123;Function&#125;</pre></td></tr><tr><td data-num=\"3\"></td><td><pre> */</span></pre></td></tr><tr><td data-num=\"4\"></td><td><pre><span class=\"token keyword\">var</span> <span class=\"token function-variable function\">createHelloWorld</span> <span class=\"token operator\">=</span> <span class=\"token keyword\">function</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"5\"></td><td><pre>    <span class=\"token keyword\">return</span> <span class=\"token keyword\">function</span><span class=\"token punctuation\">(</span><span class=\"token parameter\"><span class=\"token operator\">...</span>args</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"6\"></td><td><pre>        <span class=\"token keyword\">return</span> <span class=\"token string\">\"Hello World\"</span></pre></td></tr><tr><td data-num=\"7\"></td><td><pre>    <span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"8\"></td><td><pre><span class=\"token punctuation\">&#125;</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"9\"></td><td><pre></pre></td></tr><tr><td data-num=\"10\"></td><td><pre><span class=\"token comment\">/**</pre></td></tr><tr><td data-num=\"11\"></td><td><pre> * const f = createHelloWorld();</pre></td></tr><tr><td data-num=\"12\"></td><td><pre> * f(); // \"Hello World\"</pre></td></tr><tr><td data-num=\"13\"></td><td><pre> */</span></pre></td></tr></table></figure></div>\n<div class=\"tab\" data-id=\"code\" data-title=\"Typescript\">\n<figure class=\"highlight typescript\"><figcaption data-lang=\"typescript\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre><span class=\"token keyword\">function</span> <span class=\"token function\">createHelloWorld</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"2\"></td><td><pre>\t<span class=\"token keyword\">return</span> <span class=\"token keyword\">function</span><span class=\"token punctuation\">(</span><span class=\"token operator\">...</span>args<span class=\"token punctuation\">)</span><span class=\"token operator\">:</span> <span class=\"token builtin\">string</span> <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"3\"></td><td><pre>        <span class=\"token keyword\">return</span> <span class=\"token string\">\"Hello World\"</span></pre></td></tr><tr><td data-num=\"4\"></td><td><pre>    <span class=\"token punctuation\">&#125;</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"5\"></td><td><pre><span class=\"token punctuation\">&#125;</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"6\"></td><td><pre></pre></td></tr><tr><td data-num=\"7\"></td><td><pre><span class=\"token comment\">/**</pre></td></tr><tr><td data-num=\"8\"></td><td><pre> * const f = createHelloWorld();</pre></td></tr><tr><td data-num=\"9\"></td><td><pre> * f(); // \"Hello World\"</pre></td></tr><tr><td data-num=\"10\"></td><td><pre> */</span></pre></td></tr></table></figure></div>\n",
            "tags": [
                "Coding",
                "Leetcode",
                "Easy",
                "Leetcode",
                "Easy",
                "Javascript",
                "Typescript"
            ]
        },
        {
            "id": "https://chienikao.github.io/2023/05/07/Coding/leetcode/Medium/1456%20Maximum%20Number%20of%20Vowels%20in%20a%20Substring%20of%20Given%20Length/",
            "url": "https://chienikao.github.io/2023/05/07/Coding/leetcode/Medium/1456%20Maximum%20Number%20of%20Vowels%20in%20a%20Substring%20of%20Given%20Length/",
            "title": "1456. Maximum Number of Vowels in a Substring of Given Length",
            "date_published": "2023-05-07T12:16:51.000Z",
            "content_html": "<p>⭐️⭐️</p>\n<h2 id=\"題目敘述\"><a class=\"anchor\" href=\"#題目敘述\">#</a> <span class=\"exturl\" data-url=\"aHR0cHM6Ly9sZWV0Y29kZS5jb20vcHJvYmxlbXMvbWF4aW11bS1udW1iZXItb2Ytdm93ZWxzLWluLWEtc3Vic3RyaW5nLW9mLWdpdmVuLWxlbmd0aC8=\">題目敘述</span></h2>\n<p>Given a string  <code>s</code>  and an integer  <code>k</code> , return <em>the maximum number of vowel letters in any substring of  <code>s</code>  with length  <code>k</code> </em>.</p>\n<p><strong>Vowel letters</strong> in English are  <code>'a'</code> ,  <code>'e'</code> ,  <code>'i'</code> ,  <code>'o'</code> , and  <code>'u'</code> .</p>\n<h3 id=\"example-1\"><a class=\"anchor\" href=\"#example-1\">#</a> Example 1</h3>\n<blockquote>\n<p><strong>Input:</strong> s = “abciiidef”, k = 3<br>\n<strong>Output:</strong> 3<br>\n<strong>Explanation:</strong> The substring “iii” contains 3 vowel letters.</p>\n</blockquote>\n<h3 id=\"example-2\"><a class=\"anchor\" href=\"#example-2\">#</a> Example 2</h3>\n<blockquote>\n<p><strong>Input:</strong> s = “aeiou”, k = 2<br>\n<strong>Output:</strong> 2<br>\n<strong>Explanation:</strong> Any substring of length 2 contains 2 vowels.</p>\n</blockquote>\n<h3 id=\"example-3\"><a class=\"anchor\" href=\"#example-3\">#</a> Example 3</h3>\n<blockquote>\n<p><strong>Input:</strong> s = “leetcode”, k = 3<br>\n<strong>Output:</strong> 2<br>\n<strong>Explanation:</strong> “lee”, “eet” and “ode” contain 2 vowels.</p>\n</blockquote>\n<h2 id=\"solution\"><a class=\"anchor\" href=\"#solution\">#</a> Solution</h2>\n<div class=\"tab\" data-id=\"code\" data-title=\"C++\">\n<figure class=\"highlight cpp\"><figcaption data-lang=\"C++\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre><span class=\"token keyword\">class</span> <span class=\"token class-name\">Solution</span> <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"2\"></td><td><pre><span class=\"token keyword\">public</span><span class=\"token operator\">:</span></pre></td></tr><tr><td data-num=\"3\"></td><td><pre>    <span class=\"token keyword\">int</span> <span class=\"token function\">maxVowels</span><span class=\"token punctuation\">(</span>string s<span class=\"token punctuation\">,</span> <span class=\"token keyword\">int</span> k<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"4\"></td><td><pre>        <span class=\"token keyword\">int</span> res <span class=\"token operator\">=</span> <span class=\"token number\">0</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"5\"></td><td><pre>        unordered_set<span class=\"token operator\">&lt;</span><span class=\"token keyword\">char</span><span class=\"token operator\">></span> vowels <span class=\"token operator\">=</span> <span class=\"token punctuation\">&#123;</span><span class=\"token char\">'a'</span><span class=\"token punctuation\">,</span> <span class=\"token char\">'e'</span><span class=\"token punctuation\">,</span> <span class=\"token char\">'i'</span><span class=\"token punctuation\">,</span> <span class=\"token char\">'o'</span><span class=\"token punctuation\">,</span> <span class=\"token char\">'u'</span><span class=\"token punctuation\">&#125;</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"6\"></td><td><pre>        <span class=\"token keyword\">for</span> <span class=\"token punctuation\">(</span><span class=\"token keyword\">int</span> i<span class=\"token operator\">=</span><span class=\"token number\">0</span><span class=\"token punctuation\">,</span> tmp<span class=\"token operator\">=</span><span class=\"token number\">0</span><span class=\"token punctuation\">;</span> i<span class=\"token operator\">&lt;</span>s<span class=\"token punctuation\">.</span><span class=\"token function\">size</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span> i<span class=\"token operator\">++</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"7\"></td><td><pre>            tmp <span class=\"token operator\">+=</span> vowels<span class=\"token punctuation\">.</span><span class=\"token function\">count</span><span class=\"token punctuation\">(</span>s<span class=\"token punctuation\">[</span>i<span class=\"token punctuation\">]</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"8\"></td><td><pre>            <span class=\"token keyword\">if</span> <span class=\"token punctuation\">(</span>i <span class=\"token operator\">-</span> k <span class=\"token operator\">>=</span> <span class=\"token number\">0</span><span class=\"token punctuation\">)</span> tmp <span class=\"token operator\">-=</span> vowels<span class=\"token punctuation\">.</span><span class=\"token function\">count</span><span class=\"token punctuation\">(</span>s<span class=\"token punctuation\">[</span>i<span class=\"token operator\">-</span>k<span class=\"token punctuation\">]</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"9\"></td><td><pre>            res <span class=\"token operator\">=</span> <span class=\"token function\">max</span><span class=\"token punctuation\">(</span>res<span class=\"token punctuation\">,</span> tmp<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"10\"></td><td><pre>        <span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"11\"></td><td><pre>        <span class=\"token keyword\">return</span> res<span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"12\"></td><td><pre>    <span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"13\"></td><td><pre><span class=\"token punctuation\">&#125;</span><span class=\"token punctuation\">;</span></pre></td></tr></table></figure></div>\n<div class=\"tab\" data-id=\"code\" data-title=\"Java\">\n<figure class=\"highlight java\"><figcaption data-lang=\"java\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre><span class=\"token keyword\">class</span> <span class=\"token class-name\">Solution</span> <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"2\"></td><td><pre>    <span class=\"token keyword\">public</span> <span class=\"token keyword\">int</span> <span class=\"token function\">maxVowels</span><span class=\"token punctuation\">(</span><span class=\"token class-name\">String</span> s<span class=\"token punctuation\">,</span> <span class=\"token keyword\">int</span> k<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"3\"></td><td><pre>        <span class=\"token keyword\">int</span> ans <span class=\"token operator\">=</span> <span class=\"token number\">0</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"4\"></td><td><pre></pre></td></tr><tr><td data-num=\"5\"></td><td><pre>        <span class=\"token class-name\">String</span> temp <span class=\"token operator\">=</span> s<span class=\"token punctuation\">.</span><span class=\"token function\">substring</span><span class=\"token punctuation\">(</span><span class=\"token number\">0</span><span class=\"token punctuation\">,</span> k<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"6\"></td><td><pre>        <span class=\"token keyword\">for</span> <span class=\"token punctuation\">(</span><span class=\"token keyword\">char</span> t <span class=\"token operator\">:</span> temp<span class=\"token punctuation\">.</span><span class=\"token function\">toCharArray</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"7\"></td><td><pre>            <span class=\"token keyword\">if</span> <span class=\"token punctuation\">(</span><span class=\"token function\">isVowel</span><span class=\"token punctuation\">(</span>t<span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"8\"></td><td><pre>                ans<span class=\"token operator\">++</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"9\"></td><td><pre>            <span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"10\"></td><td><pre>        <span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"11\"></td><td><pre></pre></td></tr><tr><td data-num=\"12\"></td><td><pre>        <span class=\"token keyword\">int</span> cur <span class=\"token operator\">=</span> ans<span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"13\"></td><td><pre>        <span class=\"token keyword\">for</span> <span class=\"token punctuation\">(</span><span class=\"token keyword\">int</span> i <span class=\"token operator\">=</span> k<span class=\"token punctuation\">;</span> i <span class=\"token operator\">&lt;</span> s<span class=\"token punctuation\">.</span><span class=\"token function\">length</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span> i<span class=\"token operator\">++</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"14\"></td><td><pre>            <span class=\"token keyword\">if</span> <span class=\"token punctuation\">(</span><span class=\"token function\">isVowel</span><span class=\"token punctuation\">(</span>s<span class=\"token punctuation\">.</span><span class=\"token function\">charAt</span><span class=\"token punctuation\">(</span>i<span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span></pre></td></tr><tr><td data-num=\"15\"></td><td><pre>                cur<span class=\"token operator\">++</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"16\"></td><td><pre>            <span class=\"token keyword\">if</span> <span class=\"token punctuation\">(</span><span class=\"token function\">isVowel</span><span class=\"token punctuation\">(</span>s<span class=\"token punctuation\">.</span><span class=\"token function\">charAt</span><span class=\"token punctuation\">(</span>i <span class=\"token operator\">-</span> k<span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span></pre></td></tr><tr><td data-num=\"17\"></td><td><pre>                cur<span class=\"token operator\">--</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"18\"></td><td><pre>            ans <span class=\"token operator\">=</span> <span class=\"token class-name\">Math</span><span class=\"token punctuation\">.</span><span class=\"token function\">max</span><span class=\"token punctuation\">(</span>ans<span class=\"token punctuation\">,</span> cur<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"19\"></td><td><pre>        <span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"20\"></td><td><pre></pre></td></tr><tr><td data-num=\"21\"></td><td><pre>        <span class=\"token keyword\">return</span> ans<span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"22\"></td><td><pre>    <span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"23\"></td><td><pre></pre></td></tr><tr><td data-num=\"24\"></td><td><pre>    <span class=\"token keyword\">public</span> <span class=\"token keyword\">boolean</span> <span class=\"token function\">isVowel</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">char</span> c<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"25\"></td><td><pre>        <span class=\"token keyword\">if</span> <span class=\"token punctuation\">(</span>c <span class=\"token operator\">==</span> <span class=\"token char\">'a'</span> <span class=\"token operator\">||</span> c <span class=\"token operator\">==</span> <span class=\"token char\">'e'</span> <span class=\"token operator\">||</span> c <span class=\"token operator\">==</span> <span class=\"token char\">'i'</span> <span class=\"token operator\">||</span> c <span class=\"token operator\">==</span> <span class=\"token char\">'o'</span> <span class=\"token operator\">||</span> c <span class=\"token operator\">==</span> <span class=\"token char\">'u'</span><span class=\"token punctuation\">)</span></pre></td></tr><tr><td data-num=\"26\"></td><td><pre>            <span class=\"token keyword\">return</span> <span class=\"token boolean\">true</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"27\"></td><td><pre>        <span class=\"token keyword\">return</span> <span class=\"token boolean\">false</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"28\"></td><td><pre>    <span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"29\"></td><td><pre><span class=\"token punctuation\">&#125;</span></pre></td></tr></table></figure></div>\n<div class=\"tab\" data-id=\"code\" data-title=\"Python\">\n<pre><code class=\"language-python\">\n</code></pre>\n</div>\n",
            "tags": [
                "Coding",
                "Leetcode",
                "Medium",
                "String",
                "Leetcode",
                "Medium",
                "Sliding Window"
            ]
        },
        {
            "id": "https://chienikao.github.io/2023/05/07/Coding/leetcode/Hard/1964%20Find%20the%20Longest%20Valid%20Obstacle%20Course%20at%20Each%20Position/",
            "url": "https://chienikao.github.io/2023/05/07/Coding/leetcode/Hard/1964%20Find%20the%20Longest%20Valid%20Obstacle%20Course%20at%20Each%20Position/",
            "title": "1964. Find the Longest Valid Obstacle Course at Each Position",
            "date_published": "2023-05-07T12:13:05.000Z",
            "content_html": "<p>⭐️⭐️⭐️</p>\n<h2 id=\"題目敘述\"><a class=\"anchor\" href=\"#題目敘述\">#</a> <span class=\"exturl\" data-url=\"aHR0cHM6Ly9sZWV0Y29kZS5jb20vcHJvYmxlbXMvZmluZC10aGUtbG9uZ2VzdC12YWxpZC1vYnN0YWNsZS1jb3Vyc2UtYXQtZWFjaC1wb3NpdGlvbi8=\">題目敘述</span></h2>\n<p>You want to build some obstacle courses. You are given a <strong>0-indexed</strong> integer array  <code>obstacles</code>  of length  <code>n</code> , where  <code>obstacles[i]</code>  describes the height of the  <code>ith</code>  obstacle.</p>\n<p>For every index  <code>i</code>  between  <code>0</code>  and  <code>n - 1</code>  (<strong>inclusive</strong>), find the length of the <strong>longest obstacle course</strong> in  <code>obstacles</code>  such that:</p>\n<ul>\n<li>You choose any number of obstacles between  <code>0</code>  and  <code>i</code>  <strong>inclusive</strong>.</li>\n<li>You must include the  <code>ith</code>  obstacle in the course.</li>\n<li>You must put the chosen obstacles in the <strong>same order</strong> as they appear in  <code>obstacles</code> .</li>\n<li>Every obstacle (except the first) is <strong>taller</strong> than or the <strong>same height</strong> as the obstacle immediately before it.</li>\n</ul>\n<p>Return <em>an array  <code>ans</code>  of length  <code>n</code> , where  <code>ans[i]</code>  is the length of the <strong>longest obstacle course</strong> for index  <code>i</code>  as described above</em>.</p>\n<h3 id=\"example-1\"><a class=\"anchor\" href=\"#example-1\">#</a> Example 1</h3>\n<blockquote>\n<p><strong>Input:</strong> obstacles = [1,2,3,2]<br>\n<strong>Output:</strong> [1,2,3,3]<br>\n<strong>Explanation:</strong> The longest valid obstacle course at each position is:</p>\n<ul>\n<li>i = 0: [1], [1] has length 1.</li>\n<li>i = 1: [1,2], [1,2] has length 2.</li>\n<li>i = 2: [1,2,3], [1,2,3] has length 3.</li>\n<li>i = 3: [1,2,3,2], [1,2,2] has length 3.</li>\n</ul>\n</blockquote>\n<h3 id=\"example-2\"><a class=\"anchor\" href=\"#example-2\">#</a> Example 2</h3>\n<blockquote>\n<p><strong>Input:</strong> obstacles = [2,2,1]<br>\n<strong>Output:</strong> [1,2,1]<br>\n<strong>Explanation:</strong> The longest valid obstacle course at each position is:</p>\n<ul>\n<li>i = 0: [2], [2] has length 1.</li>\n<li>i = 1: [2,2], [2,2] has length 2.</li>\n<li>i = 2: [2,2,1], [1] has length 1.</li>\n</ul>\n</blockquote>\n<h3 id=\"example-3\"><a class=\"anchor\" href=\"#example-3\">#</a> Example 3</h3>\n<blockquote>\n<p><strong>Input:</strong> obstacles = [3,1,5,6,4,2]<br>\n<strong>Output:</strong> [1,1,2,3,2,2]<br>\n<strong>Explanation:</strong> The longest valid obstacle course at each position is:</p>\n<ul>\n<li>i = 0: [3], [3] has length 1.</li>\n<li>i = 1: [3,1], [1] has length 1.</li>\n<li>i = 2: [3,1,5], [3,5] has length 2. [1,5] is also valid.</li>\n<li>i = 3: [3,1,5,6], [3,5,6] has length 3. [1,5,6] is also valid.</li>\n<li>i = 4: [3,1,5,6,4], [3,4] has length 2. [1,4] is also valid.</li>\n<li>i = 5: [3,1,5,6,4,2], [1,2] has length 2.</li>\n</ul>\n</blockquote>\n<h2 id=\"解題思路\"><a class=\"anchor\" href=\"#解題思路\">#</a> 解題思路</h2>\n<p>Using DP.</p>\n<h2 id=\"solution\"><a class=\"anchor\" href=\"#solution\">#</a> Solution</h2>\n<div class=\"tab\" data-id=\"code\" data-title=\"C++\">\n<figure class=\"highlight cpp\"><figcaption data-lang=\"C++\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre><span class=\"token keyword\">class</span> <span class=\"token class-name\">Solution</span> <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"2\"></td><td><pre><span class=\"token keyword\">public</span><span class=\"token operator\">:</span></pre></td></tr><tr><td data-num=\"3\"></td><td><pre>    vector<span class=\"token operator\">&lt;</span><span class=\"token keyword\">int</span><span class=\"token operator\">></span> <span class=\"token function\">longestObstacleCourseAtEachPosition</span><span class=\"token punctuation\">(</span>vector<span class=\"token operator\">&lt;</span><span class=\"token keyword\">int</span><span class=\"token operator\">></span><span class=\"token operator\">&amp;</span> obstacles<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"4\"></td><td><pre>        <span class=\"token keyword\">int</span> n <span class=\"token operator\">=</span> obstacles<span class=\"token punctuation\">.</span><span class=\"token function\">size</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"5\"></td><td><pre>        <span class=\"token keyword\">int</span> length <span class=\"token operator\">=</span> <span class=\"token number\">0</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"6\"></td><td><pre>        vector<span class=\"token operator\">&lt;</span><span class=\"token keyword\">int</span><span class=\"token operator\">></span> <span class=\"token function\">result</span><span class=\"token punctuation\">(</span>n<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"7\"></td><td><pre>        vector<span class=\"token operator\">&lt;</span><span class=\"token keyword\">int</span><span class=\"token operator\">></span> <span class=\"token function\">increasingSubseq</span><span class=\"token punctuation\">(</span>n<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"8\"></td><td><pre>        <span class=\"token keyword\">for</span> <span class=\"token punctuation\">(</span><span class=\"token keyword\">int</span> i <span class=\"token operator\">=</span> <span class=\"token number\">0</span><span class=\"token punctuation\">;</span> i <span class=\"token operator\">&lt;</span> n<span class=\"token punctuation\">;</span> <span class=\"token operator\">++</span>i<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"9\"></td><td><pre>            <span class=\"token keyword\">int</span> left <span class=\"token operator\">=</span> <span class=\"token number\">0</span><span class=\"token punctuation\">,</span> right <span class=\"token operator\">=</span> length<span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"10\"></td><td><pre>            <span class=\"token keyword\">while</span> <span class=\"token punctuation\">(</span>left <span class=\"token operator\">&lt;</span> right<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"11\"></td><td><pre>                <span class=\"token keyword\">int</span> mid <span class=\"token operator\">=</span> <span class=\"token punctuation\">(</span>left <span class=\"token operator\">+</span> right<span class=\"token punctuation\">)</span> <span class=\"token operator\">/</span> <span class=\"token number\">2</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"12\"></td><td><pre>                <span class=\"token keyword\">if</span> <span class=\"token punctuation\">(</span>increasingSubseq<span class=\"token punctuation\">[</span>mid<span class=\"token punctuation\">]</span> <span class=\"token operator\">&lt;=</span> obstacles<span class=\"token punctuation\">[</span>i<span class=\"token punctuation\">]</span><span class=\"token punctuation\">)</span></pre></td></tr><tr><td data-num=\"13\"></td><td><pre>                    left <span class=\"token operator\">=</span> mid <span class=\"token operator\">+</span> <span class=\"token number\">1</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"14\"></td><td><pre>                <span class=\"token keyword\">else</span></pre></td></tr><tr><td data-num=\"15\"></td><td><pre>                    right <span class=\"token operator\">=</span> mid<span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"16\"></td><td><pre>            <span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"17\"></td><td><pre>            result<span class=\"token punctuation\">[</span>i<span class=\"token punctuation\">]</span> <span class=\"token operator\">=</span> left <span class=\"token operator\">+</span> <span class=\"token number\">1</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"18\"></td><td><pre>            <span class=\"token keyword\">if</span> <span class=\"token punctuation\">(</span>length <span class=\"token operator\">==</span> left<span class=\"token punctuation\">)</span></pre></td></tr><tr><td data-num=\"19\"></td><td><pre>                length<span class=\"token operator\">++</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"20\"></td><td><pre>            increasingSubseq<span class=\"token punctuation\">[</span>left<span class=\"token punctuation\">]</span> <span class=\"token operator\">=</span> obstacles<span class=\"token punctuation\">[</span>i<span class=\"token punctuation\">]</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"21\"></td><td><pre>        <span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"22\"></td><td><pre>        <span class=\"token keyword\">return</span> result<span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"23\"></td><td><pre>    <span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"24\"></td><td><pre><span class=\"token punctuation\">&#125;</span><span class=\"token punctuation\">;</span></pre></td></tr></table></figure></div>\n<div class=\"tab\" data-id=\"code\" data-title=\"Java\">\n<figure class=\"highlight java\"><figcaption data-lang=\"java\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre><span class=\"token keyword\">class</span> <span class=\"token class-name\">Solution</span> <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"2\"></td><td><pre>    <span class=\"token keyword\">public</span> <span class=\"token keyword\">int</span><span class=\"token punctuation\">[</span><span class=\"token punctuation\">]</span> <span class=\"token function\">longestObstacleCourseAtEachPosition</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">int</span><span class=\"token punctuation\">[</span><span class=\"token punctuation\">]</span> obstacles<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"3\"></td><td><pre>        <span class=\"token keyword\">int</span> n <span class=\"token operator\">=</span> obstacles<span class=\"token punctuation\">.</span>length<span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"4\"></td><td><pre>        <span class=\"token keyword\">int</span> length <span class=\"token operator\">=</span> <span class=\"token number\">0</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"5\"></td><td><pre>        <span class=\"token keyword\">int</span><span class=\"token punctuation\">[</span><span class=\"token punctuation\">]</span> result <span class=\"token operator\">=</span> <span class=\"token keyword\">new</span> <span class=\"token keyword\">int</span><span class=\"token punctuation\">[</span>n<span class=\"token punctuation\">]</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"6\"></td><td><pre>        <span class=\"token keyword\">int</span><span class=\"token punctuation\">[</span><span class=\"token punctuation\">]</span> sub <span class=\"token operator\">=</span> <span class=\"token keyword\">new</span> <span class=\"token keyword\">int</span><span class=\"token punctuation\">[</span>n<span class=\"token punctuation\">]</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"7\"></td><td><pre></pre></td></tr><tr><td data-num=\"8\"></td><td><pre>        <span class=\"token keyword\">for</span> <span class=\"token punctuation\">(</span><span class=\"token keyword\">int</span> i <span class=\"token operator\">=</span> <span class=\"token number\">0</span><span class=\"token punctuation\">;</span> i <span class=\"token operator\">&lt;</span> n<span class=\"token punctuation\">;</span> <span class=\"token operator\">++</span>i<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"9\"></td><td><pre>            <span class=\"token keyword\">int</span> left <span class=\"token operator\">=</span> <span class=\"token number\">0</span><span class=\"token punctuation\">,</span> right <span class=\"token operator\">=</span> length<span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"10\"></td><td><pre></pre></td></tr><tr><td data-num=\"11\"></td><td><pre>            <span class=\"token keyword\">while</span> <span class=\"token punctuation\">(</span>left <span class=\"token operator\">&lt;</span> right<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"12\"></td><td><pre>                <span class=\"token keyword\">int</span> mid <span class=\"token operator\">=</span> left <span class=\"token operator\">+</span> <span class=\"token punctuation\">(</span>right <span class=\"token operator\">-</span> left<span class=\"token punctuation\">)</span> <span class=\"token operator\">/</span> <span class=\"token number\">2</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"13\"></td><td><pre>                <span class=\"token keyword\">if</span> <span class=\"token punctuation\">(</span>sub<span class=\"token punctuation\">[</span>mid<span class=\"token punctuation\">]</span> <span class=\"token operator\">&lt;=</span> obstacles<span class=\"token punctuation\">[</span>i<span class=\"token punctuation\">]</span><span class=\"token punctuation\">)</span></pre></td></tr><tr><td data-num=\"14\"></td><td><pre>                    left <span class=\"token operator\">=</span> mid <span class=\"token operator\">+</span> <span class=\"token number\">1</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"15\"></td><td><pre>                <span class=\"token keyword\">else</span></pre></td></tr><tr><td data-num=\"16\"></td><td><pre>                    right <span class=\"token operator\">=</span> mid<span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"17\"></td><td><pre>            <span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"18\"></td><td><pre></pre></td></tr><tr><td data-num=\"19\"></td><td><pre>            result<span class=\"token punctuation\">[</span>i<span class=\"token punctuation\">]</span> <span class=\"token operator\">=</span> left <span class=\"token operator\">+</span> <span class=\"token number\">1</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"20\"></td><td><pre>            <span class=\"token keyword\">if</span> <span class=\"token punctuation\">(</span>length <span class=\"token operator\">==</span> left<span class=\"token punctuation\">)</span></pre></td></tr><tr><td data-num=\"21\"></td><td><pre>                length<span class=\"token operator\">++</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"22\"></td><td><pre>            sub<span class=\"token punctuation\">[</span>left<span class=\"token punctuation\">]</span> <span class=\"token operator\">=</span> obstacles<span class=\"token punctuation\">[</span>i<span class=\"token punctuation\">]</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"23\"></td><td><pre>        <span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"24\"></td><td><pre>        </pre></td></tr><tr><td data-num=\"25\"></td><td><pre>        <span class=\"token keyword\">return</span> result<span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"26\"></td><td><pre>    <span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"27\"></td><td><pre><span class=\"token punctuation\">&#125;</span></pre></td></tr></table></figure></div>\n<div class=\"tab\" data-id=\"code\" data-title=\"Python\">\n<pre><code class=\"language-python\">\n</code></pre>\n</div>\n",
            "tags": [
                "Coding",
                "Leetcode",
                "Hard",
                "Leetcode",
                "Array",
                "Binary Search",
                "Hard",
                "Binary Indexed  Tree"
            ]
        },
        {
            "id": "https://chienikao.github.io/2023/05/04/Coding/leetcode/Hard/649%20Dota2%20Senate/",
            "url": "https://chienikao.github.io/2023/05/04/Coding/leetcode/Hard/649%20Dota2%20Senate/",
            "title": "649. Dota2 Senate",
            "date_published": "2023-05-04T07:51:05.000Z",
            "content_html": "<p>⭐️⭐️</p>\n<h2 id=\"題目敘述\"><a class=\"anchor\" href=\"#題目敘述\">#</a> <span class=\"exturl\" data-url=\"aHR0cHM6Ly9sZWV0Y29kZS5jb20vcHJvYmxlbXMvZG90YTItc2VuYXRlLw==\">題目敘述</span></h2>\n<p>In the world of Dota2, there are two parties: the Radiant and the Dire.</p>\n<p>The Dota2 senate consists of senators coming from two parties. Now the Senate wants to decide on a change in the Dota2 game. The voting for this change is a round-based procedure. In each round, each senator can exercise <strong>one</strong> of the two rights:</p>\n<ul>\n<li><strong>Ban one senator’s right:</strong> A senator can make another senator lose all his rights in this and all the following rounds.</li>\n<li><strong>Announce the victory:</strong> If this senator found the senators who still have rights to vote are all from the same party, he can announce the victory and decide on the change in the game.</li>\n</ul>\n<p>Given a string  <code>senate</code>  representing each senator’s party belonging. The character  <code>'R'</code>  and  <code>'D'</code>  represent the Radiant party and the Dire party. Then if there are  <code>n</code>  senators, the size of the given string will be  <code>n</code> .</p>\n<p>The round-based procedure starts from the first senator to the last senator in the given order. This procedure will last until the end of voting. All the senators who have lost their rights will be skipped during the procedure.</p>\n<p>Suppose every senator is smart enough and will play the best strategy for his own party. Predict which party will finally announce the victory and change the Dota2 game. The output should be  <code>&quot;Radiant&quot;</code>  or  <code>&quot;Dire&quot;</code> .</p>\n<h3 id=\"example-1\"><a class=\"anchor\" href=\"#example-1\">#</a> Example 1</h3>\n<blockquote>\n<p><strong>Input:</strong> senate = “RD”<br>\n<strong>Output</strong>: “Radiant”<br>\n<strong>Explanation:</strong><br>\nThe first senator comes from Radiant and he can just ban the next senator’s right in round 1.<br>\nAnd the second senator can’t exercise any rights anymore since his right has been banned.<br>\nAnd in round 2, the first senator can just announce the victory since he is the only guy in the senate who can vote.</p>\n</blockquote>\n<h3 id=\"example-2\"><a class=\"anchor\" href=\"#example-2\">#</a> Example 2</h3>\n<blockquote>\n<p><strong>Input:</strong> senate = “RDD”<br>\n<strong>Output:</strong> “Dire”<br>\n<strong>Explanation:</strong><br>\nThe first senator comes from Radiant and he can just ban the next senator’s right in round 1.<br>\nAnd the second senator can’t exercise any rights anymore since his right has been banned.<br>\nAnd the third senator comes from Dire and he can ban the first senator’s right in round 1.<br>\nAnd in round 2, the third senator can just announce the victory since he is the only guy in the senate who can vote.</p>\n</blockquote>\n<div class=\"tab\" data-id=\"code\" data-title=\"C++\">\n<figure class=\"highlight cpp\"><figcaption data-lang=\"C++\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre><span class=\"token keyword\">class</span> <span class=\"token class-name\">Solution</span> <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"2\"></td><td><pre><span class=\"token keyword\">public</span><span class=\"token operator\">:</span></pre></td></tr><tr><td data-num=\"3\"></td><td><pre>    string <span class=\"token function\">predictPartyVictory</span><span class=\"token punctuation\">(</span>string senate<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"4\"></td><td><pre>        <span class=\"token keyword\">int</span> n <span class=\"token operator\">=</span> senate<span class=\"token punctuation\">.</span><span class=\"token function\">length</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"5\"></td><td><pre>        queue<span class=\"token operator\">&lt;</span><span class=\"token keyword\">int</span><span class=\"token operator\">></span> r<span class=\"token punctuation\">,</span> d<span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"6\"></td><td><pre>        <span class=\"token keyword\">for</span> <span class=\"token punctuation\">(</span><span class=\"token keyword\">int</span> i<span class=\"token operator\">=</span><span class=\"token number\">0</span><span class=\"token punctuation\">;</span> i<span class=\"token operator\">&lt;</span>n<span class=\"token punctuation\">;</span> i<span class=\"token operator\">++</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"7\"></td><td><pre>            senate<span class=\"token punctuation\">[</span>i<span class=\"token punctuation\">]</span> <span class=\"token operator\">==</span> <span class=\"token char\">'R'</span> <span class=\"token operator\">?</span> r<span class=\"token punctuation\">.</span><span class=\"token function\">push</span><span class=\"token punctuation\">(</span>i<span class=\"token punctuation\">)</span> <span class=\"token operator\">:</span> d<span class=\"token punctuation\">.</span><span class=\"token function\">push</span><span class=\"token punctuation\">(</span>i<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"8\"></td><td><pre>        <span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"9\"></td><td><pre></pre></td></tr><tr><td data-num=\"10\"></td><td><pre>        <span class=\"token keyword\">while</span> <span class=\"token punctuation\">(</span><span class=\"token operator\">!</span>r<span class=\"token punctuation\">.</span><span class=\"token function\">empty</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token operator\">&amp;&amp;</span> <span class=\"token operator\">!</span>d<span class=\"token punctuation\">.</span><span class=\"token function\">empty</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"11\"></td><td><pre>            <span class=\"token keyword\">int</span> tr <span class=\"token operator\">=</span> r<span class=\"token punctuation\">.</span><span class=\"token function\">front</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span> r<span class=\"token punctuation\">.</span><span class=\"token function\">pop</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"12\"></td><td><pre>            <span class=\"token keyword\">int</span> td <span class=\"token operator\">=</span> d<span class=\"token punctuation\">.</span><span class=\"token function\">front</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span> d<span class=\"token punctuation\">.</span><span class=\"token function\">pop</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"13\"></td><td><pre>            tr <span class=\"token operator\">&lt;</span> td <span class=\"token operator\">?</span> r<span class=\"token punctuation\">.</span><span class=\"token function\">push</span><span class=\"token punctuation\">(</span>tr <span class=\"token operator\">+</span> n<span class=\"token punctuation\">)</span> <span class=\"token operator\">:</span> d<span class=\"token punctuation\">.</span><span class=\"token function\">push</span><span class=\"token punctuation\">(</span>td <span class=\"token operator\">+</span> n<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"14\"></td><td><pre>        <span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"15\"></td><td><pre>        <span class=\"token keyword\">return</span> r<span class=\"token punctuation\">.</span><span class=\"token function\">empty</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token operator\">?</span> <span class=\"token string\">\"Dire\"</span> <span class=\"token operator\">:</span> <span class=\"token string\">\"Radiant\"</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"16\"></td><td><pre>    <span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"17\"></td><td><pre><span class=\"token punctuation\">&#125;</span><span class=\"token punctuation\">;</span></pre></td></tr></table></figure></div>\n<div class=\"tab\" data-id=\"code\" data-title=\"Java\">\n<figure class=\"highlight java\"><figcaption data-lang=\"java\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre><span class=\"token keyword\">import</span> <span class=\"token import\"><span class=\"token namespace\">java<span class=\"token punctuation\">.</span>util<span class=\"token punctuation\">.</span></span><span class=\"token class-name\">LinkedList</span></span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"2\"></td><td><pre><span class=\"token keyword\">import</span> <span class=\"token import\"><span class=\"token namespace\">java<span class=\"token punctuation\">.</span>util<span class=\"token punctuation\">.</span></span><span class=\"token class-name\">Queue</span></span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"3\"></td><td><pre></pre></td></tr><tr><td data-num=\"4\"></td><td><pre><span class=\"token keyword\">class</span> <span class=\"token class-name\">Solution</span> <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"5\"></td><td><pre>    <span class=\"token keyword\">public</span> <span class=\"token class-name\">String</span> <span class=\"token function\">predictPartyVictory</span><span class=\"token punctuation\">(</span><span class=\"token class-name\">String</span> senate<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"6\"></td><td><pre>        <span class=\"token keyword\">int</span> n <span class=\"token operator\">=</span> senate<span class=\"token punctuation\">.</span><span class=\"token function\">length</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"7\"></td><td><pre>        </pre></td></tr><tr><td data-num=\"8\"></td><td><pre>        <span class=\"token class-name\">Queue</span><span class=\"token generics\"><span class=\"token punctuation\">&lt;</span><span class=\"token class-name\">Integer</span><span class=\"token punctuation\">></span></span> rQueue <span class=\"token operator\">=</span> <span class=\"token keyword\">new</span> <span class=\"token class-name\">LinkedList</span><span class=\"token generics\"><span class=\"token punctuation\">&lt;</span><span class=\"token punctuation\">></span></span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"9\"></td><td><pre>        <span class=\"token class-name\">Queue</span><span class=\"token generics\"><span class=\"token punctuation\">&lt;</span><span class=\"token class-name\">Integer</span><span class=\"token punctuation\">></span></span> dQueue <span class=\"token operator\">=</span> <span class=\"token keyword\">new</span> <span class=\"token class-name\">LinkedList</span><span class=\"token generics\"><span class=\"token punctuation\">&lt;</span><span class=\"token punctuation\">></span></span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"10\"></td><td><pre></pre></td></tr><tr><td data-num=\"11\"></td><td><pre>        <span class=\"token keyword\">for</span> <span class=\"token punctuation\">(</span><span class=\"token keyword\">int</span> i <span class=\"token operator\">=</span> <span class=\"token number\">0</span><span class=\"token punctuation\">;</span> i <span class=\"token operator\">&lt;</span> n<span class=\"token punctuation\">;</span> i<span class=\"token operator\">++</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"12\"></td><td><pre>            <span class=\"token keyword\">if</span> <span class=\"token punctuation\">(</span>senate<span class=\"token punctuation\">.</span><span class=\"token function\">charAt</span><span class=\"token punctuation\">(</span>i<span class=\"token punctuation\">)</span> <span class=\"token operator\">==</span> <span class=\"token char\">'R'</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"13\"></td><td><pre>                rQueue<span class=\"token punctuation\">.</span><span class=\"token function\">add</span><span class=\"token punctuation\">(</span>i<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"14\"></td><td><pre>            <span class=\"token punctuation\">&#125;</span> <span class=\"token keyword\">else</span> <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"15\"></td><td><pre>                dQueue<span class=\"token punctuation\">.</span><span class=\"token function\">add</span><span class=\"token punctuation\">(</span>i<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"16\"></td><td><pre>            <span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"17\"></td><td><pre>        <span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"18\"></td><td><pre></pre></td></tr><tr><td data-num=\"19\"></td><td><pre>        <span class=\"token keyword\">while</span> <span class=\"token punctuation\">(</span><span class=\"token operator\">!</span>rQueue<span class=\"token punctuation\">.</span><span class=\"token function\">isEmpty</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token operator\">&amp;&amp;</span> <span class=\"token operator\">!</span>dQueue<span class=\"token punctuation\">.</span><span class=\"token function\">isEmpty</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"20\"></td><td><pre>            <span class=\"token keyword\">int</span> rTurn <span class=\"token operator\">=</span> rQueue<span class=\"token punctuation\">.</span><span class=\"token function\">poll</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"21\"></td><td><pre>            <span class=\"token keyword\">int</span> dTurn <span class=\"token operator\">=</span> dQueue<span class=\"token punctuation\">.</span><span class=\"token function\">poll</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"22\"></td><td><pre></pre></td></tr><tr><td data-num=\"23\"></td><td><pre>            <span class=\"token keyword\">if</span> <span class=\"token punctuation\">(</span>dTurn <span class=\"token operator\">&lt;</span> rTurn<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"24\"></td><td><pre>                dQueue<span class=\"token punctuation\">.</span><span class=\"token function\">add</span><span class=\"token punctuation\">(</span>dTurn <span class=\"token operator\">+</span> n<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"25\"></td><td><pre>            <span class=\"token punctuation\">&#125;</span> <span class=\"token keyword\">else</span> <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"26\"></td><td><pre>                rQueue<span class=\"token punctuation\">.</span><span class=\"token function\">add</span><span class=\"token punctuation\">(</span>rTurn <span class=\"token operator\">+</span> n<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"27\"></td><td><pre>            <span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"28\"></td><td><pre>        <span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"29\"></td><td><pre></pre></td></tr><tr><td data-num=\"30\"></td><td><pre>        <span class=\"token keyword\">return</span> rQueue<span class=\"token punctuation\">.</span><span class=\"token function\">isEmpty</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token operator\">?</span> <span class=\"token string\">\"Dire\"</span> <span class=\"token operator\">:</span> <span class=\"token string\">\"Radiant\"</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"31\"></td><td><pre>    <span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"32\"></td><td><pre><span class=\"token punctuation\">&#125;</span></pre></td></tr></table></figure></div>\n<div class=\"tab\" data-id=\"code\" data-title=\"Python\">\n<figure class=\"highlight python\"><figcaption data-lang=\"python\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre><span class=\"token keyword\">class</span> <span class=\"token class-name\">Solution</span><span class=\"token punctuation\">:</span></pre></td></tr><tr><td data-num=\"2\"></td><td><pre>    <span class=\"token keyword\">def</span> <span class=\"token function\">predictPartyVictory</span><span class=\"token punctuation\">(</span>self<span class=\"token punctuation\">,</span> senate<span class=\"token punctuation\">:</span> <span class=\"token builtin\">str</span><span class=\"token punctuation\">)</span> <span class=\"token operator\">-</span><span class=\"token operator\">></span> <span class=\"token builtin\">str</span><span class=\"token punctuation\">:</span></pre></td></tr><tr><td data-num=\"3\"></td><td><pre>        n <span class=\"token operator\">=</span> <span class=\"token builtin\">len</span><span class=\"token punctuation\">(</span>senate<span class=\"token punctuation\">)</span></pre></td></tr><tr><td data-num=\"4\"></td><td><pre>        r <span class=\"token operator\">=</span> <span class=\"token punctuation\">[</span><span class=\"token punctuation\">]</span></pre></td></tr><tr><td data-num=\"5\"></td><td><pre>        d <span class=\"token operator\">=</span> <span class=\"token punctuation\">[</span><span class=\"token punctuation\">]</span></pre></td></tr><tr><td data-num=\"6\"></td><td><pre>        <span class=\"token keyword\">for</span> i <span class=\"token keyword\">in</span> <span class=\"token builtin\">range</span><span class=\"token punctuation\">(</span><span class=\"token number\">0</span><span class=\"token punctuation\">,</span> n<span class=\"token punctuation\">)</span><span class=\"token punctuation\">:</span></pre></td></tr><tr><td data-num=\"7\"></td><td><pre>            r<span class=\"token punctuation\">.</span>append<span class=\"token punctuation\">(</span>i<span class=\"token punctuation\">)</span> <span class=\"token keyword\">if</span> senate<span class=\"token punctuation\">[</span>i<span class=\"token punctuation\">]</span> <span class=\"token operator\">==</span> <span class=\"token string\">'R'</span> <span class=\"token keyword\">else</span> d<span class=\"token punctuation\">.</span>append<span class=\"token punctuation\">(</span>i<span class=\"token punctuation\">)</span></pre></td></tr><tr><td data-num=\"8\"></td><td><pre>        <span class=\"token keyword\">while</span> r <span class=\"token keyword\">and</span> d<span class=\"token punctuation\">:</span></pre></td></tr><tr><td data-num=\"9\"></td><td><pre>            tr <span class=\"token operator\">=</span> r<span class=\"token punctuation\">.</span>pop<span class=\"token punctuation\">(</span><span class=\"token number\">0</span><span class=\"token punctuation\">)</span></pre></td></tr><tr><td data-num=\"10\"></td><td><pre>            td <span class=\"token operator\">=</span> d<span class=\"token punctuation\">.</span>pop<span class=\"token punctuation\">(</span><span class=\"token number\">0</span><span class=\"token punctuation\">)</span></pre></td></tr><tr><td data-num=\"11\"></td><td><pre>            r<span class=\"token punctuation\">.</span>append<span class=\"token punctuation\">(</span>tr <span class=\"token operator\">+</span> n<span class=\"token punctuation\">)</span> <span class=\"token keyword\">if</span> tr <span class=\"token operator\">&lt;</span> td <span class=\"token keyword\">else</span> d<span class=\"token punctuation\">.</span>append<span class=\"token punctuation\">(</span>td <span class=\"token operator\">+</span> n<span class=\"token punctuation\">)</span></pre></td></tr><tr><td data-num=\"12\"></td><td><pre>        <span class=\"token keyword\">return</span> <span class=\"token string\">\"Radiant\"</span> <span class=\"token keyword\">if</span> <span class=\"token builtin\">len</span><span class=\"token punctuation\">(</span>d<span class=\"token punctuation\">)</span> <span class=\"token operator\">==</span> <span class=\"token number\">0</span> <span class=\"token keyword\">else</span> <span class=\"token string\">\"Dire\"</span></pre></td></tr></table></figure></div>\n",
            "tags": [
                "Coding",
                "Leetcode",
                "Medium",
                "String",
                "Leetcode",
                "Medium",
                "Greedy",
                "Queue"
            ]
        },
        {
            "id": "https://chienikao.github.io/2023/05/03/Algorithm/Branch%20and%20Bound/",
            "url": "https://chienikao.github.io/2023/05/03/Algorithm/Branch%20and%20Bound/",
            "title": "Branch and Bound (B&B)",
            "date_published": "2023-05-03T10:11:54.000Z",
            "content_html": "<h2 id=\"branch-and-bound\"><a class=\"anchor\" href=\"#branch-and-bound\">#</a> Branch and Bound</h2>\n<ul>\n<li>The branch-and-bound algorithm developed here is <span class=\"red\">an improvement on the backtracking algorithm</span>.</li>\n<li>The B&amp;B design strategy is very similar to backtracking in that a state space tree is used to solve a problem.</li>\n<li>B&amp;B vs. Backtracking\n<ul>\n<li>B&amp;B does <strong>not limit</strong> us to any particular way of <strong>traversing</strong> the tree and</li>\n<li>B&amp;B is used only for optimization problems</li>\n</ul>\n</li>\n<li>A B&amp;B algorithm computes a number (<strong>bound</strong>) at a node to <strong>determine whether the node is promising</strong>.\n<ul>\n<li>If that bound is <strong>no better than</strong> the value of the best solution found so far, the node is <strong>nonpromising</strong>.</li>\n<li>Otherwise, it is <strong>promising</strong>.</li>\n</ul>\n</li>\n</ul>\n<h3 id=\"example\"><a class=\"anchor\" href=\"#example\">#</a> <a href=\"https://chienikao.github.io/2023/04/25/Algorithm/Backtracking/#0-1-knapsack-problem\">Example</a></h3>\n",
            "tags": [
                "Algorithm",
                "Algorithm"
            ]
        },
        {
            "id": "https://chienikao.github.io/2023/05/03/Coding/leetcode/Easy/2215%20Find%20the%20Difference%20of%20Two%20Arrays/",
            "url": "https://chienikao.github.io/2023/05/03/Coding/leetcode/Easy/2215%20Find%20the%20Difference%20of%20Two%20Arrays/",
            "title": "2215. Find the Difference of Two Arrays",
            "date_published": "2023-05-03T02:39:26.000Z",
            "content_html": "<p>⭐️</p>\n<h2 id=\"題目敘述\"><a class=\"anchor\" href=\"#題目敘述\">#</a> <span class=\"exturl\" data-url=\"aHR0cHM6Ly9sZWV0Y29kZS5jb20vcHJvYmxlbXMvZmluZC10aGUtZGlmZmVyZW5jZS1vZi10d28tYXJyYXlzLw==\">題目敘述</span></h2>\n<p>Given two <strong>0-indexed</strong> integer arrays  <code>nums1</code>  and  <code>nums2</code> , return a list  <code>answer</code>  of size  <code>2</code>  where:</p>\n<ul>\n<li><code>answer[0]</code>  <em>is a list of all <strong>distinct</strong> integers in  <code>nums1</code>  which are <strong>not</strong> present in  <code>nums2</code> </em>.</li>\n<li><code>answer[1]</code>  is a list of all <strong>distinct</strong> integers in  <code>nums2</code>  which are <strong>not</strong> present in  <code>nums1</code> .</li>\n</ul>\n<p><strong>Note</strong> that the integers in the lists may be returned in <strong>any</strong> order.</p>\n<h3 id=\"example-1\"><a class=\"anchor\" href=\"#example-1\">#</a> Example 1</h3>\n<blockquote>\n<p><strong>Input:</strong> nums1 = [1,2,3], nums2 = [2,4,6]<br>\n<strong>Output:</strong> [[1,3],[4,6]]<br>\n<strong>Explanation:</strong><br>\nFor nums1, nums1[1] = 2 is present at index 0 of nums2, whereas nums1[0] = 1 and nums1[2] = 3 are not present in nums2. Therefore, answer[0] = [1,3].<br>\nFor nums2, nums2[0] = 2 is present at index 1 of nums1, whereas nums2[1] = 4 and nums2[2] = 6 are not present in nums2. Therefore, answer[1] = [4,6].</p>\n</blockquote>\n<h3 id=\"example-2\"><a class=\"anchor\" href=\"#example-2\">#</a> Example 2</h3>\n<blockquote>\n<p><strong>Input:</strong> nums1 = [1,2,3,3], nums2 = [1,1,2,2]<br>\n<strong>Output:</strong> [[3],[]]<br>\n<strong>Explanation:</strong><br>\nFor nums1, nums1[2] and nums1[3] are not present in nums2. Since nums1[2] == nums1[3], their value is only included once and answer[0] = [3].<br>\nEvery integer in nums2 is present in nums1. Therefore, answer[1] = [].</p>\n</blockquote>\n<div class=\"tab\" data-id=\"code\" data-title=\"C++\">\n<figure class=\"highlight cpp\"><figcaption data-lang=\"C++\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre><span class=\"token keyword\">class</span> <span class=\"token class-name\">Solution</span> <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"2\"></td><td><pre><span class=\"token keyword\">public</span><span class=\"token operator\">:</span></pre></td></tr><tr><td data-num=\"3\"></td><td><pre>    vector<span class=\"token operator\">&lt;</span>vector<span class=\"token operator\">&lt;</span><span class=\"token keyword\">int</span><span class=\"token operator\">>></span> <span class=\"token function\">findDifference</span><span class=\"token punctuation\">(</span>vector<span class=\"token operator\">&lt;</span><span class=\"token keyword\">int</span><span class=\"token operator\">></span><span class=\"token operator\">&amp;</span> nums1<span class=\"token punctuation\">,</span> vector<span class=\"token operator\">&lt;</span><span class=\"token keyword\">int</span><span class=\"token operator\">></span><span class=\"token operator\">&amp;</span> nums2<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"4\"></td><td><pre>        vector<span class=\"token operator\">&lt;</span>vector<span class=\"token operator\">&lt;</span><span class=\"token keyword\">int</span><span class=\"token operator\">>></span> res<span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"5\"></td><td><pre>        vector<span class=\"token operator\">&lt;</span><span class=\"token keyword\">int</span><span class=\"token operator\">></span> tmp<span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"6\"></td><td><pre>        map<span class=\"token operator\">&lt;</span><span class=\"token keyword\">int</span><span class=\"token punctuation\">,</span> <span class=\"token keyword\">int</span><span class=\"token operator\">></span> mp1<span class=\"token punctuation\">,</span> mp2<span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"7\"></td><td><pre>        <span class=\"token keyword\">for</span> <span class=\"token punctuation\">(</span><span class=\"token keyword\">int</span> n <span class=\"token operator\">:</span> nums1<span class=\"token punctuation\">)</span> mp1<span class=\"token punctuation\">[</span>n<span class=\"token punctuation\">]</span> <span class=\"token operator\">=</span> <span class=\"token number\">1</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"8\"></td><td><pre>        <span class=\"token keyword\">for</span> <span class=\"token punctuation\">(</span><span class=\"token keyword\">int</span> n <span class=\"token operator\">:</span> nums2<span class=\"token punctuation\">)</span> mp2<span class=\"token punctuation\">[</span>n<span class=\"token punctuation\">]</span> <span class=\"token operator\">=</span> <span class=\"token number\">1</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"9\"></td><td><pre></pre></td></tr><tr><td data-num=\"10\"></td><td><pre>        <span class=\"token keyword\">for</span> <span class=\"token punctuation\">(</span><span class=\"token keyword\">auto</span> m <span class=\"token operator\">:</span> mp1<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"11\"></td><td><pre>            <span class=\"token keyword\">if</span> <span class=\"token punctuation\">(</span>mp2<span class=\"token punctuation\">.</span><span class=\"token function\">count</span><span class=\"token punctuation\">(</span>m<span class=\"token punctuation\">.</span>first<span class=\"token punctuation\">)</span> <span class=\"token operator\">==</span> <span class=\"token number\">0</span><span class=\"token punctuation\">)</span> tmp<span class=\"token punctuation\">.</span><span class=\"token function\">push_back</span><span class=\"token punctuation\">(</span>m<span class=\"token punctuation\">.</span>first<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"12\"></td><td><pre>        <span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"13\"></td><td><pre>        res<span class=\"token punctuation\">.</span><span class=\"token function\">push_back</span><span class=\"token punctuation\">(</span>tmp<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"14\"></td><td><pre>        tmp<span class=\"token punctuation\">.</span><span class=\"token function\">clear</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"15\"></td><td><pre>        <span class=\"token keyword\">for</span> <span class=\"token punctuation\">(</span><span class=\"token keyword\">auto</span> m <span class=\"token operator\">:</span> mp2<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"16\"></td><td><pre>            <span class=\"token keyword\">if</span> <span class=\"token punctuation\">(</span>mp1<span class=\"token punctuation\">.</span><span class=\"token function\">count</span><span class=\"token punctuation\">(</span>m<span class=\"token punctuation\">.</span>first<span class=\"token punctuation\">)</span> <span class=\"token operator\">==</span> <span class=\"token number\">0</span><span class=\"token punctuation\">)</span> tmp<span class=\"token punctuation\">.</span><span class=\"token function\">push_back</span><span class=\"token punctuation\">(</span>m<span class=\"token punctuation\">.</span>first<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"17\"></td><td><pre>        <span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"18\"></td><td><pre>        res<span class=\"token punctuation\">.</span><span class=\"token function\">push_back</span><span class=\"token punctuation\">(</span>tmp<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"19\"></td><td><pre>        <span class=\"token keyword\">return</span> res<span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"20\"></td><td><pre>    <span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"21\"></td><td><pre><span class=\"token punctuation\">&#125;</span><span class=\"token punctuation\">;</span></pre></td></tr></table></figure></div>\n<div class=\"tab\" data-id=\"code\" data-title=\"Java\">\n<figure class=\"highlight java\"><figcaption data-lang=\"java\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre><span class=\"token keyword\">import</span> <span class=\"token import\"><span class=\"token namespace\">java<span class=\"token punctuation\">.</span>util<span class=\"token punctuation\">.</span></span><span class=\"token class-name\">ArrayList</span></span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"2\"></td><td><pre><span class=\"token keyword\">import</span> <span class=\"token import\"><span class=\"token namespace\">java<span class=\"token punctuation\">.</span>util<span class=\"token punctuation\">.</span></span><span class=\"token class-name\">List</span></span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"3\"></td><td><pre></pre></td></tr><tr><td data-num=\"4\"></td><td><pre><span class=\"token keyword\">class</span> <span class=\"token class-name\">Solution</span> <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"5\"></td><td><pre>    <span class=\"token keyword\">public</span> <span class=\"token class-name\">List</span><span class=\"token generics\"><span class=\"token punctuation\">&lt;</span><span class=\"token class-name\">List</span><span class=\"token punctuation\">&lt;</span><span class=\"token class-name\">Integer</span><span class=\"token punctuation\">></span><span class=\"token punctuation\">></span></span> <span class=\"token function\">findDifference</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">int</span><span class=\"token punctuation\">[</span><span class=\"token punctuation\">]</span> nums1<span class=\"token punctuation\">,</span> <span class=\"token keyword\">int</span><span class=\"token punctuation\">[</span><span class=\"token punctuation\">]</span> nums2<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"6\"></td><td><pre>        <span class=\"token class-name\">List</span><span class=\"token generics\"><span class=\"token punctuation\">&lt;</span><span class=\"token class-name\">List</span><span class=\"token punctuation\">&lt;</span><span class=\"token class-name\">Integer</span><span class=\"token punctuation\">></span><span class=\"token punctuation\">></span></span> ans <span class=\"token operator\">=</span> <span class=\"token keyword\">new</span> <span class=\"token class-name\">ArrayList</span><span class=\"token generics\"><span class=\"token punctuation\">&lt;</span><span class=\"token punctuation\">></span></span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"7\"></td><td><pre>        <span class=\"token class-name\">List</span><span class=\"token generics\"><span class=\"token punctuation\">&lt;</span><span class=\"token class-name\">Integer</span><span class=\"token punctuation\">></span></span> map1 <span class=\"token operator\">=</span> <span class=\"token keyword\">new</span> <span class=\"token class-name\">ArrayList</span><span class=\"token generics\"><span class=\"token punctuation\">&lt;</span><span class=\"token punctuation\">></span></span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">,</span> map2 <span class=\"token operator\">=</span> <span class=\"token keyword\">new</span> <span class=\"token class-name\">ArrayList</span><span class=\"token generics\"><span class=\"token punctuation\">&lt;</span><span class=\"token punctuation\">></span></span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"8\"></td><td><pre>        <span class=\"token keyword\">for</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">int</span> n <span class=\"token operator\">:</span> nums1<span class=\"token punctuation\">)</span> map1<span class=\"token punctuation\">.</span><span class=\"token function\">add</span><span class=\"token punctuation\">(</span>n<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"9\"></td><td><pre>        <span class=\"token keyword\">for</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">int</span> n <span class=\"token operator\">:</span> nums2<span class=\"token punctuation\">)</span> map2<span class=\"token punctuation\">.</span><span class=\"token function\">add</span><span class=\"token punctuation\">(</span>n<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"10\"></td><td><pre></pre></td></tr><tr><td data-num=\"11\"></td><td><pre>        <span class=\"token class-name\">List</span><span class=\"token generics\"><span class=\"token punctuation\">&lt;</span><span class=\"token class-name\">Integer</span><span class=\"token punctuation\">></span></span> temp1 <span class=\"token operator\">=</span> <span class=\"token keyword\">new</span> <span class=\"token class-name\">ArrayList</span><span class=\"token generics\"><span class=\"token punctuation\">&lt;</span><span class=\"token punctuation\">></span></span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"12\"></td><td><pre>        <span class=\"token keyword\">for</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">int</span> n <span class=\"token operator\">:</span> nums1<span class=\"token punctuation\">)</span><span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"13\"></td><td><pre>            <span class=\"token keyword\">if</span><span class=\"token punctuation\">(</span><span class=\"token operator\">!</span>map2<span class=\"token punctuation\">.</span><span class=\"token function\">contains</span><span class=\"token punctuation\">(</span>n<span class=\"token punctuation\">)</span> <span class=\"token operator\">&amp;&amp;</span> <span class=\"token operator\">!</span>temp1<span class=\"token punctuation\">.</span><span class=\"token function\">contains</span><span class=\"token punctuation\">(</span>n<span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"14\"></td><td><pre>                temp1<span class=\"token punctuation\">.</span><span class=\"token function\">add</span><span class=\"token punctuation\">(</span>n<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"15\"></td><td><pre>            <span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"16\"></td><td><pre>        <span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"17\"></td><td><pre>        ans<span class=\"token punctuation\">.</span><span class=\"token function\">add</span><span class=\"token punctuation\">(</span>temp1<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"18\"></td><td><pre></pre></td></tr><tr><td data-num=\"19\"></td><td><pre>        <span class=\"token class-name\">List</span><span class=\"token generics\"><span class=\"token punctuation\">&lt;</span><span class=\"token class-name\">Integer</span><span class=\"token punctuation\">></span></span> temp2 <span class=\"token operator\">=</span> <span class=\"token keyword\">new</span> <span class=\"token class-name\">ArrayList</span><span class=\"token generics\"><span class=\"token punctuation\">&lt;</span><span class=\"token punctuation\">></span></span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"20\"></td><td><pre>        <span class=\"token keyword\">for</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">int</span> n <span class=\"token operator\">:</span> nums2<span class=\"token punctuation\">)</span><span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"21\"></td><td><pre>            <span class=\"token keyword\">if</span><span class=\"token punctuation\">(</span><span class=\"token operator\">!</span>map1<span class=\"token punctuation\">.</span><span class=\"token function\">contains</span><span class=\"token punctuation\">(</span>n<span class=\"token punctuation\">)</span> <span class=\"token operator\">&amp;&amp;</span> <span class=\"token operator\">!</span>temp2<span class=\"token punctuation\">.</span><span class=\"token function\">contains</span><span class=\"token punctuation\">(</span>n<span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"22\"></td><td><pre>                temp2<span class=\"token punctuation\">.</span><span class=\"token function\">add</span><span class=\"token punctuation\">(</span>n<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"23\"></td><td><pre>            <span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"24\"></td><td><pre>        <span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"25\"></td><td><pre>        ans<span class=\"token punctuation\">.</span><span class=\"token function\">add</span><span class=\"token punctuation\">(</span>temp2<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"26\"></td><td><pre></pre></td></tr><tr><td data-num=\"27\"></td><td><pre>        <span class=\"token keyword\">return</span> ans<span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"28\"></td><td><pre>    <span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"29\"></td><td><pre><span class=\"token punctuation\">&#125;</span></pre></td></tr></table></figure></div>\n<div class=\"tab\" data-id=\"code\" data-title=\"Python\">\n<figure class=\"highlight python\"><figcaption data-lang=\"python\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre><span class=\"token keyword\">class</span> <span class=\"token class-name\">Solution</span><span class=\"token punctuation\">:</span></pre></td></tr><tr><td data-num=\"2\"></td><td><pre>    <span class=\"token keyword\">def</span> <span class=\"token function\">findDifference</span><span class=\"token punctuation\">(</span>self<span class=\"token punctuation\">,</span> nums1<span class=\"token punctuation\">,</span> nums2<span class=\"token punctuation\">)</span><span class=\"token punctuation\">:</span>    </pre></td></tr><tr><td data-num=\"3\"></td><td><pre>        <span class=\"token keyword\">return</span> <span class=\"token punctuation\">[</span><span class=\"token builtin\">list</span><span class=\"token punctuation\">(</span><span class=\"token builtin\">set</span><span class=\"token punctuation\">(</span>nums1<span class=\"token punctuation\">)</span> <span class=\"token operator\">-</span> <span class=\"token builtin\">set</span><span class=\"token punctuation\">(</span>nums2<span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">,</span> <span class=\"token builtin\">list</span><span class=\"token punctuation\">(</span><span class=\"token builtin\">set</span><span class=\"token punctuation\">(</span>nums2<span class=\"token punctuation\">)</span> <span class=\"token operator\">-</span> <span class=\"token builtin\">set</span><span class=\"token punctuation\">(</span>nums1<span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">]</span></pre></td></tr></table></figure></div>\n",
            "tags": [
                "Coding",
                "Leetcode",
                "Easy",
                "Leetcode",
                "Easy",
                "Array",
                "Hash Table"
            ]
        },
        {
            "id": "https://chienikao.github.io/2023/05/02/Coding/leetcode/Easy/1822%20Sign%20of%20the%20Product%20of%20an%20Array/",
            "url": "https://chienikao.github.io/2023/05/02/Coding/leetcode/Easy/1822%20Sign%20of%20the%20Product%20of%20an%20Array/",
            "title": "1822. Sign of the Product of an Array",
            "date_published": "2023-05-02T02:27:18.000Z",
            "content_html": "<p>⭐️</p>\n<h2 id=\"題目敘述\"><a class=\"anchor\" href=\"#題目敘述\">#</a> <span class=\"exturl\" data-url=\"aHR0cHM6Ly9sZWV0Y29kZS5jb20vcHJvYmxlbXMvc2lnbi1vZi10aGUtcHJvZHVjdC1vZi1hbi1hcnJheS8=\">題目敘述</span></h2>\n<p>There is a function  <code>signFunc(x)</code>  that returns:</p>\n<ul>\n<li><code>1</code>  if  <code>x</code>  is positive.</li>\n<li><code>-1</code>  if  <code>x</code>  is negative.</li>\n<li><code>0</code>  if  <code>x</code>  is equal to  <code>0</code> .</li>\n</ul>\n<p>You are given an integer array  <code>nums</code> . Let  <code>product</code>  be the product of all values in the array  <code>nums</code> .</p>\n<p>Return  <code>signFunc(product)</code> .</p>\n<h3 id=\"example-1\"><a class=\"anchor\" href=\"#example-1\">#</a> Example 1</h3>\n<blockquote>\n<p><strong>Input</strong>: nums = [-1,-2,-3,-4,3,2,1]<br>\n<strong>Output</strong>: 1<br>\n<strong>Explanation</strong>: The product of all values in the array is 144, and signFunc(144) = 1</p>\n</blockquote>\n<h3 id=\"example-2\"><a class=\"anchor\" href=\"#example-2\">#</a> Example 2</h3>\n<blockquote>\n<p><strong>Input</strong>: nums = [1,5,0,2,-3]<br>\n<strong>Output</strong>: 0<br>\n<strong>Explanation</strong>: The product of all values in the array is 0, and signFunc(0) = 0</p>\n</blockquote>\n<h3 id=\"example-3\"><a class=\"anchor\" href=\"#example-3\">#</a> Example 3</h3>\n<blockquote>\n<p><strong>Input</strong>: nums = [-1,1,-1,1,-1]<br>\n<strong>Output</strong>: -1<br>\n<strong>Explanation</strong>: The product of all values in the array is -1, and signFunc(-1) = -1</p>\n</blockquote>\n<div class=\"tab\" data-id=\"code\" data-title=\"C++\">\n<figure class=\"highlight cpp\"><figcaption data-lang=\"C++\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre><span class=\"token keyword\">class</span> <span class=\"token class-name\">Solution</span> <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"2\"></td><td><pre><span class=\"token keyword\">public</span><span class=\"token operator\">:</span></pre></td></tr><tr><td data-num=\"3\"></td><td><pre>    <span class=\"token keyword\">int</span> <span class=\"token function\">arraySign</span><span class=\"token punctuation\">(</span>vector<span class=\"token operator\">&lt;</span><span class=\"token keyword\">int</span><span class=\"token operator\">></span><span class=\"token operator\">&amp;</span> nums<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"4\"></td><td><pre>        <span class=\"token keyword\">int</span> sign <span class=\"token operator\">=</span> <span class=\"token number\">1</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"5\"></td><td><pre>        <span class=\"token keyword\">for</span> <span class=\"token punctuation\">(</span><span class=\"token keyword\">int</span> n <span class=\"token operator\">:</span> nums<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"6\"></td><td><pre>            <span class=\"token keyword\">if</span> <span class=\"token punctuation\">(</span>n <span class=\"token operator\">==</span> <span class=\"token number\">0</span><span class=\"token punctuation\">)</span> <span class=\"token keyword\">return</span> <span class=\"token number\">0</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"7\"></td><td><pre>            <span class=\"token keyword\">if</span> <span class=\"token punctuation\">(</span>n <span class=\"token operator\">&lt;</span> <span class=\"token number\">0</span><span class=\"token punctuation\">)</span> sign <span class=\"token operator\">*=</span> <span class=\"token operator\">-</span><span class=\"token number\">1</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"8\"></td><td><pre>        <span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"9\"></td><td><pre>        <span class=\"token keyword\">if</span> <span class=\"token punctuation\">(</span>sign <span class=\"token operator\">></span> <span class=\"token number\">0</span><span class=\"token punctuation\">)</span> <span class=\"token keyword\">return</span> <span class=\"token number\">1</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"10\"></td><td><pre>        <span class=\"token keyword\">else</span> <span class=\"token keyword\">return</span> <span class=\"token operator\">-</span><span class=\"token number\">1</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"11\"></td><td><pre>    <span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"12\"></td><td><pre><span class=\"token punctuation\">&#125;</span><span class=\"token punctuation\">;</span></pre></td></tr></table></figure></div>\n<div class=\"tab\" data-id=\"code\" data-title=\"Java\">\n<figure class=\"highlight java\"><figcaption data-lang=\"java\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre><span class=\"token keyword\">class</span> <span class=\"token class-name\">Solution</span> <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"2\"></td><td><pre>    <span class=\"token keyword\">public</span> <span class=\"token keyword\">int</span> <span class=\"token function\">arraySign</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">int</span><span class=\"token punctuation\">[</span><span class=\"token punctuation\">]</span> nums<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"3\"></td><td><pre>        <span class=\"token keyword\">int</span> sign <span class=\"token operator\">=</span> <span class=\"token number\">1</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"4\"></td><td><pre>        <span class=\"token keyword\">for</span> <span class=\"token punctuation\">(</span><span class=\"token keyword\">int</span> n <span class=\"token operator\">:</span> nums<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"5\"></td><td><pre>            <span class=\"token keyword\">if</span> <span class=\"token punctuation\">(</span>n <span class=\"token operator\">==</span> <span class=\"token number\">0</span><span class=\"token punctuation\">)</span> <span class=\"token keyword\">return</span> <span class=\"token number\">0</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"6\"></td><td><pre>            <span class=\"token keyword\">if</span> <span class=\"token punctuation\">(</span>n <span class=\"token operator\">&lt;</span> <span class=\"token number\">0</span><span class=\"token punctuation\">)</span> sign <span class=\"token operator\">*=</span> <span class=\"token operator\">-</span><span class=\"token number\">1</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"7\"></td><td><pre>        <span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"8\"></td><td><pre>        <span class=\"token keyword\">return</span> sign <span class=\"token operator\">></span> <span class=\"token number\">0</span> <span class=\"token operator\">?</span> <span class=\"token number\">1</span> <span class=\"token operator\">:</span> <span class=\"token operator\">-</span><span class=\"token number\">1</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"9\"></td><td><pre>    <span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"10\"></td><td><pre><span class=\"token punctuation\">&#125;</span></pre></td></tr></table></figure></div>\n<div class=\"tab\" data-id=\"code\" data-title=\"Python\">\n<figure class=\"highlight python\"><figcaption data-lang=\"python\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre><span class=\"token keyword\">class</span> <span class=\"token class-name\">Solution</span><span class=\"token punctuation\">:</span></pre></td></tr><tr><td data-num=\"2\"></td><td><pre>    <span class=\"token keyword\">def</span> <span class=\"token function\">arraySign</span><span class=\"token punctuation\">(</span>self<span class=\"token punctuation\">,</span> nums<span class=\"token punctuation\">:</span> List<span class=\"token punctuation\">[</span><span class=\"token builtin\">int</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">)</span> <span class=\"token operator\">-</span><span class=\"token operator\">></span> <span class=\"token builtin\">int</span><span class=\"token punctuation\">:</span></pre></td></tr><tr><td data-num=\"3\"></td><td><pre>        sign <span class=\"token operator\">=</span> <span class=\"token number\">1</span></pre></td></tr><tr><td data-num=\"4\"></td><td><pre>        <span class=\"token keyword\">for</span> n <span class=\"token keyword\">in</span> nums<span class=\"token punctuation\">:</span></pre></td></tr><tr><td data-num=\"5\"></td><td><pre>            <span class=\"token keyword\">if</span> n <span class=\"token operator\">==</span> <span class=\"token number\">0</span><span class=\"token punctuation\">:</span> <span class=\"token keyword\">return</span> <span class=\"token number\">0</span></pre></td></tr><tr><td data-num=\"6\"></td><td><pre>            <span class=\"token keyword\">if</span> n <span class=\"token operator\">&lt;</span> <span class=\"token number\">0</span><span class=\"token punctuation\">:</span> sign <span class=\"token operator\">*=</span> <span class=\"token operator\">-</span><span class=\"token number\">1</span></pre></td></tr><tr><td data-num=\"7\"></td><td><pre>        <span class=\"token keyword\">return</span> <span class=\"token number\">1</span> <span class=\"token keyword\">if</span> sign <span class=\"token operator\">></span> <span class=\"token number\">0</span> <span class=\"token keyword\">else</span> <span class=\"token operator\">-</span><span class=\"token number\">1</span></pre></td></tr></table></figure></div>\n",
            "tags": [
                "Coding",
                "Leetcode",
                "Easy",
                "Leetcode",
                "Easy",
                "Array",
                "Math"
            ]
        },
        {
            "id": "https://chienikao.github.io/2023/05/01/Coding/leetcode/Easy/1491%20Average%20Salary%20Excluding%20the%20Minimum%20and%20Maximum%20Salary/",
            "url": "https://chienikao.github.io/2023/05/01/Coding/leetcode/Easy/1491%20Average%20Salary%20Excluding%20the%20Minimum%20and%20Maximum%20Salary/",
            "title": "1491. Average Salary Excluding the Minimum and Maximum Salary",
            "date_published": "2023-05-01T06:58:59.000Z",
            "content_html": "<p>⭐️</p>\n<h2 id=\"題目敘述\"><a class=\"anchor\" href=\"#題目敘述\">#</a> <span class=\"exturl\" data-url=\"aHR0cHM6Ly9sZWV0Y29kZS5jb20vcHJvYmxlbXMvYXZlcmFnZS1zYWxhcnktZXhjbHVkaW5nLXRoZS1taW5pbXVtLWFuZC1tYXhpbXVtLXNhbGFyeS8=\">題目敘述</span></h2>\n<p>You are given an array of <strong>unique</strong> integers  <code>salary</code>  where  <code>salary[i]</code>  is the salary of the  <code>ith</code>  employee.</p>\n<p>Return <em>the average salary of employees excluding the minimum and maximum salary</em>. Answers within  <code>10-5</code>  of the actual answer will be accepted.</p>\n<h3 id=\"example-1\"><a class=\"anchor\" href=\"#example-1\">#</a> Example 1</h3>\n<blockquote>\n<p><strong>Input:</strong> salary = [4000,3000,1000,2000]<br>\n<strong>Output:</strong> 2500.00000<br>\n<strong>Explanation:</strong> Minimum salary and maximum salary are 1000 and 4000 respectively.<br>\nAverage salary excluding minimum and maximum salary is (2000+3000) / 2 = 2500</p>\n</blockquote>\n<h3 id=\"example-2\"><a class=\"anchor\" href=\"#example-2\">#</a> Example 2</h3>\n<blockquote>\n<p><strong>Input:</strong> salary = [1000,2000,3000]<br>\n<strong>Output:</strong> 2000.00000<br>\n<strong>Explanation:</strong> Minimum salary and maximum salary are 1000 and 3000 respectively.<br>\nAverage salary excluding minimum and maximum salary is (2000) / 1 = 2000</p>\n</blockquote>\n<h2 id=\"solution\"><a class=\"anchor\" href=\"#solution\">#</a> Solution</h2>\n<div class=\"tab\" data-id=\"code\" data-title=\"C++\">\n<figure class=\"highlight cpp\"><figcaption data-lang=\"C++\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre><span class=\"token keyword\">class</span> <span class=\"token class-name\">Solution</span> <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"2\"></td><td><pre><span class=\"token keyword\">public</span><span class=\"token operator\">:</span></pre></td></tr><tr><td data-num=\"3\"></td><td><pre>    <span class=\"token keyword\">double</span> <span class=\"token function\">average</span><span class=\"token punctuation\">(</span>vector<span class=\"token operator\">&lt;</span><span class=\"token keyword\">int</span><span class=\"token operator\">></span><span class=\"token operator\">&amp;</span> salary<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"4\"></td><td><pre>        <span class=\"token keyword\">int</span> mn <span class=\"token operator\">=</span> salary<span class=\"token punctuation\">[</span><span class=\"token number\">0</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">,</span> mx <span class=\"token operator\">=</span> salary<span class=\"token punctuation\">[</span><span class=\"token number\">0</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"5\"></td><td><pre>        <span class=\"token keyword\">double</span> res <span class=\"token operator\">=</span> <span class=\"token number\">0</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"6\"></td><td><pre>        <span class=\"token keyword\">for</span> <span class=\"token punctuation\">(</span><span class=\"token keyword\">int</span> s <span class=\"token operator\">:</span> salary<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"7\"></td><td><pre>            res <span class=\"token operator\">+=</span> s<span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"8\"></td><td><pre>            mn <span class=\"token operator\">=</span> <span class=\"token function\">min</span><span class=\"token punctuation\">(</span>mn<span class=\"token punctuation\">,</span> s<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"9\"></td><td><pre>            mx <span class=\"token operator\">=</span> <span class=\"token function\">max</span><span class=\"token punctuation\">(</span>mx<span class=\"token punctuation\">,</span> s<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"10\"></td><td><pre>        <span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"11\"></td><td><pre>        res <span class=\"token operator\">-=</span> <span class=\"token punctuation\">(</span>mn <span class=\"token operator\">+</span> mx<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"12\"></td><td><pre>        <span class=\"token keyword\">return</span> res <span class=\"token operator\">/</span> <span class=\"token punctuation\">(</span>salary<span class=\"token punctuation\">.</span><span class=\"token function\">size</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token operator\">-</span><span class=\"token number\">2</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"13\"></td><td><pre>    <span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"14\"></td><td><pre><span class=\"token punctuation\">&#125;</span><span class=\"token punctuation\">;</span></pre></td></tr></table></figure></div>\n<div class=\"tab\" data-id=\"code\" data-title=\"Java\">\n<figure class=\"highlight java\"><figcaption data-lang=\"java\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre><span class=\"token keyword\">import</span> <span class=\"token import\"><span class=\"token namespace\">java<span class=\"token punctuation\">.</span>util<span class=\"token punctuation\">.</span></span><span class=\"token class-name\">Arrays</span></span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"2\"></td><td><pre></pre></td></tr><tr><td data-num=\"3\"></td><td><pre><span class=\"token keyword\">class</span> <span class=\"token class-name\">Solution</span> <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"4\"></td><td><pre>    <span class=\"token keyword\">public</span> <span class=\"token keyword\">double</span> <span class=\"token function\">average</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">int</span><span class=\"token punctuation\">[</span><span class=\"token punctuation\">]</span> salary<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"5\"></td><td><pre>        <span class=\"token class-name\">Arrays</span><span class=\"token punctuation\">.</span><span class=\"token function\">sort</span><span class=\"token punctuation\">(</span>salary<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"6\"></td><td><pre>        <span class=\"token keyword\">long</span> sum <span class=\"token operator\">=</span> <span class=\"token number\">0</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"7\"></td><td><pre>        <span class=\"token keyword\">for</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">int</span> i <span class=\"token operator\">=</span> <span class=\"token number\">1</span><span class=\"token punctuation\">;</span> i <span class=\"token operator\">&lt;</span> salary<span class=\"token punctuation\">.</span>length <span class=\"token operator\">-</span> <span class=\"token number\">1</span><span class=\"token punctuation\">;</span> i<span class=\"token operator\">++</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"8\"></td><td><pre>            sum <span class=\"token operator\">+=</span> salary<span class=\"token punctuation\">[</span>i<span class=\"token punctuation\">]</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"9\"></td><td><pre>        <span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"10\"></td><td><pre>        </pre></td></tr><tr><td data-num=\"11\"></td><td><pre>        <span class=\"token keyword\">return</span> sum <span class=\"token operator\">/</span> <span class=\"token punctuation\">(</span>salary<span class=\"token punctuation\">.</span>length <span class=\"token operator\">-</span> <span class=\"token number\">2</span> <span class=\"token operator\">*</span> <span class=\"token number\">1.0</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"12\"></td><td><pre>    <span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"13\"></td><td><pre><span class=\"token punctuation\">&#125;</span></pre></td></tr></table></figure></div>\n<div class=\"tab\" data-id=\"code\" data-title=\"Python\">\n<figure class=\"highlight python\"><figcaption data-lang=\"python\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre><span class=\"token keyword\">class</span> <span class=\"token class-name\">Solution</span><span class=\"token punctuation\">:</span></pre></td></tr><tr><td data-num=\"2\"></td><td><pre>    <span class=\"token keyword\">def</span> <span class=\"token function\">average</span><span class=\"token punctuation\">(</span>self<span class=\"token punctuation\">,</span> salary<span class=\"token punctuation\">:</span> List<span class=\"token punctuation\">[</span><span class=\"token builtin\">int</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">)</span> <span class=\"token operator\">-</span><span class=\"token operator\">></span> <span class=\"token builtin\">float</span><span class=\"token punctuation\">:</span></pre></td></tr><tr><td data-num=\"3\"></td><td><pre>        min_salary <span class=\"token operator\">=</span> <span class=\"token builtin\">min</span><span class=\"token punctuation\">(</span>salary<span class=\"token punctuation\">)</span></pre></td></tr><tr><td data-num=\"4\"></td><td><pre>        max_salary <span class=\"token operator\">=</span> <span class=\"token builtin\">max</span><span class=\"token punctuation\">(</span>salary<span class=\"token punctuation\">)</span></pre></td></tr><tr><td data-num=\"5\"></td><td><pre>        total_salary <span class=\"token operator\">=</span> <span class=\"token builtin\">sum</span><span class=\"token punctuation\">(</span>salary<span class=\"token punctuation\">)</span> <span class=\"token operator\">-</span> min_salary <span class=\"token operator\">-</span> max_salary</pre></td></tr><tr><td data-num=\"6\"></td><td><pre>        num_employees <span class=\"token operator\">=</span> <span class=\"token builtin\">len</span><span class=\"token punctuation\">(</span>salary<span class=\"token punctuation\">)</span> <span class=\"token operator\">-</span> <span class=\"token number\">2</span></pre></td></tr><tr><td data-num=\"7\"></td><td><pre>        <span class=\"token keyword\">return</span> total_salary <span class=\"token operator\">/</span> num_employees</pre></td></tr></table></figure></div>\n",
            "tags": [
                "Coding",
                "Leetcode",
                "Easy",
                "Leetcode",
                "Easy",
                "Array",
                "Sorting"
            ]
        },
        {
            "id": "https://chienikao.github.io/2023/04/30/Coding/leetcode/Hard/1579%20Remove%20Max%20Number%20of%20Edges%20to%20Keep%20Graph%20Fully%20Traversable/",
            "url": "https://chienikao.github.io/2023/04/30/Coding/leetcode/Hard/1579%20Remove%20Max%20Number%20of%20Edges%20to%20Keep%20Graph%20Fully%20Traversable/",
            "title": "1579. Remove Max Number of Edges to Keep Graph Fully Traversable",
            "date_published": "2023-04-30T04:42:38.000Z",
            "content_html": "<p>⭐️⭐️⭐️</p>\n<h2 id=\"題目敘述\"><a class=\"anchor\" href=\"#題目敘述\">#</a> <span class=\"exturl\" data-url=\"aHR0cHM6Ly9sZWV0Y29kZS5jb20vcHJvYmxlbXMvcmVtb3ZlLW1heC1udW1iZXItb2YtZWRnZXMtdG8ta2VlcC1ncmFwaC1mdWxseS10cmF2ZXJzYWJsZS8=\">題目敘述</span></h2>\n<p>Alice and Bob have an undirected graph of  <code>n</code>  nodes and three types of edges:</p>\n<ul>\n<li>Type 1: Can be traversed by Alice only.</li>\n<li>Type 2: Can be traversed by Bob only.</li>\n<li>Type 3: Can be traversed by both Alice and Bob.</li>\n</ul>\n<p>Given an array  <code>edges</code>  where  <code>edges[i] = [typei, ui, vi]</code>  represents a bidirectional edge of type  <code>typei</code>  between nodes  <code>ui</code>  and  <code>vi</code> , find the maximum number of edges you can remove so that after removing the edges, the graph can still be fully traversed by both Alice and Bob. The graph is fully traversed by Alice and Bob if starting from any node, they can reach all other nodes.</p>\n<p>Return <em>the maximum number of edges you can remove, or return  <code>-1</code>  if Alice and Bob cannot fully traverse the graph</em>.</p>\n<h3 id=\"example-1\"><a class=\"anchor\" href=\"#example-1\">#</a> Example 1</h3>\n<p><img data-src=\"https://i.imgur.com/2SsBc9T.png\" alt=\"\"></p>\n<blockquote>\n<p><strong>Input</strong>: n = 4, edges = [[3,1,2],[3,2,3],[1,1,3],[1,2,4],[1,1,2],[2,3,4]]<br>\n<strong>Output</strong>: 2<br>\n<strong>Explanation</strong>: If we remove the 2 edges [1,1,2] and [1,1,3]. The graph will still be fully traversable by Alice and Bob. Removing any additional edge will not make it so. So the maximum number of edges we can remove is 2.</p>\n</blockquote>\n<h3 id=\"example-2\"><a class=\"anchor\" href=\"#example-2\">#</a> Example 2</h3>\n<p><img data-src=\"https://i.imgur.com/sNylQd6.png\" alt=\"\"></p>\n<blockquote>\n<p><strong>Input</strong>: n = 4, edges = [[3,1,2],[3,2,3],[1,1,4],[2,1,4]]<br>\n<strong>Output</strong>: 0<br>\n<strong>Explanation</strong>: Notice that removing any edge will not make the graph fully traversable by Alice and Bob.</p>\n</blockquote>\n<h3 id=\"example-3\"><a class=\"anchor\" href=\"#example-3\">#</a> Example 3</h3>\n<p><img data-src=\"https://i.imgur.com/jYOpe7F.png\" alt=\"\"></p>\n<blockquote>\n<p><strong>Input</strong>: n = 4, edges = [[3,2,3],[1,1,2],[2,3,4]]<br>\n<strong>Output</strong>: -1<br>\n<strong>Explanation</strong>: In the current graph, Alice cannot reach node 4 from the other nodes. Likewise, Bob cannot reach 1. Therefore it’s impossible to make the graph fully traversable.</p>\n</blockquote>\n<h2 id=\"solution\"><a class=\"anchor\" href=\"#solution\">#</a> Solution</h2>\n<div class=\"tab\" data-id=\"code\" data-title=\"C++\">\n<figure class=\"highlight cpp\"><figcaption data-lang=\"C++\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre><span class=\"token keyword\">class</span> <span class=\"token class-name\">UnionFind</span> <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"2\"></td><td><pre><span class=\"token keyword\">public</span><span class=\"token operator\">:</span></pre></td></tr><tr><td data-num=\"3\"></td><td><pre>    vector<span class=\"token operator\">&lt;</span><span class=\"token keyword\">int</span><span class=\"token operator\">></span> parent<span class=\"token punctuation\">,</span> rank<span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"4\"></td><td><pre>    <span class=\"token keyword\">int</span> nodes<span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"5\"></td><td><pre>    <span class=\"token function\">UnionFind</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">int</span> n<span class=\"token punctuation\">)</span><span class=\"token operator\">:</span> <span class=\"token function\">parent</span><span class=\"token punctuation\">(</span>n<span class=\"token operator\">+</span><span class=\"token number\">1</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">,</span> <span class=\"token function\">rank</span><span class=\"token punctuation\">(</span>n<span class=\"token operator\">+</span><span class=\"token number\">1</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">,</span> <span class=\"token function\">nodes</span><span class=\"token punctuation\">(</span><span class=\"token number\">1</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"6\"></td><td><pre>        <span class=\"token keyword\">for</span> <span class=\"token punctuation\">(</span><span class=\"token keyword\">int</span> i<span class=\"token operator\">=</span><span class=\"token number\">1</span><span class=\"token punctuation\">;</span> i<span class=\"token operator\">&lt;=</span>n<span class=\"token punctuation\">;</span> i<span class=\"token operator\">++</span><span class=\"token punctuation\">)</span> parent<span class=\"token punctuation\">[</span>i<span class=\"token punctuation\">]</span> <span class=\"token operator\">=</span> i<span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"7\"></td><td><pre>    <span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"8\"></td><td><pre></pre></td></tr><tr><td data-num=\"9\"></td><td><pre>    <span class=\"token keyword\">int</span> <span class=\"token function\">find</span> <span class=\"token punctuation\">(</span><span class=\"token keyword\">int</span> x<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"10\"></td><td><pre>        <span class=\"token keyword\">if</span> <span class=\"token punctuation\">(</span>x <span class=\"token operator\">==</span> parent<span class=\"token punctuation\">[</span>x<span class=\"token punctuation\">]</span><span class=\"token punctuation\">)</span> <span class=\"token keyword\">return</span> x<span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"11\"></td><td><pre>        <span class=\"token keyword\">return</span> parent<span class=\"token punctuation\">[</span>x<span class=\"token punctuation\">]</span> <span class=\"token operator\">=</span> <span class=\"token function\">find</span><span class=\"token punctuation\">(</span>parent<span class=\"token punctuation\">[</span>x<span class=\"token punctuation\">]</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"12\"></td><td><pre>    <span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"13\"></td><td><pre></pre></td></tr><tr><td data-num=\"14\"></td><td><pre>    <span class=\"token keyword\">bool</span> <span class=\"token function\">union_</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">int</span> x<span class=\"token punctuation\">,</span> <span class=\"token keyword\">int</span> y<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"15\"></td><td><pre>        <span class=\"token keyword\">int</span> px <span class=\"token operator\">=</span> <span class=\"token function\">find</span><span class=\"token punctuation\">(</span>x<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"16\"></td><td><pre>        <span class=\"token keyword\">int</span> py <span class=\"token operator\">=</span> <span class=\"token function\">find</span><span class=\"token punctuation\">(</span>y<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"17\"></td><td><pre>        <span class=\"token keyword\">if</span> <span class=\"token punctuation\">(</span>px <span class=\"token operator\">==</span> py<span class=\"token punctuation\">)</span> <span class=\"token keyword\">return</span> <span class=\"token boolean\">false</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"18\"></td><td><pre>        <span class=\"token keyword\">if</span> <span class=\"token punctuation\">(</span>rank<span class=\"token punctuation\">[</span>px<span class=\"token punctuation\">]</span> <span class=\"token operator\">></span> rank<span class=\"token punctuation\">[</span>py<span class=\"token punctuation\">]</span><span class=\"token punctuation\">)</span> parent<span class=\"token punctuation\">[</span>py<span class=\"token punctuation\">]</span> <span class=\"token operator\">=</span> px<span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"19\"></td><td><pre>        <span class=\"token keyword\">else</span> <span class=\"token keyword\">if</span> <span class=\"token punctuation\">(</span>rank<span class=\"token punctuation\">[</span>px<span class=\"token punctuation\">]</span> <span class=\"token operator\">&lt;</span> rank<span class=\"token punctuation\">[</span>py<span class=\"token punctuation\">]</span><span class=\"token punctuation\">)</span> parent<span class=\"token punctuation\">[</span>px<span class=\"token punctuation\">]</span> <span class=\"token operator\">=</span> py<span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"20\"></td><td><pre>        <span class=\"token keyword\">else</span> <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"21\"></td><td><pre>            parent<span class=\"token punctuation\">[</span>py<span class=\"token punctuation\">]</span> <span class=\"token operator\">=</span> px<span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"22\"></td><td><pre>            rank<span class=\"token punctuation\">[</span>px<span class=\"token punctuation\">]</span><span class=\"token operator\">++</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"23\"></td><td><pre>        <span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"24\"></td><td><pre>        <span class=\"token keyword\">return</span> <span class=\"token boolean\">true</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"25\"></td><td><pre>    <span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"26\"></td><td><pre><span class=\"token punctuation\">&#125;</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"27\"></td><td><pre></pre></td></tr><tr><td data-num=\"28\"></td><td><pre><span class=\"token keyword\">class</span> <span class=\"token class-name\">Solution</span> <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"29\"></td><td><pre><span class=\"token keyword\">public</span><span class=\"token operator\">:</span></pre></td></tr><tr><td data-num=\"30\"></td><td><pre>    <span class=\"token keyword\">int</span> <span class=\"token function\">maxNumEdgesToRemove</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">int</span> n<span class=\"token punctuation\">,</span> vector<span class=\"token operator\">&lt;</span>vector<span class=\"token operator\">&lt;</span><span class=\"token keyword\">int</span><span class=\"token operator\">>></span><span class=\"token operator\">&amp;</span> edges<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"31\"></td><td><pre>        UnionFind <span class=\"token function\">Alice</span><span class=\"token punctuation\">(</span>n<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"32\"></td><td><pre>        UnionFind <span class=\"token function\">Bob</span><span class=\"token punctuation\">(</span>n<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"33\"></td><td><pre></pre></td></tr><tr><td data-num=\"34\"></td><td><pre>        <span class=\"token keyword\">int</span> res <span class=\"token operator\">=</span> <span class=\"token number\">0</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"35\"></td><td><pre>        <span class=\"token keyword\">for</span> <span class=\"token punctuation\">(</span>vector<span class=\"token operator\">&lt;</span><span class=\"token keyword\">int</span><span class=\"token operator\">></span><span class=\"token operator\">&amp;</span> edge <span class=\"token operator\">:</span> edges<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"36\"></td><td><pre>            <span class=\"token keyword\">if</span> <span class=\"token punctuation\">(</span>edge<span class=\"token punctuation\">[</span><span class=\"token number\">0</span><span class=\"token punctuation\">]</span> <span class=\"token operator\">==</span> <span class=\"token number\">3</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"37\"></td><td><pre>                <span class=\"token keyword\">if</span> <span class=\"token punctuation\">(</span>Alice<span class=\"token punctuation\">.</span><span class=\"token function\">union_</span><span class=\"token punctuation\">(</span>edge<span class=\"token punctuation\">[</span><span class=\"token number\">1</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">,</span> edge<span class=\"token punctuation\">[</span><span class=\"token number\">2</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">)</span> <span class=\"token operator\">&amp;&amp;</span> Bob<span class=\"token punctuation\">.</span><span class=\"token function\">union_</span><span class=\"token punctuation\">(</span>edge<span class=\"token punctuation\">[</span><span class=\"token number\">1</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">,</span> edge<span class=\"token punctuation\">[</span><span class=\"token number\">2</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"38\"></td><td><pre>                    Alice<span class=\"token punctuation\">.</span>nodes <span class=\"token operator\">+=</span> <span class=\"token number\">1</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"39\"></td><td><pre>                    Bob<span class=\"token punctuation\">.</span>nodes <span class=\"token operator\">+=</span> <span class=\"token number\">1</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"40\"></td><td><pre>                <span class=\"token punctuation\">&#125;</span> <span class=\"token keyword\">else</span> <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"41\"></td><td><pre>                    res <span class=\"token operator\">+=</span> <span class=\"token number\">1</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"42\"></td><td><pre>                <span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"43\"></td><td><pre>            <span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"44\"></td><td><pre>        <span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"45\"></td><td><pre></pre></td></tr><tr><td data-num=\"46\"></td><td><pre>        <span class=\"token keyword\">for</span> <span class=\"token punctuation\">(</span><span class=\"token keyword\">auto</span><span class=\"token operator\">&amp;</span> edge <span class=\"token operator\">:</span> edges<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"47\"></td><td><pre>            <span class=\"token keyword\">if</span> <span class=\"token punctuation\">(</span>edge<span class=\"token punctuation\">[</span><span class=\"token number\">0</span><span class=\"token punctuation\">]</span> <span class=\"token operator\">==</span> <span class=\"token number\">1</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"48\"></td><td><pre>                <span class=\"token keyword\">if</span> <span class=\"token punctuation\">(</span>Alice<span class=\"token punctuation\">.</span><span class=\"token function\">union_</span><span class=\"token punctuation\">(</span>edge<span class=\"token punctuation\">[</span><span class=\"token number\">1</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">,</span> edge<span class=\"token punctuation\">[</span><span class=\"token number\">2</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span> Alice<span class=\"token punctuation\">.</span>nodes <span class=\"token operator\">+=</span> <span class=\"token number\">1</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"49\"></td><td><pre>                <span class=\"token keyword\">else</span> res <span class=\"token operator\">+=</span> <span class=\"token number\">1</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"50\"></td><td><pre>            <span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"51\"></td><td><pre></pre></td></tr><tr><td data-num=\"52\"></td><td><pre>            <span class=\"token keyword\">if</span> <span class=\"token punctuation\">(</span>edge<span class=\"token punctuation\">[</span><span class=\"token number\">0</span><span class=\"token punctuation\">]</span> <span class=\"token operator\">==</span> <span class=\"token number\">2</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"53\"></td><td><pre>                <span class=\"token keyword\">if</span> <span class=\"token punctuation\">(</span>Bob<span class=\"token punctuation\">.</span><span class=\"token function\">union_</span><span class=\"token punctuation\">(</span>edge<span class=\"token punctuation\">[</span><span class=\"token number\">1</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">,</span> edge<span class=\"token punctuation\">[</span><span class=\"token number\">2</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span> Bob<span class=\"token punctuation\">.</span>nodes <span class=\"token operator\">+=</span> <span class=\"token number\">1</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"54\"></td><td><pre>                <span class=\"token keyword\">else</span> res <span class=\"token operator\">+=</span> <span class=\"token number\">1</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"55\"></td><td><pre>            <span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"56\"></td><td><pre>        <span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"57\"></td><td><pre>        <span class=\"token keyword\">return</span> <span class=\"token punctuation\">(</span>Alice<span class=\"token punctuation\">.</span>nodes <span class=\"token operator\">==</span> Bob<span class=\"token punctuation\">.</span>nodes <span class=\"token operator\">&amp;&amp;</span> Alice<span class=\"token punctuation\">.</span>nodes <span class=\"token operator\">==</span> n<span class=\"token punctuation\">)</span> <span class=\"token operator\">?</span> res <span class=\"token operator\">:</span> <span class=\"token operator\">-</span><span class=\"token number\">1</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"58\"></td><td><pre>    <span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"59\"></td><td><pre><span class=\"token punctuation\">&#125;</span><span class=\"token punctuation\">;</span></pre></td></tr></table></figure></div>\n<div class=\"tab\" data-id=\"code\" data-title=\"Java\">\n<figure class=\"highlight java\"><figcaption data-lang=\"java\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre><span class=\"token keyword\">class</span> <span class=\"token class-name\">Solution</span> <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"2\"></td><td><pre>    <span class=\"token keyword\">class</span> <span class=\"token class-name\">UnionFind</span> <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"3\"></td><td><pre>        <span class=\"token keyword\">int</span><span class=\"token punctuation\">[</span><span class=\"token punctuation\">]</span> parent<span class=\"token punctuation\">,</span> rank<span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"4\"></td><td><pre>        <span class=\"token keyword\">int</span> nodes<span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"5\"></td><td><pre></pre></td></tr><tr><td data-num=\"6\"></td><td><pre>        <span class=\"token keyword\">public</span> <span class=\"token class-name\">UnionFind</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">int</span> n<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"7\"></td><td><pre>            parent <span class=\"token operator\">=</span> <span class=\"token keyword\">new</span> <span class=\"token keyword\">int</span><span class=\"token punctuation\">[</span>n<span class=\"token operator\">+</span><span class=\"token number\">1</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"8\"></td><td><pre>            rank <span class=\"token operator\">=</span> <span class=\"token keyword\">new</span> <span class=\"token keyword\">int</span><span class=\"token punctuation\">[</span>n<span class=\"token operator\">+</span><span class=\"token number\">1</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"9\"></td><td><pre>            nodes <span class=\"token operator\">=</span> <span class=\"token number\">1</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"10\"></td><td><pre>            <span class=\"token keyword\">for</span> <span class=\"token punctuation\">(</span><span class=\"token keyword\">int</span> i<span class=\"token operator\">=</span><span class=\"token number\">1</span><span class=\"token punctuation\">;</span> i<span class=\"token operator\">&lt;=</span>n<span class=\"token punctuation\">;</span> i<span class=\"token operator\">++</span><span class=\"token punctuation\">)</span> parent<span class=\"token punctuation\">[</span>i<span class=\"token punctuation\">]</span> <span class=\"token operator\">=</span> i<span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"11\"></td><td><pre>        <span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"12\"></td><td><pre></pre></td></tr><tr><td data-num=\"13\"></td><td><pre>        <span class=\"token keyword\">public</span> <span class=\"token keyword\">int</span> <span class=\"token function\">find</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">int</span> x<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"14\"></td><td><pre>            <span class=\"token keyword\">if</span> <span class=\"token punctuation\">(</span>parent<span class=\"token punctuation\">[</span>x<span class=\"token punctuation\">]</span> <span class=\"token operator\">!=</span> x<span class=\"token punctuation\">)</span> parent<span class=\"token punctuation\">[</span>x<span class=\"token punctuation\">]</span> <span class=\"token operator\">=</span> <span class=\"token function\">find</span><span class=\"token punctuation\">(</span>parent<span class=\"token punctuation\">[</span>x<span class=\"token punctuation\">]</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"15\"></td><td><pre>            <span class=\"token keyword\">return</span> parent<span class=\"token punctuation\">[</span>x<span class=\"token punctuation\">]</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"16\"></td><td><pre>        <span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"17\"></td><td><pre></pre></td></tr><tr><td data-num=\"18\"></td><td><pre>        <span class=\"token keyword\">public</span> <span class=\"token keyword\">boolean</span> <span class=\"token function\">union_</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">int</span> x<span class=\"token punctuation\">,</span> <span class=\"token keyword\">int</span> y<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"19\"></td><td><pre>            <span class=\"token keyword\">int</span> px <span class=\"token operator\">=</span> <span class=\"token function\">find</span><span class=\"token punctuation\">(</span>x<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"20\"></td><td><pre>            <span class=\"token keyword\">int</span> py <span class=\"token operator\">=</span> <span class=\"token function\">find</span><span class=\"token punctuation\">(</span>y<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"21\"></td><td><pre>            <span class=\"token keyword\">if</span> <span class=\"token punctuation\">(</span>px <span class=\"token operator\">==</span> py<span class=\"token punctuation\">)</span> <span class=\"token keyword\">return</span> <span class=\"token boolean\">false</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"22\"></td><td><pre>            <span class=\"token keyword\">if</span> <span class=\"token punctuation\">(</span>rank<span class=\"token punctuation\">[</span>px<span class=\"token punctuation\">]</span> <span class=\"token operator\">></span> rank<span class=\"token punctuation\">[</span>py<span class=\"token punctuation\">]</span><span class=\"token punctuation\">)</span> parent<span class=\"token punctuation\">[</span>py<span class=\"token punctuation\">]</span> <span class=\"token operator\">=</span> px<span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"23\"></td><td><pre>            <span class=\"token keyword\">else</span> <span class=\"token keyword\">if</span> <span class=\"token punctuation\">(</span>rank<span class=\"token punctuation\">[</span>px<span class=\"token punctuation\">]</span> <span class=\"token operator\">&lt;</span> rank<span class=\"token punctuation\">[</span>py<span class=\"token punctuation\">]</span><span class=\"token punctuation\">)</span> parent<span class=\"token punctuation\">[</span>px<span class=\"token punctuation\">]</span> <span class=\"token operator\">=</span> py<span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"24\"></td><td><pre>            <span class=\"token keyword\">else</span> <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"25\"></td><td><pre>                parent<span class=\"token punctuation\">[</span>py<span class=\"token punctuation\">]</span> <span class=\"token operator\">=</span> px<span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"26\"></td><td><pre>                rank<span class=\"token punctuation\">[</span>px<span class=\"token punctuation\">]</span> <span class=\"token operator\">+=</span> <span class=\"token number\">1</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"27\"></td><td><pre>            <span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"28\"></td><td><pre>            <span class=\"token keyword\">return</span> <span class=\"token boolean\">true</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"29\"></td><td><pre>        <span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"30\"></td><td><pre>    <span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"31\"></td><td><pre></pre></td></tr><tr><td data-num=\"32\"></td><td><pre>    <span class=\"token keyword\">public</span> <span class=\"token keyword\">int</span> <span class=\"token function\">maxNumEdgesToRemove</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">int</span> n<span class=\"token punctuation\">,</span> <span class=\"token keyword\">int</span><span class=\"token punctuation\">[</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">[</span><span class=\"token punctuation\">]</span> edges<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"33\"></td><td><pre>        <span class=\"token class-name\">UnionFind</span> <span class=\"token class-name\">Alice</span> <span class=\"token operator\">=</span> <span class=\"token keyword\">new</span> <span class=\"token class-name\">UnionFind</span><span class=\"token punctuation\">(</span>n<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"34\"></td><td><pre>        <span class=\"token class-name\">UnionFind</span> <span class=\"token class-name\">Bob</span> <span class=\"token operator\">=</span> <span class=\"token keyword\">new</span> <span class=\"token class-name\">UnionFind</span><span class=\"token punctuation\">(</span>n<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"35\"></td><td><pre>        <span class=\"token keyword\">int</span> res <span class=\"token operator\">=</span> <span class=\"token number\">0</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"36\"></td><td><pre>        <span class=\"token keyword\">for</span> <span class=\"token punctuation\">(</span><span class=\"token keyword\">int</span><span class=\"token punctuation\">[</span><span class=\"token punctuation\">]</span> edge <span class=\"token operator\">:</span> edges<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"37\"></td><td><pre>            <span class=\"token keyword\">if</span> <span class=\"token punctuation\">(</span>edge<span class=\"token punctuation\">[</span><span class=\"token number\">0</span><span class=\"token punctuation\">]</span> <span class=\"token operator\">==</span> <span class=\"token number\">3</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"38\"></td><td><pre>                <span class=\"token keyword\">if</span> <span class=\"token punctuation\">(</span><span class=\"token class-name\">Alice</span><span class=\"token punctuation\">.</span><span class=\"token function\">union_</span><span class=\"token punctuation\">(</span>edge<span class=\"token punctuation\">[</span><span class=\"token number\">1</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">,</span> edge<span class=\"token punctuation\">[</span><span class=\"token number\">2</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">)</span> <span class=\"token operator\">&amp;&amp;</span> <span class=\"token class-name\">Bob</span><span class=\"token punctuation\">.</span><span class=\"token function\">union_</span><span class=\"token punctuation\">(</span>edge<span class=\"token punctuation\">[</span><span class=\"token number\">1</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">,</span> edge<span class=\"token punctuation\">[</span><span class=\"token number\">2</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"39\"></td><td><pre>                    <span class=\"token class-name\">Alice</span><span class=\"token punctuation\">.</span>nodes <span class=\"token operator\">+=</span> <span class=\"token number\">1</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"40\"></td><td><pre>                    <span class=\"token class-name\">Bob</span><span class=\"token punctuation\">.</span>nodes <span class=\"token operator\">+=</span> <span class=\"token number\">1</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"41\"></td><td><pre>                <span class=\"token punctuation\">&#125;</span> <span class=\"token keyword\">else</span> res <span class=\"token operator\">+=</span> <span class=\"token number\">1</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"42\"></td><td><pre>            <span class=\"token punctuation\">&#125;</span> </pre></td></tr><tr><td data-num=\"43\"></td><td><pre>        <span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"44\"></td><td><pre></pre></td></tr><tr><td data-num=\"45\"></td><td><pre>        <span class=\"token keyword\">for</span> <span class=\"token punctuation\">(</span><span class=\"token keyword\">int</span><span class=\"token punctuation\">[</span><span class=\"token punctuation\">]</span> edge <span class=\"token operator\">:</span> edges<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"46\"></td><td><pre>            <span class=\"token keyword\">if</span> <span class=\"token punctuation\">(</span>edge<span class=\"token punctuation\">[</span><span class=\"token number\">0</span><span class=\"token punctuation\">]</span> <span class=\"token operator\">==</span> <span class=\"token number\">1</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"47\"></td><td><pre>                <span class=\"token keyword\">if</span> <span class=\"token punctuation\">(</span><span class=\"token class-name\">Alice</span><span class=\"token punctuation\">.</span><span class=\"token function\">union_</span><span class=\"token punctuation\">(</span>edge<span class=\"token punctuation\">[</span><span class=\"token number\">1</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">,</span> edge<span class=\"token punctuation\">[</span><span class=\"token number\">2</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span> <span class=\"token class-name\">Alice</span><span class=\"token punctuation\">.</span>nodes <span class=\"token operator\">+=</span> <span class=\"token number\">1</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"48\"></td><td><pre>                <span class=\"token keyword\">else</span> res <span class=\"token operator\">+=</span> <span class=\"token number\">1</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"49\"></td><td><pre>            <span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"50\"></td><td><pre>            <span class=\"token keyword\">if</span> <span class=\"token punctuation\">(</span>edge<span class=\"token punctuation\">[</span><span class=\"token number\">0</span><span class=\"token punctuation\">]</span> <span class=\"token operator\">==</span> <span class=\"token number\">2</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"51\"></td><td><pre>                <span class=\"token keyword\">if</span> <span class=\"token punctuation\">(</span><span class=\"token class-name\">Bob</span><span class=\"token punctuation\">.</span><span class=\"token function\">union_</span><span class=\"token punctuation\">(</span>edge<span class=\"token punctuation\">[</span><span class=\"token number\">1</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">,</span> edge<span class=\"token punctuation\">[</span><span class=\"token number\">2</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span> <span class=\"token class-name\">Bob</span><span class=\"token punctuation\">.</span>nodes <span class=\"token operator\">+=</span> <span class=\"token number\">1</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"52\"></td><td><pre>                <span class=\"token keyword\">else</span> res <span class=\"token operator\">+=</span> <span class=\"token number\">1</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"53\"></td><td><pre>            <span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"54\"></td><td><pre>        <span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"55\"></td><td><pre>        <span class=\"token keyword\">return</span> <span class=\"token class-name\">Alice</span><span class=\"token punctuation\">.</span>nodes <span class=\"token operator\">==</span> <span class=\"token class-name\">Bob</span><span class=\"token punctuation\">.</span>nodes <span class=\"token operator\">&amp;&amp;</span> <span class=\"token class-name\">Alice</span><span class=\"token punctuation\">.</span>nodes <span class=\"token operator\">==</span> n <span class=\"token operator\">?</span> res <span class=\"token operator\">:</span> <span class=\"token operator\">-</span><span class=\"token number\">1</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"56\"></td><td><pre>    <span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"57\"></td><td><pre><span class=\"token punctuation\">&#125;</span></pre></td></tr></table></figure></div>\n<div class=\"tab\" data-id=\"code\" data-title=\"Python\">\n<figure class=\"highlight python\"><figcaption data-lang=\"python\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre><span class=\"token keyword\">class</span> <span class=\"token class-name\">UnionFind</span><span class=\"token punctuation\">:</span></pre></td></tr><tr><td data-num=\"2\"></td><td><pre>    <span class=\"token keyword\">def</span> <span class=\"token function\">__init__</span><span class=\"token punctuation\">(</span>self<span class=\"token punctuation\">,</span> n<span class=\"token punctuation\">)</span><span class=\"token punctuation\">:</span></pre></td></tr><tr><td data-num=\"3\"></td><td><pre>        self<span class=\"token punctuation\">.</span>parent <span class=\"token operator\">=</span> <span class=\"token builtin\">list</span><span class=\"token punctuation\">(</span><span class=\"token builtin\">range</span><span class=\"token punctuation\">(</span>n<span class=\"token operator\">+</span><span class=\"token number\">1</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span></pre></td></tr><tr><td data-num=\"4\"></td><td><pre>        self<span class=\"token punctuation\">.</span>rank <span class=\"token operator\">=</span> <span class=\"token punctuation\">[</span><span class=\"token number\">0</span><span class=\"token punctuation\">]</span> <span class=\"token operator\">*</span> <span class=\"token punctuation\">(</span>n<span class=\"token operator\">+</span><span class=\"token number\">1</span><span class=\"token punctuation\">)</span></pre></td></tr><tr><td data-num=\"5\"></td><td><pre>        self<span class=\"token punctuation\">.</span>nodes <span class=\"token operator\">=</span> <span class=\"token number\">1</span></pre></td></tr><tr><td data-num=\"6\"></td><td><pre></pre></td></tr><tr><td data-num=\"7\"></td><td><pre>    <span class=\"token keyword\">def</span> <span class=\"token function\">find</span><span class=\"token punctuation\">(</span>self<span class=\"token punctuation\">,</span> x<span class=\"token punctuation\">)</span><span class=\"token punctuation\">:</span></pre></td></tr><tr><td data-num=\"8\"></td><td><pre>        <span class=\"token keyword\">if</span> self<span class=\"token punctuation\">.</span>parent<span class=\"token punctuation\">[</span>x<span class=\"token punctuation\">]</span> <span class=\"token operator\">!=</span> x<span class=\"token punctuation\">:</span></pre></td></tr><tr><td data-num=\"9\"></td><td><pre>            self<span class=\"token punctuation\">.</span>parent<span class=\"token punctuation\">[</span>x<span class=\"token punctuation\">]</span> <span class=\"token operator\">=</span> self<span class=\"token punctuation\">.</span>find<span class=\"token punctuation\">(</span>self<span class=\"token punctuation\">.</span>parent<span class=\"token punctuation\">[</span>x<span class=\"token punctuation\">]</span><span class=\"token punctuation\">)</span></pre></td></tr><tr><td data-num=\"10\"></td><td><pre>        <span class=\"token keyword\">return</span> self<span class=\"token punctuation\">.</span>parent<span class=\"token punctuation\">[</span>x<span class=\"token punctuation\">]</span></pre></td></tr><tr><td data-num=\"11\"></td><td><pre></pre></td></tr><tr><td data-num=\"12\"></td><td><pre>    <span class=\"token keyword\">def</span> <span class=\"token function\">union_</span><span class=\"token punctuation\">(</span>self<span class=\"token punctuation\">,</span> x<span class=\"token punctuation\">,</span> y<span class=\"token punctuation\">)</span><span class=\"token punctuation\">:</span></pre></td></tr><tr><td data-num=\"13\"></td><td><pre>        px <span class=\"token operator\">=</span> self<span class=\"token punctuation\">.</span>find<span class=\"token punctuation\">(</span>x<span class=\"token punctuation\">)</span></pre></td></tr><tr><td data-num=\"14\"></td><td><pre>        py <span class=\"token operator\">=</span> self<span class=\"token punctuation\">.</span>find<span class=\"token punctuation\">(</span>y<span class=\"token punctuation\">)</span></pre></td></tr><tr><td data-num=\"15\"></td><td><pre>        <span class=\"token keyword\">if</span> px <span class=\"token operator\">==</span> py<span class=\"token punctuation\">:</span> <span class=\"token keyword\">return</span> <span class=\"token boolean\">False</span></pre></td></tr><tr><td data-num=\"16\"></td><td><pre>        <span class=\"token keyword\">if</span> self<span class=\"token punctuation\">.</span>rank<span class=\"token punctuation\">[</span>px<span class=\"token punctuation\">]</span> <span class=\"token operator\">></span> self<span class=\"token punctuation\">.</span>rank<span class=\"token punctuation\">[</span>py<span class=\"token punctuation\">]</span><span class=\"token punctuation\">:</span> self<span class=\"token punctuation\">.</span>parent<span class=\"token punctuation\">[</span>py<span class=\"token punctuation\">]</span> <span class=\"token operator\">=</span> px</pre></td></tr><tr><td data-num=\"17\"></td><td><pre>        <span class=\"token keyword\">elif</span> self<span class=\"token punctuation\">.</span>rank<span class=\"token punctuation\">[</span>px<span class=\"token punctuation\">]</span> <span class=\"token operator\">&lt;</span> self<span class=\"token punctuation\">.</span>rank<span class=\"token punctuation\">[</span>py<span class=\"token punctuation\">]</span><span class=\"token punctuation\">:</span> self<span class=\"token punctuation\">.</span>parent<span class=\"token punctuation\">[</span>px<span class=\"token punctuation\">]</span> <span class=\"token operator\">=</span> py</pre></td></tr><tr><td data-num=\"18\"></td><td><pre>        <span class=\"token keyword\">else</span><span class=\"token punctuation\">:</span></pre></td></tr><tr><td data-num=\"19\"></td><td><pre>            self<span class=\"token punctuation\">.</span>parent<span class=\"token punctuation\">[</span>py<span class=\"token punctuation\">]</span> <span class=\"token operator\">=</span> px</pre></td></tr><tr><td data-num=\"20\"></td><td><pre>            self<span class=\"token punctuation\">.</span>rank<span class=\"token punctuation\">[</span>px<span class=\"token punctuation\">]</span> <span class=\"token operator\">+=</span> <span class=\"token number\">1</span></pre></td></tr><tr><td data-num=\"21\"></td><td><pre>        <span class=\"token keyword\">return</span> <span class=\"token boolean\">True</span></pre></td></tr><tr><td data-num=\"22\"></td><td><pre></pre></td></tr><tr><td data-num=\"23\"></td><td><pre><span class=\"token keyword\">class</span> <span class=\"token class-name\">Solution</span><span class=\"token punctuation\">:</span></pre></td></tr><tr><td data-num=\"24\"></td><td><pre>    <span class=\"token keyword\">def</span> <span class=\"token function\">maxNumEdgesToRemove</span><span class=\"token punctuation\">(</span>self<span class=\"token punctuation\">,</span> n<span class=\"token punctuation\">:</span> <span class=\"token builtin\">int</span><span class=\"token punctuation\">,</span> edges<span class=\"token punctuation\">:</span> List<span class=\"token punctuation\">[</span>List<span class=\"token punctuation\">[</span><span class=\"token builtin\">int</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">)</span> <span class=\"token operator\">-</span><span class=\"token operator\">></span> <span class=\"token builtin\">int</span><span class=\"token punctuation\">:</span></pre></td></tr><tr><td data-num=\"25\"></td><td><pre>        Alice <span class=\"token operator\">=</span> UnionFind<span class=\"token punctuation\">(</span>n<span class=\"token punctuation\">)</span></pre></td></tr><tr><td data-num=\"26\"></td><td><pre>        Bob <span class=\"token operator\">=</span> UnionFind<span class=\"token punctuation\">(</span>n<span class=\"token punctuation\">)</span></pre></td></tr><tr><td data-num=\"27\"></td><td><pre></pre></td></tr><tr><td data-num=\"28\"></td><td><pre>        res <span class=\"token operator\">=</span> <span class=\"token number\">0</span></pre></td></tr><tr><td data-num=\"29\"></td><td><pre>        <span class=\"token keyword\">for</span> t<span class=\"token punctuation\">,</span> i<span class=\"token punctuation\">,</span> j <span class=\"token keyword\">in</span> edges<span class=\"token punctuation\">:</span></pre></td></tr><tr><td data-num=\"30\"></td><td><pre>            <span class=\"token keyword\">if</span> t <span class=\"token operator\">==</span> <span class=\"token number\">3</span><span class=\"token punctuation\">:</span></pre></td></tr><tr><td data-num=\"31\"></td><td><pre>                <span class=\"token keyword\">if</span> Alice<span class=\"token punctuation\">.</span>union_<span class=\"token punctuation\">(</span>i<span class=\"token punctuation\">,</span> j<span class=\"token punctuation\">)</span> <span class=\"token keyword\">and</span> Bob<span class=\"token punctuation\">.</span>union_<span class=\"token punctuation\">(</span>i<span class=\"token punctuation\">,</span> j<span class=\"token punctuation\">)</span><span class=\"token punctuation\">:</span></pre></td></tr><tr><td data-num=\"32\"></td><td><pre>                    Alice<span class=\"token punctuation\">.</span>nodes <span class=\"token operator\">+=</span> <span class=\"token number\">1</span></pre></td></tr><tr><td data-num=\"33\"></td><td><pre>                    Bob<span class=\"token punctuation\">.</span>nodes <span class=\"token operator\">+=</span> <span class=\"token number\">1</span></pre></td></tr><tr><td data-num=\"34\"></td><td><pre>                <span class=\"token keyword\">else</span><span class=\"token punctuation\">:</span> res <span class=\"token operator\">+=</span> <span class=\"token number\">1</span></pre></td></tr><tr><td data-num=\"35\"></td><td><pre>        </pre></td></tr><tr><td data-num=\"36\"></td><td><pre>        <span class=\"token keyword\">for</span> t<span class=\"token punctuation\">,</span> i<span class=\"token punctuation\">,</span> j <span class=\"token keyword\">in</span> edges<span class=\"token punctuation\">:</span></pre></td></tr><tr><td data-num=\"37\"></td><td><pre>            <span class=\"token keyword\">if</span> t <span class=\"token operator\">==</span> <span class=\"token number\">1</span><span class=\"token punctuation\">:</span></pre></td></tr><tr><td data-num=\"38\"></td><td><pre>                <span class=\"token keyword\">if</span> Alice<span class=\"token punctuation\">.</span>union_<span class=\"token punctuation\">(</span>i<span class=\"token punctuation\">,</span> j<span class=\"token punctuation\">)</span><span class=\"token punctuation\">:</span> Alice<span class=\"token punctuation\">.</span>nodes <span class=\"token operator\">+=</span> <span class=\"token number\">1</span></pre></td></tr><tr><td data-num=\"39\"></td><td><pre>                <span class=\"token keyword\">else</span><span class=\"token punctuation\">:</span> res <span class=\"token operator\">+=</span> <span class=\"token number\">1</span></pre></td></tr><tr><td data-num=\"40\"></td><td><pre>            <span class=\"token keyword\">if</span> t <span class=\"token operator\">==</span> <span class=\"token number\">2</span><span class=\"token punctuation\">:</span></pre></td></tr><tr><td data-num=\"41\"></td><td><pre>                <span class=\"token keyword\">if</span> Bob<span class=\"token punctuation\">.</span>union_<span class=\"token punctuation\">(</span>i<span class=\"token punctuation\">,</span> j<span class=\"token punctuation\">)</span><span class=\"token punctuation\">:</span> Bob<span class=\"token punctuation\">.</span>nodes <span class=\"token operator\">+=</span> <span class=\"token number\">1</span></pre></td></tr><tr><td data-num=\"42\"></td><td><pre>                <span class=\"token keyword\">else</span><span class=\"token punctuation\">:</span> res <span class=\"token operator\">+=</span> <span class=\"token number\">1</span></pre></td></tr><tr><td data-num=\"43\"></td><td><pre>        </pre></td></tr><tr><td data-num=\"44\"></td><td><pre>        <span class=\"token keyword\">return</span> res <span class=\"token keyword\">if</span> Alice<span class=\"token punctuation\">.</span>nodes <span class=\"token operator\">==</span> Bob<span class=\"token punctuation\">.</span>nodes <span class=\"token operator\">==</span> n <span class=\"token keyword\">else</span> <span class=\"token operator\">-</span><span class=\"token number\">1</span></pre></td></tr></table></figure></div>\n",
            "tags": [
                "Coding",
                "Leetcode",
                "Hard",
                "Union Find",
                "Leetcode",
                "Hard",
                "Graph"
            ]
        },
        {
            "id": "https://chienikao.github.io/2023/04/28/Algorithm/Union%20Find/",
            "url": "https://chienikao.github.io/2023/04/28/Algorithm/Union%20Find/",
            "title": "Union Find",
            "date_published": "2023-04-28T02:43:29.000Z",
            "content_html": "<p><strong>Union-Find data structure</strong> 又稱 <strong>Disjoint-set data structure</strong>，用於<strong>處理不相交集合 (disjoint set) 的合併 (Union) 與查詢 (Find) 問題。</strong></p>\n<h2 id=\"disjoint-set\"><a class=\"anchor\" href=\"#disjoint-set\">#</a> Disjoint Set</h2>\n<p><em><strong>Disjoint set</strong></em> 表示數個 set 之間，擁有的元素都不相同，彼此<strong>互斥 (disjoint)</strong>。</p>\n<p>可以去看看這篇文章 - <span class=\"exturl\" data-url=\"aHR0cHM6Ly9oYWNrbWQuaW8vQENMS08vcmtSVlNfby00P3R5cGU9dmlldw==\">disjoint set</span></p>\n<h2 id=\"union-find-algorithm\"><a class=\"anchor\" href=\"#union-find-algorithm\">#</a> Union Find Algorithm</h2>\n<!-- 補forest資料結構 -->\n<p>Union-Find Data Structure 是一種 <a href=\"\"><strong>forest</strong></a> 結構，forest 是一種 N-way Tree 結構，互相連通的節點放在同一個 set，任意選擇其中一個節點作為 root。</p>\n<p><img data-src=\"https://i.imgur.com/606kd33.png\" alt=\"\"></p>\n<p>Union Find 提供以下兩種操作:</p>\n<ul>\n<li>\n<p><strong>Find:</strong> 找到 input 節點的 root，可以藉此確定 input 節點屬於哪個子集。</p>\n<ul>\n<li>Find 函數能夠找到節點的 root。</li>\n<li>如果要確認兩個節點是否為同一子集，只要分別找兩個節點的 root ，如果一樣，即屬於同一子集 (為 connected component)。</li>\n<li>Find 的時間複雜度最差就是遍歷整棵樹，時間複雜度為 O (n)。</li>\n</ul>\n</li>\n<li>\n<p><strong>Union:</strong> 將兩個子集合併為同一子集。</p>\n<ul>\n<li>Union 能夠將兩個所屬的子集進行合併。</li>\n<li>最簡單的方法就是將一個子集的 root 直接作為另一子集 root 的子節點即可</li>\n</ul>\n<p><img data-src=\"https://i.imgur.com/Z3V1vnw.png\" alt=\"\"></p>\n<ul>\n<li>Union 的實踐需要依靠 find，因此時間複雜度最差為 O (n)。</li>\n</ul>\n</li>\n</ul>\n<p>以上圖的兩個樹來說，以 0 為 root 的樹大於以 2 為 root 的樹，如果將後者合併到前者下，合併過後的樹高度會比較小，根據這個觀察可以歸納出，如果兩個子集要合併，應該讓<strong>高度較小的子集合併到高度比較大的子集下</strong>，可以避免樹的不平衡。</p>\n<h2 id=\"find-with-path-compression\"><a class=\"anchor\" href=\"#find-with-path-compression\">#</a> Find with Path Compression</h2>\n<p>Path compression 是一個優化技巧，也有人稱為 set collapsing, <strong>讓每個節點直接連到它的 root 節點</strong>，這樣 Find 跟 Union 操作的時間複雜度可以降到 O (1)。</p>\n<p><img data-src=\"https://i.imgur.com/0Nl0hMt.png\" alt=\"\"></p>\n<p>但要如何有效地讓所有節點 parent node 都指向 root 呢？<br>\n 答案就是透過<strong>遞迴</strong>，透過遞迴找到 root， 再依序回傳更新為每個走訪過的 parent。</p>\n<figure class=\"highlight cpp\"><figcaption data-lang=\"C++\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre><span class=\"token keyword\">int</span> <span class=\"token function\">find</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">int</span> x<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"2\"></td><td><pre>    <span class=\"token keyword\">if</span> <span class=\"token punctuation\">(</span>x <span class=\"token operator\">==</span> root<span class=\"token punctuation\">[</span>x<span class=\"token punctuation\">]</span><span class=\"token punctuation\">)</span> <span class=\"token keyword\">return</span> x<span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"3\"></td><td><pre>    <span class=\"token keyword\">return</span> root<span class=\"token punctuation\">[</span>x<span class=\"token punctuation\">]</span> <span class=\"token operator\">=</span> <span class=\"token function\">find</span><span class=\"token punctuation\">(</span>root<span class=\"token punctuation\">[</span>x<span class=\"token punctuation\">]</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"4\"></td><td><pre><span class=\"token punctuation\">&#125;</span></pre></td></tr></table></figure><h2 id=\"union-by-sizerank\"><a class=\"anchor\" href=\"#union-by-sizerank\">#</a> Union by Size/Rank</h2>\n<p>應用 <em><strong>path compression</strong></em> 後的樹可以盡可能縮減樹的高度 ，若要再 Union 兩個壓縮後的子集，可以採取 <em><strong>union by size</strong></em> 技巧，<strong>將子節點比較少的 root 加入比較大的子集。</strong></p>\n<p>依照 rank 來排序，起初每個點的 rank 均為 0 ，依據 rank 大小來決定如何合併，<strong>rank 大的子集合併小的，合併別人的子集其 rank 往上增加。</strong></p>\n<figure class=\"highlight cpp\"><figcaption data-lang=\"C++\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre><span class=\"token keyword\">void</span> <span class=\"token function\">unionSet</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">int</span> x<span class=\"token punctuation\">,</span> <span class=\"token keyword\">int</span> y<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"2\"></td><td><pre>    <span class=\"token keyword\">int</span> root_x <span class=\"token operator\">=</span> <span class=\"token function\">find</span><span class=\"token punctuation\">(</span>x<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"3\"></td><td><pre>    <span class=\"token keyword\">int</span> root_y <span class=\"token operator\">=</span> <span class=\"token function\">find</span><span class=\"token punctuation\">(</span>y<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"4\"></td><td><pre>    <span class=\"token keyword\">if</span> <span class=\"token punctuation\">(</span>root_x <span class=\"token operator\">==</span> root_y<span class=\"token punctuation\">)</span> <span class=\"token keyword\">return</span> <span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"5\"></td><td><pre>    <span class=\"token keyword\">if</span> <span class=\"token punctuation\">(</span>rank<span class=\"token punctuation\">[</span>root_x<span class=\"token punctuation\">]</span> <span class=\"token operator\">></span> rank<span class=\"token punctuation\">[</span>root_y<span class=\"token punctuation\">]</span><span class=\"token punctuation\">)</span> root<span class=\"token punctuation\">[</span>root_y<span class=\"token punctuation\">]</span> <span class=\"token operator\">=</span> root_x<span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"6\"></td><td><pre>    <span class=\"token keyword\">else</span> <span class=\"token keyword\">if</span> <span class=\"token punctuation\">(</span>rank<span class=\"token punctuation\">[</span>root_x<span class=\"token punctuation\">]</span> <span class=\"token operator\">&lt;</span> rank<span class=\"token punctuation\">[</span>root_y<span class=\"token punctuation\">]</span><span class=\"token punctuation\">)</span> root<span class=\"token punctuation\">[</span>root_x<span class=\"token punctuation\">]</span> <span class=\"token operator\">=</span> root_y<span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"7\"></td><td><pre>    <span class=\"token keyword\">else</span> <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"8\"></td><td><pre>        root<span class=\"token punctuation\">[</span>root_y<span class=\"token punctuation\">]</span> <span class=\"token operator\">=</span> root_x<span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"9\"></td><td><pre>        rank<span class=\"token punctuation\">[</span>root_x<span class=\"token punctuation\">]</span><span class=\"token operator\">++</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"10\"></td><td><pre>    <span class=\"token punctuation\">&#125;</span>  </pre></td></tr><tr><td data-num=\"11\"></td><td><pre><span class=\"token punctuation\">&#125;</span></pre></td></tr></table></figure><p>一開始每個點的  <code>rank</code>  都為 0 ，有一點特別容易寫出 bug ，在比較彼此  <code>rank</code>  或是更新  <code>rank</code>  時候，需要以  <code>find()</code>  所找出的  <code>root</code>  來比，不是各個節點本身的  <code>rank</code>  。</p>\n",
            "tags": [
                "Algorithm",
                "Algorithm",
                "Data Structure",
                "Union Find"
            ]
        },
        {
            "id": "https://chienikao.github.io/2023/04/28/Coding/leetcode/Hard/839%20Similar%20String%20Groups/",
            "url": "https://chienikao.github.io/2023/04/28/Coding/leetcode/Hard/839%20Similar%20String%20Groups/",
            "title": "839. Similar String Groups",
            "date_published": "2023-04-28T02:36:34.000Z",
            "content_html": "<p>⭐️⭐️⭐️</p>\n<h2 id=\"題目敘述\"><a class=\"anchor\" href=\"#題目敘述\">#</a> <span class=\"exturl\" data-url=\"aHR0cHM6Ly9sZWV0Y29kZS5jb20vcHJvYmxlbXMvc2ltaWxhci1zdHJpbmctZ3JvdXBzL2Rlc2NyaXB0aW9uLw==\">題目敘述</span></h2>\n<p>Two strings  <code>X</code>  and  <code>Y</code>  are similar if we can swap two letters (in different positions) of  <code>X</code> , so that it equals  <code>Y</code> . Also two strings  <code>X</code>  and  <code>Y</code>  are similar if they are equal.</p>\n<p>For example,  <code>&quot;tars&quot;</code>  and  <code>&quot;rats&quot;</code>  are similar (swapping at positions 0 and 2), and  <code>&quot;rats&quot;</code>  and  <code>&quot;arts&quot;</code>  are similar, but  <code>&quot;star&quot;</code>  is not similar to  <code>&quot;tars&quot;</code> ,  <code>&quot;rats&quot;</code> , or  <code>&quot;arts&quot;</code> .</p>\n<p>Together, these form two connected groups by similarity:  <code>&#123;&quot;tars&quot;, &quot;rats&quot;, &quot;arts&quot;&#125;</code>  and  <code>&#123;&quot;star&quot;&#125;</code> .  Notice that  <code>&quot;tars&quot;</code>  and  <code>&quot;arts&quot;</code>  are in the same group even though they are not similar.  Formally, each group is such that a word is in the group if and only if it is similar to at least one other word in the group.</p>\n<p>We are given a list  <code>strs</code>  of strings where every string in  <code>strs</code>  is an anagram of every other string in  <code>strs</code> . How many groups are there?</p>\n<h3 id=\"example-1\"><a class=\"anchor\" href=\"#example-1\">#</a> Example 1</h3>\n<blockquote>\n<p><strong>Input</strong>: strs = [“tars”,“rats”,“arts”,“star”]<br>\n<strong>Output</strong>: 2</p>\n</blockquote>\n<h3 id=\"example-2\"><a class=\"anchor\" href=\"#example-2\">#</a> Example 2</h3>\n<blockquote>\n<p><strong>Input</strong>: strs = [“omv”,“ovm”]<br>\n<strong>Output</strong>: 1</p>\n</blockquote>\n<h2 id=\"解題思路\"><a class=\"anchor\" href=\"#解題思路\">#</a> 解題思路</h2>\n<p>遍歷整個陣列將相似的字串組合為群組，最後輸出群組的數量。</p>\n<p>比對字串相似的方法，如果差異的字元數量大於 2，則兩字串不相似。</p>\n<p>Union Find 的部分可以參考這個文章 <a href=\"https://chienikao.github.io/2023/04/28/Algorithm/Union%20Find/\">連結</a></p>\n<h2 id=\"solution\"><a class=\"anchor\" href=\"#solution\">#</a> Solution</h2>\n<div class=\"tab\" data-id=\"code\" data-title=\"C++\">\n<figure class=\"highlight cpp\"><figcaption data-lang=\"C++\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre><span class=\"token keyword\">class</span> <span class=\"token class-name\">Solution</span> <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"2\"></td><td><pre><span class=\"token keyword\">public</span><span class=\"token operator\">:</span></pre></td></tr><tr><td data-num=\"3\"></td><td><pre>    vector<span class=\"token operator\">&lt;</span><span class=\"token keyword\">int</span><span class=\"token operator\">></span> parent<span class=\"token punctuation\">,</span> rank<span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"4\"></td><td><pre>    <span class=\"token keyword\">int</span> res<span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"5\"></td><td><pre>    <span class=\"token keyword\">bool</span> <span class=\"token function\">similar</span><span class=\"token punctuation\">(</span>string<span class=\"token operator\">&amp;</span> s1<span class=\"token punctuation\">,</span> string<span class=\"token operator\">&amp;</span> s2<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"6\"></td><td><pre>        <span class=\"token keyword\">if</span> <span class=\"token punctuation\">(</span>s1 <span class=\"token operator\">==</span> s2<span class=\"token punctuation\">)</span> <span class=\"token keyword\">return</span> <span class=\"token boolean\">true</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"7\"></td><td><pre>        <span class=\"token keyword\">int</span> diff <span class=\"token operator\">=</span> <span class=\"token number\">0</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"8\"></td><td><pre>        <span class=\"token keyword\">for</span> <span class=\"token punctuation\">(</span><span class=\"token keyword\">int</span> i<span class=\"token operator\">=</span><span class=\"token number\">0</span><span class=\"token punctuation\">;</span> i<span class=\"token operator\">&lt;</span>s1<span class=\"token punctuation\">.</span><span class=\"token function\">size</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span> i<span class=\"token operator\">++</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"9\"></td><td><pre>            <span class=\"token keyword\">if</span> <span class=\"token punctuation\">(</span>s1<span class=\"token punctuation\">[</span>i<span class=\"token punctuation\">]</span> <span class=\"token operator\">!=</span> s2<span class=\"token punctuation\">[</span>i<span class=\"token punctuation\">]</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"10\"></td><td><pre>                diff<span class=\"token operator\">++</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"11\"></td><td><pre>                <span class=\"token keyword\">if</span> <span class=\"token punctuation\">(</span>diff <span class=\"token operator\">></span> <span class=\"token number\">2</span><span class=\"token punctuation\">)</span> <span class=\"token keyword\">return</span> <span class=\"token boolean\">false</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"12\"></td><td><pre>            <span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"13\"></td><td><pre>        <span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"14\"></td><td><pre>        <span class=\"token keyword\">return</span> diff <span class=\"token operator\">==</span> <span class=\"token number\">2</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"15\"></td><td><pre>    <span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"16\"></td><td><pre></pre></td></tr><tr><td data-num=\"17\"></td><td><pre>    <span class=\"token keyword\">int</span> <span class=\"token function\">find</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">int</span> x<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"18\"></td><td><pre>        <span class=\"token keyword\">if</span> <span class=\"token punctuation\">(</span>x <span class=\"token operator\">==</span> parent<span class=\"token punctuation\">[</span>x<span class=\"token punctuation\">]</span><span class=\"token punctuation\">)</span> <span class=\"token keyword\">return</span> x<span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"19\"></td><td><pre>        <span class=\"token keyword\">return</span> parent<span class=\"token punctuation\">[</span>x<span class=\"token punctuation\">]</span> <span class=\"token operator\">=</span> <span class=\"token function\">find</span><span class=\"token punctuation\">(</span>parent<span class=\"token punctuation\">[</span>x<span class=\"token punctuation\">]</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"20\"></td><td><pre>    <span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"21\"></td><td><pre></pre></td></tr><tr><td data-num=\"22\"></td><td><pre>    <span class=\"token keyword\">void</span> <span class=\"token function\">unionSet</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">int</span> x<span class=\"token punctuation\">,</span> <span class=\"token keyword\">int</span> y<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"23\"></td><td><pre>        <span class=\"token keyword\">int</span> px <span class=\"token operator\">=</span> <span class=\"token function\">find</span><span class=\"token punctuation\">(</span>x<span class=\"token punctuation\">)</span><span class=\"token punctuation\">,</span> py <span class=\"token operator\">=</span> <span class=\"token function\">find</span><span class=\"token punctuation\">(</span>y<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"24\"></td><td><pre>        <span class=\"token keyword\">if</span> <span class=\"token punctuation\">(</span>px <span class=\"token operator\">==</span> py<span class=\"token punctuation\">)</span> <span class=\"token keyword\">return</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"25\"></td><td><pre>        <span class=\"token keyword\">if</span> <span class=\"token punctuation\">(</span>rank<span class=\"token punctuation\">[</span>px<span class=\"token punctuation\">]</span> <span class=\"token operator\">></span> rank<span class=\"token punctuation\">[</span>py<span class=\"token punctuation\">]</span><span class=\"token punctuation\">)</span> parent<span class=\"token punctuation\">[</span>py<span class=\"token punctuation\">]</span> <span class=\"token operator\">=</span> px<span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"26\"></td><td><pre>        <span class=\"token keyword\">else</span> <span class=\"token keyword\">if</span> <span class=\"token punctuation\">(</span>rank<span class=\"token punctuation\">[</span>px<span class=\"token punctuation\">]</span> <span class=\"token operator\">&lt;</span> rank<span class=\"token punctuation\">[</span>py<span class=\"token punctuation\">]</span><span class=\"token punctuation\">)</span> parent<span class=\"token punctuation\">[</span>px<span class=\"token punctuation\">]</span> <span class=\"token operator\">=</span> py<span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"27\"></td><td><pre>        <span class=\"token keyword\">else</span> <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"28\"></td><td><pre>            parent<span class=\"token punctuation\">[</span>py<span class=\"token punctuation\">]</span> <span class=\"token operator\">=</span> px<span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"29\"></td><td><pre>            rank<span class=\"token punctuation\">[</span>px<span class=\"token punctuation\">]</span> <span class=\"token operator\">++</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"30\"></td><td><pre>        <span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"31\"></td><td><pre>        res<span class=\"token operator\">--</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"32\"></td><td><pre>    <span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"33\"></td><td><pre></pre></td></tr><tr><td data-num=\"34\"></td><td><pre>    <span class=\"token keyword\">int</span> <span class=\"token function\">numSimilarGroups</span><span class=\"token punctuation\">(</span>vector<span class=\"token operator\">&lt;</span>string<span class=\"token operator\">></span><span class=\"token operator\">&amp;</span> strs<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"35\"></td><td><pre>        <span class=\"token keyword\">int</span> n <span class=\"token operator\">=</span> strs<span class=\"token punctuation\">.</span><span class=\"token function\">size</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"36\"></td><td><pre>        res <span class=\"token operator\">=</span> n<span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"37\"></td><td><pre>        parent<span class=\"token punctuation\">.</span><span class=\"token function\">resize</span><span class=\"token punctuation\">(</span>n<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"38\"></td><td><pre>        rank<span class=\"token punctuation\">.</span><span class=\"token function\">resize</span><span class=\"token punctuation\">(</span>n<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"39\"></td><td><pre>        <span class=\"token keyword\">for</span> <span class=\"token punctuation\">(</span><span class=\"token keyword\">int</span> i<span class=\"token operator\">=</span><span class=\"token number\">0</span><span class=\"token punctuation\">;</span> i<span class=\"token operator\">&lt;</span>n<span class=\"token punctuation\">;</span> i<span class=\"token operator\">++</span><span class=\"token punctuation\">)</span> parent<span class=\"token punctuation\">[</span>i<span class=\"token punctuation\">]</span> <span class=\"token operator\">=</span> i<span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"40\"></td><td><pre>        <span class=\"token keyword\">for</span> <span class=\"token punctuation\">(</span><span class=\"token keyword\">int</span> i<span class=\"token operator\">=</span><span class=\"token number\">0</span><span class=\"token punctuation\">;</span> i<span class=\"token operator\">&lt;</span>n<span class=\"token punctuation\">;</span> i<span class=\"token operator\">++</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"41\"></td><td><pre>            <span class=\"token keyword\">for</span> <span class=\"token punctuation\">(</span><span class=\"token keyword\">int</span> j<span class=\"token operator\">=</span>i<span class=\"token operator\">+</span><span class=\"token number\">1</span><span class=\"token punctuation\">;</span> j<span class=\"token operator\">&lt;</span>n<span class=\"token punctuation\">;</span> j<span class=\"token operator\">++</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"42\"></td><td><pre>                <span class=\"token keyword\">if</span> <span class=\"token punctuation\">(</span><span class=\"token function\">similar</span><span class=\"token punctuation\">(</span>strs<span class=\"token punctuation\">[</span>i<span class=\"token punctuation\">]</span><span class=\"token punctuation\">,</span> strs<span class=\"token punctuation\">[</span>j<span class=\"token punctuation\">]</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span> <span class=\"token function\">unionSet</span><span class=\"token punctuation\">(</span>i<span class=\"token punctuation\">,</span> j<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"43\"></td><td><pre>            <span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"44\"></td><td><pre>        <span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"45\"></td><td><pre>        <span class=\"token keyword\">return</span> res<span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"46\"></td><td><pre>    <span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"47\"></td><td><pre><span class=\"token punctuation\">&#125;</span><span class=\"token punctuation\">;</span></pre></td></tr></table></figure></div>\n<div class=\"tab\" data-id=\"code\" data-title=\"Java\">\n<figure class=\"highlight java\"><figcaption data-lang=\"java\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre><span class=\"token keyword\">class</span> <span class=\"token class-name\">Solution</span> <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"2\"></td><td><pre>    <span class=\"token keyword\">class</span> <span class=\"token class-name\">UnionFind</span> <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"3\"></td><td><pre>        <span class=\"token keyword\">int</span><span class=\"token punctuation\">[</span><span class=\"token punctuation\">]</span> parent<span class=\"token punctuation\">,</span> rank<span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"4\"></td><td><pre>        <span class=\"token keyword\">int</span> count<span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"5\"></td><td><pre></pre></td></tr><tr><td data-num=\"6\"></td><td><pre>        <span class=\"token keyword\">public</span> <span class=\"token class-name\">UnionFind</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">int</span> n<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"7\"></td><td><pre>            parent <span class=\"token operator\">=</span> <span class=\"token keyword\">new</span> <span class=\"token keyword\">int</span><span class=\"token punctuation\">[</span>n<span class=\"token punctuation\">]</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"8\"></td><td><pre>            rank <span class=\"token operator\">=</span> <span class=\"token keyword\">new</span> <span class=\"token keyword\">int</span><span class=\"token punctuation\">[</span>n<span class=\"token punctuation\">]</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"9\"></td><td><pre>            count <span class=\"token operator\">=</span> n<span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"10\"></td><td><pre></pre></td></tr><tr><td data-num=\"11\"></td><td><pre>            <span class=\"token keyword\">for</span> <span class=\"token punctuation\">(</span><span class=\"token keyword\">int</span> i <span class=\"token operator\">=</span> <span class=\"token number\">0</span><span class=\"token punctuation\">;</span> i <span class=\"token operator\">&lt;</span> n<span class=\"token punctuation\">;</span> i<span class=\"token operator\">++</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"12\"></td><td><pre>                parent<span class=\"token punctuation\">[</span>i<span class=\"token punctuation\">]</span> <span class=\"token operator\">=</span> i<span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"13\"></td><td><pre>            <span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"14\"></td><td><pre>        <span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"15\"></td><td><pre></pre></td></tr><tr><td data-num=\"16\"></td><td><pre>        <span class=\"token keyword\">public</span> <span class=\"token keyword\">int</span> <span class=\"token function\">find</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">int</span> x<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"17\"></td><td><pre>            <span class=\"token keyword\">if</span> <span class=\"token punctuation\">(</span>parent<span class=\"token punctuation\">[</span>x<span class=\"token punctuation\">]</span> <span class=\"token operator\">!=</span> x<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"18\"></td><td><pre>                parent<span class=\"token punctuation\">[</span>x<span class=\"token punctuation\">]</span> <span class=\"token operator\">=</span> <span class=\"token function\">find</span><span class=\"token punctuation\">(</span>parent<span class=\"token punctuation\">[</span>x<span class=\"token punctuation\">]</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"19\"></td><td><pre>            <span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"20\"></td><td><pre>            <span class=\"token keyword\">return</span> parent<span class=\"token punctuation\">[</span>x<span class=\"token punctuation\">]</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"21\"></td><td><pre>        <span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"22\"></td><td><pre></pre></td></tr><tr><td data-num=\"23\"></td><td><pre>        <span class=\"token keyword\">public</span> <span class=\"token keyword\">boolean</span> <span class=\"token function\">union</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">int</span> x<span class=\"token punctuation\">,</span> <span class=\"token keyword\">int</span> y<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"24\"></td><td><pre>            <span class=\"token keyword\">int</span> rootX <span class=\"token operator\">=</span> <span class=\"token function\">find</span><span class=\"token punctuation\">(</span>x<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"25\"></td><td><pre>            <span class=\"token keyword\">int</span> rootY <span class=\"token operator\">=</span> <span class=\"token function\">find</span><span class=\"token punctuation\">(</span>y<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"26\"></td><td><pre></pre></td></tr><tr><td data-num=\"27\"></td><td><pre>            <span class=\"token keyword\">if</span> <span class=\"token punctuation\">(</span>rootX <span class=\"token operator\">==</span> rootY<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"28\"></td><td><pre>                <span class=\"token keyword\">return</span> <span class=\"token boolean\">false</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"29\"></td><td><pre>            <span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"30\"></td><td><pre></pre></td></tr><tr><td data-num=\"31\"></td><td><pre>            <span class=\"token keyword\">if</span> <span class=\"token punctuation\">(</span>rank<span class=\"token punctuation\">[</span>rootX<span class=\"token punctuation\">]</span> <span class=\"token operator\">&lt;</span> rank<span class=\"token punctuation\">[</span>rootY<span class=\"token punctuation\">]</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"32\"></td><td><pre>                <span class=\"token keyword\">int</span> temp <span class=\"token operator\">=</span> rootX<span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"33\"></td><td><pre>                rootX <span class=\"token operator\">=</span> rootY<span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"34\"></td><td><pre>                rootY <span class=\"token operator\">=</span> temp<span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"35\"></td><td><pre>            <span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"36\"></td><td><pre></pre></td></tr><tr><td data-num=\"37\"></td><td><pre>            parent<span class=\"token punctuation\">[</span>rootY<span class=\"token punctuation\">]</span> <span class=\"token operator\">=</span> rootX<span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"38\"></td><td><pre></pre></td></tr><tr><td data-num=\"39\"></td><td><pre>            <span class=\"token keyword\">if</span> <span class=\"token punctuation\">(</span>rank<span class=\"token punctuation\">[</span>rootX<span class=\"token punctuation\">]</span> <span class=\"token operator\">==</span> rank<span class=\"token punctuation\">[</span>rootY<span class=\"token punctuation\">]</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"40\"></td><td><pre>                rank<span class=\"token punctuation\">[</span>rootX<span class=\"token punctuation\">]</span><span class=\"token operator\">++</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"41\"></td><td><pre>            <span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"42\"></td><td><pre></pre></td></tr><tr><td data-num=\"43\"></td><td><pre>            count<span class=\"token operator\">--</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"44\"></td><td><pre></pre></td></tr><tr><td data-num=\"45\"></td><td><pre>            <span class=\"token keyword\">return</span> <span class=\"token boolean\">true</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"46\"></td><td><pre>        <span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"47\"></td><td><pre></pre></td></tr><tr><td data-num=\"48\"></td><td><pre>        <span class=\"token keyword\">public</span> <span class=\"token keyword\">int</span> <span class=\"token function\">getCount</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"49\"></td><td><pre>            <span class=\"token keyword\">return</span> count<span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"50\"></td><td><pre>        <span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"51\"></td><td><pre>    <span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"52\"></td><td><pre></pre></td></tr><tr><td data-num=\"53\"></td><td><pre>    <span class=\"token keyword\">public</span> <span class=\"token keyword\">int</span> <span class=\"token function\">numSimilarGroups</span><span class=\"token punctuation\">(</span><span class=\"token class-name\">String</span><span class=\"token punctuation\">[</span><span class=\"token punctuation\">]</span> strs<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"54\"></td><td><pre>        <span class=\"token keyword\">int</span> n <span class=\"token operator\">=</span> strs<span class=\"token punctuation\">.</span>length<span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"55\"></td><td><pre>        <span class=\"token class-name\">UnionFind</span> uf <span class=\"token operator\">=</span> <span class=\"token keyword\">new</span> <span class=\"token class-name\">UnionFind</span><span class=\"token punctuation\">(</span>n<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"56\"></td><td><pre></pre></td></tr><tr><td data-num=\"57\"></td><td><pre>        <span class=\"token keyword\">for</span> <span class=\"token punctuation\">(</span><span class=\"token keyword\">int</span> i <span class=\"token operator\">=</span> <span class=\"token number\">0</span><span class=\"token punctuation\">;</span> i <span class=\"token operator\">&lt;</span> n<span class=\"token punctuation\">;</span> i<span class=\"token operator\">++</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"58\"></td><td><pre>            <span class=\"token keyword\">for</span> <span class=\"token punctuation\">(</span><span class=\"token keyword\">int</span> j <span class=\"token operator\">=</span> i <span class=\"token operator\">+</span> <span class=\"token number\">1</span><span class=\"token punctuation\">;</span> j <span class=\"token operator\">&lt;</span> n<span class=\"token punctuation\">;</span> j<span class=\"token operator\">++</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"59\"></td><td><pre>                <span class=\"token keyword\">if</span> <span class=\"token punctuation\">(</span><span class=\"token function\">isSimilar</span><span class=\"token punctuation\">(</span>strs<span class=\"token punctuation\">[</span>i<span class=\"token punctuation\">]</span><span class=\"token punctuation\">,</span> strs<span class=\"token punctuation\">[</span>j<span class=\"token punctuation\">]</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"60\"></td><td><pre>                    uf<span class=\"token punctuation\">.</span><span class=\"token function\">union</span><span class=\"token punctuation\">(</span>i<span class=\"token punctuation\">,</span> j<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"61\"></td><td><pre>                <span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"62\"></td><td><pre>            <span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"63\"></td><td><pre>        <span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"64\"></td><td><pre></pre></td></tr><tr><td data-num=\"65\"></td><td><pre>        <span class=\"token keyword\">return</span> uf<span class=\"token punctuation\">.</span><span class=\"token function\">getCount</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"66\"></td><td><pre>    <span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"67\"></td><td><pre></pre></td></tr><tr><td data-num=\"68\"></td><td><pre>    <span class=\"token keyword\">private</span> <span class=\"token keyword\">boolean</span> <span class=\"token function\">isSimilar</span><span class=\"token punctuation\">(</span><span class=\"token class-name\">String</span> s1<span class=\"token punctuation\">,</span> <span class=\"token class-name\">String</span> s2<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"69\"></td><td><pre>        <span class=\"token keyword\">if</span> <span class=\"token punctuation\">(</span>s1<span class=\"token punctuation\">.</span><span class=\"token function\">equals</span><span class=\"token punctuation\">(</span>s2<span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"70\"></td><td><pre>            <span class=\"token keyword\">return</span> <span class=\"token boolean\">true</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"71\"></td><td><pre>        <span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"72\"></td><td><pre></pre></td></tr><tr><td data-num=\"73\"></td><td><pre>        <span class=\"token keyword\">int</span> diff <span class=\"token operator\">=</span> <span class=\"token number\">0</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"74\"></td><td><pre>        <span class=\"token keyword\">for</span> <span class=\"token punctuation\">(</span><span class=\"token keyword\">int</span> i <span class=\"token operator\">=</span> <span class=\"token number\">0</span><span class=\"token punctuation\">;</span> i <span class=\"token operator\">&lt;</span> s1<span class=\"token punctuation\">.</span><span class=\"token function\">length</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span> i<span class=\"token operator\">++</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"75\"></td><td><pre>            <span class=\"token keyword\">if</span> <span class=\"token punctuation\">(</span>s1<span class=\"token punctuation\">.</span><span class=\"token function\">charAt</span><span class=\"token punctuation\">(</span>i<span class=\"token punctuation\">)</span> <span class=\"token operator\">!=</span> s2<span class=\"token punctuation\">.</span><span class=\"token function\">charAt</span><span class=\"token punctuation\">(</span>i<span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"76\"></td><td><pre>                diff<span class=\"token operator\">++</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"77\"></td><td><pre>                <span class=\"token keyword\">if</span> <span class=\"token punctuation\">(</span>diff <span class=\"token operator\">></span> <span class=\"token number\">2</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"78\"></td><td><pre>                    <span class=\"token keyword\">return</span> <span class=\"token boolean\">false</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"79\"></td><td><pre>                <span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"80\"></td><td><pre>            <span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"81\"></td><td><pre>        <span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"82\"></td><td><pre></pre></td></tr><tr><td data-num=\"83\"></td><td><pre>        <span class=\"token keyword\">return</span> diff <span class=\"token operator\">==</span> <span class=\"token number\">2</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"84\"></td><td><pre>    <span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"85\"></td><td><pre><span class=\"token punctuation\">&#125;</span></pre></td></tr></table></figure></div>\n<div class=\"tab\" data-id=\"code\" data-title=\"Python\">\n<figure class=\"highlight python\"><figcaption data-lang=\"python\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre><span class=\"token keyword\">class</span> <span class=\"token class-name\">UnionFind</span><span class=\"token punctuation\">:</span></pre></td></tr><tr><td data-num=\"2\"></td><td><pre>    <span class=\"token keyword\">def</span> <span class=\"token function\">__init__</span><span class=\"token punctuation\">(</span>self<span class=\"token punctuation\">,</span> n<span class=\"token punctuation\">)</span><span class=\"token punctuation\">:</span></pre></td></tr><tr><td data-num=\"3\"></td><td><pre>        self<span class=\"token punctuation\">.</span>parent <span class=\"token operator\">=</span> <span class=\"token builtin\">list</span><span class=\"token punctuation\">(</span><span class=\"token builtin\">range</span><span class=\"token punctuation\">(</span>n<span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span></pre></td></tr><tr><td data-num=\"4\"></td><td><pre>        self<span class=\"token punctuation\">.</span>rank <span class=\"token operator\">=</span> <span class=\"token punctuation\">[</span><span class=\"token number\">0</span><span class=\"token punctuation\">]</span> <span class=\"token operator\">*</span> n</pre></td></tr><tr><td data-num=\"5\"></td><td><pre>        self<span class=\"token punctuation\">.</span>count <span class=\"token operator\">=</span> n</pre></td></tr><tr><td data-num=\"6\"></td><td><pre></pre></td></tr><tr><td data-num=\"7\"></td><td><pre>    <span class=\"token keyword\">def</span> <span class=\"token function\">find</span><span class=\"token punctuation\">(</span>self<span class=\"token punctuation\">,</span> x<span class=\"token punctuation\">)</span><span class=\"token punctuation\">:</span></pre></td></tr><tr><td data-num=\"8\"></td><td><pre>        <span class=\"token keyword\">if</span> self<span class=\"token punctuation\">.</span>parent<span class=\"token punctuation\">[</span>x<span class=\"token punctuation\">]</span> <span class=\"token operator\">!=</span> x<span class=\"token punctuation\">:</span></pre></td></tr><tr><td data-num=\"9\"></td><td><pre>            self<span class=\"token punctuation\">.</span>parent<span class=\"token punctuation\">[</span>x<span class=\"token punctuation\">]</span> <span class=\"token operator\">=</span> self<span class=\"token punctuation\">.</span>find<span class=\"token punctuation\">(</span>self<span class=\"token punctuation\">.</span>parent<span class=\"token punctuation\">[</span>x<span class=\"token punctuation\">]</span><span class=\"token punctuation\">)</span></pre></td></tr><tr><td data-num=\"10\"></td><td><pre>        <span class=\"token keyword\">return</span> self<span class=\"token punctuation\">.</span>parent<span class=\"token punctuation\">[</span>x<span class=\"token punctuation\">]</span></pre></td></tr><tr><td data-num=\"11\"></td><td><pre></pre></td></tr><tr><td data-num=\"12\"></td><td><pre>    <span class=\"token keyword\">def</span> <span class=\"token function\">union</span><span class=\"token punctuation\">(</span>self<span class=\"token punctuation\">,</span> x<span class=\"token punctuation\">,</span> y<span class=\"token punctuation\">)</span><span class=\"token punctuation\">:</span></pre></td></tr><tr><td data-num=\"13\"></td><td><pre>        root_x <span class=\"token operator\">=</span> self<span class=\"token punctuation\">.</span>find<span class=\"token punctuation\">(</span>x<span class=\"token punctuation\">)</span></pre></td></tr><tr><td data-num=\"14\"></td><td><pre>        root_y <span class=\"token operator\">=</span> self<span class=\"token punctuation\">.</span>find<span class=\"token punctuation\">(</span>y<span class=\"token punctuation\">)</span></pre></td></tr><tr><td data-num=\"15\"></td><td><pre></pre></td></tr><tr><td data-num=\"16\"></td><td><pre>        <span class=\"token keyword\">if</span> root_x <span class=\"token operator\">==</span> root_y<span class=\"token punctuation\">:</span></pre></td></tr><tr><td data-num=\"17\"></td><td><pre>            <span class=\"token keyword\">return</span> <span class=\"token boolean\">False</span></pre></td></tr><tr><td data-num=\"18\"></td><td><pre></pre></td></tr><tr><td data-num=\"19\"></td><td><pre>        <span class=\"token keyword\">if</span> self<span class=\"token punctuation\">.</span>rank<span class=\"token punctuation\">[</span>root_x<span class=\"token punctuation\">]</span> <span class=\"token operator\">&lt;</span> self<span class=\"token punctuation\">.</span>rank<span class=\"token punctuation\">[</span>root_y<span class=\"token punctuation\">]</span><span class=\"token punctuation\">:</span></pre></td></tr><tr><td data-num=\"20\"></td><td><pre>            root_x<span class=\"token punctuation\">,</span> root_y <span class=\"token operator\">=</span> root_y<span class=\"token punctuation\">,</span> root_x</pre></td></tr><tr><td data-num=\"21\"></td><td><pre></pre></td></tr><tr><td data-num=\"22\"></td><td><pre>        self<span class=\"token punctuation\">.</span>parent<span class=\"token punctuation\">[</span>root_y<span class=\"token punctuation\">]</span> <span class=\"token operator\">=</span> root_x</pre></td></tr><tr><td data-num=\"23\"></td><td><pre></pre></td></tr><tr><td data-num=\"24\"></td><td><pre>        <span class=\"token keyword\">if</span> self<span class=\"token punctuation\">.</span>rank<span class=\"token punctuation\">[</span>root_x<span class=\"token punctuation\">]</span> <span class=\"token operator\">==</span> self<span class=\"token punctuation\">.</span>rank<span class=\"token punctuation\">[</span>root_y<span class=\"token punctuation\">]</span><span class=\"token punctuation\">:</span></pre></td></tr><tr><td data-num=\"25\"></td><td><pre>            self<span class=\"token punctuation\">.</span>rank<span class=\"token punctuation\">[</span>root_x<span class=\"token punctuation\">]</span> <span class=\"token operator\">+=</span> <span class=\"token number\">1</span></pre></td></tr><tr><td data-num=\"26\"></td><td><pre></pre></td></tr><tr><td data-num=\"27\"></td><td><pre>        self<span class=\"token punctuation\">.</span>count <span class=\"token operator\">-=</span> <span class=\"token number\">1</span></pre></td></tr><tr><td data-num=\"28\"></td><td><pre></pre></td></tr><tr><td data-num=\"29\"></td><td><pre>        <span class=\"token keyword\">return</span> <span class=\"token boolean\">True</span></pre></td></tr><tr><td data-num=\"30\"></td><td><pre></pre></td></tr><tr><td data-num=\"31\"></td><td><pre><span class=\"token keyword\">class</span> <span class=\"token class-name\">Solution</span><span class=\"token punctuation\">:</span></pre></td></tr><tr><td data-num=\"32\"></td><td><pre>    <span class=\"token keyword\">def</span> <span class=\"token function\">numSimilarGroups</span><span class=\"token punctuation\">(</span>self<span class=\"token punctuation\">,</span> strs<span class=\"token punctuation\">:</span> List<span class=\"token punctuation\">[</span><span class=\"token builtin\">str</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">)</span> <span class=\"token operator\">-</span><span class=\"token operator\">></span> <span class=\"token builtin\">int</span><span class=\"token punctuation\">:</span></pre></td></tr><tr><td data-num=\"33\"></td><td><pre>        <span class=\"token keyword\">def</span> <span class=\"token function\">is_similar</span><span class=\"token punctuation\">(</span>s1<span class=\"token punctuation\">,</span> s2<span class=\"token punctuation\">)</span><span class=\"token punctuation\">:</span></pre></td></tr><tr><td data-num=\"34\"></td><td><pre>            <span class=\"token keyword\">if</span> s1 <span class=\"token operator\">==</span> s2<span class=\"token punctuation\">:</span></pre></td></tr><tr><td data-num=\"35\"></td><td><pre>                <span class=\"token keyword\">return</span> <span class=\"token boolean\">True</span></pre></td></tr><tr><td data-num=\"36\"></td><td><pre></pre></td></tr><tr><td data-num=\"37\"></td><td><pre>            diff <span class=\"token operator\">=</span> <span class=\"token number\">0</span></pre></td></tr><tr><td data-num=\"38\"></td><td><pre>            <span class=\"token keyword\">for</span> c1<span class=\"token punctuation\">,</span> c2 <span class=\"token keyword\">in</span> <span class=\"token builtin\">zip</span><span class=\"token punctuation\">(</span>s1<span class=\"token punctuation\">,</span> s2<span class=\"token punctuation\">)</span><span class=\"token punctuation\">:</span></pre></td></tr><tr><td data-num=\"39\"></td><td><pre>                <span class=\"token keyword\">if</span> c1 <span class=\"token operator\">!=</span> c2<span class=\"token punctuation\">:</span></pre></td></tr><tr><td data-num=\"40\"></td><td><pre>                    diff <span class=\"token operator\">+=</span> <span class=\"token number\">1</span></pre></td></tr><tr><td data-num=\"41\"></td><td><pre>                    <span class=\"token keyword\">if</span> diff <span class=\"token operator\">></span> <span class=\"token number\">2</span><span class=\"token punctuation\">:</span></pre></td></tr><tr><td data-num=\"42\"></td><td><pre>                        <span class=\"token keyword\">return</span> <span class=\"token boolean\">False</span></pre></td></tr><tr><td data-num=\"43\"></td><td><pre></pre></td></tr><tr><td data-num=\"44\"></td><td><pre>            <span class=\"token keyword\">return</span> diff <span class=\"token operator\">==</span> <span class=\"token number\">2</span></pre></td></tr><tr><td data-num=\"45\"></td><td><pre></pre></td></tr><tr><td data-num=\"46\"></td><td><pre>        n <span class=\"token operator\">=</span> <span class=\"token builtin\">len</span><span class=\"token punctuation\">(</span>strs<span class=\"token punctuation\">)</span></pre></td></tr><tr><td data-num=\"47\"></td><td><pre>        uf <span class=\"token operator\">=</span> UnionFind<span class=\"token punctuation\">(</span>n<span class=\"token punctuation\">)</span></pre></td></tr><tr><td data-num=\"48\"></td><td><pre></pre></td></tr><tr><td data-num=\"49\"></td><td><pre>        <span class=\"token keyword\">for</span> i <span class=\"token keyword\">in</span> <span class=\"token builtin\">range</span><span class=\"token punctuation\">(</span>n<span class=\"token punctuation\">)</span><span class=\"token punctuation\">:</span></pre></td></tr><tr><td data-num=\"50\"></td><td><pre>            <span class=\"token keyword\">for</span> j <span class=\"token keyword\">in</span> <span class=\"token builtin\">range</span><span class=\"token punctuation\">(</span>i <span class=\"token operator\">+</span> <span class=\"token number\">1</span><span class=\"token punctuation\">,</span> n<span class=\"token punctuation\">)</span><span class=\"token punctuation\">:</span></pre></td></tr><tr><td data-num=\"51\"></td><td><pre>                <span class=\"token keyword\">if</span> is_similar<span class=\"token punctuation\">(</span>strs<span class=\"token punctuation\">[</span>i<span class=\"token punctuation\">]</span><span class=\"token punctuation\">,</span> strs<span class=\"token punctuation\">[</span>j<span class=\"token punctuation\">]</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">:</span></pre></td></tr><tr><td data-num=\"52\"></td><td><pre>                    uf<span class=\"token punctuation\">.</span>union<span class=\"token punctuation\">(</span>i<span class=\"token punctuation\">,</span> j<span class=\"token punctuation\">)</span></pre></td></tr><tr><td data-num=\"53\"></td><td><pre></pre></td></tr><tr><td data-num=\"54\"></td><td><pre>        <span class=\"token keyword\">return</span> uf<span class=\"token punctuation\">.</span>count</pre></td></tr></table></figure></div>\n",
            "tags": [
                "Coding",
                "Leetcode",
                "Hard",
                "Union Find",
                "String",
                "Leetcode",
                "Array",
                "Depth-First Search",
                "Breadth-First Search",
                "Hard"
            ]
        },
        {
            "id": "https://chienikao.github.io/2023/04/27/Coding/leetcode/Medium/319%20Bulb%20Switcher/",
            "url": "https://chienikao.github.io/2023/04/27/Coding/leetcode/Medium/319%20Bulb%20Switcher/",
            "title": "319. Bulb Switcher",
            "date_published": "2023-04-27T07:16:09.000Z",
            "content_html": "<p>⭐️⭐️</p>\n<h2 id=\"題目敘述\"><a class=\"anchor\" href=\"#題目敘述\">#</a> <span class=\"exturl\" data-url=\"aHR0cHM6Ly9sZWV0Y29kZS5jb20vcHJvYmxlbXMvYnVsYi1zd2l0Y2hlci8=\">題目敘述</span></h2>\n<p>There are  <code>n</code>  bulbs that are initially off. You first turn on all the bulbs, then you turn off every second bulb.</p>\n<p>On the third round, you toggle every third bulb (turning on if it’s off or turning off if it’s on). For the  <code>ith</code>  round, you toggle every  <code>i</code>  bulb. For the  <code>nth</code>  round, you only toggle the last bulb.</p>\n<p>Return <em>the number of bulbs that are on after  <code>n</code>  rounds</em>.</p>\n<h3 id=\"example-1\"><a class=\"anchor\" href=\"#example-1\">#</a> Example 1</h3>\n<p><img data-src=\"https://i.imgur.com/JSh0QO5.png\" alt=\"\"></p>\n<blockquote>\n<p><strong>Input:</strong> n = 3<br>\n<strong>Output:</strong> 1<br>\n<strong>Explanation:</strong> At first, the three bulbs are [off, off, off].<br>\nAfter the first round, the three bulbs are [on, on, on].<br>\nAfter the second round, the three bulbs are [on, off, on].<br>\nAfter the third round, the three bulbs are [on, off, off].<br>\nSo you should return 1 because there is only one bulb is on.</p>\n</blockquote>\n<h3 id=\"example-2\"><a class=\"anchor\" href=\"#example-2\">#</a> Example 2</h3>\n<blockquote>\n<p><strong>Input:</strong> n = 0<br>\n<strong>Output:</strong> 0</p>\n</blockquote>\n<h3 id=\"example-3\"><a class=\"anchor\" href=\"#example-3\">#</a> Example 3</h3>\n<blockquote>\n<p><strong>Input:</strong> n = 1<br>\n<strong>Output:</strong> 1</p>\n</blockquote>\n<h2 id=\"solution\"><a class=\"anchor\" href=\"#solution\">#</a> Solution</h2>\n<div class=\"tab\" data-id=\"code\" data-title=\"C++\">\n<figure class=\"highlight cpp\"><figcaption data-lang=\"C++\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre><span class=\"token keyword\">class</span> <span class=\"token class-name\">Solution</span> <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"2\"></td><td><pre><span class=\"token keyword\">public</span><span class=\"token operator\">:</span></pre></td></tr><tr><td data-num=\"3\"></td><td><pre>    <span class=\"token keyword\">int</span> <span class=\"token function\">bulbSwitch</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">int</span> n<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"4\"></td><td><pre>        <span class=\"token keyword\">return</span> <span class=\"token punctuation\">(</span><span class=\"token keyword\">int</span><span class=\"token punctuation\">)</span> <span class=\"token function\">sqrt</span><span class=\"token punctuation\">(</span>n<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"5\"></td><td><pre>    <span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"6\"></td><td><pre><span class=\"token punctuation\">&#125;</span><span class=\"token punctuation\">;</span></pre></td></tr></table></figure></div>\n<div class=\"tab\" data-id=\"code\" data-title=\"Java\">\n<figure class=\"highlight java\"><figcaption data-lang=\"java\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre><span class=\"token keyword\">class</span> <span class=\"token class-name\">Solution</span> <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"2\"></td><td><pre>    <span class=\"token keyword\">public</span> <span class=\"token keyword\">int</span> <span class=\"token function\">bulbSwitch</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">int</span> n<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"3\"></td><td><pre>        <span class=\"token keyword\">return</span> <span class=\"token punctuation\">(</span><span class=\"token keyword\">int</span><span class=\"token punctuation\">)</span><span class=\"token class-name\">Math</span><span class=\"token punctuation\">.</span><span class=\"token function\">sqrt</span><span class=\"token punctuation\">(</span>n<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"4\"></td><td><pre>    <span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"5\"></td><td><pre><span class=\"token punctuation\">&#125;</span></pre></td></tr></table></figure></div>\n<div class=\"tab\" data-id=\"code\" data-title=\"Python\">\n<figure class=\"highlight python\"><figcaption data-lang=\"python\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre><span class=\"token keyword\">class</span> <span class=\"token class-name\">Solution</span><span class=\"token punctuation\">:</span></pre></td></tr><tr><td data-num=\"2\"></td><td><pre>    <span class=\"token keyword\">def</span> <span class=\"token function\">bulbSwitch</span><span class=\"token punctuation\">(</span>self<span class=\"token punctuation\">,</span> n<span class=\"token punctuation\">:</span> <span class=\"token builtin\">int</span><span class=\"token punctuation\">)</span> <span class=\"token operator\">-</span><span class=\"token operator\">></span> <span class=\"token builtin\">int</span><span class=\"token punctuation\">:</span> <span class=\"token keyword\">return</span> <span class=\"token builtin\">int</span><span class=\"token punctuation\">(</span>sqrt<span class=\"token punctuation\">(</span>n<span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span></pre></td></tr></table></figure></div>\n",
            "tags": [
                "Coding",
                "Leetcode",
                "Leetcode",
                "Math",
                "Medium",
                "Brainteaser"
            ]
        },
        {
            "id": "https://chienikao.github.io/2023/04/26/Coding/uva/Star1/uva%20706/",
            "url": "https://chienikao.github.io/2023/04/26/Coding/uva/Star1/uva%20706/",
            "title": "uva 706 - LC-Display",
            "date_published": "2023-04-26T02:42:29.000Z",
            "content_html": "<p>⭐️</p>\n<h2 id=\"題目連結\"><a class=\"anchor\" href=\"#題目連結\">#</a> 題目連結</h2>\n<ul>\n<li><span class=\"exturl\" data-url=\"aHR0cHM6Ly96ZXJvanVkZ2UudHcvU2hvd1Byb2JsZW0/cHJvYmxlbWlkPWMxMzU=\">ZeroJudge</span></li>\n<li><span class=\"exturl\" data-url=\"aHR0cHM6Ly9vbmxpbmVqdWRnZS5vcmcvZXh0ZXJuYWwvNy9wNzA2LnBkZg==\">題目連結</span></li>\n<li><span class=\"exturl\" data-url=\"aHR0cHM6Ly9vbmxpbmVqdWRnZS5vcmcvaW5kZXgucGhwP29wdGlvbj1jb21fb25saW5lanVkZ2UmYW1wO0l0ZW1pZD04JmFtcDtjYXRlZ29yeT05JmFtcDtwYWdlPXNob3dfcHJvYmxlbSZhbXA7cHJvYmxlbT02NDc=\">Online Judge</span></li>\n<li><span class=\"exturl\" data-url=\"aHR0cHM6Ly93d3cudWRlYnVnLmNvbS9VVmEvNzA2\">uDebug</span></li>\n</ul>\n<h2 id=\"題目敘述\"><a class=\"anchor\" href=\"#題目敘述\">#</a> 題目敘述</h2>\n<p>A friend of you has just bought a new computer. Until now, the most powerful computer he ever used has been a pocket calculator. Now, looking at his new computer, he is a bit disappointed, because he liked the LC-display of his calculator so much. So you decide to write a program that displays numbers in an LC-display-like style on his computer.</p>\n<h2 id=\"input\"><a class=\"anchor\" href=\"#input\">#</a> Input</h2>\n<p>The input file contains several lines, one for each number to be displayed. Each line contains two integers  <code>s</code> ,  <code>n</code>  ( <code>1 ≤ s ≤ 10</code> ,  <code>0 ≤ n ≤ 99 999 999</code> ), where  <code>n</code>  is the number to be displayed and  <code>s</code>  is the size in which it shall be displayed.</p>\n<p>The input file will be terminated by a line containing two zeros. This line should not be processed.</p>\n<h2 id=\"output\"><a class=\"anchor\" href=\"#output\">#</a> Output</h2>\n<p>Output the numbers given in the input file in an LC-display-style using  <code>s</code>  ‘-’ signs for the horizontal segments and  <code>s</code>  ‘|’ signs for the vertical ones. Each digit occupies exactly  <code>s + 2</code>  columns and  <code>2s + 3</code>  rows. (Be sure to fill all the white space occupied by the digits with blanks, also for the last digit.) <em>There has to be exactly one column of blanks between two digits</em>.</p>\n<p><em>Output a blank line after each number</em>. (You will find a sample of each digit in the sample output.)</p>\n<h2 id=\"sample-input\"><a class=\"anchor\" href=\"#sample-input\">#</a> Sample Input</h2>\n<blockquote>\n<p>2 12345<br>\n3 67890<br>\n0 0</p>\n</blockquote>\n<h2 id=\"sample-output\"><a class=\"anchor\" href=\"#sample-output\">#</a> Sample Output</h2>\n<p><img data-src=\"https://i.imgur.com/1yA2BuX.png\" alt=\"\"></p>\n<h2 id=\"solution\"><a class=\"anchor\" href=\"#solution\">#</a> Solution</h2>\n<figure class=\"highlight c\"><figcaption data-lang=\"c\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre><span class=\"token macro property\"><span class=\"token directive-hash\">#</span><span class=\"token directive keyword\">include</span> <span class=\"token string\">&lt;bits/stdc++.h></span></span></pre></td></tr><tr><td data-num=\"2\"></td><td><pre></pre></td></tr><tr><td data-num=\"3\"></td><td><pre>using namespace std<span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"4\"></td><td><pre></pre></td></tr><tr><td data-num=\"5\"></td><td><pre><span class=\"token keyword\">int</span> <span class=\"token function\">main</span> <span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"6\"></td><td><pre>    <span class=\"token keyword\">int</span> s<span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"7\"></td><td><pre>    string str<span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"8\"></td><td><pre>    map<span class=\"token operator\">&lt;</span><span class=\"token keyword\">char</span><span class=\"token punctuation\">,</span> vector<span class=\"token operator\">&lt;</span>bool<span class=\"token operator\">>></span> mp<span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"9\"></td><td><pre>    mp<span class=\"token punctuation\">[</span><span class=\"token char\">'0'</span><span class=\"token punctuation\">]</span> <span class=\"token operator\">=</span> <span class=\"token punctuation\">&#123;</span>true<span class=\"token punctuation\">,</span> true<span class=\"token punctuation\">,</span> true<span class=\"token punctuation\">,</span> false<span class=\"token punctuation\">,</span> true<span class=\"token punctuation\">,</span> true<span class=\"token punctuation\">,</span> true<span class=\"token punctuation\">&#125;</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"10\"></td><td><pre>    mp<span class=\"token punctuation\">[</span><span class=\"token char\">'1'</span><span class=\"token punctuation\">]</span> <span class=\"token operator\">=</span> <span class=\"token punctuation\">&#123;</span>false<span class=\"token punctuation\">,</span> false<span class=\"token punctuation\">,</span> true<span class=\"token punctuation\">,</span> false<span class=\"token punctuation\">,</span> false<span class=\"token punctuation\">,</span> true<span class=\"token punctuation\">,</span> false<span class=\"token punctuation\">&#125;</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"11\"></td><td><pre>    mp<span class=\"token punctuation\">[</span><span class=\"token char\">'2'</span><span class=\"token punctuation\">]</span> <span class=\"token operator\">=</span> <span class=\"token punctuation\">&#123;</span>true<span class=\"token punctuation\">,</span> false<span class=\"token punctuation\">,</span> true<span class=\"token punctuation\">,</span> true<span class=\"token punctuation\">,</span> true<span class=\"token punctuation\">,</span> false<span class=\"token punctuation\">,</span> true<span class=\"token punctuation\">&#125;</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"12\"></td><td><pre>    mp<span class=\"token punctuation\">[</span><span class=\"token char\">'3'</span><span class=\"token punctuation\">]</span> <span class=\"token operator\">=</span> <span class=\"token punctuation\">&#123;</span>true<span class=\"token punctuation\">,</span> false<span class=\"token punctuation\">,</span> true<span class=\"token punctuation\">,</span> true<span class=\"token punctuation\">,</span> false<span class=\"token punctuation\">,</span> true<span class=\"token punctuation\">,</span> true<span class=\"token punctuation\">&#125;</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"13\"></td><td><pre>    mp<span class=\"token punctuation\">[</span><span class=\"token char\">'4'</span><span class=\"token punctuation\">]</span> <span class=\"token operator\">=</span> <span class=\"token punctuation\">&#123;</span>false<span class=\"token punctuation\">,</span> true<span class=\"token punctuation\">,</span> true<span class=\"token punctuation\">,</span> true<span class=\"token punctuation\">,</span> false<span class=\"token punctuation\">,</span> true<span class=\"token punctuation\">,</span> false<span class=\"token punctuation\">&#125;</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"14\"></td><td><pre>    mp<span class=\"token punctuation\">[</span><span class=\"token char\">'5'</span><span class=\"token punctuation\">]</span> <span class=\"token operator\">=</span> <span class=\"token punctuation\">&#123;</span>true<span class=\"token punctuation\">,</span> true<span class=\"token punctuation\">,</span> false<span class=\"token punctuation\">,</span> true<span class=\"token punctuation\">,</span> false<span class=\"token punctuation\">,</span> true<span class=\"token punctuation\">,</span> true<span class=\"token punctuation\">&#125;</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"15\"></td><td><pre>    mp<span class=\"token punctuation\">[</span><span class=\"token char\">'6'</span><span class=\"token punctuation\">]</span> <span class=\"token operator\">=</span> <span class=\"token punctuation\">&#123;</span>true<span class=\"token punctuation\">,</span> true<span class=\"token punctuation\">,</span> false<span class=\"token punctuation\">,</span> true<span class=\"token punctuation\">,</span> true<span class=\"token punctuation\">,</span> true<span class=\"token punctuation\">,</span> true<span class=\"token punctuation\">&#125;</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"16\"></td><td><pre>    mp<span class=\"token punctuation\">[</span><span class=\"token char\">'7'</span><span class=\"token punctuation\">]</span> <span class=\"token operator\">=</span> <span class=\"token punctuation\">&#123;</span>true<span class=\"token punctuation\">,</span> false<span class=\"token punctuation\">,</span> true<span class=\"token punctuation\">,</span> false<span class=\"token punctuation\">,</span> false<span class=\"token punctuation\">,</span> true<span class=\"token punctuation\">,</span> false<span class=\"token punctuation\">&#125;</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"17\"></td><td><pre>    mp<span class=\"token punctuation\">[</span><span class=\"token char\">'8'</span><span class=\"token punctuation\">]</span> <span class=\"token operator\">=</span> <span class=\"token punctuation\">&#123;</span>true<span class=\"token punctuation\">,</span> true<span class=\"token punctuation\">,</span> true<span class=\"token punctuation\">,</span> true<span class=\"token punctuation\">,</span> true<span class=\"token punctuation\">,</span> true<span class=\"token punctuation\">,</span> true<span class=\"token punctuation\">&#125;</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"18\"></td><td><pre>    mp<span class=\"token punctuation\">[</span><span class=\"token char\">'9'</span><span class=\"token punctuation\">]</span> <span class=\"token operator\">=</span> <span class=\"token punctuation\">&#123;</span>true<span class=\"token punctuation\">,</span> true<span class=\"token punctuation\">,</span> true<span class=\"token punctuation\">,</span> true<span class=\"token punctuation\">,</span> false<span class=\"token punctuation\">,</span> true<span class=\"token punctuation\">,</span> true<span class=\"token punctuation\">&#125;</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"19\"></td><td><pre>    <span class=\"token keyword\">while</span> <span class=\"token punctuation\">(</span>cin <span class=\"token operator\">>></span> s <span class=\"token operator\">>></span> str<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"20\"></td><td><pre>        <span class=\"token keyword\">if</span> <span class=\"token punctuation\">(</span>s <span class=\"token operator\">==</span> <span class=\"token number\">0</span> <span class=\"token operator\">&amp;&amp;</span> str <span class=\"token operator\">==</span> <span class=\"token string\">\"0\"</span><span class=\"token punctuation\">)</span> <span class=\"token keyword\">break</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"21\"></td><td><pre>        string l1 <span class=\"token operator\">=</span> <span class=\"token string\">\"\"</span><span class=\"token punctuation\">,</span> l2 <span class=\"token operator\">=</span> <span class=\"token string\">\"\"</span><span class=\"token punctuation\">,</span> l3 <span class=\"token operator\">=</span> <span class=\"token string\">\"\"</span><span class=\"token punctuation\">,</span> l4 <span class=\"token operator\">=</span> <span class=\"token string\">\"\"</span><span class=\"token punctuation\">,</span> l5 <span class=\"token operator\">=</span> <span class=\"token string\">\"\"</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"22\"></td><td><pre>        <span class=\"token keyword\">for</span> <span class=\"token punctuation\">(</span><span class=\"token keyword\">int</span> j<span class=\"token operator\">=</span><span class=\"token number\">0</span><span class=\"token punctuation\">;</span> j<span class=\"token operator\">&lt;</span>str<span class=\"token punctuation\">.</span><span class=\"token function\">size</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span> j<span class=\"token operator\">++</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"23\"></td><td><pre>            <span class=\"token keyword\">char</span> c <span class=\"token operator\">=</span> str<span class=\"token punctuation\">[</span>j<span class=\"token punctuation\">]</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"24\"></td><td><pre>            vector<span class=\"token operator\">&lt;</span>bool<span class=\"token operator\">></span> tmp <span class=\"token operator\">=</span> mp<span class=\"token punctuation\">[</span>c<span class=\"token punctuation\">]</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"25\"></td><td><pre>            l1 <span class=\"token operator\">+=</span> <span class=\"token string\">\" \"</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"26\"></td><td><pre>            <span class=\"token keyword\">if</span> <span class=\"token punctuation\">(</span>tmp<span class=\"token punctuation\">[</span><span class=\"token number\">0</span><span class=\"token punctuation\">]</span> <span class=\"token operator\">==</span> true<span class=\"token punctuation\">)</span> <span class=\"token keyword\">for</span> <span class=\"token punctuation\">(</span><span class=\"token keyword\">int</span> i<span class=\"token operator\">=</span><span class=\"token number\">1</span><span class=\"token punctuation\">;</span> i<span class=\"token operator\">&lt;=</span>s<span class=\"token punctuation\">;</span> i<span class=\"token operator\">++</span><span class=\"token punctuation\">)</span> l1 <span class=\"token operator\">+=</span> <span class=\"token string\">\"-\"</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"27\"></td><td><pre>            <span class=\"token keyword\">else</span> <span class=\"token keyword\">for</span> <span class=\"token punctuation\">(</span><span class=\"token keyword\">int</span> i<span class=\"token operator\">=</span><span class=\"token number\">1</span><span class=\"token punctuation\">;</span> i<span class=\"token operator\">&lt;=</span>s<span class=\"token punctuation\">;</span> i<span class=\"token operator\">++</span><span class=\"token punctuation\">)</span> l1 <span class=\"token operator\">+=</span> <span class=\"token string\">\" \"</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"28\"></td><td><pre>            l1 <span class=\"token operator\">+=</span> <span class=\"token string\">\" \"</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"29\"></td><td><pre></pre></td></tr><tr><td data-num=\"30\"></td><td><pre>            <span class=\"token keyword\">if</span> <span class=\"token punctuation\">(</span>tmp<span class=\"token punctuation\">[</span><span class=\"token number\">1</span><span class=\"token punctuation\">]</span> <span class=\"token operator\">==</span> true<span class=\"token punctuation\">)</span> l2 <span class=\"token operator\">+=</span> <span class=\"token string\">\"|\"</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"31\"></td><td><pre>            <span class=\"token keyword\">else</span> l2 <span class=\"token operator\">+=</span> <span class=\"token string\">\" \"</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"32\"></td><td><pre>            <span class=\"token keyword\">for</span> <span class=\"token punctuation\">(</span><span class=\"token keyword\">int</span> i<span class=\"token operator\">=</span><span class=\"token number\">1</span><span class=\"token punctuation\">;</span> i<span class=\"token operator\">&lt;=</span>s<span class=\"token punctuation\">;</span> i<span class=\"token operator\">++</span><span class=\"token punctuation\">)</span> l2 <span class=\"token operator\">+=</span> <span class=\"token string\">\" \"</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"33\"></td><td><pre>            <span class=\"token keyword\">if</span> <span class=\"token punctuation\">(</span>tmp<span class=\"token punctuation\">[</span><span class=\"token number\">2</span><span class=\"token punctuation\">]</span> <span class=\"token operator\">==</span> true<span class=\"token punctuation\">)</span> l2 <span class=\"token operator\">+=</span> <span class=\"token string\">\"|\"</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"34\"></td><td><pre>            <span class=\"token keyword\">else</span> l2 <span class=\"token operator\">+=</span> <span class=\"token string\">\" \"</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"35\"></td><td><pre></pre></td></tr><tr><td data-num=\"36\"></td><td><pre>            l3 <span class=\"token operator\">+=</span> <span class=\"token string\">\" \"</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"37\"></td><td><pre>            <span class=\"token keyword\">if</span> <span class=\"token punctuation\">(</span>tmp<span class=\"token punctuation\">[</span><span class=\"token number\">3</span><span class=\"token punctuation\">]</span> <span class=\"token operator\">==</span> true<span class=\"token punctuation\">)</span> <span class=\"token keyword\">for</span> <span class=\"token punctuation\">(</span><span class=\"token keyword\">int</span> i<span class=\"token operator\">=</span><span class=\"token number\">1</span><span class=\"token punctuation\">;</span> i<span class=\"token operator\">&lt;=</span>s<span class=\"token punctuation\">;</span> i<span class=\"token operator\">++</span><span class=\"token punctuation\">)</span> l3 <span class=\"token operator\">+=</span> <span class=\"token string\">\"-\"</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"38\"></td><td><pre>            <span class=\"token keyword\">else</span> <span class=\"token keyword\">for</span> <span class=\"token punctuation\">(</span><span class=\"token keyword\">int</span> i<span class=\"token operator\">=</span><span class=\"token number\">1</span><span class=\"token punctuation\">;</span> i<span class=\"token operator\">&lt;=</span>s<span class=\"token punctuation\">;</span> i<span class=\"token operator\">++</span><span class=\"token punctuation\">)</span> l3 <span class=\"token operator\">+=</span> <span class=\"token string\">\" \"</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"39\"></td><td><pre>            l3 <span class=\"token operator\">+=</span> <span class=\"token string\">\" \"</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"40\"></td><td><pre></pre></td></tr><tr><td data-num=\"41\"></td><td><pre>            <span class=\"token keyword\">if</span> <span class=\"token punctuation\">(</span>tmp<span class=\"token punctuation\">[</span><span class=\"token number\">4</span><span class=\"token punctuation\">]</span> <span class=\"token operator\">==</span> true<span class=\"token punctuation\">)</span> l4 <span class=\"token operator\">+=</span> <span class=\"token string\">\"|\"</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"42\"></td><td><pre>            <span class=\"token keyword\">else</span> l4 <span class=\"token operator\">+=</span> <span class=\"token string\">\" \"</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"43\"></td><td><pre>            <span class=\"token keyword\">for</span> <span class=\"token punctuation\">(</span><span class=\"token keyword\">int</span> i<span class=\"token operator\">=</span><span class=\"token number\">1</span><span class=\"token punctuation\">;</span> i<span class=\"token operator\">&lt;=</span>s<span class=\"token punctuation\">;</span> i<span class=\"token operator\">++</span><span class=\"token punctuation\">)</span> l4 <span class=\"token operator\">+=</span> <span class=\"token string\">\" \"</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"44\"></td><td><pre>            <span class=\"token keyword\">if</span> <span class=\"token punctuation\">(</span>tmp<span class=\"token punctuation\">[</span><span class=\"token number\">5</span><span class=\"token punctuation\">]</span> <span class=\"token operator\">==</span> true<span class=\"token punctuation\">)</span> l4 <span class=\"token operator\">+=</span> <span class=\"token string\">\"|\"</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"45\"></td><td><pre>            <span class=\"token keyword\">else</span> l4 <span class=\"token operator\">+=</span> <span class=\"token string\">\" \"</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"46\"></td><td><pre></pre></td></tr><tr><td data-num=\"47\"></td><td><pre>            l5 <span class=\"token operator\">+=</span> <span class=\"token string\">\" \"</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"48\"></td><td><pre>            <span class=\"token keyword\">if</span> <span class=\"token punctuation\">(</span>tmp<span class=\"token punctuation\">[</span><span class=\"token number\">6</span><span class=\"token punctuation\">]</span> <span class=\"token operator\">==</span> true<span class=\"token punctuation\">)</span> <span class=\"token keyword\">for</span> <span class=\"token punctuation\">(</span><span class=\"token keyword\">int</span> i<span class=\"token operator\">=</span><span class=\"token number\">1</span><span class=\"token punctuation\">;</span> i<span class=\"token operator\">&lt;=</span>s<span class=\"token punctuation\">;</span> i<span class=\"token operator\">++</span><span class=\"token punctuation\">)</span> l5 <span class=\"token operator\">+=</span> <span class=\"token string\">\"-\"</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"49\"></td><td><pre>            <span class=\"token keyword\">else</span> <span class=\"token keyword\">for</span> <span class=\"token punctuation\">(</span><span class=\"token keyword\">int</span> i<span class=\"token operator\">=</span><span class=\"token number\">1</span><span class=\"token punctuation\">;</span> i<span class=\"token operator\">&lt;=</span>s<span class=\"token punctuation\">;</span> i<span class=\"token operator\">++</span><span class=\"token punctuation\">)</span> l5 <span class=\"token operator\">+=</span> <span class=\"token string\">\" \"</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"50\"></td><td><pre>            l5 <span class=\"token operator\">+=</span> <span class=\"token string\">\" \"</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"51\"></td><td><pre></pre></td></tr><tr><td data-num=\"52\"></td><td><pre>            <span class=\"token keyword\">if</span> <span class=\"token punctuation\">(</span>j <span class=\"token operator\">!=</span> str<span class=\"token punctuation\">.</span><span class=\"token function\">size</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token operator\">-</span> <span class=\"token number\">1</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"53\"></td><td><pre>                l1 <span class=\"token operator\">+=</span> <span class=\"token string\">\" \"</span><span class=\"token punctuation\">;</span> l2 <span class=\"token operator\">+=</span> <span class=\"token string\">\" \"</span><span class=\"token punctuation\">;</span> l3 <span class=\"token operator\">+=</span> <span class=\"token string\">\" \"</span><span class=\"token punctuation\">;</span> l4 <span class=\"token operator\">+=</span> <span class=\"token string\">\" \"</span><span class=\"token punctuation\">;</span> l5 <span class=\"token operator\">+=</span> <span class=\"token string\">\" \"</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"54\"></td><td><pre>            <span class=\"token punctuation\">&#125;</span> </pre></td></tr><tr><td data-num=\"55\"></td><td><pre>                </pre></td></tr><tr><td data-num=\"56\"></td><td><pre>        <span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"57\"></td><td><pre></pre></td></tr><tr><td data-num=\"58\"></td><td><pre>        cout <span class=\"token operator\">&lt;&lt;</span> l1 <span class=\"token operator\">&lt;&lt;</span> endl<span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"59\"></td><td><pre>        <span class=\"token keyword\">for</span> <span class=\"token punctuation\">(</span><span class=\"token keyword\">int</span> i<span class=\"token operator\">=</span><span class=\"token number\">1</span><span class=\"token punctuation\">;</span> i<span class=\"token operator\">&lt;=</span>s<span class=\"token punctuation\">;</span> i<span class=\"token operator\">++</span><span class=\"token punctuation\">)</span> cout <span class=\"token operator\">&lt;&lt;</span> l2 <span class=\"token operator\">&lt;&lt;</span> endl<span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"60\"></td><td><pre>        cout <span class=\"token operator\">&lt;&lt;</span> l3 <span class=\"token operator\">&lt;&lt;</span> endl<span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"61\"></td><td><pre>        <span class=\"token keyword\">for</span> <span class=\"token punctuation\">(</span><span class=\"token keyword\">int</span> i<span class=\"token operator\">=</span><span class=\"token number\">1</span><span class=\"token punctuation\">;</span> i<span class=\"token operator\">&lt;=</span>s<span class=\"token punctuation\">;</span> i<span class=\"token operator\">++</span><span class=\"token punctuation\">)</span> cout <span class=\"token operator\">&lt;&lt;</span> l4 <span class=\"token operator\">&lt;&lt;</span> endl<span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"62\"></td><td><pre>        cout <span class=\"token operator\">&lt;&lt;</span> l5 <span class=\"token operator\">&lt;&lt;</span> endl <span class=\"token operator\">&lt;&lt;</span> endl<span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"63\"></td><td><pre>    <span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"64\"></td><td><pre>    <span class=\"token keyword\">return</span> <span class=\"token number\">0</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"65\"></td><td><pre><span class=\"token punctuation\">&#125;</span></pre></td></tr></table></figure>",
            "tags": [
                "Coding",
                "UVA",
                "Star1",
                "Star1",
                "CPE",
                "UVA"
            ]
        },
        {
            "id": "https://chienikao.github.io/2023/04/26/System%20Software/Ch01/Appendix_A/",
            "url": "https://chienikao.github.io/2023/04/26/System%20Software/Ch01/Appendix_A/",
            "title": "Appendix A",
            "date_published": "2023-04-26T01:33:29.000Z",
            "content_html": "<h1 id=\"appendix-a\"><a class=\"anchor\" href=\"#appendix-a\">#</a> Appendix A</h1>\n<p><img data-src=\"https://i.imgur.com/Jg7aXIF.png\" alt=\"\"><br>\n<img data-src=\"https://i.imgur.com/tgx79gp.png\" alt=\"\"><br>\n<img data-src=\"https://i.imgur.com/FvmdzSQ.png\" alt=\"\"><br>\n<img data-src=\"https://i.imgur.com/CVWEW1r.png\" alt=\"\"></p>\n",
            "tags": [
                "System Software",
                "Ch01",
                "System Software"
            ]
        },
        {
            "id": "https://chienikao.github.io/2023/04/26/System%20Software/Ch01/Ch01_example/",
            "url": "https://chienikao.github.io/2023/04/26/System%20Software/Ch01/Ch01_example/",
            "title": "Ch01 - Example",
            "date_published": "2023-04-26T01:33:29.000Z",
            "content_html": "<style>\n    font {\n        color: red;\n        font-weight: bold;\n    }\n</style>\n<h1 id=\"ch01-範例程式分析\"><a class=\"anchor\" href=\"#ch01-範例程式分析\">#</a> Ch01 - 範例程式分析</h1>\n<ul>\n<li><a href=\"./Appendix%20A.md\">Appendix A</a></li>\n<li>High Level Language 的部分是 pseudo-code\n<ul>\n<li>僅能代表大概相同的邏輯</li>\n<li>不保證這段 code 編譯成組合語言會和範例完全一樣</li>\n</ul>\n</li>\n</ul>\n<div class=\"note info\">\n<p><strong>判斷 format 的方法</strong></p>\n<ul>\n<li><strong>Relative Addressing</strong>: 必為 format 3</li>\n<li><strong>Immediate Addressing</strong>: 看常數大小\n<ul>\n<li>因為 format 3 的 disp 欄位有 12 bits，僅能表示 <span class=\"katex\"><span class=\"katex-mathml\"><math xmlns=\"http://www.w3.org/1998/Math/MathML\"><semantics><mrow><mo>−</mo><msup><mn>2</mn><mn>12</mn></msup></mrow><annotation encoding=\"application/x-tex\">-2^{12}</annotation></semantics></math></span><span class=\"katex-html\" aria-hidden=\"true\"><span class=\"base\"><span class=\"strut\" style=\"height:0.897438em;vertical-align:-0.08333em;\"></span><span class=\"mord\">−</span><span class=\"mord\"><span class=\"mord\">2</span><span class=\"msupsub\"><span class=\"vlist-t\"><span class=\"vlist-r\"><span class=\"vlist\" style=\"height:0.8141079999999999em;\"><span style=\"top:-3.063em;margin-right:0.05em;\"><span class=\"pstrut\" style=\"height:2.7em;\"></span><span class=\"sizing reset-size6 size3 mtight\"><span class=\"mord mtight\"><span class=\"mord mtight\">1</span><span class=\"mord mtight\">2</span></span></span></span></span></span></span></span></span></span></span></span> ~ <span class=\"katex\"><span class=\"katex-mathml\"><math xmlns=\"http://www.w3.org/1998/Math/MathML\"><semantics><mrow><msup><mn>2</mn><mn>12</mn></msup><mo>−</mo><mn>1</mn></mrow><annotation encoding=\"application/x-tex\">2^{12}-1</annotation></semantics></math></span><span class=\"katex-html\" aria-hidden=\"true\"><span class=\"base\"><span class=\"strut\" style=\"height:0.897438em;vertical-align:-0.08333em;\"></span><span class=\"mord\"><span class=\"mord\">2</span><span class=\"msupsub\"><span class=\"vlist-t\"><span class=\"vlist-r\"><span class=\"vlist\" style=\"height:0.8141079999999999em;\"><span style=\"top:-3.063em;margin-right:0.05em;\"><span class=\"pstrut\" style=\"height:2.7em;\"></span><span class=\"sizing reset-size6 size3 mtight\"><span class=\"mord mtight\"><span class=\"mord mtight\">1</span><span class=\"mord mtight\">2</span></span></span></span></span></span></span></span></span><span class=\"mspace\" style=\"margin-right:0.2222222222222222em;\"></span><span class=\"mbin\">−</span><span class=\"mspace\" style=\"margin-right:0.2222222222222222em;\"></span></span><span class=\"base\"><span class=\"strut\" style=\"height:0.64444em;vertical-align:0em;\"></span><span class=\"mord\">1</span></span></span></span></li>\n</ul>\n</li>\n<li><strong>Memory Access</strong>:  通常是 format 3</li>\n<li><strong>Operation 前有加號</strong>：通常是 format 4</li>\n</ul>\n</div>\n<div class=\"note info\">\n<p><strong>判斷是否存取記憶體的方法</strong></p>\n<ul>\n<li>在語法描述中， <code>m</code>  表記憶體位置， <code>(m)</code>  是此位置的資料\n<ul>\n<li>所以如果描述中有  <code>(m)</code>  表示有 memory access</li>\n</ul>\n</li>\n</ul>\n</div>\n<h2 id=\"12-simple-data-movement\"><a class=\"anchor\" href=\"#12-simple-data-movement\">#</a> 1.2 Simple Data Movement</h2>\n<ul>\n<li>There are <strong>no memory-to-memory move instructions</strong></li>\n<li>All data movement must be <strong>done using registers</strong>.\n<ul>\n<li>先用 Load 指令把資料從某段記憶體寫入 register</li>\n<li>再用 Store 指令把資料從 register 寫入目標記憶體位置</li>\n</ul>\n</li>\n<li>There are four different ways of defining storage for data items in the SIC assembler language:  <code>WORD</code> ,  <code>RESW</code> ,  <code>BYTE</code> ,  <code>RESB</code></li>\n</ul>\n<h3 id=\"sic\"><a class=\"anchor\" href=\"#sic\">#</a> SIC</h3>\n<pre><code class=\"language-=\">\tLDA \tFIVE\n\tSTA \tALPHA\n\tLDCH\tCHARZ\n\tSTCH\tC1\n\t .\n\t .\n\t .\nALPHA\tRESW\t1\t//宣告變數，長度沒有限制\nFIVE\tWORD\t5\t//宣告常數\nCHARZ\tBYTE\tC'Z'\t//宣告byte\nC1\tRESB\t1\n</code></pre>\n<ul>\n<li><strong>Memory usage</strong>: // 記憶體使用多少 byte (空間)\n<ul>\n<li><strong>Data</strong>: 2 words + 2 bytes = 6 + 2 bytes = 8 bytes</li>\n<li><strong>Instruction</strong>: 4 * 3(24 bits) = 12 bytes</li>\n<li><strong>Total</strong>: 8 + 12 bytes = 20 bytes</li>\n</ul>\n</li>\n<li><strong># of memory access</strong>: // 記憶體存取幾次 (速度)\n<ul>\n<li><strong>Data Access</strong>: 4</li>\n<li><strong>Instruction Fetch</strong>: 4</li>\n<li><strong>Total</strong>: 8</li>\n</ul>\n</li>\n</ul>\n<h3 id=\"sicxe\"><a class=\"anchor\" href=\"#sicxe\">#</a> SIC/XE</h3>\n<pre><code class=\"language-=\">\tLDA\t #5\n\tSTA\t ALPHA\n\tLDA\t #90\n\tSTCH\t C1\n\t .\n\t .\n\t .\nALPHA\tRESW\t1\nC1\tRESB\t1\n</code></pre>\n<ul>\n<li><strong>Memory usage</strong>:\n<ul>\n<li><strong>Data</strong>: 1 word + 1 bytes = 3 + 1 bytes = 4 bytes</li>\n<li><strong>Instruction</strong>: 3 + 3 + 3 + 3 = 12 bytes</li>\n<li><strong>Total</strong>: 16 bytes</li>\n</ul>\n</li>\n<li><strong># of memory access</strong>:\n<ul>\n<li><strong>Data Access</strong>: 2</li>\n<li><strong>Instruction Fetch</strong>: 4</li>\n<li><strong>Total</strong>: 6</li>\n</ul>\n</li>\n</ul>\n<h3 id=\"high-level-language\"><a class=\"anchor\" href=\"#high-level-language\">#</a> High Level Language</h3>\n<figure class=\"highlight c\"><figcaption data-lang=\"c\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre><span class=\"token keyword\">int</span> ALPHA<span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"2\"></td><td><pre><span class=\"token keyword\">char</span> C1<span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"3\"></td><td><pre></pre></td></tr><tr><td data-num=\"4\"></td><td><pre>ALPHA <span class=\"token operator\">=</span> <span class=\"token number\">5</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"5\"></td><td><pre>C1 <span class=\"token operator\">=</span> <span class=\"token char\">'Z'</span><span class=\"token punctuation\">;</span></pre></td></tr></table></figure><h2 id=\"13-simple-arithmetic-operation\"><a class=\"anchor\" href=\"#13-simple-arithmetic-operation\">#</a> 1.3 Simple Arithmetic Operation</h2>\n<h3 id=\"sic-2\"><a class=\"anchor\" href=\"#sic-2\">#</a> SIC</h3>\n<pre><code class=\"language-=\">\tLDA\tALPHA\n\tADD\tINCR\n\tSUB \tONE\n\tSTA\tBETA\n\tLDA\tGAMMA\n\tADD \tINCR\n\tSUB\tONE\n\tSTA\tDELTA\n\t .\n\t .\n\t .\nONE\tWORD\t1\n         .\nALPHA\tRESW\t1\nBETA\tRESW\t1\nGAMMA\tRESW\t1\nDELTA\tRESW\t1\nINCR\tRESW\t1 \n</code></pre>\n<ul>\n<li><strong>Memory usage</strong>:\n<ul>\n<li><strong>Data</strong>: 6 words(3 bytes) = 18 bytes</li>\n<li><strong>Instruction</strong>: 8 * 3 = 24 bytes</li>\n<li><strong>Total</strong>: 42 bytes</li>\n</ul>\n</li>\n<li><strong># of memory access</strong>:\n<ul>\n<li><strong>Data Access</strong>: 8</li>\n<li><strong>Instruction Fetch</strong>: 8</li>\n<li><strong>Total</strong>: 16</li>\n</ul>\n</li>\n</ul>\n<h3 id=\"sicxe-2\"><a class=\"anchor\" href=\"#sicxe-2\">#</a> SIC/XE</h3>\n<ul>\n<li><font> <code>ADDR</code> </font> is used to <strong>avoid having to fetch</strong>  <code>INCR</code>  from memory each time it is used in a calculation, which may make the program more efficient.</li>\n</ul>\n<pre><code class=\"language-=\">\tLDS\t INCR\n\tLDA\t ALPHA\n\tADDR\t S,A\n\tSUB\t #1\n\tSTA \t BETA\n\tLDA\t GAMMA\n\tADDR\t S,A\n\tSUB\t #1\n\tSTA\t DELTA\n\t .\n\t .\n\t .\n\t .\nALPHA\tRESW\t1\nBETA\tRESW\t1\nGAMMA\tRESW\t1\nDELTA\tRESW\t1\nINCR\tRESW\t1 \n</code></pre>\n<div class=\"note success\">\n<p><strong>Q:</strong>  <code>LDS</code>  和  <code>LDA</code>  load 兩個變數存進 register 有沒有好處？</p>\n<p><strong>A:</strong> 是有的，因為  <code>INCR</code>  在整個程式中使用超過一次，所以先 load 到 register 裡面可以減少 memory access 的次數</p>\n</div>\n<ul>\n<li><strong>Memory usage</strong>:\n<ul>\n<li><strong>Data</strong>: 5 words = 15 bytes</li>\n<li><strong>Instruction</strong>: 2 byte( <code>ADDR</code> ) * 2 + 3 * 7 = 25 bytes</li>\n<li><strong>Total</strong>: 40 bytes</li>\n</ul>\n</li>\n<li><strong># of memory access</strong>:\n<ul>\n<li><strong>Data Access</strong>: 5</li>\n<li><strong>Instruction Fetch</strong>: 9</li>\n<li><strong>Total</strong>: 14</li>\n</ul>\n</li>\n</ul>\n<h3 id=\"high-level-language-2\"><a class=\"anchor\" href=\"#high-level-language-2\">#</a> High Level Language</h3>\n<figure class=\"highlight c\"><figcaption data-lang=\"c\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre><span class=\"token keyword\">int</span> BETA <span class=\"token operator\">=</span> ALPHA <span class=\"token operator\">+</span> INCR <span class=\"token operator\">-</span> <span class=\"token number\">1</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"2\"></td><td><pre><span class=\"token keyword\">int</span> DELTA <span class=\"token operator\">=</span> GAMMA <span class=\"token operator\">+</span> INCR <span class=\"token operator\">-</span> <span class=\"token number\">1</span><span class=\"token punctuation\">;</span></pre></td></tr></table></figure><h2 id=\"14-simple-looping-and-indexing-operations\"><a class=\"anchor\" href=\"#14-simple-looping-and-indexing-operations\">#</a> 1.4 Simple Looping and Indexing Operations</h2>\n<h3 id=\"sic-3\"><a class=\"anchor\" href=\"#sic-3\">#</a> SIC</h3>\n<pre><code class=\"language-=\">\tLDX\tZERO\nMOVECH\tLDCH\tSTR1,X\n\tSTCH\tSTR2,X\n\tTIX\tELEVEN\n\tJLT\tMOVECH\n\t .\n\t .\n\t .\nSTR1\tBYTE\tC'TEST STRING'\nSTR2 \tRESB\t11\n.\nZERO\tWORD\t0\nELEVEN\tWORD\t11\n</code></pre>\n<ul>\n<li><strong>Memory usage</strong>:\n<ul>\n<li><strong>Data</strong>: 2 words + 11 * 2 bytes = 6 + 22 bytes = 28 bytes</li>\n<li><strong>Instruction</strong>: 3 * 5 = 15 bytes</li>\n<li><strong>Total</strong>: 43 bytes</li>\n</ul>\n</li>\n<li><strong># of memory access</strong>:\n<ul>\n<li><strong>Data Access</strong>: 1 + 3 * 11 = 34</li>\n<li><strong>Instruction Fetch</strong>: 1 + 4 * 11 = 45</li>\n<li><strong>Total</strong>: 79</li>\n</ul>\n</li>\n</ul>\n<h3 id=\"sicxe-3\"><a class=\"anchor\" href=\"#sicxe-3\">#</a> SIC/XE</h3>\n<ul>\n<li><code>TIXR</code>  makes the loop <strong>more efficient</strong></li>\n<li>Because the value does not have to be fetched from memory each time the loop is executed.</li>\n</ul>\n<pre><code class=\"language-=\">\tLDT\t#11\n\tLDX\t#0\nMOVECH\tLDCH\tSTR1,X\n\tSTCH\tSTR2,X\n\tTIXR\tT\n\tJLT\tMOVECH\n\t .\n\t .\n\t .\nSTR1\tBYTE\tC'TEST STRING'\nSTR2 \tRESB\t11\n</code></pre>\n<ul>\n<li><strong>Memory usage</strong>:\n<ul>\n<li><strong>Data</strong>: 11 * 2 bytes = 22 bytes</li>\n<li><strong>Instruction</strong>: <mark>2 ( <code>TIXR</code> )</mark> + 5 * 3 bytes= 17 bytes</li>\n<li><strong>Total</strong>: 39 bytes</li>\n</ul>\n</li>\n<li><strong># of memory access</strong>:\n<ul>\n<li><strong>Data Access</strong>: 2 * 11 = 2 + 22 = 24</li>\n<li><strong>Instruction Fetch</strong>: 4 * 11 = 44</li>\n<li><strong>Total</strong>: 68</li>\n</ul>\n</li>\n</ul>\n<h3 id=\"high-level-language-3\"><a class=\"anchor\" href=\"#high-level-language-3\">#</a> High Level Language</h3>\n<figure class=\"highlight c\"><figcaption data-lang=\"c\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre><span class=\"token keyword\">char</span> STR1 <span class=\"token operator\">=</span> <span class=\"token string\">\"TEST STRING\"</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"2\"></td><td><pre><span class=\"token keyword\">char</span> STR2<span class=\"token punctuation\">[</span><span class=\"token number\">11</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"3\"></td><td><pre><span class=\"token keyword\">int</span> X <span class=\"token operator\">=</span> <span class=\"token number\">0</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"4\"></td><td><pre></pre></td></tr><tr><td data-num=\"5\"></td><td><pre><span class=\"token keyword\">do</span><span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"6\"></td><td><pre>    STR2<span class=\"token punctuation\">[</span>X<span class=\"token punctuation\">]</span> <span class=\"token operator\">=</span> STR1<span class=\"token punctuation\">[</span>X<span class=\"token punctuation\">]</span><span class=\"token punctuation\">;</span> </pre></td></tr><tr><td data-num=\"7\"></td><td><pre>    X<span class=\"token operator\">++</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"8\"></td><td><pre><span class=\"token punctuation\">&#125;</span><span class=\"token keyword\">while</span><span class=\"token punctuation\">(</span>X <span class=\"token operator\">&lt;</span> <span class=\"token number\">11</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr></table></figure><h2 id=\"15-sample-indexing-and-looping-operations\"><a class=\"anchor\" href=\"#15-sample-indexing-and-looping-operations\">#</a> 1.5 Sample Indexing and Looping Operations</h2>\n<ul>\n<li>The value in the index register must be <strong>incremented by 3</strong> for each iteration of this loop\n<ul>\n<li>Because each iteration <strong>processes a 3-byte element</strong> of the arrays</li>\n</ul>\n</li>\n</ul>\n<h3 id=\"sic-4\"><a class=\"anchor\" href=\"#sic-4\">#</a> SIC</h3>\n<ul>\n<li>\n<p>The  <code>TIX</code>  instruction always <strong>adds 1 to register X</strong>, so it is <font>not suitable</font> for this program fragment.</p>\n</li>\n<li>\n<p>因為一個 word 占用 3bytes，所以 X 每次要跳三個位置 (X 每次加 3)，才能正確的讀取每一個 word</p>\n</li>\n</ul>\n<pre><code class=\"language-=\">\tLDA\tZERO\n\tSTA\tINDEX\nADDLP\tLDX\tINDEX\n\tLDA\tALPHA,X\n\tADD\tBETA,X\n\tSTA\tGAMMA,X\n\tLDA\tINDEX\n\tADD\tTHREE\n\tSTA\tINDEX\n\tCOMP\tK300\n\tJLT\tADDLP\n\t .\n\t .\n\t .\nINDEX\tRESW\t1\n\t .\nALPHA\tRESW\t100\nBETA\tRESW\t100\nGAMMA\tRESW\t100\n\t .\nZERO\tWORD\t0\nK300\tWORD\t300\nTHREE\tWORD\t3\n</code></pre>\n<div class=\"note danger\">\n<p><strong>Q:</strong> 為什麼程式碼 7 ~ 10 不用  <code>TIX</code>  ?</p>\n<p><strong>A:</strong> 因為這裡的變數宣告是 word，而不是 byte，要找到下一個資料位置，要加 3 bytes (one word)，而  <code>TIX</code>  裡面的內容是，加 1 並比較。</p>\n</div>\n<ul>\n<li><strong>Memory usage</strong>:\n<ul>\n<li><strong>Data</strong>: 1 + 100*3 + 3 words = 304 words = 912 bytes</li>\n<li><strong>Instruction</strong>: 11 * 3 = 33 bytes</li>\n<li><strong>Total</strong>: 945 bytes</li>\n</ul>\n</li>\n<li><strong># of memory access</strong>:\n<ul>\n<li><strong>Data Access</strong>: 2 + 8 * 100 = 802</li>\n<li><strong>Instruction Fetch</strong>: 2 + 9 * 100 = 902</li>\n<li><strong>Total</strong>: 1704</li>\n</ul>\n</li>\n</ul>\n<h3 id=\"sicxe-4\"><a class=\"anchor\" href=\"#sicxe-4\">#</a> SIC/XE</h3>\n<pre><code class=\"language-=\">\tLDS\t#3\n\tLDT\t#300\n\tLDX\t#0\nADDLP\tLDA\tALPHA,X\n\tADD\tBETA,X\n\tSTA\tGAMMA,X\n\tADDR\tS,X\n\tCOMPR \tX,T\n\tJLT\tADDLP\n\t .\n\t .\n\t .\n\t .\nALPHA\tRESW\t100\nBETA\tRESW\t100\nGAMMA\tRESW\t100\n</code></pre>\n<ul>\n<li><strong>Memory usage</strong>:\n<ul>\n<li><strong>Data</strong>: 3 * 100 words = 300 words = 900 bytes</li>\n<li><strong>Instruction</strong>: <mark>2( <code>ADDR</code> )</mark> + <mark>2( <code>COMPR</code> )</mark> + 7 * 3 = 25</li>\n<li><strong>Total</strong>: 925 bytes</li>\n</ul>\n</li>\n<li><strong># of memory access</strong>:\n<ul>\n<li><strong>Data Access</strong>: 3 * 100 = 300</li>\n<li><strong>Instruction Fetch</strong>: 3 + 6 * 100 = 603</li>\n<li><strong>Total</strong>: 903</li>\n</ul>\n</li>\n</ul>\n<h3 id=\"high-level-language-4\"><a class=\"anchor\" href=\"#high-level-language-4\">#</a> High Level Language</h3>\n<figure class=\"highlight c\"><figcaption data-lang=\"c\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre><span class=\"token keyword\">int</span> ALPHA<span class=\"token punctuation\">[</span><span class=\"token number\">100</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"2\"></td><td><pre><span class=\"token keyword\">int</span> BETA<span class=\"token punctuation\">[</span><span class=\"token number\">100</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"3\"></td><td><pre><span class=\"token keyword\">int</span> GAMMA<span class=\"token punctuation\">[</span><span class=\"token number\">100</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"4\"></td><td><pre></pre></td></tr><tr><td data-num=\"5\"></td><td><pre><span class=\"token keyword\">for</span> <span class=\"token punctuation\">(</span>X <span class=\"token operator\">=</span> <span class=\"token number\">0</span><span class=\"token punctuation\">;</span> X <span class=\"token operator\">&lt;</span> <span class=\"token number\">100</span><span class=\"token punctuation\">;</span> X<span class=\"token operator\">++</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"6\"></td><td><pre>    GAMMA<span class=\"token punctuation\">[</span>X<span class=\"token punctuation\">]</span> <span class=\"token operator\">=</span> ALPHA<span class=\"token punctuation\">[</span>X<span class=\"token punctuation\">]</span> <span class=\"token operator\">+</span> BETA<span class=\"token punctuation\">[</span>X<span class=\"token punctuation\">]</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"7\"></td><td><pre><span class=\"token punctuation\">&#125;</span></pre></td></tr></table></figure><h2 id=\"16-simple-io-operations\"><a class=\"anchor\" href=\"#16-simple-io-operations\">#</a> 1.6 Simple I/O Operations</h2>\n<h3 id=\"sic-5\"><a class=\"anchor\" href=\"#sic-5\">#</a> SIC</h3>\n<pre><code class=\"language-=\">INLOOP\t TD \tINDEV\n\t JEQ\tINLOOP\n\t RD\tINDEV\n\t STCH\tDATA\n\t  .\n\t  .\n\t  .\nOUTLP\t TD\tOUTDEV\n\t JEQ\tOUTLP\n\t LDCH\tDATA\n\t WD\tOUTDEV\n\t  .\n\t  .\n\t  .\nINDEV\t BYTE\tX'F1'\t// X 代表使用16進位, 'F1' 是給此裝置的編號\nOUTDEV\t BYTE\tX'05'\nDATA\t RESB\t1\n</code></pre>\n<ul>\n<li><strong>Memory usage</strong>:\n<ul>\n<li><strong>Data</strong>: 3 bytes</li>\n<li><strong>Instruction</strong>: (4 + 4) * 3 = 24 bytes</li>\n<li><strong>Total</strong>: 27 bytes</li>\n</ul>\n</li>\n</ul>\n<br>\n<blockquote>\n<p>國展表示這邊 access 不用算 //TD RD WD</p>\n</blockquote>\n<ul>\n<li><strong># of memory access</strong>:\n<ul>\n<li><strong>Data Access</strong>: 2</li>\n<li><strong>Instruction Fetch</strong>: 2n + 2m + 4 (n, m: 測試 device 的次數)</li>\n<li><strong>Total</strong>: 2n + 2m + 6</li>\n</ul>\n</li>\n</ul>\n<h3 id=\"high-level-language-5\"><a class=\"anchor\" href=\"#high-level-language-5\">#</a> High Level Language</h3>\n<figure class=\"highlight cpp\"><figcaption data-lang=\"C++\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre>Device INDEV <span class=\"token operator\">=</span> <span class=\"token function\">Device</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"F1\"</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"2\"></td><td><pre>Device OUTDEV <span class=\"token operator\">=</span> <span class=\"token function\">Device</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"05\"</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"3\"></td><td><pre></pre></td></tr><tr><td data-num=\"4\"></td><td><pre><span class=\"token keyword\">char</span> DATA<span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"5\"></td><td><pre></pre></td></tr><tr><td data-num=\"6\"></td><td><pre><span class=\"token comment\">// 不能使用就繼續測試</span></pre></td></tr><tr><td data-num=\"7\"></td><td><pre><span class=\"token keyword\">while</span> <span class=\"token punctuation\">(</span><span class=\"token operator\">!</span> INDEV<span class=\"token punctuation\">.</span><span class=\"token function\">isReady</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"8\"></td><td><pre><span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"9\"></td><td><pre>DATA <span class=\"token operator\">=</span> INDEV<span class=\"token punctuation\">.</span><span class=\"token function\">read</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"10\"></td><td><pre></pre></td></tr><tr><td data-num=\"11\"></td><td><pre>    <span class=\"token punctuation\">.</span></pre></td></tr><tr><td data-num=\"12\"></td><td><pre>    <span class=\"token punctuation\">.</span></pre></td></tr><tr><td data-num=\"13\"></td><td><pre>    <span class=\"token punctuation\">.</span></pre></td></tr><tr><td data-num=\"14\"></td><td><pre></pre></td></tr><tr><td data-num=\"15\"></td><td><pre><span class=\"token keyword\">while</span> <span class=\"token punctuation\">(</span><span class=\"token operator\">!</span> OUTDEV<span class=\"token punctuation\">.</span><span class=\"token function\">isReady</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"16\"></td><td><pre><span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"17\"></td><td><pre>OUTDEV<span class=\"token punctuation\">.</span><span class=\"token function\">write</span><span class=\"token punctuation\">(</span>DATA<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr></table></figure><h2 id=\"17-sample-subroutine-call-and-record-input-operations\"><a class=\"anchor\" href=\"#17-sample-subroutine-call-and-record-input-operations\">#</a> 1.7 Sample Subroutine Call and Record Input Operations</h2>\n<h3 id=\"sic-6\"><a class=\"anchor\" href=\"#sic-6\">#</a> SIC</h3>\n<pre><code class=\"language-=\">\tJSUB\tREAD\n\t .\n\t .\n\t .\nREAD\tLDX\tZERO\nRLOOP\tTD\tINDEV\n\tJEQ\tRLOOP\n\tRD\tINDEV\n\tSTCH\tRECORD,X\n\tTIX\tK100\n\tJLT\tRLOOP\n\tRSUB\n\t .\n\t .\t\n\t .\nINDEV\tBYTE\tX'F1'\nRECORD\tRESB\t100\n\t .\t\nZERO\tWORD\t0\nK100\tWORD\t100\n</code></pre>\n<ul>\n<li><strong>Memory usage</strong>:\n<ul>\n<li><strong>Data</strong>: (1 + 100) bytes + 2 words = 107 bytes</li>\n<li><strong>Instruction</strong>: 9 * 3 = 27 bytes</li>\n<li><strong>Total</strong>: 134 bytes</li>\n</ul>\n</li>\n</ul>\n<blockquote>\n<p>國展表示這邊 access 不用算 //TD RD WD</p>\n</blockquote>\n<ul>\n<li><strong># of memory access</strong>:\n<ul>\n<li><strong>Data Access</strong>: 1 + 2 * 100 = 201</li>\n<li><strong>Instruction Fetch</strong>: 1 + 1 + 2n + 5 * 100 + 1 (n: 測試 device 的次數)</li>\n<li><strong>Total</strong>: 2n + 704</li>\n</ul>\n</li>\n</ul>\n<h3 id=\"sicxe-5\"><a class=\"anchor\" href=\"#sicxe-5\">#</a> SIC/XE</h3>\n<pre><code class=\"language-=\">\tJSUB\tREAD\n\t .\n\t .\n\t .\nREAD\tLDX\t#0\n\tLDT\t#100\nRLOOP\tTD\t INDEV\n\tJEQ\t RLOOP\n\tRD\t INDEV\n\tSTCH\t RECORD,X\n\tTIXR\t T\n\tJLT\t RLOOP\n\tRSUB\n\t .\n\t .\n\t .\nINDEV\tBYTE\tX'F1'\nRECORD\tRESB\t100\n</code></pre>\n<ul>\n<li><strong>Memory usage</strong>:\n<ul>\n<li><strong>Data</strong>: (1 + 100) bytes = 101 bytes</li>\n<li><strong>Instruction</strong>: <mark>2( <code>TIXR</code> )</mark> + 3 * 9 = 29 bytes</li>\n<li><strong>Total</strong>: 130 bytes</li>\n</ul>\n</li>\n</ul>\n<blockquote>\n<p>國展表示這邊 access 不用算 //TD RD WD</p>\n</blockquote>\n<ul>\n<li><strong>Memory Access</strong></li>\n</ul>\n<h3 id=\"high-level-language-6\"><a class=\"anchor\" href=\"#high-level-language-6\">#</a> High Level Language</h3>\n<figure class=\"highlight cpp\"><figcaption data-lang=\"C++\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre>Device INDEV <span class=\"token operator\">=</span> <span class=\"token function\">Device</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"F1\"</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"2\"></td><td><pre><span class=\"token keyword\">char</span> RECORD<span class=\"token punctuation\">[</span><span class=\"token number\">100</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"3\"></td><td><pre></pre></td></tr><tr><td data-num=\"4\"></td><td><pre><span class=\"token function\">READ</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"5\"></td><td><pre></pre></td></tr><tr><td data-num=\"6\"></td><td><pre><span class=\"token keyword\">void</span> <span class=\"token function\">READ</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"7\"></td><td><pre>    <span class=\"token keyword\">for</span><span class=\"token punctuation\">(</span>X <span class=\"token operator\">=</span> <span class=\"token number\">0</span><span class=\"token punctuation\">;</span> X <span class=\"token operator\">&lt;</span> <span class=\"token number\">100</span><span class=\"token punctuation\">;</span> X<span class=\"token operator\">++</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"8\"></td><td><pre>        <span class=\"token keyword\">while</span> <span class=\"token punctuation\">(</span><span class=\"token operator\">!</span> INDEV<span class=\"token punctuation\">.</span><span class=\"token function\">isReady</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"9\"></td><td><pre>        <span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"10\"></td><td><pre>        RECORD<span class=\"token punctuation\">[</span>X<span class=\"token punctuation\">]</span> <span class=\"token operator\">=</span> INDEV<span class=\"token punctuation\">.</span><span class=\"token function\">read</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"11\"></td><td><pre>    <span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"12\"></td><td><pre><span class=\"token punctuation\">&#125;</span></pre></td></tr></table></figure>",
            "tags": [
                "System Software",
                "Ch01",
                "System Software"
            ]
        },
        {
            "id": "https://chienikao.github.io/2023/04/26/System%20Software/Ch02/Ch02_example/",
            "url": "https://chienikao.github.io/2023/04/26/System%20Software/Ch02/Ch02_example/",
            "title": "Ch02 - Example",
            "date_published": "2023-04-26T01:33:29.000Z",
            "content_html": "<h1 id=\"ch02-範例程式\"><a class=\"anchor\" href=\"#ch02-範例程式\">#</a> Ch02 - 範例程式</h1>\n<h2 id=\"example-of-sic-program\"><a class=\"anchor\" href=\"#example-of-sic-program\">#</a> Example of SIC Program</h2>\n<ul>\n<li><strong> <code>,X</code> </strong> modifier: <strong>indexed</strong> addressing mode (Line 160, 225)</li>\n<li>Lines <strong>beginning with  <code>.</code> </strong> contain <strong>comments</strong> only (Line 110~120, 195~205)</li>\n</ul>\n<h3 id=\"copy-subroutine\"><a class=\"anchor\" href=\"#copy-subroutine\">#</a>  <code>COPY</code>  Subroutine</h3>\n<ul>\n<li>相當於整個程式的主函式\n<ul>\n<li>因為  <code>FIRST</code>  包含在此 Subroutine 中</li>\n</ul>\n</li>\n<li>用來把 input device 的檔案複製到 output device\n<ul>\n<li>透過  <code>RDREC</code>  讀取檔案中的 record 並存到 buffer</li>\n<li>透過  <code>WRREC</code>  把 buffer 中的 record 寫入檔案</li>\n</ul>\n</li>\n<li>檔案由多個 records 組成，但不確定有幾個 record…\n<ul>\n<li>所以用迴圈把 record 一個一個讀進來，每讀一個 record 就進行寫入</li>\n<li>讀到檔案結尾就結束迴圈</li>\n<li>並且把 ‘E’, ‘O’, ‘F’ <strong>三個字元</strong>寫入檔案</li>\n</ul>\n</li>\n</ul>\n<pre><code>Line \tLoc \tSource statement \t\tObject code \n\n5 \t1000 \tCOPY \tSTART\t 1000 \t\t\n10 \t1000 \tFIRST \tSTL\t RETADR \t141033 \n15 \t1003 \tCLOOP \tJSUB\t RDREC \t\t482039 \n20 \t1006 \t\tLDA \t LENGTH \t001036 \n25 \t1009 \t\tCOMP\t ZERO \t\t281030 \n30 \t100C \t\tJEQ \t ENDFIL \t301015 \n35 \t100F \t\tJSUB\t WRREC \t\t482061 \n40 \t1012 \t\tJ \t CLOOP \t\t3C1003 \n45 \t1015 \tENDFIL \tLDA \t EOF \t\t00102A \n50 \t1018 \t\tSTA \t BUFFER \t0C1039 \n55 \t101B \t\tLDA \t THREE \t\t00102D \n60 \t101E \t\tSTA\t LENGTH \t0C1036 \n65 \t1021 \t\tJSUB \t WRREC \t\t482061 \n70 \t1024 \t\tLDL \t RETADR\t\t081033 \n75 \t1027 \t\tRSUB \t\t\t4C0000 \n80 \t102A \tEOF \tBYTE \t C'EOF' \t454F46 \n85 \t102D \tTHREE \tWORD \t 3 \t\t000003 \n90 \t1030 \tZERO \tWORD \t 0 \t\t000000 \n95 \t1033 \tRETADR \tRESW \t 1 \t\t\n100 \t1036 \tLENGTH \tRESW \t 1 \t\t\n105 \t1039 \tBUFFER \tRESB \t 4096 \t\t\n</code></pre>\n<ul>\n<li>\n<p><strong>Buffer</strong></p>\n<ul>\n<li>Is <strong>necessary</strong> because the <strong>I/O rates</strong> for the two devices may be very different.\n<ul>\n<li>such as a disk and a slow printing terminal</li>\n</ul>\n</li>\n<li>宣告在 Line 105，共有 4096 bytes</li>\n</ul>\n</li>\n<li>\n<p><strong>The end of the file to be copied</strong> ( <code>RDREC</code>  在讀的檔案的結尾)<br>\n<span class=\"katex\"><span class=\"katex-mathml\"><math xmlns=\"http://www.w3.org/1998/Math/MathML\"><semantics><mrow><mo>⇒</mo></mrow><annotation encoding=\"application/x-tex\">\\Rightarrow</annotation></semantics></math></span><span class=\"katex-html\" aria-hidden=\"true\"><span class=\"base\"><span class=\"strut\" style=\"height:0.36687em;vertical-align:0em;\"></span><span class=\"mrel\">⇒</span></span></span></span> is indicated by a <strong>zero-length record</strong></p>\n<ul>\n<li><code>RDREC</code>  會把這次讀取到的 record 的長度存在變數  <code>LENGTH</code></li>\n<li>Line 20~30: 如果  <code>LENGTH</code>  等於 0 就結束迴圈<br>\n<span class=\"katex\"><span class=\"katex-mathml\"><math xmlns=\"http://www.w3.org/1998/Math/MathML\"><semantics><mrow><mo>⇒</mo></mrow><annotation encoding=\"application/x-tex\">\\Rightarrow</annotation></semantics></math></span><span class=\"katex-html\" aria-hidden=\"true\"><span class=\"base\"><span class=\"strut\" style=\"height:0.36687em;vertical-align:0em;\"></span><span class=\"mrel\">⇒</span></span></span></span> 如果讀到長度 0 的 record 就停止讀取<br>\n<span class=\"katex\"><span class=\"katex-mathml\"><math xmlns=\"http://www.w3.org/1998/Math/MathML\"><semantics><mrow><mo>⇒</mo></mrow><annotation encoding=\"application/x-tex\">\\Rightarrow</annotation></semantics></math></span><span class=\"katex-html\" aria-hidden=\"true\"><span class=\"base\"><span class=\"strut\" style=\"height:0.36687em;vertical-align:0em;\"></span><span class=\"mrel\">⇒</span></span></span></span> 如果讀到檔案結尾就停止讀取</li>\n</ul>\n</li>\n<li>\n<p>When the <strong>end of file is detected</strong></p>\n<ul>\n<li>The program writes <strong> <code>&quot;EOF&quot;</code> </strong> on the output device (Line 45~50)</li>\n</ul>\n</li>\n<li>\n<p>Terminates by executing an <strong> <code>RSUB</code> </strong> instruction (Line 75)</p>\n</li>\n</ul>\n<div class=\"note info\">\n<ul>\n<li>Line 80 宣告的  <code>EOF</code>  是三個字元  <code>'E'</code> ,  <code>'O'</code> ,  <code>'F'</code> ，共占用 3 bytes</li>\n<li>所以可以用  <code>LDA EOF</code>  一次把三個字元存在 register A 中 (Line 45)</li>\n<li><code>STA BUFFER</code>  會一次把 register A 中 3 bytes 的資料寫入  <code>BUFFER</code>  的位置中，等同:\n<ul>\n<li>把 register A 中的三個字元依序放到記憶體  <code>BUFFER</code> ,  <code>BUFFER+1</code> ,  <code>BUFFER+2</code>  的三個位置中</li>\n<li><code>BUFFER[0] = 'E'</code> ,  <code>BUFFER[1] = 'O'</code> ,  <code>BUFFER[2] = 'F'</code></li>\n</ul>\n</li>\n<li>因為最後還要把  <code>BUFFER</code>  中的三個字元寫到 Output device 中\n<ul>\n<li><code>LENGTH</code>  要設為 3 (Line 55~60)</li>\n</ul>\n</li>\n</ul>\n</div>\n<h4 id=\"high-level-pseudo-code\"><a class=\"anchor\" href=\"#high-level-pseudo-code\">#</a> High-Level Pseudo Code</h4>\n<figure class=\"highlight java\"><figcaption data-lang=\"java\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre><span class=\"token keyword\">byte</span> <span class=\"token constant\">BUFFER</span><span class=\"token punctuation\">[</span><span class=\"token number\">4096</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"2\"></td><td><pre><span class=\"token keyword\">int</span> <span class=\"token constant\">LENGTH</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"3\"></td><td><pre></pre></td></tr><tr><td data-num=\"4\"></td><td><pre><span class=\"token keyword\">void</span> <span class=\"token function\">COPY</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"5\"></td><td><pre>    <span class=\"token keyword\">while</span><span class=\"token punctuation\">(</span><span class=\"token number\">1</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"6\"></td><td><pre>        <span class=\"token function\">RDREC</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"7\"></td><td><pre>        <span class=\"token keyword\">if</span> <span class=\"token punctuation\">(</span><span class=\"token constant\">LENGTH</span> <span class=\"token operator\">==</span> <span class=\"token number\">0</span><span class=\"token punctuation\">)</span></pre></td></tr><tr><td data-num=\"8\"></td><td><pre>            <span class=\"token keyword\">break</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"9\"></td><td><pre>        <span class=\"token function\">WRREC</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"10\"></td><td><pre>    <span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"11\"></td><td><pre>    </pre></td></tr><tr><td data-num=\"12\"></td><td><pre>    <span class=\"token constant\">BUFFER</span><span class=\"token punctuation\">[</span><span class=\"token number\">0</span><span class=\"token punctuation\">]</span> <span class=\"token operator\">=</span> <span class=\"token char\">'E'</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"13\"></td><td><pre>    <span class=\"token constant\">BUFFER</span><span class=\"token punctuation\">[</span><span class=\"token number\">1</span><span class=\"token punctuation\">]</span> <span class=\"token operator\">=</span> <span class=\"token char\">'O'</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"14\"></td><td><pre>    <span class=\"token constant\">BUFFER</span><span class=\"token punctuation\">[</span><span class=\"token number\">2</span><span class=\"token punctuation\">]</span> <span class=\"token operator\">=</span> <span class=\"token char\">'F'</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"15\"></td><td><pre>    <span class=\"token constant\">LENGTH</span> <span class=\"token operator\">=</span> <span class=\"token number\">3</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"16\"></td><td><pre>    <span class=\"token function\">WRREC</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"17\"></td><td><pre>    <span class=\"token keyword\">return</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"18\"></td><td><pre><span class=\"token punctuation\">&#125;</span></pre></td></tr></table></figure><h3 id=\"rdrec-read-records-subroutine\"><a class=\"anchor\" href=\"#rdrec-read-records-subroutine\">#</a>  <code>RDREC</code>  - Read Records Subroutine</h3>\n<pre><code>Line \tLoc \tSource statement \t\tObject code \n110 \t\t.\t\t\t\n115 \t\t.\tSUBROUTINE TO READ RECORD INTO BUFFER \n120 \t\t.\t\t\t\n125 \t2039 \tRDREC \tLDX \t ZERO \t\t041030 \n130 \t203C \t\tLDA \t ZERO \t\t001030 \n135 \t203F \tRLOOP \tTD  \t INPUT \t\tE0205D \n140 \t2042 \t\tJEQ \t RLOOP \t\t30203F \n145 \t2045 \t\tRD \t INPUT \t\tD8205D \n150 \t2048 \t\tCOMP \t ZERO \t\t281030 \n155 \t204B \t\tJEQ  \t EXIT \t\t302057 \n160 \t204E \t\tSTCH \t BUFFER,X       549039 \n165 \t2051 \t\tTIX \t MAXLEN \t2C205E \n170 \t2054 \t\tJLT \t RLOOP \t\t38203F \n175 \t2057 \tEXIT \tSTX \t LENGTH \t101036 \n180 \t205A \t\tRSUB \t\t\t4C0000 \n185 \t205D \tINPUT \tBYTE\t X'F1'\t\tF1 \n190 \t205E \tMAXLEN \tWORD \t 4096 \t\t001000 \n</code></pre>\n<ul>\n<li>If a record is longer than the length of the buffer (4096 bytes)<br>\n<span class=\"katex\"><span class=\"katex-mathml\"><math xmlns=\"http://www.w3.org/1998/Math/MathML\"><semantics><mrow><mo>⇒</mo></mrow><annotation encoding=\"application/x-tex\">\\Rightarrow</annotation></semantics></math></span><span class=\"katex-html\" aria-hidden=\"true\"><span class=\"base\"><span class=\"strut\" style=\"height:0.36687em;vertical-align:0em;\"></span><span class=\"mrel\">⇒</span></span></span></span> only the first 4096 bytes are copied.</li>\n</ul>\n<div class=\"note info\">\n<ul>\n<li>Line 135~140\n<ul>\n<li>迴圈不斷測試 device，直到可以進行 IO</li>\n</ul>\n</li>\n<li>Line 145\n<ul>\n<li>讀入一個 byte 的資料</li>\n</ul>\n</li>\n<li>Line 150~155\n<ul>\n<li>如果讀入的資料等於 0 就跳出迴圈</li>\n</ul>\n</li>\n<li>Line 160\n<ul>\n<li>把讀入的資料存在  <code>BUFFER+X</code></li>\n</ul>\n</li>\n<li>Line 165~170\n<ul>\n<li>如果讀到的資料超過 4096 bytes 就跳出迴圈</li>\n</ul>\n</li>\n<li>Line 175\n<ul>\n<li>把讀到的資料長度存在  <code>LENGTH</code></li>\n</ul>\n</li>\n</ul>\n</div>\n<h4 id=\"high-level-pseudo-code-2\"><a class=\"anchor\" href=\"#high-level-pseudo-code-2\">#</a> High-Level Pseudo Code</h4>\n<figure class=\"highlight java\"><figcaption data-lang=\"java\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre><span class=\"token keyword\">void</span> <span class=\"token function\">RDREC</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"2\"></td><td><pre>    <span class=\"token class-name\">Device</span> <span class=\"token constant\">INPUT</span> <span class=\"token operator\">=</span> <span class=\"token keyword\">new</span> <span class=\"token class-name\">Device</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"F1\"</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"3\"></td><td><pre>    <span class=\"token keyword\">int</span> <span class=\"token constant\">MAXLEN</span> <span class=\"token operator\">=</span> <span class=\"token number\">4096</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"4\"></td><td><pre>    <span class=\"token class-name\">X</span> <span class=\"token operator\">=</span> <span class=\"token number\">0</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"5\"></td><td><pre>    <span class=\"token constant\">LENGTH</span> <span class=\"token operator\">=</span> <span class=\"token number\">0</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"6\"></td><td><pre>    <span class=\"token keyword\">while</span> <span class=\"token punctuation\">(</span><span class=\"token number\">1</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"7\"></td><td><pre>        <span class=\"token keyword\">while</span> <span class=\"token punctuation\">(</span><span class=\"token operator\">!</span> <span class=\"token constant\">INPUT</span><span class=\"token punctuation\">.</span><span class=\"token function\">isReady</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"8\"></td><td><pre>        <span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"9\"></td><td><pre>        </pre></td></tr><tr><td data-num=\"10\"></td><td><pre>        <span class=\"token keyword\">char</span> c <span class=\"token operator\">=</span> <span class=\"token constant\">INPUT</span><span class=\"token punctuation\">.</span><span class=\"token function\">read</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"11\"></td><td><pre>        <span class=\"token keyword\">if</span> <span class=\"token punctuation\">(</span>c <span class=\"token operator\">==</span> <span class=\"token number\">0</span><span class=\"token punctuation\">)</span></pre></td></tr><tr><td data-num=\"12\"></td><td><pre>            <span class=\"token keyword\">break</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"13\"></td><td><pre>        <span class=\"token constant\">BUFFER</span><span class=\"token punctuation\">[</span><span class=\"token class-name\">X</span><span class=\"token punctuation\">]</span> <span class=\"token operator\">=</span> c<span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"14\"></td><td><pre>        </pre></td></tr><tr><td data-num=\"15\"></td><td><pre>        <span class=\"token class-name\">X</span><span class=\"token operator\">++</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"16\"></td><td><pre>        <span class=\"token keyword\">if</span><span class=\"token punctuation\">(</span><span class=\"token class-name\">X</span> <span class=\"token operator\">==</span> <span class=\"token constant\">MAXLEN</span><span class=\"token punctuation\">)</span></pre></td></tr><tr><td data-num=\"17\"></td><td><pre>            <span class=\"token keyword\">break</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"18\"></td><td><pre>    <span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"19\"></td><td><pre>    <span class=\"token constant\">LENGTH</span> <span class=\"token operator\">=</span> <span class=\"token class-name\">X</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"20\"></td><td><pre>    <span class=\"token keyword\">return</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"21\"></td><td><pre><span class=\"token punctuation\">&#125;</span></pre></td></tr></table></figure><h3 id=\"wrrec-write-records-subroutine\"><a class=\"anchor\" href=\"#wrrec-write-records-subroutine\">#</a>  <code>WRREC</code>  - Write Records Subroutine</h3>\n<pre><code>Line \tLoc \tSource statement \t\tObject code \n195 \t\t.\t\n200 \t\t.\tSUBROUTINE TO WRITE RECORD FROM BUFFER \n205 \t\t.\t\n210 \t2061 \tWRREC \tLDX \t ZERO \t\t041030 \n215 \t2064 \tWLOOP \tTD \t OUTPUT \tE02079 \n220 \t2067 \t\tJEQ \t WLOOP \t\t302064 \n225 \t206A \t\tLDCH \t BUFFER,X \t509039 \n230 \t206D \t\tWD \t OUTPUT \tDC2079 \n235 \t2070 \t\tTIX \t LENGTH \t2C1036 \n240 \t2073 \t\tJLT \t WLOOP \t\t382064 \n245 \t2076 \t\tRSUB \t\t\t4C0000 \n250 \t2079 \tOUTPUT \tBYTE \t X'05' \t\t05 \n255 \t\t\tEND \t FIRST \t\n</code></pre>\n<div class=\"note info\">\n<ul>\n<li>Line 215~220\n<ul>\n<li>迴圈不斷測試 device，直到可以進行 IO</li>\n</ul>\n</li>\n<li>Line 225~20\n<ul>\n<li>把  <code>BUFFER[X]</code>  寫入 device</li>\n</ul>\n</li>\n<li>Line 235~240\n<ul>\n<li>判斷迴圈條件</li>\n</ul>\n</li>\n</ul>\n</div>\n<h4 id=\"high-level-pseudo-code-3\"><a class=\"anchor\" href=\"#high-level-pseudo-code-3\">#</a> High-Level Pseudo Code</h4>\n<figure class=\"highlight java\"><figcaption data-lang=\"java\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre><span class=\"token keyword\">void</span> <span class=\"token function\">WRREC</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"2\"></td><td><pre>    <span class=\"token class-name\">Device</span> <span class=\"token constant\">OUTPUT</span> <span class=\"token operator\">=</span> <span class=\"token keyword\">new</span> <span class=\"token class-name\">Device</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"05\"</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"3\"></td><td><pre>    <span class=\"token keyword\">for</span><span class=\"token punctuation\">(</span><span class=\"token class-name\">X</span> <span class=\"token operator\">=</span> <span class=\"token number\">0</span><span class=\"token punctuation\">;</span> <span class=\"token class-name\">X</span> <span class=\"token operator\">!=</span> <span class=\"token constant\">LENGTH</span><span class=\"token punctuation\">;</span> <span class=\"token class-name\">X</span><span class=\"token operator\">++</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"4\"></td><td><pre>        <span class=\"token keyword\">while</span> <span class=\"token punctuation\">(</span><span class=\"token operator\">!</span> <span class=\"token constant\">OUTPUT</span><span class=\"token punctuation\">.</span><span class=\"token function\">isReady</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"5\"></td><td><pre>        <span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"6\"></td><td><pre>        </pre></td></tr><tr><td data-num=\"7\"></td><td><pre>        <span class=\"token keyword\">char</span> c <span class=\"token operator\">=</span> <span class=\"token constant\">BUFFER</span><span class=\"token punctuation\">[</span><span class=\"token class-name\">X</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"8\"></td><td><pre>        <span class=\"token constant\">OUTPUT</span><span class=\"token punctuation\">.</span><span class=\"token function\">write</span><span class=\"token punctuation\">(</span>c<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"9\"></td><td><pre>    <span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"10\"></td><td><pre>    <span class=\"token keyword\">return</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"11\"></td><td><pre><span class=\"token punctuation\">&#125;</span></pre></td></tr></table></figure><h2 id=\"example-of-sicxe-program\"><a class=\"anchor\" href=\"#example-of-sicxe-program\">#</a> Example of SIC/XE Program</h2>\n<ul>\n<li><strong>prefix  <code>@</code> </strong>: <font>Indirect</font> addressing</li>\n<li><strong>prefix #</strong>: <font>Immediate</font> operands</li>\n<li><strong>prefix #&lt;LABEL&gt;</strong>: operands = the <strong>address</strong> of the LABEL</li>\n</ul>\n<pre><code>Line \tLoc \t   Source statement\t \tObject code \t \n\n5 \t0000 \tCOPY \tSTART \t0 \t\t\t \n10 \t0000 \tFIRST \tSTL \tRETADR \t\t17202D \t \n12 \t0003 \t\tLDB    #LENGTH \t69202D \t \n13 \t\t\tBASE \tLENGTH \t\t\t \n15 \t0006 \tCLOOP  +JSUB \tRDREC \t\t4B101036 \t \n20 \t000A \t\tLDA \tLENGTH \t\t032026 \t \n25 \t000D \t\tCOMP   #0 \t\t290000 \t \n30 \t0010 \t\tJEQ \tENDFIL \t\t332007 \t \n35 \t0013 \t       +JSUB \tWRREC \t\t4B10105D \t \n40 \t0017 \t\tJ \tCLOOP \t\t3F2FEC \t \n45 \t001A \tENDFIL \tLDA \tEOF \t\t032010 \t \n50 \t001D \t\tSTA \tBUFFER \t\t0F2016 \t \n55 \t0020 \t\tLDA    #3 \t\t010003 \t \n60 \t0023 \t\tSTA \tLENGTH \t\t0F200D \t \n65 \t0026 \t       +JSUB\tWRREC \t\t4B10105D \t \n70 \t002A \t\tJ      @RETADR \t3E2003 \t \n80 \t002D \tEOF \tBYTE\tC'EOF' \t\t454F46 \t \n95 \t0030 \tRETADR \tRESW \t1 \t\t\t \n100 \t0033 \tLENGTH \tRESW\t1 \t\t\t \n105 \t0036 \tBUFFER \tRESB\t4096 \t\t\t \n110 \t\t.\t\t\t\t \n115 \t\t.\tSUBROUTINE TO READ RECORD INTO BUFFER \t \n120 \t\t.\t\t\t\t \n125 \t1036 \tRDREC \tCLEAR \tX \t\tB410 \t \n130 \t1038 \t\tCLEAR \tA \t\tB400 \t \n132 \t103A \t\tCLEAR \tS \t\tB440 \t \n133 \t103C \t       +LDT    #4096\t\t75101000 \t \n135 \t1040 \tRLOOP \tTD \tINPUT \t\tE32019 \t \n140 \t1043 \t\tJEQ \tRLOOP \t\t332FFA \t \n145 \t1046 \t\tRD \tINPUT \t\tDB2013 \t \n150 \t1049 \t\tCOMPR \tA,S \t\tA004 \t \n155 \t104B \t\tJEQ \tEXIT \t\t332008 \t \n160 \t104E \t\tSTCH\tBUFFER,X \t57C003 \t \n165 \t1051 \t\tTIXR \tT \t\tB850 \t \n170 \t1053 \t\tJLT \tRLOOP \t\t3B2FEA \t \n175 \t1056 \tEXIT \tSTX \tLENGTH \t\t134000 \t \n180 \t1059 \t\tRSUB \t\t\t4F0000 \t \n185 \t105C \tINPUT \tBYTE \tX'F1' \t\tF1 \t \n195 \t\t.\t\t \n200 \t\t.\tSUBROUTINE TO WRITE RECORD FROM BUFFER \t \n205 \t\t.\t\t \n210 \t105D \tWRREC \tCLEAR \tX \t\tB410 \t \n212 \t105F \t\tLDT \tLENGTH \t\t774000 \t \n215 \t1062 \tWLOOP \tTD \tOUTPUT \t\tE32011 \t \n220 \t1065 \t\tJEQ \tWLOOP \t\t332FFA \t \n225 \t1068 \t\tLDCH \tBUFFER,X \t53C003 \t \n230 \t106B \t\tWD \tOUTPUT \t\tDF2008 \t \n235 \t106E \t\tTIXR \tT \t\tB850 \t \n240 \t1070 \t\tJLT \tWLOOP \t\t3B2FEF \t \n245 \t1073 \t\tRSUB \t\t\t4F0000 \t \n250  \t1076    OUTPUT BYTE  \tX'05'  \t\t05 \t \n255                    END     FIRST\n</code></pre>\n",
            "tags": [
                "System Software",
                "Ch02",
                "System Software",
                "Assembler"
            ]
        },
        {
            "id": "https://chienikao.github.io/2023/04/26/System%20Software/Ch01/Ch01_Background/",
            "url": "https://chienikao.github.io/2023/04/26/System%20Software/Ch01/Ch01_Background/",
            "title": "Ch01 - Background",
            "date_published": "2023-04-26T01:33:29.000Z",
            "content_html": "<h1 id=\"chapter-01-background\"><a class=\"anchor\" href=\"#chapter-01-background\">#</a> Chapter 01 - Background</h1>\n<h2 id=\"introduction\"><a class=\"anchor\" href=\"#introduction\">#</a> Introduction</h2>\n<ul>\n<li>\n<p><strong>Computer System</strong></p>\n<ul>\n<li><strong>Hardware</strong></li>\n<li><strong>Software</strong></li>\n</ul>\n</li>\n<li>\n<p><strong>Software</strong></p>\n<ul>\n<li><strong>Application software</strong> (domain knowledge)</li>\n<li><strong>System software</strong> (machine architecture)</li>\n</ul>\n<p><img data-src=\"https://i.imgur.com/WDd7TlA.png\" alt=\"\"></p>\n</li>\n<li>\n<p>System software consists of a veriety of programs that support the operation of a computer.</p>\n<ul>\n<li>Text editor, assembler, macro processor, compiler, loader, linker, debugger, operating system.</li>\n</ul>\n</li>\n</ul>\n<h2 id=\"system-software-and-machine-architecture\"><a class=\"anchor\" href=\"#system-software-and-machine-architecture\">#</a> System Software and Machine Architecture</h2>\n<ul>\n<li>System software 與 application software 的決定性差異：\n<ul>\n<li><mark><font>Machine-dependent (MD) features</font></mark>.（在不同硬體環境需要改寫 source code）</li>\n</ul>\n</li>\n<li>System software 有<strong>部分</strong> source code 是 machine-independent (MID)，application software 則<strong>全部</strong>都是 machine-independent。</li>\n<li><font>SIC</font> (simplified instructional computer) with two versions:\n<ul>\n<li><strong>The standard model</strong></li>\n<li><strong>The XE (extra equipment) version</strong></li>\n</ul>\n</li>\n<li>The two versions have designed to be <strong>upward compatible (向上兼容)</strong>.</li>\n</ul>\n<h2 id=\"sic-machine-architecture\"><a class=\"anchor\" href=\"#sic-machine-architecture\">#</a> SIC Machine Architecture</h2>\n<h3 id=\"memory\"><a class=\"anchor\" href=\"#memory\">#</a> <span class=\"exturl\" data-url=\"aHR0cHM6Ly93d3cueW91dHViZS5jb20vd2F0Y2g/dj0ybFN5SFpMek5ZQQ==\">Memory</span></h3>\n<ul>\n<li><strong>Byte</strong>: <strong>8-bit</strong></li>\n<li><strong>Word</strong>: consecutive <strong>3 bytes</strong> (24 bits).</li>\n<li>All addresses are <strong>byte addresses</strong></li>\n<li><strong>Words</strong> are <strong>addressed</strong> by the location of their <strong>lowest numbered byte</strong>.</li>\n<li>There are a total of <strong>32768 (<span class=\"katex\"><span class=\"katex-mathml\"><math xmlns=\"http://www.w3.org/1998/Math/MathML\"><semantics><mrow><msup><mn>2</mn><mn>15</mn></msup></mrow><annotation encoding=\"application/x-tex\">2^{15}</annotation></semantics></math></span><span class=\"katex-html\" aria-hidden=\"true\"><span class=\"base\"><span class=\"strut\" style=\"height:0.8141079999999999em;vertical-align:0em;\"></span><span class=\"mord\"><span class=\"mord\">2</span><span class=\"msupsub\"><span class=\"vlist-t\"><span class=\"vlist-r\"><span class=\"vlist\" style=\"height:0.8141079999999999em;\"><span style=\"top:-3.063em;margin-right:0.05em;\"><span class=\"pstrut\" style=\"height:2.7em;\"></span><span class=\"sizing reset-size6 size3 mtight\"><span class=\"mord mtight\"><span class=\"mord mtight\">1</span><span class=\"mord mtight\">5</span></span></span></span></span></span></span></span></span></span></span></span>) bytes</strong> in the computer memory.\n<ul>\n<li>Address 的範圍: <span class=\"katex\"><span class=\"katex-mathml\"><math xmlns=\"http://www.w3.org/1998/Math/MathML\"><semantics><mrow><mn>0</mn></mrow><annotation encoding=\"application/x-tex\">0</annotation></semantics></math></span><span class=\"katex-html\" aria-hidden=\"true\"><span class=\"base\"><span class=\"strut\" style=\"height:0.64444em;vertical-align:0em;\"></span><span class=\"mord\">0</span></span></span></span> ~ <span class=\"katex\"><span class=\"katex-mathml\"><math xmlns=\"http://www.w3.org/1998/Math/MathML\"><semantics><mrow><msup><mn>2</mn><mn>15</mn></msup><mo>−</mo><mn>1</mn></mrow><annotation encoding=\"application/x-tex\">2^{15} - 1</annotation></semantics></math></span><span class=\"katex-html\" aria-hidden=\"true\"><span class=\"base\"><span class=\"strut\" style=\"height:0.897438em;vertical-align:-0.08333em;\"></span><span class=\"mord\"><span class=\"mord\">2</span><span class=\"msupsub\"><span class=\"vlist-t\"><span class=\"vlist-r\"><span class=\"vlist\" style=\"height:0.8141079999999999em;\"><span style=\"top:-3.063em;margin-right:0.05em;\"><span class=\"pstrut\" style=\"height:2.7em;\"></span><span class=\"sizing reset-size6 size3 mtight\"><span class=\"mord mtight\"><span class=\"mord mtight\">1</span><span class=\"mord mtight\">5</span></span></span></span></span></span></span></span></span><span class=\"mspace\" style=\"margin-right:0.2222222222222222em;\"></span><span class=\"mbin\">−</span><span class=\"mspace\" style=\"margin-right:0.2222222222222222em;\"></span></span><span class=\"base\"><span class=\"strut\" style=\"height:0.64444em;vertical-align:0em;\"></span><span class=\"mord\">1</span></span></span></span></li>\n</ul>\n</li>\n</ul>\n<h3 id=\"registers\"><a class=\"anchor\" href=\"#registers\">#</a> <mark>Registers</mark></h3>\n<div class=\"note danger\">\n<p>Five registers, all of which have special uses. Each register is <strong>24 bits</strong> in length.</p>\n<ul>\n<li><strong>A:</strong> accumulator. 累加器</li>\n<li><strong>X:</strong> index register</li>\n<li><strong>L:</strong> linkage register; storing the return address after a funciton call.</li>\n<li><strong>PC:</strong> program counter. 儲存下一條要執行的指令 (在機器語言中) 的記憶體位址</li>\n<li><strong>SW:</strong> status word; including a <strong>Condition Code (CC)</strong></li>\n</ul>\n</div>\n<h3 id=\"data-formats\"><a class=\"anchor\" href=\"#data-formats\">#</a> Data formats</h3>\n<ul>\n<li>\n<p><strong>Integers</strong> are stored as <strong>24-bit</strong> binary <strong>2’s complement</strong> representation is used for negative values.</p>\n<ul>\n<li>二補數相較於一補數沒有 +0 與 -0 的問題，可以多表達一個數。</li>\n</ul>\n</li>\n<li>\n<p><strong>Characters</strong> are stored using their <strong>8-bit ASCII codes</strong>.</p>\n</li>\n<li>\n<p>There is <strong>no floating-point</strong> hardware on the standard version of SIC.</p>\n</li>\n</ul>\n<h3 id=\"instruction-formats\"><a class=\"anchor\" href=\"#instruction-formats\">#</a> Instruction formats</h3>\n<p><img data-src=\"https://i.imgur.com/YzynDzE.png\" alt=\"\"></p>\n<ul>\n<li><mark><strong>24-bit</strong> format</mark>\n<ul>\n<li>\n<p><em><strong>opcode (指令碼):</strong></em> 8bits, 代表要執行的是哪種指令</p>\n</li>\n<li>\n<p><em><strong>x:</strong></em> 1bit, 用來表示是否為索引定址模式 (<strong>indicated indexed-addressing mode</strong>)</p>\n</li>\n<li>\n<p><em><strong>address:</strong></em> 15bits, 因為記憶體大小為<span class=\"katex\"><span class=\"katex-mathml\"><math xmlns=\"http://www.w3.org/1998/Math/MathML\"><semantics><mrow><msup><mn>2</mn><mn>15</mn></msup></mrow><annotation encoding=\"application/x-tex\">2^{15}</annotation></semantics></math></span><span class=\"katex-html\" aria-hidden=\"true\"><span class=\"base\"><span class=\"strut\" style=\"height:0.8141079999999999em;vertical-align:0em;\"></span><span class=\"mord\"><span class=\"mord\">2</span><span class=\"msupsub\"><span class=\"vlist-t\"><span class=\"vlist-r\"><span class=\"vlist\" style=\"height:0.8141079999999999em;\"><span style=\"top:-3.063em;margin-right:0.05em;\"><span class=\"pstrut\" style=\"height:2.7em;\"></span><span class=\"sizing reset-size6 size3 mtight\"><span class=\"mord mtight\"><span class=\"mord mtight\">1</span><span class=\"mord mtight\">5</span></span></span></span></span></span></span></span></span></span></span></span> bytes, 因此 15 個 bits 就能表示所有記憶體位置，存在此位置的資料就是此指令要使用的資料</p>\n</li>\n</ul>\n</li>\n</ul>\n<h3 id=\"addressing-modes\"><a class=\"anchor\" href=\"#addressing-modes\">#</a> Addressing modes</h3>\n<ul>\n<li>There are two addressing mode avilable.</li>\n<li><strong>Direct</strong>: x = 0; TA (target address) = address</li>\n<li><strong>Indexed</strong>: x = 1; TA = address + (X)\n<ul>\n<li>X is the <strong>index register</strong> (<em>X</em> register)</li>\n</ul>\n</li>\n<li>Parentheses (小括號) are used to indicate the contents of a register or a memory location.</li>\n</ul>\n<h3 id=\"instruction-set\"><a class=\"anchor\" href=\"#instruction-set\">#</a> Instruction set</h3>\n<ul>\n<li>\n<p><strong>Load and store registers</strong></p>\n<ul>\n<li><code>LDA</code> ,  <code>LDX</code> , … : Load <em>A</em>, Load <em>X</em>, etc.</li>\n<li><code>STA</code> ,  <code>STX</code> , … : Store <em>A</em>, Store <em>X</em>, etc.</li>\n</ul>\n</li>\n<li>\n<p><strong>Integer arithmetic</strong> operations</p>\n<ul>\n<li><code>ADD</code> ,  <code>SUB</code> ,  <code>MUL</code> ,  <code>DIV</code></li>\n</ul>\n</li>\n<li>\n<p><code>COMP</code> : <strong>Compares</strong> the <strong>value in register <em>A</em></strong> with a <strong>word in memory</strong></p>\n<ul>\n<li><font>Setting</font> a <strong>condition code</strong> (CC) to indicate the result (&lt;, =, or &gt;)</li>\n<li>CC is stored in register <em>SW</em></li>\n</ul>\n</li>\n<li>\n<p><strong>Conditional jump instructions</strong></p>\n<ul>\n<li><code>JLT</code> : Jump if CC is set to &lt; (<strong>L</strong>ess <strong>T</strong>han)</li>\n<li><code>JEQ</code> : Jump if CC is set to = (<strong>EQ</strong>uals to)</li>\n<li><code>JGT</code> : Jump if CC is set to &gt; (<strong>G</strong>reater <strong>T</strong>han)</li>\n</ul>\n<div class=\"note info\">\n<p>在高階語言中，下列的敘述是: <em>如果 a &gt; b，則向下執行 X 區段，<strong>否則跳到</strong> Y 區段</em></p>\n<figure class=\"highlight cpp\"><figcaption data-lang=\"C++\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre><span class=\"token keyword\">if</span> <span class=\"token punctuation\">(</span>a <span class=\"token operator\">></span> b<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"2\"></td><td><pre>    <span class=\"token comment\">/* ===== X 區段 ===== */</span></pre></td></tr><tr><td data-num=\"3\"></td><td><pre>        <span class=\"token punctuation\">.</span><span class=\"token punctuation\">.</span><span class=\"token punctuation\">.</span></pre></td></tr><tr><td data-num=\"4\"></td><td><pre>    <span class=\"token comment\">/* ===== X 區段 ===== */</span></pre></td></tr><tr><td data-num=\"5\"></td><td><pre><span class=\"token punctuation\">&#125;</span> <span class=\"token keyword\">else</span> <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"6\"></td><td><pre>    <span class=\"token comment\">/* ===== Y 區段 ===== */</span></pre></td></tr><tr><td data-num=\"7\"></td><td><pre>        <span class=\"token punctuation\">.</span><span class=\"token punctuation\">.</span><span class=\"token punctuation\">.</span></pre></td></tr><tr><td data-num=\"8\"></td><td><pre>    <span class=\"token comment\">/* ===== Y 區段 ===== */</span></pre></td></tr><tr><td data-num=\"9\"></td><td><pre><span class=\"token punctuation\">&#125;</span></pre></td></tr></table></figure><p>但在低階語言中，JUMP 的指令 ( <code>JLE</code> ,  <code>JGT</code> ,  <code>JLT</code> ) 是<strong>滿足</strong>某些 condition 才會跳到指定區段，和高階語言的邏輯相反</p>\n<p>所以編譯器把高階語言轉換成低階語言時，會把上面那段程式碼中，X 和 Y 區段對調，以便用低階語言實作相同的邏輯</p>\n<p>即，<em>如果 a &gt; b，則跳到 X 區段，否則繼續下向執行 Y 區段</em></p>\n<pre><code>COMP a, b\nJGT X\n/* ===== Y 區段 ===== */\n    ...\n/* ===== Y 區段 ===== */\n\n/* ===== X 區段 ===== */\n    ...\n/* ===== X 區段 ===== */\n</code></pre>\n</div>\n</li>\n<li>\n<p><code>JSUB</code> : jumping to a subroutine (function call)</p>\n</li>\n<li>\n<p><code>RSUB</code> : returning from a subroutine to the address contained in register <em>L</em></p>\n</li>\n</ul>\n<h3 id=\"input-output\"><a class=\"anchor\" href=\"#input-output\">#</a> Input &amp; Output</h3>\n<ul>\n<li>在標準版本的 SIC 中，進行 I/O 時會<strong>從 regiter <em>A</em></strong> 的<strong>最右的 8 個 bits</strong> 開始 (rightmost 8 bits)，<strong>一次搬動一個 byte</strong></li>\n<li>Each device is assigned a unique <strong>8-bit code</strong>\n<ul>\n<li>10 進位表示:  <code>0</code>  ~  <code>255</code></li>\n<li>16 進位表示:  <code>00</code>  ~  <code>FF</code></li>\n</ul>\n</li>\n<li>There are three I/O instructions:\n<ul>\n<li>Test Device:  <code>TD</code></li>\n<li>Read Data:  <code>RD</code></li>\n<li>Write Data:  <code>WD</code></li>\n</ul>\n</li>\n<li>On executing  <code>TD</code> , the <strong>condition code</strong> is set to indicate the <strong>result of test</strong>\n<ul>\n<li><strong>&lt;</strong> means device is <strong>ready</strong> to send or receive</li>\n<li><strong>=</strong> means device is <strong>not ready</strong></li>\n</ul>\n</li>\n</ul>\n<h2 id=\"sicxe-machine-architecture\"><a class=\"anchor\" href=\"#sicxe-machine-architecture\">#</a> SIC/XE Machine Architecture</h2>\n<h3 id=\"memory-2\"><a class=\"anchor\" href=\"#memory-2\">#</a> <span class=\"exturl\" data-url=\"aHR0cHM6Ly93d3cueW91dHViZS5jb20vd2F0Y2g/dj1TbFBoTVBuUTU4aw==\">Memory</span> 👍</h3>\n<ul>\n<li><strong>1 megabyte</strong> (<span class=\"katex\"><span class=\"katex-mathml\"><math xmlns=\"http://www.w3.org/1998/Math/MathML\"><semantics><mrow><msup><mn>2</mn><mn>20</mn></msup></mrow><annotation encoding=\"application/x-tex\">2^{20}</annotation></semantics></math></span><span class=\"katex-html\" aria-hidden=\"true\"><span class=\"base\"><span class=\"strut\" style=\"height:0.8141079999999999em;vertical-align:0em;\"></span><span class=\"mord\"><span class=\"mord\">2</span><span class=\"msupsub\"><span class=\"vlist-t\"><span class=\"vlist-r\"><span class=\"vlist\" style=\"height:0.8141079999999999em;\"><span style=\"top:-3.063em;margin-right:0.05em;\"><span class=\"pstrut\" style=\"height:2.7em;\"></span><span class=\"sizing reset-size6 size3 mtight\"><span class=\"mord mtight\"><span class=\"mord mtight\">2</span><span class=\"mord mtight\">0</span></span></span></span></span></span></span></span></span></span></span></span> bytes)</li>\n<li>Larger memory <span class=\"katex\"><span class=\"katex-mathml\"><math xmlns=\"http://www.w3.org/1998/Math/MathML\"><semantics><mrow><mo>⇒</mo></mrow><annotation encoding=\"application/x-tex\">\\Rightarrow</annotation></semantics></math></span><span class=\"katex-html\" aria-hidden=\"true\"><span class=\"base\"><span class=\"strut\" style=\"height:0.36687em;vertical-align:0em;\"></span><span class=\"mrel\">⇒</span></span></span></span> a change in <strong>instruction formats</strong> and <strong>addressing</strong> (需要更多的 bit 來表示記憶體位置)</li>\n</ul>\n<h3 id=\"registers-2\"><a class=\"anchor\" href=\"#registers-2\">#</a> <mark>Registers</mark></h3>\n<div class=\"note danger\">\n<p>比標準版本<strong>增加</strong>以下四個暫存器:</p>\n<ul>\n<li><strong>B</strong>: base register for addressing，基底暫存器，用在定址</li>\n<li><strong>S</strong>: general working register</li>\n<li><strong>T</strong>: general working register</li>\n<li><strong>F</strong>: floating-point accumulator，浮點累加器，用於浮點運算 (<strong>48 bits</strong>)</li>\n</ul>\n</div>\n<p><strong>General Working/Purpose Register</strong></p>\n<ul>\n<li>沒有用在任何特殊目的的暫存器</li>\n<li>可以儲存任意資料</li>\n<li>用途由程式設計者自行決定</li>\n</ul>\n<h3 id=\"data-formats-2\"><a class=\"anchor\" href=\"#data-formats-2\">#</a> Data Formats</h3>\n<p>整數、字元的資料格式和和標準 SIC 相同</p>\n<p><strong>In addition</strong>, there is a <strong>48-bit floating point</strong> data type:<br>\n<img data-src=\"https://i.imgur.com/Qn9UxiC.png\" alt=\"\"></p>\n<ul>\n<li><strong>fraction</strong> (<span class=\"katex\"><span class=\"katex-mathml\"><math xmlns=\"http://www.w3.org/1998/Math/MathML\"><semantics><mrow><mi>F</mi></mrow><annotation encoding=\"application/x-tex\">F</annotation></semantics></math></span><span class=\"katex-html\" aria-hidden=\"true\"><span class=\"base\"><span class=\"strut\" style=\"height:0.68333em;vertical-align:0em;\"></span><span class=\"mord mathnormal\" style=\"margin-right:0.13889em;\">F</span></span></span></span>)\n<ul>\n<li>The fraction is interpreted as a value between 0 and 1</li>\n<li>For <strong>normalized</strong> floating point number, the high-order bit (最左位) of the fraction must be 1</li>\n</ul>\n</li>\n<li><strong>exponent</strong>: (<span class=\"katex\"><span class=\"katex-mathml\"><math xmlns=\"http://www.w3.org/1998/Math/MathML\"><semantics><mrow><mi>e</mi></mrow><annotation encoding=\"application/x-tex\">e</annotation></semantics></math></span><span class=\"katex-html\" aria-hidden=\"true\"><span class=\"base\"><span class=\"strut\" style=\"height:0.43056em;vertical-align:0em;\"></span><span class=\"mord mathnormal\">e</span></span></span></span>)\n<ul>\n<li>the exponent is interpreted as an unsigned binary number between 0 and 2047</li>\n</ul>\n</li>\n<li><strong>s</strong>: the sign of the value\n<ul>\n<li>0: postive</li>\n<li>1: negative</li>\n</ul>\n</li>\n<li>The value of the floating-point number:<p><span class=\"katex-display\"><span class=\"katex\"><span class=\"katex-mathml\"><math xmlns=\"http://www.w3.org/1998/Math/MathML\" display=\"block\"><semantics><mrow><mo stretchy=\"false\">(</mo><mo>−</mo><mn>1</mn><msup><mo stretchy=\"false\">)</mo><mi>s</mi></msup><mo>×</mo><mn>0.</mn><mi>F</mi><mo>×</mo><msup><mn>2</mn><mrow><mo stretchy=\"false\">(</mo><mi>e</mi><mo>−</mo><mn>1024</mn><mo stretchy=\"false\">)</mo></mrow></msup></mrow><annotation encoding=\"application/x-tex\">(-1)^s \\times 0.F \\times 2^{(e-1024)}\n</annotation></semantics></math></span><span class=\"katex-html\" aria-hidden=\"true\"><span class=\"base\"><span class=\"strut\" style=\"height:1em;vertical-align:-0.25em;\"></span><span class=\"mopen\">(</span><span class=\"mord\">−</span><span class=\"mord\">1</span><span class=\"mclose\"><span class=\"mclose\">)</span><span class=\"msupsub\"><span class=\"vlist-t\"><span class=\"vlist-r\"><span class=\"vlist\" style=\"height:0.7143919999999999em;\"><span style=\"top:-3.113em;margin-right:0.05em;\"><span class=\"pstrut\" style=\"height:2.7em;\"></span><span class=\"sizing reset-size6 size3 mtight\"><span class=\"mord mathnormal mtight\">s</span></span></span></span></span></span></span></span><span class=\"mspace\" style=\"margin-right:0.2222222222222222em;\"></span><span class=\"mbin\">×</span><span class=\"mspace\" style=\"margin-right:0.2222222222222222em;\"></span></span><span class=\"base\"><span class=\"strut\" style=\"height:0.76666em;vertical-align:-0.08333em;\"></span><span class=\"mord\">0</span><span class=\"mord\">.</span><span class=\"mord mathnormal\" style=\"margin-right:0.13889em;\">F</span><span class=\"mspace\" style=\"margin-right:0.2222222222222222em;\"></span><span class=\"mbin\">×</span><span class=\"mspace\" style=\"margin-right:0.2222222222222222em;\"></span></span><span class=\"base\"><span class=\"strut\" style=\"height:0.938em;vertical-align:0em;\"></span><span class=\"mord\"><span class=\"mord\">2</span><span class=\"msupsub\"><span class=\"vlist-t\"><span class=\"vlist-r\"><span class=\"vlist\" style=\"height:0.938em;\"><span style=\"top:-3.113em;margin-right:0.05em;\"><span class=\"pstrut\" style=\"height:2.7em;\"></span><span class=\"sizing reset-size6 size3 mtight\"><span class=\"mord mtight\"><span class=\"mopen mtight\">(</span><span class=\"mord mathnormal mtight\">e</span><span class=\"mbin mtight\">−</span><span class=\"mord mtight\">1</span><span class=\"mord mtight\">0</span><span class=\"mord mtight\">2</span><span class=\"mord mtight\">4</span><span class=\"mclose mtight\">)</span></span></span></span></span></span></span></span></span></span></span></span></span></p>\n</li>\n<li>A value of 0 is represented by all 0</li>\n</ul>\n<div class=\"note info\">\n<ul>\n<li><strong>Bit string to value</strong><pre><code>| s |   exponent    |                  fraction                    |\n+---+---------------+----------------------------------------------+\n| 0 | 100 0000 0010 | 1010 0000 0000 0000 0000 0000 0000 0000 0000 |\n</code></pre>\n<ul>\n<li><span class=\"katex\"><span class=\"katex-mathml\"><math xmlns=\"http://www.w3.org/1998/Math/MathML\"><semantics><mrow><mi>s</mi></mrow><annotation encoding=\"application/x-tex\">s</annotation></semantics></math></span><span class=\"katex-html\" aria-hidden=\"true\"><span class=\"base\"><span class=\"strut\" style=\"height:0.43056em;vertical-align:0em;\"></span><span class=\"mord mathnormal\">s</span></span></span></span>: <span class=\"katex\"><span class=\"katex-mathml\"><math xmlns=\"http://www.w3.org/1998/Math/MathML\"><semantics><mrow><mn>0</mn><mo>⇒</mo></mrow><annotation encoding=\"application/x-tex\">0 \\Rightarrow</annotation></semantics></math></span><span class=\"katex-html\" aria-hidden=\"true\"><span class=\"base\"><span class=\"strut\" style=\"height:0.64444em;vertical-align:0em;\"></span><span class=\"mord\">0</span><span class=\"mspace\" style=\"margin-right:0.2777777777777778em;\"></span><span class=\"mrel\">⇒</span></span></span></span> postive</li>\n<li><span class=\"katex\"><span class=\"katex-mathml\"><math xmlns=\"http://www.w3.org/1998/Math/MathML\"><semantics><mrow><mi>e</mi></mrow><annotation encoding=\"application/x-tex\">e</annotation></semantics></math></span><span class=\"katex-html\" aria-hidden=\"true\"><span class=\"base\"><span class=\"strut\" style=\"height:0.43056em;vertical-align:0em;\"></span><span class=\"mord mathnormal\">e</span></span></span></span>: <span class=\"katex\"><span class=\"katex-mathml\"><math xmlns=\"http://www.w3.org/1998/Math/MathML\"><semantics><mrow><mn>1026</mn></mrow><annotation encoding=\"application/x-tex\">1026</annotation></semantics></math></span><span class=\"katex-html\" aria-hidden=\"true\"><span class=\"base\"><span class=\"strut\" style=\"height:0.64444em;vertical-align:0em;\"></span><span class=\"mord\">1</span><span class=\"mord\">0</span><span class=\"mord\">2</span><span class=\"mord\">6</span></span></span></span></li>\n<li><span class=\"katex\"><span class=\"katex-mathml\"><math xmlns=\"http://www.w3.org/1998/Math/MathML\"><semantics><mrow><mi>F</mi></mrow><annotation encoding=\"application/x-tex\">F</annotation></semantics></math></span><span class=\"katex-html\" aria-hidden=\"true\"><span class=\"base\"><span class=\"strut\" style=\"height:0.68333em;vertical-align:0em;\"></span><span class=\"mord mathnormal\" style=\"margin-right:0.13889em;\">F</span></span></span></span>: <span class=\"katex\"><span class=\"katex-mathml\"><math xmlns=\"http://www.w3.org/1998/Math/MathML\"><semantics><mrow><mo stretchy=\"false\">(</mo><mn>0.1010</mn><mtext> </mtext><mn>0000...</mn><msub><mo stretchy=\"false\">)</mo><mn>2</mn></msub><mo>=</mo><msup><mn>2</mn><mrow><mo>−</mo><mn>1</mn></mrow></msup><mo>+</mo><msup><mn>2</mn><mrow><mo>−</mo><mn>3</mn></mrow></msup><mo>=</mo><mn>0.625</mn></mrow><annotation encoding=\"application/x-tex\">(0.1010\\ 0000...)_2 = 2^{-1} + 2^{-3} = 0.625</annotation></semantics></math></span><span class=\"katex-html\" aria-hidden=\"true\"><span class=\"base\"><span class=\"strut\" style=\"height:1em;vertical-align:-0.25em;\"></span><span class=\"mopen\">(</span><span class=\"mord\">0</span><span class=\"mord\">.</span><span class=\"mord\">1</span><span class=\"mord\">0</span><span class=\"mord\">1</span><span class=\"mord\">0</span><span class=\"mspace\"> </span><span class=\"mord\">0</span><span class=\"mord\">0</span><span class=\"mord\">0</span><span class=\"mord\">0</span><span class=\"mord\">.</span><span class=\"mord\">.</span><span class=\"mord\">.</span><span class=\"mclose\"><span class=\"mclose\">)</span><span class=\"msupsub\"><span class=\"vlist-t vlist-t2\"><span class=\"vlist-r\"><span class=\"vlist\" style=\"height:0.30110799999999993em;\"><span style=\"top:-2.5500000000000003em;margin-left:0em;margin-right:0.05em;\"><span class=\"pstrut\" style=\"height:2.7em;\"></span><span class=\"sizing reset-size6 size3 mtight\"><span class=\"mord mtight\">2</span></span></span></span><span class=\"vlist-s\">​</span></span><span class=\"vlist-r\"><span class=\"vlist\" style=\"height:0.15em;\"><span></span></span></span></span></span></span><span class=\"mspace\" style=\"margin-right:0.2777777777777778em;\"></span><span class=\"mrel\">=</span><span class=\"mspace\" style=\"margin-right:0.2777777777777778em;\"></span></span><span class=\"base\"><span class=\"strut\" style=\"height:0.897438em;vertical-align:-0.08333em;\"></span><span class=\"mord\"><span class=\"mord\">2</span><span class=\"msupsub\"><span class=\"vlist-t\"><span class=\"vlist-r\"><span class=\"vlist\" style=\"height:0.8141079999999999em;\"><span style=\"top:-3.063em;margin-right:0.05em;\"><span class=\"pstrut\" style=\"height:2.7em;\"></span><span class=\"sizing reset-size6 size3 mtight\"><span class=\"mord mtight\"><span class=\"mord mtight\">−</span><span class=\"mord mtight\">1</span></span></span></span></span></span></span></span></span><span class=\"mspace\" style=\"margin-right:0.2222222222222222em;\"></span><span class=\"mbin\">+</span><span class=\"mspace\" style=\"margin-right:0.2222222222222222em;\"></span></span><span class=\"base\"><span class=\"strut\" style=\"height:0.8141079999999999em;vertical-align:0em;\"></span><span class=\"mord\"><span class=\"mord\">2</span><span class=\"msupsub\"><span class=\"vlist-t\"><span class=\"vlist-r\"><span class=\"vlist\" style=\"height:0.8141079999999999em;\"><span style=\"top:-3.063em;margin-right:0.05em;\"><span class=\"pstrut\" style=\"height:2.7em;\"></span><span class=\"sizing reset-size6 size3 mtight\"><span class=\"mord mtight\"><span class=\"mord mtight\">−</span><span class=\"mord mtight\">3</span></span></span></span></span></span></span></span></span><span class=\"mspace\" style=\"margin-right:0.2777777777777778em;\"></span><span class=\"mrel\">=</span><span class=\"mspace\" style=\"margin-right:0.2777777777777778em;\"></span></span><span class=\"base\"><span class=\"strut\" style=\"height:0.64444em;vertical-align:0em;\"></span><span class=\"mord\">0</span><span class=\"mord\">.</span><span class=\"mord\">6</span><span class=\"mord\">2</span><span class=\"mord\">5</span></span></span></span></li>\n<li>The value of the floating point number\\begin{split}\n     &0.625 \\times 2^{(1026-1024)} \\\\\n    =&0.625 \\times 2^2 \\\\\n    =&2.5\n\\end{split}\n\n</li>\n</ul>\n</li>\n</ul>\n</div>\n<div class=\"note info\">\n<ul>\n<li><strong>Value to bit string</strong>\n<ul>\n<li>7.625 轉浮點數表示</li>\n<li>轉二進制<p><span class=\"katex-display\"><span class=\"katex\"><span class=\"katex-mathml\"><math xmlns=\"http://www.w3.org/1998/Math/MathML\" display=\"block\"><semantics><mrow><mn>7.625</mn><mo>=</mo><msup><mn>2</mn><mn>2</mn></msup><mo>+</mo><msup><mn>2</mn><mn>1</mn></msup><mo>+</mo><msup><mn>2</mn><mn>0</mn></msup><mo>+</mo><msup><mn>2</mn><mrow><mo>−</mo><mn>1</mn></mrow></msup><mo>+</mo><msup><mn>2</mn><mrow><mo>−</mo><mn>3</mn></mrow></msup><mo>=</mo><mo stretchy=\"false\">(</mo><mn>111.101</mn><msub><mo stretchy=\"false\">)</mo><mn>2</mn></msub></mrow><annotation encoding=\"application/x-tex\">7.625 = 2^2 + 2^1 + 2^0 + 2^{-1} + 2^{-3} = (111.101)_2\n</annotation></semantics></math></span><span class=\"katex-html\" aria-hidden=\"true\"><span class=\"base\"><span class=\"strut\" style=\"height:0.64444em;vertical-align:0em;\"></span><span class=\"mord\">7</span><span class=\"mord\">.</span><span class=\"mord\">6</span><span class=\"mord\">2</span><span class=\"mord\">5</span><span class=\"mspace\" style=\"margin-right:0.2777777777777778em;\"></span><span class=\"mrel\">=</span><span class=\"mspace\" style=\"margin-right:0.2777777777777778em;\"></span></span><span class=\"base\"><span class=\"strut\" style=\"height:0.9474379999999999em;vertical-align:-0.08333em;\"></span><span class=\"mord\"><span class=\"mord\">2</span><span class=\"msupsub\"><span class=\"vlist-t\"><span class=\"vlist-r\"><span class=\"vlist\" style=\"height:0.8641079999999999em;\"><span style=\"top:-3.113em;margin-right:0.05em;\"><span class=\"pstrut\" style=\"height:2.7em;\"></span><span class=\"sizing reset-size6 size3 mtight\"><span class=\"mord mtight\">2</span></span></span></span></span></span></span></span><span class=\"mspace\" style=\"margin-right:0.2222222222222222em;\"></span><span class=\"mbin\">+</span><span class=\"mspace\" style=\"margin-right:0.2222222222222222em;\"></span></span><span class=\"base\"><span class=\"strut\" style=\"height:0.9474379999999999em;vertical-align:-0.08333em;\"></span><span class=\"mord\"><span class=\"mord\">2</span><span class=\"msupsub\"><span class=\"vlist-t\"><span class=\"vlist-r\"><span class=\"vlist\" style=\"height:0.8641079999999999em;\"><span style=\"top:-3.113em;margin-right:0.05em;\"><span class=\"pstrut\" style=\"height:2.7em;\"></span><span class=\"sizing reset-size6 size3 mtight\"><span class=\"mord mtight\">1</span></span></span></span></span></span></span></span><span class=\"mspace\" style=\"margin-right:0.2222222222222222em;\"></span><span class=\"mbin\">+</span><span class=\"mspace\" style=\"margin-right:0.2222222222222222em;\"></span></span><span class=\"base\"><span class=\"strut\" style=\"height:0.9474379999999999em;vertical-align:-0.08333em;\"></span><span class=\"mord\"><span class=\"mord\">2</span><span class=\"msupsub\"><span class=\"vlist-t\"><span class=\"vlist-r\"><span class=\"vlist\" style=\"height:0.8641079999999999em;\"><span style=\"top:-3.113em;margin-right:0.05em;\"><span class=\"pstrut\" style=\"height:2.7em;\"></span><span class=\"sizing reset-size6 size3 mtight\"><span class=\"mord mtight\">0</span></span></span></span></span></span></span></span><span class=\"mspace\" style=\"margin-right:0.2222222222222222em;\"></span><span class=\"mbin\">+</span><span class=\"mspace\" style=\"margin-right:0.2222222222222222em;\"></span></span><span class=\"base\"><span class=\"strut\" style=\"height:0.947438em;vertical-align:-0.08333em;\"></span><span class=\"mord\"><span class=\"mord\">2</span><span class=\"msupsub\"><span class=\"vlist-t\"><span class=\"vlist-r\"><span class=\"vlist\" style=\"height:0.864108em;\"><span style=\"top:-3.113em;margin-right:0.05em;\"><span class=\"pstrut\" style=\"height:2.7em;\"></span><span class=\"sizing reset-size6 size3 mtight\"><span class=\"mord mtight\"><span class=\"mord mtight\">−</span><span class=\"mord mtight\">1</span></span></span></span></span></span></span></span></span><span class=\"mspace\" style=\"margin-right:0.2222222222222222em;\"></span><span class=\"mbin\">+</span><span class=\"mspace\" style=\"margin-right:0.2222222222222222em;\"></span></span><span class=\"base\"><span class=\"strut\" style=\"height:0.864108em;vertical-align:0em;\"></span><span class=\"mord\"><span class=\"mord\">2</span><span class=\"msupsub\"><span class=\"vlist-t\"><span class=\"vlist-r\"><span class=\"vlist\" style=\"height:0.864108em;\"><span style=\"top:-3.113em;margin-right:0.05em;\"><span class=\"pstrut\" style=\"height:2.7em;\"></span><span class=\"sizing reset-size6 size3 mtight\"><span class=\"mord mtight\"><span class=\"mord mtight\">−</span><span class=\"mord mtight\">3</span></span></span></span></span></span></span></span></span><span class=\"mspace\" style=\"margin-right:0.2777777777777778em;\"></span><span class=\"mrel\">=</span><span class=\"mspace\" style=\"margin-right:0.2777777777777778em;\"></span></span><span class=\"base\"><span class=\"strut\" style=\"height:1em;vertical-align:-0.25em;\"></span><span class=\"mopen\">(</span><span class=\"mord\">1</span><span class=\"mord\">1</span><span class=\"mord\">1</span><span class=\"mord\">.</span><span class=\"mord\">1</span><span class=\"mord\">0</span><span class=\"mord\">1</span><span class=\"mclose\"><span class=\"mclose\">)</span><span class=\"msupsub\"><span class=\"vlist-t vlist-t2\"><span class=\"vlist-r\"><span class=\"vlist\" style=\"height:0.30110799999999993em;\"><span style=\"top:-2.5500000000000003em;margin-left:0em;margin-right:0.05em;\"><span class=\"pstrut\" style=\"height:2.7em;\"></span><span class=\"sizing reset-size6 size3 mtight\"><span class=\"mord mtight\">2</span></span></span></span><span class=\"vlist-s\">​</span></span><span class=\"vlist-r\"><span class=\"vlist\" style=\"height:0.15em;\"><span></span></span></span></span></span></span></span></span></span></span></p>\n</li>\n<li>normalize<p><span class=\"katex-display\"><span class=\"katex\"><span class=\"katex-mathml\"><math xmlns=\"http://www.w3.org/1998/Math/MathML\" display=\"block\"><semantics><mrow><mo stretchy=\"false\">(</mo><mn>111.101</mn><msub><mo stretchy=\"false\">)</mo><mn>2</mn></msub><mo>=</mo><mo stretchy=\"false\">(</mo><mn>0.111101</mn><msub><mo stretchy=\"false\">)</mo><mn>2</mn></msub><mo>×</mo><msup><mn>2</mn><mn>3</mn></msup></mrow><annotation encoding=\"application/x-tex\">(111.101)_2 = (0.111101)_2 \\times 2^3\n</annotation></semantics></math></span><span class=\"katex-html\" aria-hidden=\"true\"><span class=\"base\"><span class=\"strut\" style=\"height:1em;vertical-align:-0.25em;\"></span><span class=\"mopen\">(</span><span class=\"mord\">1</span><span class=\"mord\">1</span><span class=\"mord\">1</span><span class=\"mord\">.</span><span class=\"mord\">1</span><span class=\"mord\">0</span><span class=\"mord\">1</span><span class=\"mclose\"><span class=\"mclose\">)</span><span class=\"msupsub\"><span class=\"vlist-t vlist-t2\"><span class=\"vlist-r\"><span class=\"vlist\" style=\"height:0.30110799999999993em;\"><span style=\"top:-2.5500000000000003em;margin-left:0em;margin-right:0.05em;\"><span class=\"pstrut\" style=\"height:2.7em;\"></span><span class=\"sizing reset-size6 size3 mtight\"><span class=\"mord mtight\">2</span></span></span></span><span class=\"vlist-s\">​</span></span><span class=\"vlist-r\"><span class=\"vlist\" style=\"height:0.15em;\"><span></span></span></span></span></span></span><span class=\"mspace\" style=\"margin-right:0.2777777777777778em;\"></span><span class=\"mrel\">=</span><span class=\"mspace\" style=\"margin-right:0.2777777777777778em;\"></span></span><span class=\"base\"><span class=\"strut\" style=\"height:1em;vertical-align:-0.25em;\"></span><span class=\"mopen\">(</span><span class=\"mord\">0</span><span class=\"mord\">.</span><span class=\"mord\">1</span><span class=\"mord\">1</span><span class=\"mord\">1</span><span class=\"mord\">1</span><span class=\"mord\">0</span><span class=\"mord\">1</span><span class=\"mclose\"><span class=\"mclose\">)</span><span class=\"msupsub\"><span class=\"vlist-t vlist-t2\"><span class=\"vlist-r\"><span class=\"vlist\" style=\"height:0.30110799999999993em;\"><span style=\"top:-2.5500000000000003em;margin-left:0em;margin-right:0.05em;\"><span class=\"pstrut\" style=\"height:2.7em;\"></span><span class=\"sizing reset-size6 size3 mtight\"><span class=\"mord mtight\">2</span></span></span></span><span class=\"vlist-s\">​</span></span><span class=\"vlist-r\"><span class=\"vlist\" style=\"height:0.15em;\"><span></span></span></span></span></span></span><span class=\"mspace\" style=\"margin-right:0.2222222222222222em;\"></span><span class=\"mbin\">×</span><span class=\"mspace\" style=\"margin-right:0.2222222222222222em;\"></span></span><span class=\"base\"><span class=\"strut\" style=\"height:0.8641079999999999em;vertical-align:0em;\"></span><span class=\"mord\"><span class=\"mord\">2</span><span class=\"msupsub\"><span class=\"vlist-t\"><span class=\"vlist-r\"><span class=\"vlist\" style=\"height:0.8641079999999999em;\"><span style=\"top:-3.113em;margin-right:0.05em;\"><span class=\"pstrut\" style=\"height:2.7em;\"></span><span class=\"sizing reset-size6 size3 mtight\"><span class=\"mord mtight\">3</span></span></span></span></span></span></span></span></span></span></span></span></p>\n</li>\n<li><span class=\"katex\"><span class=\"katex-mathml\"><math xmlns=\"http://www.w3.org/1998/Math/MathML\"><semantics><mrow><mi>s</mi></mrow><annotation encoding=\"application/x-tex\">s</annotation></semantics></math></span><span class=\"katex-html\" aria-hidden=\"true\"><span class=\"base\"><span class=\"strut\" style=\"height:0.43056em;vertical-align:0em;\"></span><span class=\"mord mathnormal\">s</span></span></span></span>: Postive <span class=\"katex\"><span class=\"katex-mathml\"><math xmlns=\"http://www.w3.org/1998/Math/MathML\"><semantics><mrow><mo>⇒</mo><mn>0</mn></mrow><annotation encoding=\"application/x-tex\">\\Rightarrow 0</annotation></semantics></math></span><span class=\"katex-html\" aria-hidden=\"true\"><span class=\"base\"><span class=\"strut\" style=\"height:0.36687em;vertical-align:0em;\"></span><span class=\"mrel\">⇒</span><span class=\"mspace\" style=\"margin-right:0.2777777777777778em;\"></span></span><span class=\"base\"><span class=\"strut\" style=\"height:0.64444em;vertical-align:0em;\"></span><span class=\"mord\">0</span></span></span></span></li>\n<li><span class=\"katex\"><span class=\"katex-mathml\"><math xmlns=\"http://www.w3.org/1998/Math/MathML\"><semantics><mrow><mi>f</mi></mrow><annotation encoding=\"application/x-tex\">f</annotation></semantics></math></span><span class=\"katex-html\" aria-hidden=\"true\"><span class=\"base\"><span class=\"strut\" style=\"height:0.8888799999999999em;vertical-align:-0.19444em;\"></span><span class=\"mord mathnormal\" style=\"margin-right:0.10764em;\">f</span></span></span></span>: 取小數點後的部分 <span class=\"katex\"><span class=\"katex-mathml\"><math xmlns=\"http://www.w3.org/1998/Math/MathML\"><semantics><mrow><mo>⇒</mo><mn>1111</mn><mtext> </mtext><mn>0100</mn><mtext> </mtext><mn>0000...</mn></mrow><annotation encoding=\"application/x-tex\">\\Rightarrow 1111\\ 0100\\ 0000...</annotation></semantics></math></span><span class=\"katex-html\" aria-hidden=\"true\"><span class=\"base\"><span class=\"strut\" style=\"height:0.36687em;vertical-align:0em;\"></span><span class=\"mrel\">⇒</span><span class=\"mspace\" style=\"margin-right:0.2777777777777778em;\"></span></span><span class=\"base\"><span class=\"strut\" style=\"height:0.64444em;vertical-align:0em;\"></span><span class=\"mord\">1</span><span class=\"mord\">1</span><span class=\"mord\">1</span><span class=\"mord\">1</span><span class=\"mspace\"> </span><span class=\"mord\">0</span><span class=\"mord\">1</span><span class=\"mord\">0</span><span class=\"mord\">0</span><span class=\"mspace\"> </span><span class=\"mord\">0</span><span class=\"mord\">0</span><span class=\"mord\">0</span><span class=\"mord\">0</span><span class=\"mord\">.</span><span class=\"mord\">.</span><span class=\"mord\">.</span></span></span></span></li>\n<li><span class=\"katex\"><span class=\"katex-mathml\"><math xmlns=\"http://www.w3.org/1998/Math/MathML\"><semantics><mrow><mi>e</mi></mrow><annotation encoding=\"application/x-tex\">e</annotation></semantics></math></span><span class=\"katex-html\" aria-hidden=\"true\"><span class=\"base\"><span class=\"strut\" style=\"height:0.43056em;vertical-align:0em;\"></span><span class=\"mord mathnormal\">e</span></span></span></span>: <span class=\"katex\"><span class=\"katex-mathml\"><math xmlns=\"http://www.w3.org/1998/Math/MathML\"><semantics><mrow><mn>3</mn><mo>+</mo><mn>1024</mn><mo>=</mo><mn>1027</mn><mo>⇒</mo><mn>100</mn><mtext> </mtext><mn>0000</mn><mtext> </mtext><mn>0011</mn></mrow><annotation encoding=\"application/x-tex\">3 + 1024=1027 \\Rightarrow 100\\ 0000\\ 0011</annotation></semantics></math></span><span class=\"katex-html\" aria-hidden=\"true\"><span class=\"base\"><span class=\"strut\" style=\"height:0.72777em;vertical-align:-0.08333em;\"></span><span class=\"mord\">3</span><span class=\"mspace\" style=\"margin-right:0.2222222222222222em;\"></span><span class=\"mbin\">+</span><span class=\"mspace\" style=\"margin-right:0.2222222222222222em;\"></span></span><span class=\"base\"><span class=\"strut\" style=\"height:0.64444em;vertical-align:0em;\"></span><span class=\"mord\">1</span><span class=\"mord\">0</span><span class=\"mord\">2</span><span class=\"mord\">4</span><span class=\"mspace\" style=\"margin-right:0.2777777777777778em;\"></span><span class=\"mrel\">=</span><span class=\"mspace\" style=\"margin-right:0.2777777777777778em;\"></span></span><span class=\"base\"><span class=\"strut\" style=\"height:0.64444em;vertical-align:0em;\"></span><span class=\"mord\">1</span><span class=\"mord\">0</span><span class=\"mord\">2</span><span class=\"mord\">7</span><span class=\"mspace\" style=\"margin-right:0.2777777777777778em;\"></span><span class=\"mrel\">⇒</span><span class=\"mspace\" style=\"margin-right:0.2777777777777778em;\"></span></span><span class=\"base\"><span class=\"strut\" style=\"height:0.64444em;vertical-align:0em;\"></span><span class=\"mord\">1</span><span class=\"mord\">0</span><span class=\"mord\">0</span><span class=\"mspace\"> </span><span class=\"mord\">0</span><span class=\"mord\">0</span><span class=\"mord\">0</span><span class=\"mord\">0</span><span class=\"mspace\"> </span><span class=\"mord\">0</span><span class=\"mord\">0</span><span class=\"mord\">1</span><span class=\"mord\">1</span></span></span></span></li>\n</ul>\n<pre><code>| s |   exponent    |                  fraction                    |\n+---+---------------+----------------------------------------------+\n| 0 | 100 0000 0011 | 1111 0100 0000 0000 0000 0000 0000 0000 0000 |\n</code></pre>\n</li>\n</ul>\n</div>\n<h3 id=\"instruction-formats-2\"><a class=\"anchor\" href=\"#instruction-formats-2\">#</a> Instruction Formats</h3>\n<ul>\n<li>\n<p><strong>Format 1</strong> (1 byte)</p>\n<ul>\n<li>不用指定運算元的指令，如特定暫存器 + 1<br>\n<img data-src=\"https://i.imgur.com/Qfl6718.png\" alt=\"\"></li>\n</ul>\n</li>\n<li>\n<p><strong>Format 2</strong> (2 byte)</p>\n<ul>\n<li>指定暫存器 address 進行運算<br>\n<img data-src=\"https://i.imgur.com/oeO2joD.png\" alt=\"\"></li>\n</ul>\n</li>\n<li>\n<p><strong>Format 3</strong> (3 byte)</p>\n<ul>\n<li>大多數指令為此格式</li>\n<li>Relative addressing mode 一定是 format 3</li>\n<li>Immediate/Directed addressing mode 時，如果數值 / 地址不超過 disp 的表示範圍 (12 bits)，則使用 format 3<br>\n<img data-src=\"https://i.imgur.com/GUppSLD.png\" alt=\"\"><br>\n<em>disp: <u>displacement</u></em></li>\n</ul>\n</li>\n<li>\n<p><strong>Format 4</strong> (4 byte)</p>\n<ul>\n<li>在 Immediate/Directed addressing mode，如果數值 / 地址無法用 12-bits 表示，則會使用 format 4<br>\n<img data-src=\"https://i.imgur.com/qfjydIc.png\" alt=\"\"></li>\n</ul>\n</li>\n</ul>\n<p>Bit <em>e</em> is used to <strong>distinguish between Format 3 and 4</strong></p>\n<ul>\n<li>0: format 3</li>\n<li>1: format 4</li>\n</ul>\n<hr>\n<ul>\n<li><strong>n</strong>: indirect addressing flag</li>\n<li><strong>i</strong>: immediate addressing flag</li>\n<li><strong>x</strong>: indexed addressing flag</li>\n<li><strong>b</strong>: base address relative flag</li>\n<li><strong>p</strong>: program counter relative flag</li>\n<li><strong>e</strong>: format 4 instruction flag</li>\n</ul>\n<h3 id=\"addressing-modes-2\"><a class=\"anchor\" href=\"#addressing-modes-2\">#</a> Addressing Modes</h3>\n<p><strong>Format 3</strong></p>\n<ul>\n<li>\n<p>Two new <strong>relative</strong> addressing modes</p>\n<ul>\n<li>\n<p><strong>Base relative</strong>: <mark>b=1, p=0</mark>, TA=(B)+disp</p>\n<ul>\n<li><span class=\"katex\"><span class=\"katex-mathml\"><math xmlns=\"http://www.w3.org/1998/Math/MathML\"><semantics><mrow><mn>0</mn><mo>≤</mo><mtext>disp</mtext><mo>≤</mo><mn>4095</mn></mrow><annotation encoding=\"application/x-tex\">0 \\le \\text{disp} \\le 4095</annotation></semantics></math></span><span class=\"katex-html\" aria-hidden=\"true\"><span class=\"base\"><span class=\"strut\" style=\"height:0.78041em;vertical-align:-0.13597em;\"></span><span class=\"mord\">0</span><span class=\"mspace\" style=\"margin-right:0.2777777777777778em;\"></span><span class=\"mrel\">≤</span><span class=\"mspace\" style=\"margin-right:0.2777777777777778em;\"></span></span><span class=\"base\"><span class=\"strut\" style=\"height:0.8888799999999999em;vertical-align:-0.19444em;\"></span><span class=\"mord text\"><span class=\"mord\">disp</span></span><span class=\"mspace\" style=\"margin-right:0.2777777777777778em;\"></span><span class=\"mrel\">≤</span><span class=\"mspace\" style=\"margin-right:0.2777777777777778em;\"></span></span><span class=\"base\"><span class=\"strut\" style=\"height:0.64444em;vertical-align:0em;\"></span><span class=\"mord\">4</span><span class=\"mord\">0</span><span class=\"mord\">9</span><span class=\"mord\">5</span></span></span></span></li>\n</ul>\n</li>\n<li>\n<p><strong>Program-Counter relative</strong>: <mark>b=0, p=1</mark>, TA=(PC)+disp</p>\n<ul>\n<li><span class=\"katex\"><span class=\"katex-mathml\"><math xmlns=\"http://www.w3.org/1998/Math/MathML\"><semantics><mrow><mo>−</mo><mn>2048</mn><mo>≤</mo><mtext>disp</mtext><mo>≤</mo><mn>2047</mn></mrow><annotation encoding=\"application/x-tex\">-2048 \\le \\text{disp} \\le 2047</annotation></semantics></math></span><span class=\"katex-html\" aria-hidden=\"true\"><span class=\"base\"><span class=\"strut\" style=\"height:0.78041em;vertical-align:-0.13597em;\"></span><span class=\"mord\">−</span><span class=\"mord\">2</span><span class=\"mord\">0</span><span class=\"mord\">4</span><span class=\"mord\">8</span><span class=\"mspace\" style=\"margin-right:0.2777777777777778em;\"></span><span class=\"mrel\">≤</span><span class=\"mspace\" style=\"margin-right:0.2777777777777778em;\"></span></span><span class=\"base\"><span class=\"strut\" style=\"height:0.8888799999999999em;vertical-align:-0.19444em;\"></span><span class=\"mord text\"><span class=\"mord\">disp</span></span><span class=\"mspace\" style=\"margin-right:0.2777777777777778em;\"></span><span class=\"mrel\">≤</span><span class=\"mspace\" style=\"margin-right:0.2777777777777778em;\"></span></span><span class=\"base\"><span class=\"strut\" style=\"height:0.64444em;vertical-align:0em;\"></span><span class=\"mord\">2</span><span class=\"mord\">0</span><span class=\"mord\">4</span><span class=\"mord\">7</span></span></span></span> using 2’s complement notation</li>\n<li>因為程式執行可能會有像迴圈要往回跳的狀況，所以需要負數</li>\n</ul>\n</li>\n</ul>\n</li>\n<li>\n<p><strong>Direct addressing</strong>: If <mark>b=0, p=0</mark>, TA=disp</p>\n</li>\n</ul>\n<p><strong>Format 4</strong></p>\n<ul>\n<li>bits b and p are normally set to 0\n<ul>\n<li><strong>Direct addressing</strong>: TA=address</li>\n</ul>\n</li>\n</ul>\n<p>Any of above addressing modes can also be combined with indexed addressing</p>\n<hr>\n<p><strong>Format 3/4 通用</strong></p>\n<ul>\n<li>\n<p>If bit <mark>i=1, n=0</mark>, the <strong>target address</strong> itself is used as the <strong>operand value</strong></p>\n<ul>\n<li><font>Immediate addressing</font></li>\n<li>算出來的 TA 本身就是資料，而不是地址</li>\n<li>常用在<strong>資料是常數</strong>的時候</li>\n<li>No memory reference is performed</li>\n</ul>\n</li>\n<li>\n<p>If bit <mark>i=0, n=1</mark>, word at the location given by the target address is fetched</p>\n<ul>\n<li><font>Indirect addressing</font></li>\n<li><strong>The value</strong> contained in this word is then taken as <strong>the address of the operand value</strong></li>\n<li>類似 C 語言裡面的對指標取值</li>\n</ul>\n</li>\n<li>\n<p>If bit <mark>i=0, n=0</mark> or <mark>i=1, b=1</mark>, the target address is taken as the location of the operand</p>\n<ul>\n<li><font>simple addressing</font></li>\n<li>最一般的使用方法，存放在記憶體 TA 位置的資料即運算元</li>\n<li>SIC/XE instructions that specify neither immediate nor indirect addressing are assembled with <strong>bits <em>n</em> and <em>i</em> both set to 1</strong>. (for upward compatibility)</li>\n<li>Assemblers for the standard version of SIC will set the bits in both of these positions to 0. This is because the 8-bit binary codes for all the SIC instructions end in 00.</li>\n</ul>\n</li>\n</ul>\n<p>For SIC/XE, if bits n and i are both 0, then bits b, p, and e are considered to be part of the address field of the instruction.</p>\n<ul>\n<li>This makes Instruction Format 3 identical to the format used on the standard version of SIC, providing the desired compatibility.</li>\n</ul>\n<div class=\"note danger\">\n<ul>\n<li>當<strong> n = 0; i = 0:</strong>\n<ul>\n<li><strong>SIC/XE</strong> 為了向上相容，會改變為<strong> SIC</strong> 的形式，此時的<em><strong> b,p,e</strong></em> 會和<em><strong> disp</strong></em> 合併為 15 個 bits</li>\n<li>因為會轉變為<strong> SIC</strong> 的形式，所以<strong> format 4</strong> 裡<em><strong> n, i</strong></em> 不會同時為 0</li>\n</ul>\n</li>\n<li>當<strong> n = 1; i = 1:</strong>\n<ul>\n<li>仍會去判斷<em><strong> b,p,e</strong></em> 的樣式</li>\n</ul>\n</li>\n</ul>\n</div>\n<div class=\"note info\">\n<ul>\n<li><strong>Relative</strong>/<strong>Direct</strong> Addressing Mode 定義如何求出 <em>TA</em></li>\n<li><strong>Immediate</strong>/<strong>Indirect</strong>/<strong>Simple</strong> Addressing Mode 定義求出 <em>TA</em> 後，如何得到運算元</li>\n<li>上面兩種模式是同時存在的，所以一共有 6 種組合，以下舉例三種\n<ul>\n<li>一條 format3 指令是 Direct+Simple\n<ul>\n<li>TA = disp</li>\n<li>代表運算元是存在記憶體位置 disp 上的資料</li>\n</ul>\n</li>\n<li>一條 format3 指令是 Direct+Immediate\n<ul>\n<li>TA = disp</li>\n<li>代表運算元是 disp</li>\n</ul>\n</li>\n<li>一條 format3 指令是 Relative+Immediate\n<ul>\n<li>TA = (B) + disp</li>\n<li>代表運算元是 (B) + disp</li>\n</ul>\n</li>\n</ul>\n</li>\n</ul>\n</div>\n<h3 id=\"instruction-set-2\"><a class=\"anchor\" href=\"#instruction-set-2\">#</a> Instruction Set</h3>\n<ul>\n<li><strong>Load/Store</strong>:  <code>LDB</code> ,  <code>STB</code> , …</li>\n<li><strong>Floating-Point Number Arithmetic</strong>:  <code>ADDF</code> ,  <code>SUBF</code> ,  <code>MULF</code> ,  <code>DIVF</code></li>\n<li><strong>Register Move</strong>:  <code>RMO</code></li>\n<li><strong>Register-to-Register Arithmetic</strong>:  <code>ADDR</code> ,  <code>SUBR</code> ,  <code>MULR</code> ,  <code>DIVR</code></li>\n<li><strong>Supervisor call instruction</strong>:  <code>SVC</code>\n<ul>\n<li>generating an <strong>interrupt</strong> that can be used for <strong>communication with the OS</strong>.</li>\n</ul>\n</li>\n</ul>\n<h3 id=\"input-and-output\"><a class=\"anchor\" href=\"#input-and-output\">#</a> Input and Output</h3>\n<ul>\n<li>There are <strong>I/O channels</strong> that can be used to perform input and output while the CPU is executing other instructions.</li>\n<li>This allow overlap of computing and I/O, resulting in more efficient system operation.</li>\n<li><strong>Instructions</strong>:\n<ul>\n<li>Start I/O:  <code>SIO</code></li>\n<li>Test I/O:  <code>TIO</code></li>\n<li>Halt I/O:  <code>HIO</code></li>\n</ul>\n</li>\n</ul>\n<h2 id=\"sic-programming-examples\"><a class=\"anchor\" href=\"#sic-programming-examples\">#</a> SIC Programming Examples</h2>\n<h3 id=\"\"><a class=\"anchor\" href=\"#\">#</a> <a href=\"./Appendix%20A.md\"><strong>附錄 A - 組合語言補充</strong></a></h3>\n<h3 id=\"-2\"><a class=\"anchor\" href=\"#-2\">#</a> <a href=\"./Ch01%20-%20%E7%AF%84%E4%BE%8B%E7%A8%8B%E5%BC%8F%E5%88%86%E6%9E%90.md\"><strong>範例程式分析</strong></a></h3>\n<h2 id=\"cisc-複雜指令集架構\"><a class=\"anchor\" href=\"#cisc-複雜指令集架構\">#</a> CISC (<span class=\"exturl\" data-url=\"aHR0cHM6Ly96aC53aWtpcGVkaWEub3JnL3poLXR3LyVFOCVBNCU4NyVFOSU5QiU5QyVFNiU4QyU4NyVFNCVCQiVBNCVFOSU5QiU4NiVFOSU5QiVCQiVFOCU4NSVBNg==\">複雜指令集架構</span>)</h2>\n<ul>\n<li><strong>CISC: Complex Instruction Set Computers</strong></li>\n<li>Implementation of such an architecture in <strong>hardware tends to be complex</strong>.</li>\n</ul>\n<h2 id=\"vax-virtual-address-extension-architecture\"><a class=\"anchor\" href=\"#vax-virtual-address-extension-architecture\">#</a> VAX (Virtual Address eXtension) Architecture</h2>\n<h3 id=\"memory-3\"><a class=\"anchor\" href=\"#memory-3\">#</a> Memory</h3>\n<ul>\n<li>8-bit bytes</li>\n<li>Byte Addresses</li>\n<li><font>Word</font>: 2 bytes</li>\n<li><font>Long Word</font>: 4 bytes</li>\n<li><font>Quadword</font>: 8 bytes</li>\n<li><font>Octaword</font>: 16 bytes</li>\n</ul>\n<p>Some operations are more efficient when operands are <strong>aligned in a particular way</strong></p>\n<ul>\n<li>For example, a <strong>longword</strong> operand that <strong>begins at a byte address</strong> that is a <strong>multiple of 4</strong>.</li>\n</ul>\n<p><font>Virtual address space</font>: <span class=\"katex\"><span class=\"katex-mathml\"><math xmlns=\"http://www.w3.org/1998/Math/MathML\"><semantics><mrow><msup><mn>2</mn><mn>32</mn></msup></mrow><annotation encoding=\"application/x-tex\">2^{32}</annotation></semantics></math></span><span class=\"katex-html\" aria-hidden=\"true\"><span class=\"base\"><span class=\"strut\" style=\"height:0.8141079999999999em;vertical-align:0em;\"></span><span class=\"mord\"><span class=\"mord\">2</span><span class=\"msupsub\"><span class=\"vlist-t\"><span class=\"vlist-r\"><span class=\"vlist\" style=\"height:0.8141079999999999em;\"><span style=\"top:-3.063em;margin-right:0.05em;\"><span class=\"pstrut\" style=\"height:2.7em;\"></span><span class=\"sizing reset-size6 size3 mtight\"><span class=\"mord mtight\"><span class=\"mord mtight\">3</span><span class=\"mord mtight\">2</span></span></span></span></span></span></span></span></span></span></span></span> bytes</p>\n<ul>\n<li>One <strong>half</strong> of the VAX virtual address space is called <font>system space</font>, which <strong>contains the operating system</strong>, and is <strong>shared by all programs</strong>.</li>\n<li>The other half of the address space is called <font>process space</font>, and is defined separately for each program.</li>\n</ul>\n<h3 id=\"registers-3\"><a class=\"anchor\" href=\"#registers-3\">#</a> Registers</h3>\n<ul>\n<li>16 <strong>general-purpose registers</strong>: <em>R0</em>~<em>R15</em>, <strong>32 bits</strong> in length.</li>\n<li><em>R15</em>: program counter</li>\n<li><em>R14</em>: stack pointer</li>\n<li><em>R13</em>: frame pointer</li>\n<li><em>R12</em>: argument pointer</li>\n<li><strong>Processor status longword</strong> (<em><strong>PSL</strong></em>), which contains state variables and flags associated with a process.</li>\n</ul>\n<h3 id=\"data-formats-3\"><a class=\"anchor\" href=\"#data-formats-3\">#</a> Data Formats</h3>\n<ul>\n<li><strong>2’s complement</strong> representation is used for negative values.</li>\n<li>Characters are stored using their <strong>8-bit ASCII codes</strong>.</li>\n<li>There are four different <strong>floating-point</strong> data formats, ranging in length <strong>from 4 to 16 bytes</strong>.</li>\n<li><strong>Packed decimal format</strong>: each byte represents two decimal digits.</li>\n<li><strong>Numeric format</strong>: one digit per byte.</li>\n<li>Support <strong>queues</strong> and <strong>variable-length bit strings</strong>.</li>\n</ul>\n<h3 id=\"instruction-formats-3\"><a class=\"anchor\" href=\"#instruction-formats-3\">#</a> Instruction Formats</h3>\n<ul>\n<li>A <strong>variable-length instruction format</strong>.</li>\n<li>Each instruction consists of <strong>an operation code</strong> (1 or 2 bytes) followed by <strong>up to six operand specifiers</strong>.</li>\n</ul>\n<h3 id=\"addressing-modes-3\"><a class=\"anchor\" href=\"#addressing-modes-3\">#</a> Addressing Modes</h3>\n<ul>\n<li>Immediate mode</li>\n<li>Register mode</li>\n<li><strong>Register deferred</strong> mode</li>\n<li>Autoincrement and autodecrement  modes (register content)</li>\n<li>Several base relative addressing modes</li>\n<li>May also include an index register</li>\n</ul>\n<h3 id=\"instruction-set-3\"><a class=\"anchor\" href=\"#instruction-set-3\">#</a> Instruction Set</h3>\n<ul>\n<li>Instruction mnemonics are formed by combining the following elements:\n<ol>\n<li>A <strong>prefix</strong> that specifies the <strong>type of operation</strong></li>\n<li>A <strong>suffix</strong> that specifies the <strong>data type of the operands</strong></li>\n<li>A <strong>modifier</strong> (on some instructions) that gives the <strong>number of operands</strong> involved.</li>\n</ol>\n</li>\n<li>Examples:\n<ul>\n<li><code>ADDW2</code> : <strong>ADD</strong> <strong>W</strong>ord, <strong>2</strong> operands</li>\n<li><code>MULL3</code></li>\n<li><code>CVTWL</code></li>\n</ul>\n</li>\n</ul>\n<p>There are number of operations that are much more complex than the machine instructions found on most computers.</p>\n<p>These operations are hardware realizations of frequently occurring <strong>sequences of code</strong>. They are <strong>implemented as single instructions</strong> for efficiency and speed.</p>\n<ul>\n<li>Load and store multiple registers</li>\n<li>Manipulate queues and variable-length bit fields.</li>\n<li>Calling and returning from procedures: a single instruction saves a designated set of registers, passes a list of arguments to the procedure, <strong>maintains the stack, frame, and argument pointers</strong>, and sets a mask to enable error traps for arithmetic operations.</li>\n</ul>\n<h3 id=\"inputoutput\"><a class=\"anchor\" href=\"#inputoutput\">#</a> Input/Output</h3>\n<ul>\n<li>Each I/O device controller has a set of <strong>control/status and data registers</strong>, which are <strong>assigned locations in the physical address space</strong>.</li>\n<li>The portion of the address space into which the device controller registers are mapped is called <font>I/O space</font>.</li>\n<li>No special instructions are required to access registers in I/O space.</li>\n<li>An I/O device <strong>driver</strong> issues commands to the device controller by <strong>storing values into the appropriate registers</strong>.</li>\n<li>Software routines may read these registers to obtain status information.</li>\n</ul>\n<h2 id=\"x86-architecture\"><a class=\"anchor\" href=\"#x86-architecture\">#</a> x86 Architecture</h2>\n<h3 id=\"memory-4\"><a class=\"anchor\" href=\"#memory-4\">#</a> Memory</h3>\n<ul>\n<li>At the <strong>physical level</strong>, memory consists of 8-bit bytes.</li>\n<li>Byte addresses.</li>\n<li><strong>Word</strong>: two consecutive bytes</li>\n<li><strong>Double-word (dword)</strong>: four bytes</li>\n<li>Some operations are more efficient when operands are aligned in a particular way.</li>\n<li>However, programmers usually view the x86 memory as a collection of <font>segments</font>.\n<ul>\n<li>From this point of view, an <strong>address</strong> consists of two parts\n<ul>\n<li>a <strong>segment number</strong></li>\n<li>an <strong>offset</strong> that points to a byte within the segment.</li>\n</ul>\n</li>\n<li>Segments can be of <strong>different sizes</strong>, and are often used for different purposes.\n<ul>\n<li>For example, <strong>code segment</strong> and <strong>data segment</strong>.</li>\n</ul>\n</li>\n<li>It is not necessary for all of the segments used by a program to be in physical memory.</li>\n<li>A segment can also be <strong>divided into pages</strong>.</li>\n</ul>\n</li>\n</ul>\n<h3 id=\"registers-4\"><a class=\"anchor\" href=\"#registers-4\">#</a> Registers</h3>\n<ul>\n<li>Each <strong>general-purpose register</strong> is <strong>32 bits</strong> long.</li>\n<li><strong>EIP</strong>: program counter.</li>\n<li><strong>FLAGS</strong></li>\n<li><strong>16-bit segment registers</strong>:\n<ul>\n<li><em>CS</em> for code segment</li>\n<li>SS for stack segment</li>\n<li><em>DS</em>, <em>ES</em>, <em>FS</em>, <em>GS</em> for data segments.</li>\n</ul>\n</li>\n<li><strong>Floating-point unit</strong> (FPU) contains eight <strong>80-bit</strong> data registers.</li>\n<li>There are also a number of registers that are <strong>used only by system programs</strong> such as the operating system.</li>\n</ul>\n<h3 id=\"data-formats-4\"><a class=\"anchor\" href=\"#data-formats-4\">#</a> Data Formats</h3>\n<ul>\n<li>Integers, floating-point values, characters, and strings.</li>\n<li>The least significant part of a numeric value is stored at the lowest-numbered address: <font>little-endian</font>.</li>\n<li>Unpacked and packed <strong>BCD formats</strong>.</li>\n<li>Three different floating-point data formats:\n<ul>\n<li><strong>single-precision</strong> with 32 bits (24+7+1)</li>\n<li><strong>double-precision</strong> with 64 bits (53+10+1)</li>\n<li><strong>extended-precision</strong> with 80 bits (64+15+1)</li>\n</ul>\n</li>\n</ul>\n<h3 id=\"instruction-formats-4\"><a class=\"anchor\" href=\"#instruction-formats-4\">#</a> Instruction Formats</h3>\n<ul>\n<li><strong>Prefix</strong>: containing <strong>flags</strong> that <strong>modify the operation</strong> of the instruction.\n<ul>\n<li>For example, a repetition count of the instruction (e.g. string manipulation), specifying a segment register.</li>\n</ul>\n</li>\n<li><strong>opcode</strong>: 1 or 2 bytes. Some operations have different opcodes, each specifying a different variant of the operation.</li>\n<li>A number of bytes that specify the <strong>operands</strong> and <strong>addressing modes</strong> to be used.</li>\n<li>The <strong>opcode</strong> is the only element that is <font>always present</font> in every instruction.</li>\n</ul>\n<h3 id=\"addressing-modes-4\"><a class=\"anchor\" href=\"#addressing-modes-4\">#</a> Addressing Modes</h3>\n<ul>\n<li><strong>Immediate mode</strong>: data in the instruction</li>\n<li><strong>Register mode</strong>: data in register</li>\n<li><strong>Direct mode</strong>: address of data in the instruction</li>\n<li><strong>Relative mode</strong>: displacement in the instruction, relative to EIP\n<ul>\n<li>TA=(base register) + (index register)*(scale factor) + displacement</li>\n</ul>\n</li>\n</ul>\n<h3 id=\"instruction-set-4\"><a class=\"anchor\" href=\"#instruction-set-4\">#</a> Instruction Set</h3>\n<ul>\n<li>More than 400 machine instructions.</li>\n<li>An instruction may have <strong>0~3 operands</strong>.</li>\n<li>There are:\n<ul>\n<li><strong>register-to-register</strong> instructions</li>\n<li><strong>register-to-memory</strong> instructions</li>\n<li><strong>memory-to-memory</strong> instructions</li>\n</ul>\n</li>\n<li>Some <strong>special-purpose instructions</strong> to perform operations <strong>frequently required in high-level programming languages</strong>\n<ul>\n<li>For example, entering and leaving procedures and checking subscript values against the bounds of an array.</li>\n</ul>\n</li>\n</ul>\n<h3 id=\"io\"><a class=\"anchor\" href=\"#io\">#</a> I/O</h3>\n<ul>\n<li>Repetition prefixes allow I/O instructions to transfer an entire string in a single operation.</li>\n</ul>\n<h2 id=\"risc-machines\"><a class=\"anchor\" href=\"#risc-machines\">#</a> RISC Machines</h2>\n<ul>\n<li><strong>Reduced Instruction Set Computer</strong></li>\n<li>This <strong>simplified design</strong> can result in\n<ul>\n<li>faster and less expensive processor development</li>\n<li>greater reliability</li>\n<li>faster instruction fetching, decoding, and execution times.</li>\n</ul>\n</li>\n<li>In general, a RISC system is characterized by\n<ul>\n<li>a standard, <strong>fixed instruction length</strong>\n<ul>\n<li>usually equal to <strong>one machine word</strong></li>\n</ul>\n</li>\n<li><strong>single-cycle execution of most instructions</strong>.</li>\n</ul>\n</li>\n<li>Memory access is usually done by <strong>load</strong> and <strong>store</strong> instructions only.</li>\n<li>All instructions except for load and store are <strong>register-to-register operations</strong>.</li>\n<li>There are typically a relatively <strong>large number of general-purpose registers</strong>.</li>\n<li>The number of machine instructions, instruction formats, and addressing modes is relatively small.</li>\n</ul>\n<h2 id=\"ultrasparc-scalable-processor-architecture-architecture\"><a class=\"anchor\" href=\"#ultrasparc-scalable-processor-architecture-architecture\">#</a> UltraSPARC (Scalable Processor ARChitecture) Architecture</h2>\n<h3 id=\"memory-5\"><a class=\"anchor\" href=\"#memory-5\">#</a> Memory</h3>\n<ul>\n<li><font>Halfword</font>: two consecutive bytes</li>\n<li><font>Word</font>: four bytes</li>\n<li><font>Doubleword</font>: eight bytes</li>\n<li>Data are stored in memory with alignment</li>\n<li>Virtual address space of <span class=\"katex\"><span class=\"katex-mathml\"><math xmlns=\"http://www.w3.org/1998/Math/MathML\"><semantics><mrow><msup><mn>2</mn><mn>64</mn></msup></mrow><annotation encoding=\"application/x-tex\">2^{64}</annotation></semantics></math></span><span class=\"katex-html\" aria-hidden=\"true\"><span class=\"base\"><span class=\"strut\" style=\"height:0.8141079999999999em;vertical-align:0em;\"></span><span class=\"mord\"><span class=\"mord\">2</span><span class=\"msupsub\"><span class=\"vlist-t\"><span class=\"vlist-r\"><span class=\"vlist\" style=\"height:0.8141079999999999em;\"><span style=\"top:-3.063em;margin-right:0.05em;\"><span class=\"pstrut\" style=\"height:2.7em;\"></span><span class=\"sizing reset-size6 size3 mtight\"><span class=\"mord mtight\"><span class=\"mord mtight\">6</span><span class=\"mord mtight\">4</span></span></span></span></span></span></span></span></span></span></span></span> bytes</li>\n<li>The address space is divided into pages. Multiple page size are supported.</li>\n</ul>\n<h3 id=\"registers-5\"><a class=\"anchor\" href=\"#registers-5\">#</a> Registers</h3>\n<ul>\n<li>A large <strong>register file</strong> that usually contains more than 100 general-purpose register.</li>\n<li>However, any procedure can access only 32 registers.</li>\n<li>The <strong>first eight</strong> of these registers are <strong>global</strong> — accessed by all procedures on the system.</li>\n<li><strong>Register <em>r0</em> always contains the value zero.</strong></li>\n<li>The other 24 registers available to a procedure can be visualized as a <strong>window</strong> through which part of the register file can be seen.</li>\n<li>These windows overlap, so some registers in the register file are shared between procedures. This facilitates the passing of parameters.</li>\n<li>If a set of concurrently running procedures needs more windows than are physically available, a “window overflow” interrupt occurs. The operating system must then save the contents of some registes in the file (and restore them later) to provide the additional windows that are needed.</li>\n</ul>\n<h3 id=\"data-format\"><a class=\"anchor\" href=\"#data-format\">#</a> Data Format</h3>\n<ul>\n<li><strong>Integers</strong>, <strong>floating-point</strong> values, and <strong>characters</strong>.</li>\n<li>Support both big-endian and little-endian byte orderings.</li>\n<li>Three different floating-point data formats.</li>\n</ul>\n<h3 id=\"instruction-formats-5\"><a class=\"anchor\" href=\"#instruction-formats-5\">#</a> Instruction Formats</h3>\n<ul>\n<li>There are three basic instruction formats. All of these formats are <strong>32 bits</strong> long. <strong>The first 2 bits of the instruction word identify which format is being used</strong>.</li>\n<li><strong>Format 1</strong> is used for the <strong>Call instruction</strong>.</li>\n<li><strong>Format 2</strong> is used for <strong>branch instruction</strong> (and one special instruction that enters a value into a register)</li>\n<li><strong>Format 3</strong> is used by the <strong>remaining instructions</strong>, including <strong>register loads</strong> and <strong>stores</strong>, and <strong>three-operand arithmetic operations</strong>.</li>\n</ul>\n<h3 id=\"addressing-modes-5\"><a class=\"anchor\" href=\"#addressing-modes-5\">#</a> Addressing Modes</h3>\n<ul>\n<li><strong>Immediate mode</strong></li>\n<li><strong>Register direct mode</strong></li>\n<li>Operands in memory are addressd using one of the following three modes:\n<ul>\n<li><strong><em>PC-relative</em>: TA = (PC) + displacement {30 bits, signed}</strong></li>\n<li><strong><em>Register indirect with displacement</em>: TA = (register) + displacement {13 bits, signed}</strong></li>\n<li><strong><em>Register indirect indexed</em>: TA = (register1) + (register2)</strong></li>\n</ul>\n</li>\n<li>PC-relative mode is used only for branch instructions.</li>\n</ul>\n<h3 id=\"instruction-set-5\"><a class=\"anchor\" href=\"#instruction-set-5\">#</a> Instruction Set</h3>\n<ul>\n<li>The basic SPARC architechture has fewer than 100 machine instructions.</li>\n<li>Instruction execution on a <strong>SPARC</strong> system is <font>pipeline</font>: fetching_and_decoding, execution</li>\n<li>However, an ordinary branch instruction might cause the process to “stall”. The instruction following the branch would have to be dicarded without being executed.</li>\n<li>To make the pipeline work more efficiently, SPARC branch instructions (including subroutine calls) are <font>delayed branch</font>. This means that the instruction immediately following the branch instruction is actually executed before the branch is taken.</li>\n</ul>\n<h2 id=\"powerpc-architecture\"><a class=\"anchor\" href=\"#powerpc-architecture\">#</a> PowerPC Architecture</h2>\n<ul>\n<li>IBM first introduced the POWER architecture early in 1990 with the RS/6000.</li>\n<li>POWER is an acronym for Performance Optimization With Enhanced RISC.</li>\n<li>It was soon realized that this architecture could form the basis for a new family of powerful and low-cost microprocessors.</li>\n<li>In October 1991, IBM, Apple, and Motorola formed an alliance to develop and market such microprocessors, which were named PowerPC.</li>\n</ul>\n<h3 id=\"memory-6\"><a class=\"anchor\" href=\"#memory-6\">#</a> Memory</h3>\n<ul>\n<li>Two consecutive bytes: halfword</li>\n<li>Four bytes: word</li>\n<li>Eight bytes: doubleword</li>\n<li>Sixteen bytes: quadword</li>\n<li>Virtual address space: <span class=\"katex\"><span class=\"katex-mathml\"><math xmlns=\"http://www.w3.org/1998/Math/MathML\"><semantics><mrow><msup><mn>2</mn><mn>64</mn></msup></mrow><annotation encoding=\"application/x-tex\">2^{64}</annotation></semantics></math></span><span class=\"katex-html\" aria-hidden=\"true\"><span class=\"base\"><span class=\"strut\" style=\"height:0.8141079999999999em;vertical-align:0em;\"></span><span class=\"mord\"><span class=\"mord\">2</span><span class=\"msupsub\"><span class=\"vlist-t\"><span class=\"vlist-r\"><span class=\"vlist\" style=\"height:0.8141079999999999em;\"><span style=\"top:-3.063em;margin-right:0.05em;\"><span class=\"pstrut\" style=\"height:2.7em;\"></span><span class=\"sizing reset-size6 size3 mtight\"><span class=\"mord mtight\"><span class=\"mord mtight\">6</span><span class=\"mord mtight\">4</span></span></span></span></span></span></span></span></span></span></span></span> bytes</li>\n<li>The address space is divided into fixed-length segments: 256 megabytes long.</li>\n<li>Each segment is divided into pages: 4096 bytes long.</li>\n</ul>\n<h3 id=\"registers-6\"><a class=\"anchor\" href=\"#registers-6\">#</a> Registers</h3>\n<ul>\n<li>32 general-purpose registers: 64 bits long.</li>\n<li>32 floating-point registers for FPU: 64 bits</li>\n<li>A 32-bit condition register</li>\n<li>Link Register (LR) and Count Register (CR) used by some branch instructions</li>\n</ul>\n<h3 id=\"data-formats-5\"><a class=\"anchor\" href=\"#data-formats-5\">#</a> Data formats</h3>\n<ul>\n<li>Integers are stored as 8-, 16-, 32-, or 64-bit binary numbers.</li>\n<li>Big-endian byte ordering by default.</li>\n<li>It is possible to select little-endian byte ordering by setting a bit in a control register.</li>\n<li>There are two different floating-point data formats.</li>\n<li>Single-precision format is 32 bits long (23+8+1)</li>\n<li>Double-precision format is 64 bits long (52+11+1)</li>\n</ul>\n<h3 id=\"instruction-format\"><a class=\"anchor\" href=\"#instruction-format\">#</a> Instruction format</h3>\n<ul>\n<li>There are seven basic instruction formats, some of which have subforms.</li>\n<li>All of these formats are 32 bits long</li>\n<li>Instructions must be aligned beginning at a word boundary</li>\n<li>The first 6 bits of the instruction word always specify the opcode; some instruction formats also have an additional “extended code” field.</li>\n<li>The fixed instruction length in the PowerPC architecture is typical of RISC systems, making instruction decoding faster and simpler than on CISC systems.</li>\n</ul>\n<h3 id=\"addressing-modes-6\"><a class=\"anchor\" href=\"#addressing-modes-6\">#</a> Addressing modes</h3>\n<ul>\n<li>Immediate mode</li>\n<li>Register direct mode</li>\n<li>The only instructions that address memory are load and store operations, and branch instructions.</li>\n<li>Load and store operations use one of the following three addressing modes.</li>\n<li>Register indirect mode: TA=(register)</li>\n<li>Register indirect with index: TA=(register1)+(register2)</li>\n<li>Register indirect with immediate index: TA=(register)+displacement</li>\n<li>The register numbers and displacement are encoded as part of the instruction.</li>\n<li>Branch instructions use one of the following three addressing modes.</li>\n<li>Absolute: TA = actual address</li>\n<li>Relative: TA = current instruction address + displacement</li>\n<li>Link Register: TA = (LR)</li>\n<li>Count Register: TA = (CR)</li>\n</ul>\n<h3 id=\"instruction-set-6\"><a class=\"anchor\" href=\"#instruction-set-6\">#</a> Instruction set</h3>\n<ul>\n<li>Approximately 200 machine instructions</li>\n<li>Floating-point “multiply and add” instructions</li>\n<li>Using more powerful instructions, so fewer instructions are required to perform a task vs. keeping instructions simple so they can be executed as fast as possible.</li>\n<li>Instruction execution on a PowerPC system is pipelined. However, the pipelining is more sophisticated than on the original SPARC systems, with branch prediction used to speed execution. As a result, the delayed branch technique we described for SPARC is not used on PowerPC and most other modern architectures.</li>\n</ul>\n<h3 id=\"input-and-output-2\"><a class=\"anchor\" href=\"#input-and-output-2\">#</a> Input and Output</h3>\n<ul>\n<li>Segments in the virtual address space are mapped onto an external address space (typically an I/O bus)</li>\n</ul>\n<h2 id=\"cray-t3e-architecture\"><a class=\"anchor\" href=\"#cray-t3e-architecture\">#</a> Cray T3E Architecture</h2>\n<ul>\n<li>Supercomputer</li>\n<li>A massively parallel processing (MPP) system</li>\n<li>For use on technical applications in scientific computing.</li>\n<li>Containing a large number of processing elements (PE), arranged in a three-dimensional network as illustrated in Fig. 1.8.\n<ul>\n<li>The interconnection network is circular in each dimension.</li>\n</ul>\n</li>\n<li>Each PE consists of a DEC Alpha EV5 RISC microprocessor, local memory, and performance-accelerating control logic developed by Cray.</li>\n<li>A T3E system may contain from 16 to 2048 processing elements.</li>\n</ul>\n<h3 id=\"memory-7\"><a class=\"anchor\" href=\"#memory-7\">#</a> Memory</h3>\n<ul>\n<li>Each PE in the T3E has its own local memory with a capacity of from 64 megabytes to 2 gigabytes.</li>\n<li>The local memory within each PE is part of a physically distributed, logically shared memory system.</li>\n<li>Two consecutive bytes: word</li>\n<li>Four bytes: long word</li>\n<li>Eight bytes: quadword</li>\n<li>64-bit virtual address</li>\n</ul>\n<h3 id=\"registers-7\"><a class=\"anchor\" href=\"#registers-7\">#</a> Registers</h3>\n<ul>\n<li>32 general-purpose registers: 64 bits long</li>\n<li>32 floating-point registers: 64 bits long</li>\n<li>64-bit program counter</li>\n</ul>\n<h3 id=\"data-formats-6\"><a class=\"anchor\" href=\"#data-formats-6\">#</a> Data formats</h3>\n<ul>\n<li>Integers are stored as longwords or quadwords</li>\n<li>There are two different types of floating-point data formats. One group of three formats is included for compatibility with the VAX architecture. The other group consists of four IEEE standard formats, which are compatible with those used on most modern systems.</li>\n<li>There are no byte load or store operations. Only longwords and quadwords can be transferred between a register and memory. As a consequence, characters that are to be manipulated separately are usually stored one per longword.</li>\n</ul>\n<h3 id=\"instruction-formats-6\"><a class=\"anchor\" href=\"#instruction-formats-6\">#</a> Instruction formats</h3>\n<ul>\n<li>There are five basic instruction formats, some of which have subforms.</li>\n<li>All of these formats are 32 bits long.</li>\n<li>The first 6 bits of the instruction word always specify the opcode; some instruction formats also have an additional “function” field.</li>\n</ul>\n<h3 id=\"addressing-modes-7\"><a class=\"anchor\" href=\"#addressing-modes-7\">#</a> Addressing modes</h3>\n<ul>\n<li>Immediate mode</li>\n<li>Register direct mode</li>\n<li>PC-relative: TA = (PC) + displacement (for conditional and unconditional branches)</li>\n<li>Register indirect with displacement: TA = (register) + displacement (for load and store operations and for subroutine jumps)</li>\n</ul>\n<h3 id=\"instruction-set-7\"><a class=\"anchor\" href=\"#instruction-set-7\">#</a> Instruction Set</h3>\n<ul>\n<li>Approximately 130 machine instructions</li>\n<li>The instruction set is designed so that an implementation of the architecture can be as fast as possible. For example, there are no byte or word load and store instructions. This means that the memory access interface does not need to include shift-and-mask operations.</li>\n</ul>\n<h3 id=\"input-and-output-3\"><a class=\"anchor\" href=\"#input-and-output-3\">#</a> Input and Output</h3>\n<ul>\n<li>Performing I/O through multiple ports into one or more I/O channels.</li>\n<li>These channels are integrated into the network that interconnects the processing nodes.</li>\n<li>A system may be configured with up to one I/O channel for every eight PEs.</li>\n<li>All channels are accessible and controllable from all PEs.</li>\n</ul>\n",
            "tags": [
                "System Software",
                "Ch01",
                "System Software",
                "Assembler"
            ]
        }
    ]
}