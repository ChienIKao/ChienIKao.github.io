{
    "version": "https://jsonfeed.org/version/1",
    "title": "Nothing is true, everything is permitted",
    "subtitle": "",
    "icon": "https://chienikao.github.io/images/favicon.ico",
    "description": "This is a note blog",
    "home_page_url": "https://chienikao.github.io",
    "items": [
        {
            "id": "https://chienikao.github.io/2023/10/19/%E7%B6%B2%E8%B7%AF%E7%AE%A1%E7%90%86%E8%88%87%E5%88%86%E6%9E%90/free5gc/",
            "url": "https://chienikao.github.io/2023/10/19/%E7%B6%B2%E8%B7%AF%E7%AE%A1%E7%90%86%E8%88%87%E5%88%86%E6%9E%90/free5gc/",
            "title": "Free5GC 啟動腳本",
            "date_published": "2023-10-19T15:33:38.000Z",
            "content_html": "<h2 id=\"使用-ssh-連線虛擬機\"><a class=\"anchor\" href=\"#使用-ssh-連線虛擬機\">#</a> 使用 ssh 連線虛擬機</h2>\n<h3 id=\"如何查看你的主機-ip\"><a class=\"anchor\" href=\"#如何查看你的主機-ip\">#</a> 如何查看你的主機 ip</h3>\n<p>在你的虛擬機輸入以下指令</p>\n<figure class=\"highlight bash\"><figcaption data-lang=\"bash\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre><span class=\"token function\">ifconfig</span></pre></td></tr></table></figure><p><img data-src=\"https://imgur.com/KVoZU0e.png\" alt=\"\"></p>\n<h3 id=\"ssh-連線\"><a class=\"anchor\" href=\"#ssh-連線\">#</a> ssh 連線</h3>\n<p>開啟你的 Powershell 輸入以下指令</p>\n<figure class=\"highlight bash\"><figcaption data-lang=\"bash\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre><span class=\"token function\">ssh</span> <span class=\"token punctuation\">[</span>你的帳號<span class=\"token punctuation\">]</span>@<span class=\"token punctuation\">[</span>你的主機ip<span class=\"token punctuation\">]</span></pre></td></tr></table></figure><p>例如</p>\n<figure class=\"highlight bash\"><figcaption data-lang=\"bash\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre><span class=\"token function\">ssh</span> alen911018@192.168.56.102</pre></td></tr></table></figure><p>輸入密碼即連線成功</p>\n<p><img data-src=\"https://imgur.com/nEmUiYW.png\" alt=\"\"></p>\n<h2 id=\"free5gc\"><a class=\"anchor\" href=\"#free5gc\">#</a> Free5GC</h2>\n<h3 id=\"建立-runsh-檔案\"><a class=\"anchor\" href=\"#建立-runsh-檔案\">#</a> 建立 <span class=\"exturl\" data-url=\"aHR0cDovL3J1bi5zaA==\">run.sh</span> 檔案</h3>\n<p>開啟你的 free5gc 虛擬機，輸入以下指令</p>\n<figure class=\"highlight bash\"><figcaption data-lang=\"bash\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre><span class=\"token function\">sudo</span> <span class=\"token function\">vim</span> run.sh</pre></td></tr></table></figure><h3 id=\"在-vim-中編輯\"><a class=\"anchor\" href=\"#在-vim-中編輯\">#</a> 在 vim 中編輯</h3>\n<ol>\n<li>按下 <kbd>i</kbd>，螢幕左下角要顯示  <code>-- INSERT --</code> 。</li>\n<li>打入以下程式碼 (若你是在 Powershell 編輯，可以直接 <kbd>ctl</kbd> + <kbd>c</kbd> , <kbd>ctl</kbd> + <kbd>v</kbd>貼上)。</li>\n</ol>\n<figure class=\"highlight bash\"><figcaption data-lang=\"bash\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre><span class=\"token shebang important\">#!/bin/bash</span></pre></td></tr><tr><td data-num=\"2\"></td><td><pre></pre></td></tr><tr><td data-num=\"3\"></td><td><pre><span class=\"token builtin class-name\">echo</span> <span class=\"token punctuation\">[</span>你的密碼<span class=\"token punctuation\">]</span> <span class=\"token operator\">|</span> <span class=\"token function\">sudo</span> <span class=\"token parameter variable\">-S</span> iptables <span class=\"token parameter variable\">-t</span> nat <span class=\"token parameter variable\">-A</span> POSTROUTING <span class=\"token parameter variable\">-o</span> enp0s3 <span class=\"token parameter variable\">-j</span> MASQUERADE</pre></td></tr><tr><td data-num=\"4\"></td><td><pre></pre></td></tr><tr><td data-num=\"5\"></td><td><pre><span class=\"token assign-left variable\"><span class=\"token environment constant\">SESSION</span></span><span class=\"token operator\">=</span><span class=\"token string\">\"free5gc\"</span></pre></td></tr><tr><td data-num=\"6\"></td><td><pre><span class=\"token assign-left variable\">WINDOW</span><span class=\"token operator\">=</span><span class=\"token string\">\"<span class=\"token environment constant\">$SESSION</span>:main\"</span></pre></td></tr><tr><td data-num=\"7\"></td><td><pre></pre></td></tr><tr><td data-num=\"8\"></td><td><pre><span class=\"token comment\"># 刪除現有的 tmux</span></pre></td></tr><tr><td data-num=\"9\"></td><td><pre>tmux kill-session <span class=\"token parameter variable\">-t</span> <span class=\"token environment constant\">$SESSION</span></pre></td></tr><tr><td data-num=\"10\"></td><td><pre></pre></td></tr><tr><td data-num=\"11\"></td><td><pre><span class=\"token comment\"># 建立 session</span></pre></td></tr><tr><td data-num=\"12\"></td><td><pre>tmux new-session <span class=\"token parameter variable\">-d</span> <span class=\"token parameter variable\">-s</span> <span class=\"token environment constant\">$SESSION</span></pre></td></tr><tr><td data-num=\"13\"></td><td><pre></pre></td></tr><tr><td data-num=\"14\"></td><td><pre><span class=\"token comment\"># window 重命名</span></pre></td></tr><tr><td data-num=\"15\"></td><td><pre>tmux rename-window <span class=\"token parameter variable\">-t</span> <span class=\"token environment constant\">$SESSION</span>:0 <span class=\"token string\">\"main\"</span></pre></td></tr><tr><td data-num=\"16\"></td><td><pre></pre></td></tr><tr><td data-num=\"17\"></td><td><pre><span class=\"token comment\"># 傳送指令</span></pre></td></tr><tr><td data-num=\"18\"></td><td><pre>tmux send-keys <span class=\"token parameter variable\">-t</span> <span class=\"token variable\">$WINDOW</span> <span class=\"token string\">\"echo [你的密碼] | sudo -S ls\"</span> C-m</pre></td></tr><tr><td data-num=\"19\"></td><td><pre>tmux send-keys <span class=\"token parameter variable\">-t</span> <span class=\"token variable\">$WINDOW</span> <span class=\"token string\">\"cd ~/free5gc/\"</span> C-m</pre></td></tr><tr><td data-num=\"20\"></td><td><pre>tmux send-keys <span class=\"token parameter variable\">-t</span> <span class=\"token variable\">$WINDOW</span> <span class=\"token string\">\"./force_kill.sh\"</span> C-m</pre></td></tr><tr><td data-num=\"21\"></td><td><pre>tmux send-keys <span class=\"token parameter variable\">-t</span> <span class=\"token variable\">$WINDOW</span> <span class=\"token string\">\"./run.sh\"</span> C-m</pre></td></tr><tr><td data-num=\"22\"></td><td><pre></pre></td></tr><tr><td data-num=\"23\"></td><td><pre><span class=\"token comment\"># 分割 pane</span></pre></td></tr><tr><td data-num=\"24\"></td><td><pre>tmux split-pane <span class=\"token parameter variable\">-h</span> <span class=\"token parameter variable\">-t</span> <span class=\"token variable\">$WINDOW</span></pre></td></tr><tr><td data-num=\"25\"></td><td><pre></pre></td></tr><tr><td data-num=\"26\"></td><td><pre><span class=\"token comment\"># 傳送命令</span></pre></td></tr><tr><td data-num=\"27\"></td><td><pre>tmux send-keys <span class=\"token string\">\"cd ~/free5gc/webconsole/\"</span> C-m</pre></td></tr><tr><td data-num=\"28\"></td><td><pre>tmux send-keys <span class=\"token string\">\"go run server.go\"</span> C-m</pre></td></tr><tr><td data-num=\"29\"></td><td><pre></pre></td></tr><tr><td data-num=\"30\"></td><td><pre><span class=\"token comment\"># attach session</span></pre></td></tr><tr><td data-num=\"31\"></td><td><pre>tmux a <span class=\"token parameter variable\">-t</span> <span class=\"token environment constant\">$SESSION</span></pre></td></tr></table></figure><ol start=\"3\">\n<li>按下 <kbd>esc</kbd> 再按下 <kbd>shift</kbd> + <kbd>;</kbd> (就是 <kbd>:</kbd> 的意思)。</li>\n<li>輸入  <code>wq</code> , 按下 <kbd>Enter</kbd> 存檔並離開。</li>\n</ol>\n<div class=\"note danger\">\n<p><strong>NOTE</strong>: [你的密碼] 部分要改成你的密碼。(中括號  <code>[]</code>  不用加)</p>\n</div>\n<h3 id=\"執行-runsh\"><a class=\"anchor\" href=\"#執行-runsh\">#</a> 執行 <span class=\"exturl\" data-url=\"aHR0cDovL3J1bi5zaA==\">run.sh</span></h3>\n<figure class=\"highlight bash\"><figcaption data-lang=\"bash\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre><span class=\"token function\">sh</span> ./run.sh</pre></td></tr></table></figure><p>或是把腳本檔案加上執行權限，就可以直接執行腳本，不需要透過  <code>sh</code>  指令</p>\n<figure class=\"highlight bash\"><figcaption data-lang=\"bash\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre><span class=\"token function\">sudo</span> <span class=\"token function\">chmod</span> +x ./run.sh</pre></td></tr><tr><td data-num=\"2\"></td><td><pre>./run.sh</pre></td></tr></table></figure><h2 id=\"ueransim\"><a class=\"anchor\" href=\"#ueransim\">#</a> UERANSIM</h2>\n<h3 id=\"建立-runsh-檔案-2\"><a class=\"anchor\" href=\"#建立-runsh-檔案-2\">#</a> 建立 <span class=\"exturl\" data-url=\"aHR0cDovL3J1bi5zaA==\">run.sh</span> 檔案</h3>\n<figure class=\"highlight bash\"><figcaption data-lang=\"bash\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre><span class=\"token function\">sudo</span> <span class=\"token function\">vim</span> run.sh</pre></td></tr></table></figure><h3 id=\"在-vim-中編輯-2\"><a class=\"anchor\" href=\"#在-vim-中編輯-2\">#</a> 在 vim 中編輯</h3>\n<ol>\n<li>按下 <kbd>i</kbd>，螢幕左下角要顯示  <code>-- INSERT --</code> 。</li>\n<li>打入以下程式碼 (若你是在 Powershell 編輯，可以直接 <kbd>ctl</kbd> + <kbd>c</kbd> , <kbd>ctl</kbd> + <kbd>v</kbd> 貼上)。</li>\n</ol>\n<figure class=\"highlight bash\"><figcaption data-lang=\"bash\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre><span class=\"token shebang important\">#!/bin/bash</span></pre></td></tr><tr><td data-num=\"2\"></td><td><pre></pre></td></tr><tr><td data-num=\"3\"></td><td><pre><span class=\"token assign-left variable\"><span class=\"token environment constant\">SESSION</span></span><span class=\"token operator\">=</span><span class=\"token string\">\"ueransim\"</span></pre></td></tr><tr><td data-num=\"4\"></td><td><pre><span class=\"token assign-left variable\">WINDOW</span><span class=\"token operator\">=</span><span class=\"token string\">\"<span class=\"token environment constant\">$SESSION</span>:main\"</span></pre></td></tr><tr><td data-num=\"5\"></td><td><pre></pre></td></tr><tr><td data-num=\"6\"></td><td><pre><span class=\"token comment\"># 刪除現有的 tmux</span></pre></td></tr><tr><td data-num=\"7\"></td><td><pre>tmux kill-session <span class=\"token parameter variable\">-t</span> <span class=\"token environment constant\">$SESSION</span></pre></td></tr><tr><td data-num=\"8\"></td><td><pre></pre></td></tr><tr><td data-num=\"9\"></td><td><pre><span class=\"token comment\"># 建立 session</span></pre></td></tr><tr><td data-num=\"10\"></td><td><pre>tmux new-session <span class=\"token parameter variable\">-d</span> <span class=\"token parameter variable\">-s</span> <span class=\"token environment constant\">$SESSION</span> <span class=\"token comment\"># -d: detach</span></pre></td></tr><tr><td data-num=\"11\"></td><td><pre></pre></td></tr><tr><td data-num=\"12\"></td><td><pre><span class=\"token comment\"># window 重命名</span></pre></td></tr><tr><td data-num=\"13\"></td><td><pre>tmux rename-window <span class=\"token parameter variable\">-t</span> <span class=\"token environment constant\">$SESSION</span>:0 <span class=\"token string\">\"main\"</span></pre></td></tr><tr><td data-num=\"14\"></td><td><pre></pre></td></tr><tr><td data-num=\"15\"></td><td><pre><span class=\"token comment\"># 傳送命令</span></pre></td></tr><tr><td data-num=\"16\"></td><td><pre>tmux send-keys <span class=\"token parameter variable\">-t</span> <span class=\"token variable\">$WINDOW</span> <span class=\"token string\">'cd ~/UERANSIM/build/'</span> C-m <span class=\"token comment\"># cd ~/UERANSIM/build/</span></pre></td></tr><tr><td data-num=\"17\"></td><td><pre>tmux send-keys <span class=\"token parameter variable\">-t</span> <span class=\"token variable\">$WINDOW</span> <span class=\"token string\">'./nr-gnb -c ../config/free5gc-gnb.yaml'</span> C-m</pre></td></tr><tr><td data-num=\"18\"></td><td><pre></pre></td></tr><tr><td data-num=\"19\"></td><td><pre><span class=\"token comment\"># 水平分割 pane</span></pre></td></tr><tr><td data-num=\"20\"></td><td><pre>tmux split-window <span class=\"token parameter variable\">-h</span> <span class=\"token parameter variable\">-t</span> <span class=\"token variable\">$WINDOW</span></pre></td></tr><tr><td data-num=\"21\"></td><td><pre></pre></td></tr><tr><td data-num=\"22\"></td><td><pre><span class=\"token comment\"># 傳送命令</span></pre></td></tr><tr><td data-num=\"23\"></td><td><pre>tmux send-keys <span class=\"token parameter variable\">-t</span> <span class=\"token variable\">$WINDOW</span> <span class=\"token string\">\"echo [你的密碼] | sudo -S ls\"</span> C-m</pre></td></tr><tr><td data-num=\"24\"></td><td><pre>tmux send-keys <span class=\"token parameter variable\">-t</span> <span class=\"token variable\">$WINDOW</span> <span class=\"token string\">'cd ~/UERANSIM/build'</span> C-m</pre></td></tr><tr><td data-num=\"25\"></td><td><pre>tmux send-keys <span class=\"token parameter variable\">-t</span> <span class=\"token variable\">$WINDOW</span> <span class=\"token string\">'sudo ./nr-ue -c ../config/free5gc-ue.yaml'</span> C-m</pre></td></tr><tr><td data-num=\"26\"></td><td><pre></pre></td></tr><tr><td data-num=\"27\"></td><td><pre><span class=\"token function\">sleep</span> <span class=\"token number\">5</span></pre></td></tr><tr><td data-num=\"28\"></td><td><pre><span class=\"token function\">sh</span> ./ping.sh</pre></td></tr></table></figure><ol start=\"3\">\n<li>按下 <kbd>esc</kbd> 再按下 <kbd>shift</kbd> + <kbd>;</kbd> (就是 <kbd>:</kbd> 的意思)。</li>\n<li>輸入  <code>wq</code> , 按下 <kbd>Enter</kbd> 存檔並離開。</li>\n</ol>\n<div class=\"note danger\">\n<p><strong>NOTE</strong>: [你的密碼] 部分要改成你的密碼。 (中括號  <code>[]</code>  不用加)</p>\n</div>\n<h3 id=\"建立-pingsh-檔案\"><a class=\"anchor\" href=\"#建立-pingsh-檔案\">#</a> 建立 <span class=\"exturl\" data-url=\"aHR0cDovL3Bpbmcuc2g=\">ping.sh</span> 檔案</h3>\n<figure class=\"highlight bash\"><figcaption data-lang=\"bash\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre><span class=\"token function\">sudo</span> <span class=\"token function\">vim</span> ping.sh</pre></td></tr></table></figure><p>同前面使用 vim 的方法複製以下內容</p>\n<figure class=\"highlight bash\"><figcaption data-lang=\"bash\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre><span class=\"token shebang important\">#!/bin/bash</span></pre></td></tr><tr><td data-num=\"2\"></td><td><pre></pre></td></tr><tr><td data-num=\"3\"></td><td><pre><span class=\"token builtin class-name\">echo</span> 0000 <span class=\"token operator\">|</span> <span class=\"token function\">sudo</span> <span class=\"token parameter variable\">-S</span> <span class=\"token function\">ip</span> route <span class=\"token function\">add</span> default dev uesimtun0</pre></td></tr><tr><td data-num=\"4\"></td><td><pre><span class=\"token function\">ping</span> <span class=\"token parameter variable\">-c</span> <span class=\"token number\">8</span> <span class=\"token parameter variable\">-I</span> uesimtun0 google.com</pre></td></tr></table></figure><h3 id=\"執行-runsh-2\"><a class=\"anchor\" href=\"#執行-runsh-2\">#</a> 執行 <span class=\"exturl\" data-url=\"aHR0cDovL3J1bi5zaA==\">run.sh</span></h3>\n<figure class=\"highlight bash\"><figcaption data-lang=\"bash\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre><span class=\"token function\">sh</span> ./run.sh</pre></td></tr></table></figure>",
            "tags": [
                "網路管理與分析",
                "網路管理與分析",
                "free5gc"
            ]
        },
        {
            "id": "https://chienikao.github.io/2023/05/30/SystemSoftware/Ch04_Macro_Processors/",
            "url": "https://chienikao.github.io/2023/05/30/SystemSoftware/Ch04_Macro_Processors/",
            "title": "Ch04 - Macro Processors",
            "date_published": "2023-05-30T03:24:45.000Z",
            "content_html": "<h2 id=\"introduction\"><a class=\"anchor\" href=\"#introduction\">#</a> Introduction</h2>\n<ul>\n<li>A <strong>macro</strong> represent a commonly used group of statements in the source programming language.</li>\n<li>The macro processor replaces each macro instruction with the corresponding group of source language statements. This is called <strong>expanding</strong> the macros.</li>\n<li>When to use macro?\n<ul>\n<li>Suppose that it is necessary to save the contents of all registers before calling a subprogram.</li>\n<li>On SIC/XE, this would require a sequence of seven instructions ( <code>STA</code> ,  <code>STB</code> , etc…).</li>\n<li>Using a macro instruction, the programmer could simply write one statement like SAVEREGS.</li>\n<li>A similar macro instruction (perhaps named LOADREGS) could be used to reload the register contents after returning from the subprogram.</li>\n</ul>\n</li>\n</ul>\n<h2 id=\"macro-definition-and-expansion\"><a class=\"anchor\" href=\"#macro-definition-and-expansion\">#</a> Macro Definition and Expansion</h2>\n<details><summary>Figure 4.1 Each parameter begins with the character `&`</summary><div>\n<pre><code>Line \t\tSource statement \t\n\t\t \n5 \t\tCOPY \tSTART \t0 \t\tCOPY FILE FROM \tINPUT TO OUTPUT \t \n10 \t\tRDBUFF \tMACRO \t&amp;INDEV,&amp;BUFADR,&amp;RECLTH \t\t\t \n15 \t\t.\t\t\t\t \n20 \t\t.\tMACRO TO READ RECORD INTO BUFFER \t\t\t \n25 \t\t.\t\t\t\t \n30 \t\t\tCLEAR \tX \t\tCLEAR LOOP COUNTER \t \n35 \t\t\tCLEAR \tA \t \n40 \t\t\tCLEAR \tS \t \n45 \t\t       +LDT    #4096 \t\tSET MAXIMUM RECORD LENGTH \t \n50 \t\t\tTD     =X'&amp;INDEV' \tTEST INPUT DEVICE \t \n55 \t\t\tJEQ \t*-3 \t\tLOOP UNTIL READY \t \n60 \t\t\tRD     =X'&amp;INDEV' \tREAD CHARACTER INTO REG A \t \n65 \t\t\tCOMPR \tA,S \t\tTEST FOR END OF RECORD \t \n70 \t\t\tJEQ \t*+11 \t\tEXIT LOOP IF EOR \t \n75 \t\t\tSTCH \t&amp;BUFADR, X \tSTORE CHARACTER IN BUFFER \t \n80 \t\t\tTIXR \tT \t\tLOOP UNLESS MAXIMUM LENGTH \t \n85 \t\t\tJLT \t*-19 \t\t  HAS BEEN REACHED \t \n90 \t\t\tSTX \t&amp;RECLTH \tSAVE RECORD LENGTH \t \n95 \t\t\tMEND \t \n100 \t\tWRBUFF \tMACRO \t&amp;OUTDEV , &amp;BUFADR, &amp;RECLTH \t \n105 \t\t.\t\t \n110 \t\t.\tMACRO TO WRITE RECORD FROM BUFFER \t \n115 \t\t.\t\t \n120 \t\t\tCLEAR \tX CLEAR LOOP COUNTER \t \n125 \t\t\tLDT \t&amp;RECLTH \t \n130 \t\t\tLDCH \t&amp;BUFADR,X \tGET CHARACTER FROM BUFFER \t \n135 \t\t\tTD     =X'&amp;OUTDEV' \tTEST OUTPUT DEVICE \t \n140 \t\t\tJEQ \t*-3 \t\tLOOP UNTIL READY \t \n145 \t\t\tWD     =X'&amp;OUTDEV' \tWRITE CHARACTER \t \n150 \t\t\tTIXR \tT \t\tLOOP UNTIL ALL CHARACTERS \t \n155 \t\t\tJLT \t*-14 \t\t  HAVE BEEN WRITTEN \t \n160 \t\t\tMEND \t \n165 \t\t.\t \n170 \t\t.\tMAIN \tPROGRAM \t \n175 \t\t.\t \n180 \t\tFIRST \tSTL \tRETADR \t\tSAVE RETURN ADDRESS \t \n190 \t\tCLOOP \tRDBUFF  F1,BUFFER,LENGTH  READ RECORD INTO BUFFER \t \n195 \t\t\tLDA \tLENGTH \t\tTEST FOR END OF FILE \t \n200 \t\t\tCOMP   #0 \t \n205 \t\t\tJEQ \tENDFIL \t\tEXIT IF EOF FOUND \t \n210 \t\t\tWRBUFF \t05,BUFFER,LENGTH  WRITE OUTPUT RECORD \t \n215 \t\t\tJ \tCLOOP \t\tLOOP \t \n220 \t\tENDFIL \tWRBUFF \t05,EOF,THREE \tINSERT EOF MARKER \t \n225 \t\t\tJ      @RETADR \t\t \n230 \t\tEOF \tBYTE \tC'EOF ' \t\t \n235 \t\tTHREE \tWORD \t3 \t\t \n240 \t\tRETADR \tRESW \t1 \t\t \n245 \t\tLENGTH \tRESW \t1 \t\tLENGTH OF RECORD \t \n250 \t\tBUFFER \tRESB \t4096 \t\t4096-BYTE BUFFER AREA \t \n255 \t\t\tEND \tFIRST \t\n</code></pre>\n</div></details>\n<details><summary>Figure 4.2 The arguments and parameters are associated with one another according to their positions</summary><div>\n<pre><code>Line \t\tSource statement\n\n5\t\tCOPY\tSTART \t0\t\t\tCOPY FILE FROM INPUT TO OUTPUT\n180\t\tFIRST\tSTL \tRETADR\t\t\tSAVE RETURN ADDRESS\n190\t\t.CLOOP\tRDBUFF \tFl,BUFFER,LENGTH\tREAD RECORD INTO BUFFER\n190a\t\tCLOOP\tCLEAR \tX\t\t\tCLEAR LOOP COUNTER\n190b\t\t\tCLEAR \tA\n190c\t\t\tCLEAR \tS\n190d\t\t       +LDT    #4096\t\t\tSET MAXIMUM RECORD LENGTH\n190e\t\t\tTD     =X'Fl'\t\t\tTEST INPUT DEVICE\n190f\t\t\tJEQ \t*-3\t\t\tLOOP UNTIL READY\n190g\t\t\tRD     =X'Fl'\t\t\tREAD CHARACTER INTO REG A\n190h\t\t\tCOMPR   A,S\t\t\tTEST FOR END OF RECORD\n190i\t\t\tJEQ     *+11\t\t\tEXIT LOOP IF EOR\n190j\t\t\tSTCH \tBUFFER,X\t\tSTORE CHARACTER IN BUFFER\n190k\t\t\tTIXR \tT\t\t\tLOOP UNLESS MAXIMUM LENGTH\n190l\t\t\tJLT \t*-19\t\t\t  HAS BEEN REACHED\n190m\t\t\tSTX \tLENGTH\t\t\tSAVE RECORD LENGTH\n195\t\t\tLDA \tLENGTH\t\t\tTEST FOR END OF FILE\n200\t\t\tCOMP   #0\n205\t\t\tJEQ \tENDFIL\t\t\tEXIT IF EOF FOUND\n210\t\t\tWRBUFF  05,BUFFER,LENGTH\tWRITE OUTPUT RECORD\n210a\t\t\tCLEAR \tX\t\t\tCLEAR LOOP COUNTER\n210b\t\t\tLDT\tLENGTH\n210c\t\t\tLDCH \tBUFFER, X\t\tGET CHARACTER FROM BUFFER\n210d\t\t\tTD     =X'05'\t\t\tTEST OUTPUT DEVICE\n210e\t\t\tJEQ \t*-3\t\t\tLOOP UNTIL READY\n210f\t\t\tWD     =X'05'\t\t\tWRITE CHARACTER\n210g\t\t\tTIXR \tT\t\t\tLOOP UNTIL ALL CHARACTERS\n210h\t\t\tJLT     *-14\t\t\t  HAVE BEEN WRITTEN\n215\t\t\tJ \tCLOOP\t\t\tLOOP\n220\t\t.ENDFIL\tWRBUFF  05,EOF,THREE\t\tINSERT EOF MARKER\n220a\t\tENDFIL\tCLEAR \tX\t\t\tCLEAR LOOP COUNTER\n220b\t\t\tLDT \tTHREE\n220c\t\t\tLDCH \tEOF, X\t\t\tGET CHARACTER FROM BUFFER\n220d\t\t\tTD     =X'05'\t\t\tTEST OUTPUT DEVICE\n220e\t\t\tJEQ \t*-3\t\t\tLOOP UNTIL READY\n220f\t\t\tWD     =X'05'\t\t\tWRITE CHARACTER\n220g\t\t\tTIXR \tT\t\t\tLOOP UNTIL ALL CHARACTERS\n220h\t\t\tJLT     *-14\t\t\t  HAVE BEEN WRITTEN\n225\t\t\tJ      @RETADR\n230\t\tEOF     BYTE    C'EOF'\n235\t\tTHREE\tWORD\t3\n240\t\tRETADR\tRESW\t1\n245\t\tLENGTH\tRESW\t1\t\t\tLENGTH OF RECORD\n250\t\tBUFFER\tRESB\t4096\t\t\t4096-BYTE BUFFER AREA\n255\t\t\tEND\tFIRST\n</code></pre>\n</div></details>\n<h2 id=\"macro-processor-algorithm-and-data-structures\"><a class=\"anchor\" href=\"#macro-processor-algorithm-and-data-structures\">#</a> Macro Processor Algorithm and Data Structures</h2>\n<ul>\n<li>It is easy to design a two-pass macro processor in which all macro definitions are processed during the first pass, and all macro invocation statements are expanded during the second pass.\n<ul>\n<li>However, such a two-pass macro processor would not allow the body of one macro instruction to contain definitions of other macros.</li>\n</ul>\n</li>\n</ul>\n<details><summary>Figure 4.3 Definitions of macros by other macros can be useful in certain cases</summary><div>\n<pre><code>1 \t\tMACROS \tMACRO \t\t&#123;Defines SIC standard version macros&#125; \t \n2 \t\tRDBUFF \tMACRO \t\t&amp;INDEV,&amp;BUFADR,&amp;RECLTH \n\t \t\t.\n\t\t\t.\t\t&#123;SIC  standard version&#125; \n\t\t\t.\t \n3 \t\t\tMEND \t\t&#123;End of RDBUFF&#125; \t \n4 \t\tWRBUFF \tMACRO \t\t&amp;OUTDEV,&amp;BUFADR,&amp;RECLTH \n\t\t\t.\t \n\t\t\t.\t\t&#123;SIC  standard version&#125; \n\t\t\t.\t \n5 \t\t\tMEND \t\t&#123;End of WRBUFF&#125; \n\t\t\t.\n\t\t\t.\n\t\t\t.\t \n6 \t\t\tMEND \t\t&#123;End of MACROS&#125; \n\t \n\t\t\t\t\t(a) \t \n\n1 \t\tMACROX \tMACRO \t\t&#123;Defines SIC/XE macros&#125; \t \n2 \t\tRDBUFF \tMACRO \t\t&amp;INDEV,&amp;BUFADR,&amp;RECLTH \n\t\t\t.\t \n\t\t\t.\t\t&#123;SIC/XE version&#125; \n\t\t\t.\t \n3 \t\t\tMEND \t\t&#123;End of RDBUFF&#125; \t \n4 \t\tWRBUFF \tMACRO \t\t&amp;OUTDEV,&amp;BUFADR,&amp;RECLTH \n\t\t\t.\t \n\t\t\t.\t\t&#123;SIC/XE version&#125; \t\n\t\t\t. \n5 \t\t\tMEND \t\t&#123;End of WRBUFF&#125;\n\t\t\t.\n\t\t\t.\n\t\t\t. \t \n6 \t\t\tMEND \t\t&#123;End of MACROX&#125; \t \n\n\t\t\t\t\t(b)\n</code></pre>\n</div></details>\n<ul>\n<li>The same program could run on either a standard SIC machine or a SIC/XE machine.</li>\n<li>The only change required would be the invocation of either MACROS or MACROX</li>\n<li>Defining MACROS or MACROX does not define RDBUFF and the other macro instructions. These definitions are processed only when an invocation of MACROS or MACROX is expanded</li>\n</ul>\n<h3 id=\"data-stucture\"><a class=\"anchor\" href=\"#data-stucture\">#</a> Data Stucture</h3>\n<ul>\n<li>Definition table (DEFTAB)\n<ul>\n<li>Reference to the macro instruction parameters are converted to a positional notation for efficiency in substituting arguments</li>\n</ul>\n</li>\n<li>Name table (NAMTAB), serving as an index to DEFTAB</li>\n<li>Argument table (ARGTAB)</li>\n</ul>\n<p><img data-src=\"https://imgur.com/iow0vUO.png\" alt=\"Figure 4.4\"></p>\n<h3 id=\"algorithm\"><a class=\"anchor\" href=\"#algorithm\">#</a> Algorithm</h3>\n<ul>\n<li>Algorithm for a one-pass macro processor\n<ul>\n<li>The handling of macro definitions within macros</li>\n</ul>\n</li>\n</ul>\n<figure class=\"highlight vhdl\"><figcaption data-lang=\"VHDL\"><span>Figure 4.5</span></figcaption><table><tr><td data-num=\"1\"></td><td><pre><span class=\"token keyword\">procedure</span> DEFINE \t\t </pre></td></tr><tr><td data-num=\"2\"></td><td><pre>\t<span class=\"token keyword\">begin</span> \t\t </pre></td></tr><tr><td data-num=\"3\"></td><td><pre>\t\tenter macro name into NAMTAB \t </pre></td></tr><tr><td data-num=\"4\"></td><td><pre>\t\tenter macro prototype into DEFTAB \t </pre></td></tr><tr><td data-num=\"5\"></td><td><pre>\t\tLEVEL <span class=\"token operator\">:=</span> <span class=\"token number\">1</span> \t\t </pre></td></tr><tr><td data-num=\"6\"></td><td><pre>\t\t<span class=\"token keyword\">while</span> LEVEL <span class=\"token operator\">></span> <span class=\"token number\">0</span> do \t </pre></td></tr><tr><td data-num=\"7\"></td><td><pre>\t\t\t<span class=\"token keyword\">begin</span> \t </pre></td></tr><tr><td data-num=\"8\"></td><td><pre>\t\t\t\tGETLINE \t </pre></td></tr><tr><td data-num=\"9\"></td><td><pre>\t\t\t\t<span class=\"token keyword\">if</span> this <span class=\"token keyword\">is</span> <span class=\"token operator\">not</span> a comment line <span class=\"token keyword\">then</span> \t </pre></td></tr><tr><td data-num=\"10\"></td><td><pre>\t\t\t\t\t<span class=\"token keyword\">begin</span> \t </pre></td></tr><tr><td data-num=\"11\"></td><td><pre>\t\t\t\t\t\tsubstitute positional notation <span class=\"token keyword\">for</span> parameters \t </pre></td></tr><tr><td data-num=\"12\"></td><td><pre>\t\t\t\t\t\tenter line into DEFTAB \t </pre></td></tr><tr><td data-num=\"13\"></td><td><pre>\t\t\t\t\t\t<span class=\"token keyword\">if</span> OPCODE <span class=\"token operator\">=</span> 'MACRO' <span class=\"token keyword\">then</span> \t </pre></td></tr><tr><td data-num=\"14\"></td><td><pre>\t\t\t\t\t\t\tLEVEL <span class=\"token operator\">:=</span> LEVEL <span class=\"token operator\">+</span> <span class=\"token number\">1</span> \t </pre></td></tr><tr><td data-num=\"15\"></td><td><pre>\t\t\t\t\t\t<span class=\"token keyword\">else</span> <span class=\"token keyword\">if</span> OPCODE <span class=\"token operator\">=</span> 'MEND' <span class=\"token keyword\">then</span> \t </pre></td></tr><tr><td data-num=\"16\"></td><td><pre>\t\t\t\t\t\t\tLEVEL <span class=\"token operator\">:=</span> LEVEL <span class=\"token operator\">-</span> <span class=\"token number\">1</span> \t </pre></td></tr><tr><td data-num=\"17\"></td><td><pre>\t\t\t\t\t<span class=\"token keyword\">end</span> <span class=\"token punctuation\">&#123;</span><span class=\"token keyword\">if</span> <span class=\"token operator\">not</span> comment<span class=\"token punctuation\">&#125;</span> \t </pre></td></tr><tr><td data-num=\"18\"></td><td><pre>\t\t\t<span class=\"token keyword\">end</span> <span class=\"token punctuation\">&#123;</span><span class=\"token keyword\">while</span><span class=\"token punctuation\">&#125;</span> \t </pre></td></tr><tr><td data-num=\"19\"></td><td><pre>\t\tstore <span class=\"token keyword\">in</span> NAMTAB pointers <span class=\"token keyword\">to</span> beginning <span class=\"token operator\">and</span> <span class=\"token keyword\">end</span> <span class=\"token keyword\">of</span> definition \t </pre></td></tr><tr><td data-num=\"20\"></td><td><pre>\t<span class=\"token keyword\">end</span> <span class=\"token punctuation\">&#123;</span>DEFINE<span class=\"token punctuation\">&#125;</span> </pre></td></tr><tr><td data-num=\"21\"></td><td><pre></pre></td></tr><tr><td data-num=\"22\"></td><td><pre>\t </pre></td></tr><tr><td data-num=\"23\"></td><td><pre><span class=\"token keyword\">procedure</span> EXPAND \t </pre></td></tr><tr><td data-num=\"24\"></td><td><pre>\t<span class=\"token keyword\">begin</span> \t </pre></td></tr><tr><td data-num=\"25\"></td><td><pre>\t\tEXPANDING <span class=\"token operator\">:=</span> <span class=\"token boolean\">TRUE</span> \t </pre></td></tr><tr><td data-num=\"26\"></td><td><pre>\t\tget first line <span class=\"token keyword\">of</span> macro definition <span class=\"token punctuation\">&#123;</span>prototype<span class=\"token punctuation\">&#125;</span> from DEFTAB \t </pre></td></tr><tr><td data-num=\"27\"></td><td><pre>\t\tset up arguments from macro invocation <span class=\"token keyword\">in</span> ARGTAB \t </pre></td></tr><tr><td data-num=\"28\"></td><td><pre>\t\twrite macro invocation <span class=\"token keyword\">to</span> expanded <span class=\"token keyword\">file</span> as a comment \t </pre></td></tr><tr><td data-num=\"29\"></td><td><pre>\t\t<span class=\"token keyword\">while</span> <span class=\"token operator\">not</span> <span class=\"token keyword\">end</span> <span class=\"token keyword\">of</span> macro definition do \t </pre></td></tr><tr><td data-num=\"30\"></td><td><pre>\t\t\t<span class=\"token keyword\">begin</span> \t </pre></td></tr><tr><td data-num=\"31\"></td><td><pre>\t\t\t\tGETLINE \t </pre></td></tr><tr><td data-num=\"32\"></td><td><pre>\t\t\t\tPROCESSLINE \t </pre></td></tr><tr><td data-num=\"33\"></td><td><pre>\t\t\t<span class=\"token keyword\">end</span> <span class=\"token punctuation\">&#123;</span><span class=\"token keyword\">while</span><span class=\"token punctuation\">&#125;</span> \t </pre></td></tr><tr><td data-num=\"34\"></td><td><pre>\t\tEXPANDING <span class=\"token operator\">:=</span> <span class=\"token boolean\">FALSE</span> \t </pre></td></tr><tr><td data-num=\"35\"></td><td><pre>\t<span class=\"token keyword\">end</span> <span class=\"token punctuation\">&#123;</span>EXPAND<span class=\"token punctuation\">&#125;</span> </pre></td></tr><tr><td data-num=\"36\"></td><td><pre></pre></td></tr><tr><td data-num=\"37\"></td><td><pre>\t </pre></td></tr><tr><td data-num=\"38\"></td><td><pre><span class=\"token keyword\">procedure</span> GETLINE \t </pre></td></tr><tr><td data-num=\"39\"></td><td><pre>\t<span class=\"token keyword\">begin</span> \t </pre></td></tr><tr><td data-num=\"40\"></td><td><pre>\t\t<span class=\"token keyword\">if</span> EXPANDING <span class=\"token keyword\">then</span> \t </pre></td></tr><tr><td data-num=\"41\"></td><td><pre>\t\t\t<span class=\"token keyword\">begin</span> \t </pre></td></tr><tr><td data-num=\"42\"></td><td><pre>\t\t\t\tget <span class=\"token keyword\">next</span> line <span class=\"token keyword\">of</span> macro definition from DEFTAB \t </pre></td></tr><tr><td data-num=\"43\"></td><td><pre>\t\t\t\tsubstitute arguments from ARGTAB <span class=\"token keyword\">for</span> positional notation \t </pre></td></tr><tr><td data-num=\"44\"></td><td><pre>\t\t\t<span class=\"token keyword\">end</span> <span class=\"token punctuation\">&#123;</span><span class=\"token keyword\">if</span><span class=\"token punctuation\">&#125;</span> \t </pre></td></tr><tr><td data-num=\"45\"></td><td><pre>\t\t<span class=\"token keyword\">else</span> \t\t </pre></td></tr><tr><td data-num=\"46\"></td><td><pre>\t\t\tread <span class=\"token keyword\">next</span> line from input <span class=\"token keyword\">file</span> \t </pre></td></tr><tr><td data-num=\"47\"></td><td><pre>\t<span class=\"token keyword\">end</span> <span class=\"token punctuation\">&#123;</span>GETLINE<span class=\"token punctuation\">&#125;</span></pre></td></tr></table></figure><ul>\n<li>Most macro processors allow the definitions of commonly used macro instructions to appear in a standard system library, rather than in the source program.</li>\n</ul>\n<h2 id=\"concatenation-of-macro-parameters\"><a class=\"anchor\" href=\"#concatenation-of-macro-parameters\">#</a> Concatenation of Macro Parameters</h2>\n<ul>\n<li>Suppose that a program contains one series of variables named by the symbols XA1, XA2, XA3…, another series named by XB1, XB2, XB3… If similar processing is to be performed on each series of variables, the programmer might want to incorporate this processing into a macro instruction.</li>\n<li>The parameter to such a macro instructin could specify the series of variables to be operated on. The macro processor would use this parameter to construct the symbols required in the macro expansion.</li>\n</ul>\n<details><summary>Figure 4.6</summary><div>\n<pre><code>1 \tSUM \tMACRO\t&amp;ID\n2 \t\tLDA\tX&amp;ID--&gt;1\n3 \t\tADD\tX&amp;ID--&gt;2\n4\t\tADD\tX&amp;ID--&gt;3\n5 \t   \tSTA \tX&amp;ID--&gt;S\t \t \n6 \t\tMEND \n\t\t \n\t\t(a) \t\t \n\n\t\tSUM \tA \t \n\t\t\n\t\t  |\n\t\t  |\n\t\t \\|/\n\n\t\tLDA \tXAl \t \n\t\tADD \tXA2\n\t\tADD \tXA3\n\t\tSTA \tXAS \n\t \n\t        (b)\n \t\t \n\t\tSUM \tBETA \t \n\t\t\n \t\t  |\n\t\t  |\n\t\t \\|/ \n\t\t\n\t\tLDA \tXBETAl\n\t\tADD \tXBETA2\n\t\tADD \tXBETA3\n\t\tSTA \tXBETAS \t\n \n\t\t(c) \n</code></pre>\n</div></details>\n<h2 id=\"generation-of-unique-labels\"><a class=\"anchor\" href=\"#generation-of-unique-labels\">#</a> Generation of Unique Labels</h2>\n<ul>\n<li>It is general not possible for the body of a macro instruction to contain labels of the usual kind. This leads to the use of relative addressing at the source statement level.</li>\n<li>However, the use of statements like  <code>JLT *-14</code>  is generally considered to be a poor programming practice</li>\n</ul>\n<details><summary>Figure 4.7 illustrates one technique for generating unique labels within a macro expansion</summary><div>\n<p>The character  <code>$</code>  will be replaced by $XX, where XX is a two-character alphanumeric counter of the number of macro instructions expanded, AA, AB, AC, etc.</p>\n<pre><code>25 \tRDBUFF \t\tMACRO \t&amp;INDEV,&amp;BUFADR,&amp;RECLTH \t \n30 \t\t\tCLEAR \tX \t\tCLEAR LOOP COUNTER \t \n35 \t\t\tCLEAR \tA \t\t \n40 \t\t\tCLEAR \tS \t\t \n45 \t       \t       +LDT    #4096 \t\tSET MAXIMUM RECORD LENGTH \t \n50 \t$LOOP \t\tTD     =X'&amp;INDEV' \tTEST INPUT DEVICE \t \n55 \t\t\tJEQ \t$LOOP \t\tLOOP UNTIL READY \t \n60 \t\t\tRD     =X'&amp;INDEV' \tREAD CHARACTER INTO REG A \t \n65 \t\t\tCOMPR \tA,S \t\tTEST FOR END OF RECORD \t \n70 \t\t\tJEQ \t$EXIT \t\tEXIT LOOP IF EOR \t \n75 \t\t\tSTCH \t&amp;BUFADR,X \tSTORE CHARACTER IN BUFFER \t \n80 \t\t\tTIXR \tT \t\tLOOP UNLESS MAXIMUM LENGTH \t \n85 \t\t\tJLT \t$LOOP \t\t  HAS BEEN REACHED \t \n90 \t$EXIT \t\tSTX \t&amp;RECLTH\t\tSAVE RECORD LENGTH \t \n95 \t\t\tMEND \t\n\t\t \n\t\t\t\t(a) \t\n\t \n\t\t\tRDBUFF \tFl,BUFFER,LENGTH \n\n\t\t \n30 \t\t\tCLEAR \tX \t\tCLEAR LOOP COUNTER \t\t \n35 \t\t\tCLEAR \tA \t\t\t \n40 \t\t\tCLEAR \tS \t\t\t \n45 \t      \t       +LDT    #4096 \t\tSET MAXIMUM RECORD LENGTH \t \n50 \t$AALOOP \tTD     =X'Fl' \t\tTEST INPUT DEVICE \t\t \n55 \t\t\tJEQ \t$AALOOP \tLOOP UNTIL READY \t \n60 \t\t\tRD     =X'Fl' \t\tREAD CHARACTER INTO REG A \t \n65 \t\t\tCOMPR \tA,S \t\tTEST FOR END OF RECORD \t \n70 \t\t\tJEQ \t$AAEXIT \tEXIT LOOP IF EOR \t \n75 \t\t\tSTCH \tBUFFER,X \tSTORE CHARACTER IN BUFFER \t \n80 \t\t\tTIXR \tT \t\tLOOP UNLESS MAXIMUM LENGTH \t \n85 \t\t\tJLT \t$AALOOP \t  HAS BEEN REACHED \t \n90 \t$AAEXIT \tSTX \tLENGTH \t\tSAVE REJORD LENGTH \n\t \n\t\t\t\t(b)\n</code></pre>\n</div></details>\n<h2 id=\"conditional-macro-expansion\"><a class=\"anchor\" href=\"#conditional-macro-expansion\">#</a> Conditional Macro Expansion</h2>\n<details><summary>Figure 4.8</summary><div>\n<pre><code>25 \tRDBUFF \t\tMACRO \t&amp;INDEV, &amp;BUFADR , &amp;RECLTH ,&amp;EOR ,&amp;MAXLTH \t \n26 \t\t\tIF \t(&amp;EOR NE &quot;) \t \n27 \t&amp;EORCK \t\tSET \t1 \t \n28 \t\t\tENDIF \t\t \n30 \t\t\tCLEAR \tX \t\tCLEAR LOOP COUNTER \t \n35 \t\t\tCLEAR \tA \t \n38 \t\t\tIF \t(&amp;EORCK EQ 1 ) \t \n40 \t\t\tLDCH   =X'&amp;EOR' \tSET EOR CHARACTER \t \n42 \t\t\tRMO \tA,S \t \n43 \t\t\tENDIF \t\t \n44 \t\t\tIF \t(&amp;MAXLTH EQ '') \t \n45 \t\t       +LDT    #4096 \t\tSET MAX LENGTH = 4096 \t \n46 \t\t\tELSE \t\t \n47 \t\t       +LDT    #&amp;MAXLTH \tSET MAXIMUM RECORD LENGTH \t \n48 \t\t\tENDIF \t\t \n50 \t$LOOP \t\tTD     =X'&amp;INDEV' \tTEST INPUT DEVICE \t \n55 \t\t\tJEQ \t$LOOP LOOP UNTIL READY \t \n60 \t\t\tRD     =X'&amp;INDEV' \tREAD CHARACTER INTO REG A \t \n63 \t\t\tIF \t(&amp;EORCK EQ 1 ) \t\t \n65 \t\t\tCOMPR \tA,S \t\tTEST FOR END OF RECORD \t \n70 \t\t\tJEQ \t$EXIT \t\tEXIT LOOP IF EOR \t \n73 \t\t\tENDIF \t\t\t \n75 \t\t\tSTCH \t&amp;BUFADR ,X \tSTORE CHARACTER IN BUFFER \t \n80 \t\t\tTIXR \tT \t\tLOOP UNLESS MAXIMUM LENGTH \t \n85 \t\t\tJLT \t$LOOP \t\t  HAS BEEN REACHED \t \n90 \t$EXIT \t\tSTX \t&amp;RECLTH \tSAVE RECORD LENGTH \t \n95 \t\t\tMEND \n\t\t \n\t\t\t\t(a) \t \n\n\t\t\tRDBUFF \tF3,BUF,RECL,04,2048 \n\t \n30 \t\t\tCLEAR \tX \t\tCLEAR LOOP COUNTER \t \n35 \t\t\tCLEAR \tA \t\t\t \n40 \t\t\tLOCH   =X'04' \t\tSET EOR CHARACTER \t \n42 \t\t\tRMO \tA,S \t\t\t \n47 \t\t       +LDT    #2048 \t\tSET MAXIMUM RECORD LENGTH \t \n50 \t$AALOOP \tTD     =X'F3' \t\tTEST INPUT DEVICE \t \n55 \t\t\tJEQ \t$AALOOP \tLOOP UNTIL READY \t \n60 \t\t\tRD     =X'F3' \t\tREAD CHARACTER INTO REG A \t \n65 \t\t\tCOMPR \tA,S \t\tTEST FOR END OF RECORD \t \n70 \t\t\tJEQ \t$AAEXIT \tEXIT LOOP IF EOR \t \n75 \t\t\tSTCH \tBUF,X \t\tSTORE CHARACTER IN BUFFER \t \n80 \t\t\tTIXR \tT \t\tLOOP UNLESS MAXIMUM LENGTH \t \n85 \t\t\tJLT \t$AALOOP \t  HAS BEEN REACHED \t \n90 \t$AAEXIT \tSTX \tRECL \t\tSAVE RECORD LENGTH \t \n\t\t\t\t\n\t\t\t\t(b) \n\t\t\t?RDBUFF \tOE,BUFFER,LENGTH,,80 \n\n\t \n30 \t\t\tCLEAR \tX \t\tCLEAR LOOP COUNTER \t \n35 \t\t\tCLEAR \tA \t\t \n47 \t\t       +LDT    #80 \t\tSET MAXIMUM RECORD LENGTH \t \n50 \t$ABLOOP \tTD     =X'OE' \t\tTEST INPUT DEVICE \t \n55 \t\t\tJEQ \t$ABLOOP \tLOOP UNTIL READY \t \n60 \t\t\tRD     =X'OE' \t\tREAD CHARACTER INTO REG A \t \n75 \t\t\tSTCH \tBUFFER,X \tSTORE CHARACTER IN BUFFER \t \n80 \t\t\tTIXR \tT \t\tLOOP UNLESS MAXIMUM LENGTH \t \n87 \t\t\tJLT \t$ABLOOP \t  HAS BEEN REACHED \t \n90 \t$ABEXIT \tSTX \tLENGTH \t\tSAVE RECORD LENGTH\n \t \n\t\t\t\t(c) \t\n\t \n\t\t\tRDBUFF \tFl,BUFF,RLENG,04\n \t\t \n30 \t\t\tCLEAR \tX \t\tCLEAR LOOP COUNTER \t \n35 \t\t\tCLEAR \tA \t\t \n40 \t\t\tLDCH   =X'04' \t\tSET EOR CHARACTER \t \n42 \t\t\tRMO \tA,S \t\t \n45 \t\t       +LDT    #4096 \t\tSET MAX LENGTH = 4096 \t \n50 \t$ACLOOP \tTD     =X'Fl' \t\tTEST INPUT DEVICE \t \n55 \t\t\tJEQ \t$ACLOOP \tLOOP UNTIL READY \t \n60 \t\t\tRD     =X'Fl' \t\tREAD CHARACTER INTO REG A \t \n65 \t\t\tCOMPR \tA,S \t\tTEST FOR END OF RECORD \t \n70 \t\t\tJEQ \t$ACEXIT \tEXIT LOOP IF EOR \t \n75 \t\t\tSTCH \tBUFF, X \tSTORE CHARACTER IN BUFFER \t \n80 \t\t\tTIXR \tT \t\tLOOP UNLESS MAXIMUM LENGTH \t \n85 \t\t\tJLT \t$ACLOOP \t  HAS BEEN REACHED \t \n90 \t$ACEXIT \tSTX \tRLENG \t\tSAVE RECORD LENGTH \n\t \n\t\t\t\t(d)\n</code></pre>\n</div></details>\n<ul>\n<li>Two additional parameters: &amp;EOR and &amp;MAXLTH for conditional macro expansion</li>\n<li><strong>IF</strong> statement</li>\n<li>Macro processor directive <strong>SET</strong></li>\n<li>Macro-time variable, beginning with the character &amp; for storing working values during the macro expansion. All such variables are initialized to a value of 0.</li>\n<li>It is extremely important to understand that the testing of Boolean expression in IF statements occurs at the time macros are expanded, not during program execution.</li>\n</ul>\n<details><summary>Figure 4.9</summary><div>\n<pre><code>25 \tRDBUFF \t\tMACRO \t&amp;INDEV,&amp;BUFADR,&amp;RECLTH,&amp;EOR \t \n27 \t&amp;EORCT \t\tSET \t%NITEMS(&amp;EOR) \t\t \n30 \t\t\tCLEAR \tX \t\tCLEAR LOOP COUNTER \t \n35 \t\t\tCLEAR \tA \t\t \n45 \t\t       +LDT    #4096 \t\tSET MAX LENGTH = 4096 \t \n50 \t$LOOP \t\tTD     =X'&amp;INDEV' \tTEST INPUT DEVICE \t \n55 \t\t\tJEQ \t$LOOP \t\tLOOP UNTIL READY \t \n60 \t\t\tRD     =X'&amp;INDEV' \tREAD CHARACTER INTO REG A \t \n63 \t&amp;CTR \t\tSET \t1 \t\t \n64 \t\t\tWHILE \t(&amp;CTR LE &amp;EORCT) \t \n65 \t\t\tCOMP   =X'0000&amp;EOR[&amp;CTR]' \t \n70 \t\t\tJEQ \t$EXIT \t \n71 \t&amp;CTR \t\tSET \t&amp;CTR+l \t \n73 \t\t\tENDW \t\t \n75 \t\t\tSTCH \t&amp;BUFADR,X \tSTORE CHARACTER IN BUFFER \t \n80 \t\t\tTIXR \tT \t\tLOOP UNLESS MAXIMUM LENGTH \t \n85 \t\t\tJLT \t$LOOP \t\t  HAS BEEN REACHED \t \n90 \t$EXIT \t\tSTX \t&amp;RECLTH \tSAVE RECORD LENGTH \t \n100 \t\t\tMEND\n \t\t \n\t\t\t\t(a) \t \n\n\t\t\tRDBUFF \tF2,BUFFER,LENGTH,(00,03,04) \t \n\n30 \t\t\tCLEAR \tX \t\tCLEAR LOOP COUNTER \t \n35 \t\t\tCLEAR \tA \t \n45 \t\t       +LDT    #4096 \t\tSET MAX LENGTH = 4096 \t \n50 \t$AALOOP \tTD     =X'F2' \t\tTEST INPUT DEVICE \t \n55 \t\t\tJEQ \t$AALOOP \tLOOP UNTIL READY \t \n60 \t\t\tRD     =X'F2' \t\tREAD CHARACTER INTO REG A \t \n65 \t\t\tCOMP   =X'000000' \t \n70 \t\t\tJEQ \t$AAEXIT \t \n65 \t\t\tCOMP   =X'000003' \t \n70 \t\t\tJEQ \t$AAEXIT \t \n65 \t\t\tCOMP   =X'000004' \t \n70 \t\t\tJEQ \t$AAEXIT \t \n75 \t\t\tSTCH \tBUFFER,X \tSTORE CHARACTER IN BUFFER \t \n80 \t\t\tTIXR \tT \t\tLOOP UNLESS MAXIMUM LENGTH \t \n85 \t\t\tJLT \t$AALOOP \t  HAS BEEN REACHED \t \n90 \t$AAEXIT \tSTX \tLENGTH \t\tSAVE RECORD LENGTH \t \n\t\n\t\t\t\t(b)\n</code></pre>\n</div></details>\n<ul>\n<li>Looping statement <strong>WHILE</strong></li>\n<li>A list (00, 03, 04) corresponding to the parameter &amp;EOR</li>\n<li><strong>%NITEMS</strong> is a macro processor function that returns as its value the number of members in an argument list</li>\n<li>&amp;EOR[&amp;CTR]</li>\n</ul>\n<h2 id=\"keyword-macro-parameters\"><a class=\"anchor\" href=\"#keyword-macro-parameters\">#</a> Keyword Macro Parameters</h2>\n<ul>\n<li>With positional parameters, if an argument is to be omitted, the macro invocation statement must contain a null argument (two consecutive commas) to maintain the correct argument positions</li>\n<li>However, if a macro has a large number of parameters, and only a few of these are given values in a typical invocation, a different form of parameter specification is more useful\n<ul>\n<li>Perhaps an entire operating system is to be generated from a macro invocation. In such cases, most of the parameters may have acceptable default values; the macro invocation specifies only the changes from the default set of values.</li>\n<li>GENER ,DIRECT,3</li>\n<li>GENER TYPE=DIRECT, CHANGE=3</li>\n</ul>\n</li>\n</ul>\n<details><summary>Figure 4.10</summary><div>\n<pre><code>25 \tRDBUFF \t\tMACRO \t&amp;INDEV=F1,&amp;BUFADR=,&amp;RECLTH=,&amp;EOR=04,&amp;MAXLTH=4096 \t \n26 \t\t\tIF \t(&amp;EOR NE &quot;) \t\t \n27 \t&amp;EORCK \t\tSET \t1 \t\t \n28 \t\t\tENDIF \t\t\t \n30  \t\t\tCLEAR \tX \t\tCLEAR LOOP COUNTER \t \n35 \t\t\tCLEAR \tA \t\t \n38 \t\t\tIF \t(&amp;EORCK EQ 1) \t\t \n40 \t\t\tLDCH   =X'&amp;EOR' \tSET EOR CHARACTER \t \n42 \t\t\tRMO \tA,S \t\t \n43 \t\t\tENDIF \t\t\t \n47 \t\t       +LDT    #&amp;MAXLTH \tSET MAXIMUM RECORD LENGTH \t \n50 \t$LOOP \t\tTD     =X'&amp;INDEV' \tTEST INPUT DEVICE \t \n55 \t\t\tJEQ \t$LOOP \t\tLOOP UNTIL READY \t \n60 \t\t\tRD     =X'&amp;INDEV' \tREAD CHARACTER INTO REG A \t \n63 \t\t\tIF \t(&amp;EORCK EQ 1) \t\t \n65 \t\t\tCOMPR \tA,S \t\tTEST FOR END OF RECORD \t \n70 \t\t\tJEQ \t$EXIT \t\tEXIT LOOP IF EOR \t \n73 \t\t\tENDIF \t\t\t \n75 \t\t\tSTCH \t&amp;BUFADR ,X \tSTORE CHARACTER IN BUFFER \t \n80 \t\t\tTIXR \tT \t\tLOOP UNLESS MAXIMUM LENGTH \t \n85 \t\t\tJLT \t$LOOP \t\t  HAS BEEN REACHED \t \n90 \t$EXI T \t\tSTX \t&amp;RECLTH \tSAVE RECORD LENGTH \t \n95 \t\t\tMEND \n\t\t \n\t\t\t\t(a) \t \n\t\n\t\t\tRDBUFF \tBUFADR=BUFFER,RECLTH=LENGTH \n\t \n30 \t\t\tCLEAR \tX \t\tCLEAR LOOP COUNTER \t \n35 \t\t\tCLEAR \tA \t \n40 \t\t\tLDCH   =X'04' \t\tSET EOR CHARACTER \t \n42 \t\t\tRMO \tA, S \t \n47 \t\t       +LDT    #4096 \t\tSET MAXIMUM RECORD LENGTH \t \n50 \t$AALOOP \tTD     =X'F1' \t\tTEST INPUT DEVICE \t \n55 \t\t\tJEQ \t$AALOOP \tLOOP UNTIL READY \t \n60 \t\t\tRD     =X'F1' \t\tREAD CHARACTER INTO REG A \t \n65 \t\t\tCOMPR \tA,S \t\tTEST FOR END OF RECORD \t \n70 \t\t\tJEQ \t$AAEXIT \tEXIT LOOP IF EOR \t \n75 \t\t\tSTCH \tBUFFER,X \tSTORE CHARACTER IN BUFFER \t \n80 \t\t\tTIXR \tT \t\tLOOP UNLESS MAXIMUM LENGTH \t \n85 \t\t\tJLT \t$AALOOP \t  HAS BEEN REACHED \t \n90 \t$AAEXIT \tSTX \tLENGTH \t\tSAVE RECORD LENGTH \t \n\n\t\t\t\t(b)  \t\n\t\t\tRDBUFF \tRECLTH=LENGTH,BUFADR=BUFFER,EOR=,INDEV=F3 \n\t \n30 \t\t\tCLEAR \tX \t\tCLEAR LOOP COUNTER \t \n35 \t\t\tCLEAR \tA \t\t \n47 \t\t       +LDT    #4096 \t\tSET MAXIMUM RECORD LENGTH \t \n50 \t$ABLOOP \tTD     =X'F3' \t\tTEST INPUT DEVICE \t \n55 \t\t\tJEQ \t$ABLOOP \tLOOP UNTIL READY \t \n60 \t\t\tRD     =X'F3' \t\tREAD CHARACTER INTO REG A \t \n75 \t\t\tSTCH \tBUFFER, X \tSTORE CHARACTER IN BUFFER \t \n80 \t\t\tTIXR \tT \t\tLOOP UNLESS MAXIMUM LENGTH \t \n85 \t\t\tJLT \t$ABLOOP \t  HAS BEEN REACHED \t \n90 \t$ABEXIT \tSTX \tLENGTH \t\tSAVE RECORD LENGTH\n \t \n\t\t\t(c)  \n</code></pre>\n</div></details>\n<ul>\n<li><strong>Default values</strong> can simplify the macro definition in many cases\n<ul>\n<li>Figure 4.10(a) and 4.8(a) both provide for setting the maximum record length to 4096 unless a different value is specified by the user.</li>\n<li>The default value established in Figure 4.10(a) takes care if this automatically</li>\n<li>In Figure 4.8(a), an IF-ELSE-ENDIF structure is required to accomplish the same thing</li>\n</ul>\n</li>\n</ul>\n<h2 id=\"recursive-macro-expansion\"><a class=\"anchor\" href=\"#recursive-macro-expansion\">#</a> Recursive Macro Expansion</h2>\n<details><summary>Figure 4.11 Nested macro invocation</summary><div>\n<pre><code>10 \tRDBUFF \t\tMACRO \t&amp;BUFADR,&amp;RECLTH,&amp;INDEV \t \n15 \t.\t\t\t\t \n20 \t.\t\tMACRO TO READ RECORD INTO BUFFER \t \n25 \t.\t\t\t\t \n30 \t\t\tCLEAR \tX \t\tCLEAR LOOP COUNTER \t \n35 \t\t\tCLEAR \tA \t \n40 \t\t\tCLEAR \tS \t \n45 \t\t       +LDT    #4096 \t\tSET MAXIMUM RECORD LENGTH \t \n50 \t$LOOP \t\tRDCHAR \t&amp;INDEV \t\tREAD CHARACTER INTO REG A \t \n65 \t\t\tCOMPR \tA,S \t\tTEST FOR END OF RECORD \t \n70 \t\t\tJEQ \t$EXIT \t\tEXIT LOOP IF EOR \t \n75 \t\t\tSTCH \t&amp;BUFADR,X \tSTORE CHARACTER IN BUFFER \t \n80 \t\t\tTIXR \tT \t\tLOOP UNLESS MAXIMUM LENGTH \t \n85 \t\t\tJLT \t$LOOP \t\t  HAS BEEN REACHED \t \n90 \t$EXIT \t\tSTX \t&amp;RECLTH \tSAVE RECORD LENGTH \t \n95 \t\t\tMEND \n\t \n\t\t\t(a) \t \n\n5 \tRDCHAR \t\tMACRO \t&amp;IN \t \n10 \t.\t\t \n15 \t.\t\tMACRO TO READ CHARACTER INTO REGISTER A \t \n20 \t.\t\t \n25 \t\t\tTD     =X'&amp;IN' \t\tTEST INPUT DEVICE \t \n30 \t\t\tJEQ \t*-3 \t\tLOOP UNTIL READY \t \n35 \t\t\tRD     =X'&amp;IN' \t\tREAD CHARACTER \t \n40 \t\t\tMEND \n\t\t\t\t \n\t\t\t(b) \n\t\t \n\t\t\tRDBUFF \tBUFFER,LENGTH,FI \n\n\t\t\t(c)\n</code></pre>\n</div></details>\n<ul>\n<li>When applying the algorithm of Figure 4.5 to the macro invocation statement in Figure 4.11©\n<ul>\n<li>When the end of the definition of RDCHAR was recognized, EXPANDING would be set to FALSE. Thus the macro processor would forget that it had been in the middle of expanding a macro when it encountered the RDCHAR statement</li>\n<li>The arguments from the original macro invocation (RDBUFF) would be lost because the values in ARGTAB were overwritten with the arguments from the invocation of RDCHAR</li>\n</ul>\n</li>\n</ul>\n<h2 id=\"general-purpose-macro-processors\"><a class=\"anchor\" href=\"#general-purpose-macro-processors\">#</a> General-Purpose Macro Processors</h2>\n<ul>\n<li>The advantage of a general-purpose approach to macro processing is that the programmer does not need to learn about a different macro facility for each compiler or assembler language.</li>\n<li>In spite of the advantages noted, there are still relatively few general-purpose macro processors. One of the reasons for this situation is the large number of details that must be dealt with in a real programming language.</li>\n<li>In a typical programming language, there are several situations in which normal macro parameter substitution should not occur\n<ul>\n<li>For example, comments should usually be ignored by a macro processor.</li>\n<li>However, each programming language has its own methods for identifying comments.</li>\n</ul>\n</li>\n<li>With most special-purpose macro processors, macro invocations are very similar in form to statements in the source programming language. This similarity of form tends to make the source program easier to write and read.\n<ul>\n<li>However, it is difficult to achieve with a general-purpose macro processor that is to be used with different programming languages.</li>\n</ul>\n</li>\n</ul>\n<h2 id=\"macro-processing-within-language-translators\"><a class=\"anchor\" href=\"#macro-processing-within-language-translators\">#</a> Macro Processing within Language Translators</h2>\n<ul>\n<li>The macro processors that we have discussed so far might be called <strong>preprocessors</strong>.\n<ul>\n<li>They process macro definitions and expand macro invocations, producing an expanded version of the source program. This expanded program is then used as input to an assembler or compiler.</li>\n</ul>\n</li>\n<li>An alternative is combining the macro processing functions with the language translator itself.</li>\n<li>The simplest method of achieving this sort of combination is a <strong>line-by-line</strong> macro processor.\n<ul>\n<li>The output lines are passed to the language translator as they are generated (one at a time), instead of being written to an expanded source file.</li>\n<li>Thus the macro processor operates as a sort of input routine for the assembler or compiler.</li>\n</ul>\n</li>\n<li>This line-by-line approach has several advantages.\n<ul>\n<li>It avoids making an extra pass over the source program, so it can be more efficient.</li>\n<li>Some of the data structures required by the macro processor and the language translator can be combine.\n<ul>\n<li>ex. OPTAB in an assembler and NAMTAB in the macro processor could be implemented in the same table.</li>\n</ul>\n</li>\n</ul>\n</li>\n</ul>\n<h2 id=\"implement-example\"><a class=\"anchor\" href=\"#implement-example\">#</a> Implement Example</h2>\n<h3 id=\"masm-macro-processor\"><a class=\"anchor\" href=\"#masm-macro-processor\">#</a> MASM Macro Processor</h3>\n<ul>\n<li>The macro processor of MASM is integrated with Pass 1 of the assembler.</li>\n<li>Macro may be redefined during a program. The new definition of the macro simply replaces the first one.</li>\n</ul>\n<details><summary>Figure 4.12 Conditional assembly statements.</summary><div>\n<ul>\n<li>Line 2 declare that <strong>EXIT</strong> is a local label. When the macro is expanded, each local label is replaced by a unique name.</li>\n<li>The <strong>.ERR</strong> on line 6 signals to MASM that an error has been detected, and the <strong>EXITM</strong> directs MASM to terminate the expansion of the macro.</li>\n<li>The comment on line 9, which begins with  <code>;;</code>  is a <strong>macro comment</strong>.</li>\n<li>The comment on line 10, which begins with  <code>;</code>  is an ordinary <strong>assembler language comment</strong>. It is included as part of the macro expansion.</li>\n</ul>\n<pre><code>1 \tABSDIF \t\tMACRO \tOP1,OP2,SIZE \t\t\t \n2 \t\t\tLOCAL \tEXIT \t\t\t \n3 \t\t\tIFNB \t&lt;SIZE&gt;  \t;; IF SIZE IS NOT BLANK \t \n4 \t\t\tIFDIF \t&lt;SIZE&gt;,&lt;E&gt;  \t;; THEN IT MUST BE E \t \n5 \t\t\t; ERROR -- SIZE MUST BE E OR BLANK \t\t \n6 \t\t\t.ERR \t\t\t\t \n7 \t\t\tEXITM \t\t\t\t \n8 \t\t\tENDIF \t\t\t;; END OF IFDIF \t \n9 \t\t\tENDIF \t\t\t;; END OF IFNB \t \n10 \t\t\tMOV \tSIZE&amp;AX,OP1 \t; COMPUTE ABSOLUTE DIFFERENCE \t \n11 \t\t\tSUB \tSIZE&amp;AX,OP2 \t;; SUBTRACT OP2 FROM OP1 \t \n12 \t\t\tJNS \tEXIT \t\t;; EXIT IF RESULT GE 0 \t \n13 \t\t\tNEG \tSIZE&amp;AX     \t;; OTHERWI SE CHANGE SIGN \t \n14 \tEXIT: \t\t\t \n15 \t\t\tENDM \n\t\t \n\t\t\t\t\t(a) \t \n\n\t\t\tABSDIF \tJ,K \t \n\t\t           |\n\t\t  \t   |\n\t\t \t  \\|/ \t\t\n \t\t \n\t\t\tMOV \tAX,J \t\t; COMPUTE ABSOLUTE DIFFERENCE \t \n\t\t\tSUB \tAX,K \t \n\t\t\tJNS \t??0000 \t \n\t\t\tNEG \tAX \t \n\t??0000: \t\t\t \n\n\t\t\t\t\t(b) \t \n\n\t\t\tABSDIF \tM,N,E \t \n\n\t\t           |\n\t\t  \t   |\n\t\t \t  \\|/ \n\t\t \t\t \n\t\t\tMOV \tEAX,M \t\t; COMPUTE ABSOLUTE DIFFERENCE \t \n\t\t\tSUB \tEAX,N \t \n\t\t\tJNS \t??0001 \t \n\t\t\tNEG \tEAX \t \n\t??0001: \n\t\t\t \n\t\t\t\t\t(e) \t \n\t\t\n\t\t\tABSDIF \tP,Q,X \t\n\n\t\t           |\n\t\t  \t   |\n\t\t \t  \\|/  \n\n\t\t\t; ERROR -- SIZE MUST BE E OR BLANK\n</code></pre>\n</div></details>\n<details><summary>Figure 4.13 Iteration statements.</summary><div>\n<pre><code>?1 \tNODE \t\tMACRO \tNAME \t \n2 \t\t\tIRP \tS,&lt;'LEFT','DATA','RIGHT'&gt; \t \n3 \tNAME&amp;S \t\tDW\t0 \t \n4 \t\t\tENDM \t\t\t;; END OF IRP \t \n5 \t\t\tENDM  \t\t\t;; END OF MACRO \t \n\n\t\t\t\t\t(a) \t \n\n\t\t\tNODE \tX \t \n\n\t\t          |\n\t\t  \t  |\n\t\t         \\|/  \n \t \n\tXLEFT \t\tDW \t0 \t \n\tXDATA \t\tDW\t0 \t \n\tXRIGHT \t\tDW \t0 \n\t \n\t\t\t\t\t(b)\n</code></pre>\n</div></details>\n",
            "tags": [
                "SystemSoftware",
                "System Software",
                "Assembler"
            ]
        },
        {
            "id": "https://chienikao.github.io/2023/05/23/SystemSoftware/Ch03_Loaders_and_Linkers/",
            "url": "https://chienikao.github.io/2023/05/23/SystemSoftware/Ch03_Loaders_and_Linkers/",
            "title": "Ch03 - Loaders and Linkers",
            "date_published": "2023-05-23T06:33:10.000Z",
            "content_html": "<h2 id=\"introduction\"><a class=\"anchor\" href=\"#introduction\">#</a> Introduction</h2>\n<ul>\n<li>A loader is a system program that performs the <span class=\"red\">loading</span> function. Many loaders also support <span class=\"red\">relocation</span> and <span class=\"red\">linking</span>.</li>\n<li>Some systems have a <span class=\"red\">linker</span> to perform the linking operations and a separate loader to handle relocation and loading.</li>\n<li>In most cases all the program translators (ex. assemblers and compilers) on a particular system produce object programs in the same format. Thus one system loader or linker can be used regardless of the original source programming language.</li>\n</ul>\n<h2 id=\"basic-loader-functions\"><a class=\"anchor\" href=\"#basic-loader-functions\">#</a> Basic Loader Functions</h2>\n<h3 id=\"design-of-an-absolute-loader\"><a class=\"anchor\" href=\"#design-of-an-absolute-loader\">#</a> Design of an Absolute Loader</h3>\n<ul>\n<li>\n<p>An absolute loader does not need to perform such functions as linking and program relocation, its operation is very simple. <strong>All functions are accomplished in a single pass</strong>.</p>\n</li>\n<li>\n<p>When the  <code>End</code>  record is encountered, the loader jumps to the specified address to begin execution of the loaded program.</p>\n</li>\n<li>\n<p><span class=\"yellow\">從多少開始</span></p>\n</li>\n<li>\n<p><span class=\"green\">每行的 T 的起點都要確認，不是每行都直接接下去，有變數的地方會跳</span></p>\n</li>\n<li>\n<p><span class=\"red\">中間的 xx xxxxx…xxxx 是變數 (包含 array)，沒有常數 (常數是有值的)</span></p>\n</li>\n<li>\n<p><img data-src=\"https://imgur.com/4i8nWYr.png\" alt=\"\"></p>\n</li>\n</ul>\n<h3 id=\"a-simple-bootstrap-loader\"><a class=\"anchor\" href=\"#a-simple-bootstrap-loader\">#</a> A simple Bootstrap Loader</h3>\n<ul>\n<li>When a computer is first turned on or restarted, a special type of absolute loader, called a <span class=\"red\">bootstrap loader</span>, is executed.</li>\n<li>The bootstrap loads the first program to be run by the computer — usually an operating system.</li>\n</ul>\n<h2 id=\"machine-dependent-loader-features\"><a class=\"anchor\" href=\"#machine-dependent-loader-features\">#</a> Machine-Dependent Loader Features</h2>\n<ul>\n<li>The absolute loader is certainly simple and efficient; however, this scheme has several potential disadvantage.\n<ul>\n<li>Writing absolute programs makes it difficult to use subroutine libraries efficiently.</li>\n</ul>\n</li>\n</ul>\n<h3 id=\"relocation\"><a class=\"anchor\" href=\"#relocation\">#</a> Relocation</h3>\n<ul>\n<li>\n<p>Loaders that allow for program relocation are called <span class=\"red\">relocation loaders</span> or <span class=\"red\">relative loaders</span>.</p>\n</li>\n<li>\n<p>There are two methods for specifying relocation as part of the object program.</p>\n<ul>\n<li><strong>Modification record</strong> (suitable for <strong>SIX/XE</strong> programs, only some instructions require relocation).</li>\n<li><strong>Relocation by bit mask</strong> (suitable for direct addressing and fixed instruction format, such as <strong>SIC</strong> programs; nearly all instructions require relocation, resulting in an object program more than twice as large as the original one.)</li>\n</ul>\n</li>\n<li>\n<p>Relocation by bit mask</p>\n<ul>\n<li>There is a <span class=\"red\">relocation bit</span> (1 for relocation) associated with each word of object code (each SIC instruction).</li>\n<li>The relocation bis are gathered together into a <span class=\"red\">bit mask</span> following the length indicator in each Text record.</li>\n<li><img data-src=\"https://imgur.com/vMgkPka.png\" alt=\"\"></li>\n</ul>\n</li>\n</ul>\n<h3 id=\"program-linking\"><a class=\"anchor\" href=\"#program-linking\">#</a> Program Linking</h3>\n<ul>\n<li>Relationship between the relocation and linking process.</li>\n<li>The general approach taken is for the assembler to evaluate as much of the expression as it can. The remaining terms are passed on to the loader via Modificaion records.<br>\n<img data-src=\"https://imgur.com/WYixbEw.png\" alt=\"\"><br>\n<img data-src=\"https://imgur.com/juLxmFP.png\" alt=\"\"></li>\n</ul>\n<h3 id=\"algorithm-and-data-structure-for-a-linking-loader\"><a class=\"anchor\" href=\"#algorithm-and-data-structure-for-a-linking-loader\">#</a> Algorithm and Data Structure for a Linking Loader</h3>\n<ul>\n<li>The input to a linking loader consists of a set of object programs (ex. control sections) that are to be linked together.</li>\n<li>It is possible (and common) for a control section to make an external reference to a symbol whose definition does not appear until later ini this input stream.</li>\n<li>Thus a linking loader usually makes <span class=\"red\">two passes</span> over its input.\n<ul>\n<li>Pass 1 assigns addresses to all external symbols.</li>\n<li>Pass 2 performs the actual loading, relocation, and linking.</li>\n</ul>\n</li>\n<li>The main data structure needed for our linking loader is an <span class=\"red\">external symbol table ESTAB</span>.</li>\n<li>Two other important variables are <span class=\"red\">PROGADDR</span>(program load address) and <span class=\"red\">CSADDR</span>(control section address).\n<ul>\n<li>The value of PROGADDR is supplied to the loader by the operating system.</li>\n</ul>\n</li>\n</ul>\n<p><strong>Algorithm for Pass 1</strong><br>\nConcerned only with Header and Define record types in the control sections.</p>\n<figure class=\"highlight vhdl\"><figcaption data-lang=\"VHDL\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre><span class=\"token keyword\">begin</span> \t </pre></td></tr><tr><td data-num=\"2\"></td><td><pre>get PROGADDR from operating system \t </pre></td></tr><tr><td data-num=\"3\"></td><td><pre>set CSADDR <span class=\"token keyword\">to</span> PROGADDR <span class=\"token punctuation\">&#123;</span><span class=\"token keyword\">for</span> first control section<span class=\"token punctuation\">&#125;</span> \t </pre></td></tr><tr><td data-num=\"4\"></td><td><pre><span class=\"token keyword\">while</span> <span class=\"token operator\">not</span> <span class=\"token keyword\">end</span> <span class=\"token keyword\">of</span> input do \t </pre></td></tr><tr><td data-num=\"5\"></td><td><pre>  <span class=\"token keyword\">begin</span> \t </pre></td></tr><tr><td data-num=\"6\"></td><td><pre>    read <span class=\"token keyword\">next</span> input <span class=\"token keyword\">record</span> <span class=\"token punctuation\">&#123;</span>Header <span class=\"token keyword\">record</span> <span class=\"token keyword\">for</span> control section<span class=\"token punctuation\">&#125;</span> \t </pre></td></tr><tr><td data-num=\"7\"></td><td><pre>\tset CSLTH <span class=\"token keyword\">to</span> control section length \t </pre></td></tr><tr><td data-num=\"8\"></td><td><pre>\tsearch ESTAB <span class=\"token keyword\">for</span> control section name \t </pre></td></tr><tr><td data-num=\"9\"></td><td><pre>\t<span class=\"token keyword\">if</span> found <span class=\"token keyword\">then</span> \t </pre></td></tr><tr><td data-num=\"10\"></td><td><pre>\t  set error flag <span class=\"token punctuation\">&#123;</span>duplicate external symbol<span class=\"token punctuation\">&#125;</span> \t </pre></td></tr><tr><td data-num=\"11\"></td><td><pre>\t<span class=\"token keyword\">else</span> \t </pre></td></tr><tr><td data-num=\"12\"></td><td><pre>\t  enter control section name into ESTAB <span class=\"token keyword\">with</span> value CSADDR </pre></td></tr><tr><td data-num=\"13\"></td><td><pre>\t<span class=\"token keyword\">while</span> <span class=\"token keyword\">record</span> <span class=\"token keyword\">type</span> !<span class=\"token operator\">=</span> 'E' do \t </pre></td></tr><tr><td data-num=\"14\"></td><td><pre>\t  <span class=\"token keyword\">begin</span> \t </pre></td></tr><tr><td data-num=\"15\"></td><td><pre>\t\tread <span class=\"token keyword\">next</span> input <span class=\"token keyword\">record</span> \t </pre></td></tr><tr><td data-num=\"16\"></td><td><pre>\t\t<span class=\"token keyword\">if</span> <span class=\"token keyword\">record</span> <span class=\"token keyword\">type</span> <span class=\"token operator\">=</span> 'D' <span class=\"token keyword\">then</span> \t </pre></td></tr><tr><td data-num=\"17\"></td><td><pre>\t\t  <span class=\"token keyword\">for</span> each symbol <span class=\"token keyword\">in</span> the <span class=\"token keyword\">record</span> do \t </pre></td></tr><tr><td data-num=\"18\"></td><td><pre>\t\t\t<span class=\"token keyword\">begin</span> \t </pre></td></tr><tr><td data-num=\"19\"></td><td><pre>\t\t\t  search ESTAB <span class=\"token keyword\">for</span> symbol name \t </pre></td></tr><tr><td data-num=\"20\"></td><td><pre>\t\t\t  <span class=\"token keyword\">if</span> found <span class=\"token keyword\">then</span> \t </pre></td></tr><tr><td data-num=\"21\"></td><td><pre>\t\t\t\tset error flag <span class=\"token punctuation\">(</span>duplicate external symbol<span class=\"token punctuation\">)</span> \t </pre></td></tr><tr><td data-num=\"22\"></td><td><pre>\t\t\t  <span class=\"token keyword\">else</span> \t </pre></td></tr><tr><td data-num=\"23\"></td><td><pre>\t\t\t\tenter symbol into ESTAB <span class=\"token keyword\">with</span> value \t </pre></td></tr><tr><td data-num=\"24\"></td><td><pre>\t\t\t\t  <span class=\"token punctuation\">(</span>CSADDR <span class=\"token operator\">+</span> indicated address<span class=\"token punctuation\">)</span> \t </pre></td></tr><tr><td data-num=\"25\"></td><td><pre>\t\t\t<span class=\"token keyword\">end</span> <span class=\"token punctuation\">&#123;</span><span class=\"token keyword\">for</span><span class=\"token punctuation\">&#125;</span> </pre></td></tr><tr><td data-num=\"26\"></td><td><pre>\t  <span class=\"token keyword\">end</span> <span class=\"token punctuation\">&#123;</span><span class=\"token keyword\">while</span> !<span class=\"token operator\">=</span> 'E'<span class=\"token punctuation\">&#125;</span> \t\t\t </pre></td></tr><tr><td data-num=\"27\"></td><td><pre>    add CSLTH <span class=\"token keyword\">to</span> CSADDR <span class=\"token punctuation\">&#123;</span>starting address <span class=\"token keyword\">for</span> <span class=\"token keyword\">next</span> control section<span class=\"token punctuation\">&#125;</span> \t </pre></td></tr><tr><td data-num=\"28\"></td><td><pre>  <span class=\"token keyword\">end</span> <span class=\"token punctuation\">&#123;</span><span class=\"token keyword\">while</span> <span class=\"token operator\">not</span> EOF<span class=\"token punctuation\">&#125;</span> \t\t </pre></td></tr><tr><td data-num=\"29\"></td><td><pre><span class=\"token keyword\">end</span> <span class=\"token punctuation\">&#123;</span>Pass <span class=\"token number\">1</span><span class=\"token punctuation\">&#125;</span></pre></td></tr></table></figure><p><strong>Algorithm for Pass 2</strong></p>\n<ul>\n<li>Perform the actual loading, relocation, and linking of the program.</li>\n<li>The  <code>END</code>  record for each control section may contain the address of the first instruction in that control section to be executed. The loader takes this as the transfer point to begin execution.\n<ul>\n<li>If more than one control section specifies a transfer address, the loader arbitrarily uses the last one encountered.</li>\n<li>If no control section contains a transfer address, the loader uses the beginning of the linked program (ex. PROGADDR) as the transfer point.</li>\n<li>Normally, a transfer address would be placed in the  <code>END</code>  record for a main program, but not for a subroutine.</li>\n</ul>\n</li>\n</ul>\n<figure class=\"highlight vhdl\"><figcaption data-lang=\"VHDL\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre><span class=\"token keyword\">begin</span> \t </pre></td></tr><tr><td data-num=\"2\"></td><td><pre>set CSADDR <span class=\"token keyword\">to</span> PROGADDR \t </pre></td></tr><tr><td data-num=\"3\"></td><td><pre>set EXECADDR <span class=\"token keyword\">to</span> PROGADDR \t </pre></td></tr><tr><td data-num=\"4\"></td><td><pre><span class=\"token keyword\">while</span> <span class=\"token operator\">not</span> <span class=\"token keyword\">end</span> <span class=\"token keyword\">of</span> input do \t </pre></td></tr><tr><td data-num=\"5\"></td><td><pre>\t<span class=\"token keyword\">begin</span> \t </pre></td></tr><tr><td data-num=\"6\"></td><td><pre>\t\tread <span class=\"token keyword\">next</span> input <span class=\"token keyword\">record</span> <span class=\"token punctuation\">&#123;</span>Header <span class=\"token keyword\">record</span><span class=\"token punctuation\">&#125;</span> \t </pre></td></tr><tr><td data-num=\"7\"></td><td><pre>\t\tset CSLTH <span class=\"token keyword\">to</span> control section length \t </pre></td></tr><tr><td data-num=\"8\"></td><td><pre>\t\t<span class=\"token keyword\">while</span> <span class=\"token keyword\">record</span> <span class=\"token keyword\">type</span> !<span class=\"token operator\">=</span> 'E' do \t\t </pre></td></tr><tr><td data-num=\"9\"></td><td><pre>\t\t\t<span class=\"token keyword\">begin</span> \t\t </pre></td></tr><tr><td data-num=\"10\"></td><td><pre>\t\t\tread <span class=\"token keyword\">next</span> input <span class=\"token keyword\">record</span> \t </pre></td></tr><tr><td data-num=\"11\"></td><td><pre>\t\t\t<span class=\"token keyword\">if</span> <span class=\"token keyword\">record</span> <span class=\"token keyword\">type</span> <span class=\"token operator\">=</span> 'T' <span class=\"token keyword\">then</span> \t\t </pre></td></tr><tr><td data-num=\"12\"></td><td><pre>\t\t\t\t<span class=\"token keyword\">begin</span> \t\t </pre></td></tr><tr><td data-num=\"13\"></td><td><pre>\t\t\t\t\t<span class=\"token punctuation\">&#123;</span><span class=\"token keyword\">if</span> object code <span class=\"token keyword\">is</span> <span class=\"token keyword\">in</span> character form<span class=\"token punctuation\">,</span> convert \t </pre></td></tr><tr><td data-num=\"14\"></td><td><pre>\t\t\t\t\t\tinto internal representation<span class=\"token punctuation\">&#125;</span> \t </pre></td></tr><tr><td data-num=\"15\"></td><td><pre>\t\t\t\t\tmove object code from <span class=\"token keyword\">record</span> <span class=\"token keyword\">to</span> location \t </pre></td></tr><tr><td data-num=\"16\"></td><td><pre>\t\t\t\t\t\t<span class=\"token punctuation\">(</span>CSADDR <span class=\"token operator\">+</span> specified address<span class=\"token punctuation\">)</span> \t\t </pre></td></tr><tr><td data-num=\"17\"></td><td><pre>\t\t\t\t<span class=\"token keyword\">end</span> <span class=\"token punctuation\">&#123;</span><span class=\"token keyword\">if</span> 'T'<span class=\"token punctuation\">&#125;</span> \t\t </pre></td></tr><tr><td data-num=\"18\"></td><td><pre>\t\t\t<span class=\"token keyword\">else</span> <span class=\"token keyword\">if</span> <span class=\"token keyword\">record</span> <span class=\"token keyword\">type</span> <span class=\"token operator\">=</span> 'M' <span class=\"token keyword\">then</span> \t </pre></td></tr><tr><td data-num=\"19\"></td><td><pre>\t\t\t\t<span class=\"token keyword\">begin</span> \t\t </pre></td></tr><tr><td data-num=\"20\"></td><td><pre>\t\t\t\t\tsearch ESTAB <span class=\"token keyword\">for</span> modifying symbol name \t </pre></td></tr><tr><td data-num=\"21\"></td><td><pre>\t\t\t\t\t<span class=\"token keyword\">if</span> found <span class=\"token keyword\">then</span> \t </pre></td></tr><tr><td data-num=\"22\"></td><td><pre>\t\t\t\t\t\tadd <span class=\"token operator\">or</span> subtract symbol value at location \t </pre></td></tr><tr><td data-num=\"23\"></td><td><pre>\t\t\t\t\t\t\t<span class=\"token punctuation\">(</span>CSADDR <span class=\"token operator\">+</span> specified address<span class=\"token punctuation\">)</span> \t </pre></td></tr><tr><td data-num=\"24\"></td><td><pre>\t\t\t\t\t<span class=\"token keyword\">else</span> \t\t </pre></td></tr><tr><td data-num=\"25\"></td><td><pre>\t\t\t\t\t\tset error flag <span class=\"token punctuation\">(</span>undefined external symbol<span class=\"token punctuation\">)</span> \t </pre></td></tr><tr><td data-num=\"26\"></td><td><pre>\t\t\t\t<span class=\"token keyword\">end</span> <span class=\"token punctuation\">&#123;</span><span class=\"token keyword\">if</span> 'M' <span class=\"token punctuation\">&#125;</span> \t </pre></td></tr><tr><td data-num=\"27\"></td><td><pre>\t\t\t<span class=\"token keyword\">end</span> <span class=\"token punctuation\">&#123;</span><span class=\"token keyword\">while</span> !<span class=\"token operator\">=</span> 'E' <span class=\"token punctuation\">&#125;</span> \t </pre></td></tr><tr><td data-num=\"28\"></td><td><pre>\t\t<span class=\"token keyword\">if</span> an address <span class=\"token keyword\">is</span> specified <span class=\"token punctuation\">&#123;</span><span class=\"token keyword\">in</span> <span class=\"token keyword\">End</span> <span class=\"token keyword\">record</span><span class=\"token punctuation\">&#125;</span> <span class=\"token keyword\">then</span> \t </pre></td></tr><tr><td data-num=\"29\"></td><td><pre>\t\t\tset EXECADDR <span class=\"token keyword\">to</span> <span class=\"token punctuation\">(</span>CSADDR <span class=\"token operator\">+</span> specified address<span class=\"token punctuation\">)</span> \t </pre></td></tr><tr><td data-num=\"30\"></td><td><pre>\t\tadd CSLTH <span class=\"token keyword\">to</span> CSADDR \t </pre></td></tr><tr><td data-num=\"31\"></td><td><pre>\t<span class=\"token keyword\">end</span> <span class=\"token punctuation\">&#123;</span><span class=\"token keyword\">while</span> <span class=\"token operator\">not</span> EOF<span class=\"token punctuation\">&#125;</span> \t </pre></td></tr><tr><td data-num=\"32\"></td><td><pre>jump <span class=\"token keyword\">to</span> location given by EXECADDR <span class=\"token punctuation\">&#123;</span><span class=\"token keyword\">to</span> start execution <span class=\"token keyword\">of</span> loaded program<span class=\"token punctuation\">&#125;</span> \t </pre></td></tr><tr><td data-num=\"33\"></td><td><pre><span class=\"token keyword\">end</span> <span class=\"token punctuation\">&#123;</span>Pass <span class=\"token number\">2</span><span class=\"token punctuation\">&#125;</span></pre></td></tr></table></figure><ul>\n<li>The algorithm can be made more efficient if a slight change is made in the object program format. This modification involves assigning a <span class=\"red\">reference number</span> to each external symbol referred to in a control section.</li>\n<li><img data-src=\"https://imgur.com/vOcKl0P.png\" alt=\"\"></li>\n<li>The main advantage of this reference-number mechanism is that it avoids multiple searches of ESTAB for the same symbol during the loading of a control section.</li>\n</ul>\n<h2 id=\"machine-independent-loader-features\"><a class=\"anchor\" href=\"#machine-independent-loader-features\">#</a> Machine-Independent Loader Features</h2>\n<ul>\n<li><span class=\"red\">Automatic library search</span> handles external references. This feature allows a programmer to use standard subroutines without explicitly including them in the program to be loaded. The routines are automatically retrieved from a library as they are needed during linking.</li>\n</ul>\n",
            "tags": [
                "SystemSoftware",
                "System Software",
                "Assembler"
            ]
        },
        {
            "id": "https://chienikao.github.io/2023/05/19/Coding/leetcode/Medium/1557%20Minimum%20Number%20of%20Vertices%20to%20Reach%20All%20Nodes/",
            "url": "https://chienikao.github.io/2023/05/19/Coding/leetcode/Medium/1557%20Minimum%20Number%20of%20Vertices%20to%20Reach%20All%20Nodes/",
            "title": "1557. Minimum Number of Vertices to Reach All Nodes",
            "date_published": "2023-05-19T06:13:20.000Z",
            "content_html": "<p>⭐️⭐️</p>\n<h2 id=\"題目敘述\"><a class=\"anchor\" href=\"#題目敘述\">#</a> <span class=\"exturl\" data-url=\"aHR0cHM6Ly9sZWV0Y29kZS5jb20vcHJvYmxlbXMvbWluaW11bS1udW1iZXItb2YtdmVydGljZXMtdG8tcmVhY2gtYWxsLW5vZGVzLw==\">題目敘述</span></h2>\n<p>Given a <strong>directed acyclic graph</strong>, with  <code>n</code>  vertices numbered from  <code>0</code>  to  <code>n - 1</code> , and an array  <code>edges</code>  where  <code>edges[i] = [fromi, toi]</code>  represents a directed edge from node  <code>fromi</code>  to node  <code>toi</code> .</p>\n<p>Find the <em>smallest set of vertices from which all nodes in the graph are reachable</em>. It’s guaranteed that a unique solution exists.</p>\n<p>Notice that you can return the vertices in any order.</p>\n<h3 id=\"example-1\"><a class=\"anchor\" href=\"#example-1\">#</a> Example 1</h3>\n<p><img data-src=\"https://assets.leetcode.com/uploads/2020/07/07/untitled22.png\" alt=\"\"></p>\n<blockquote>\n<p><strong>Input</strong>: n = 6, edges = [[0,1],[0,2],[2,5],[3,4],[4,2]]<br>\n<strong>Output</strong>: [0,3]<br>\n<strong>Explanation</strong>: It’s not possible to reach all the nodes from a single vertex. From 0 we can reach [0,1,2,5]. From 3 we can reach [3,4,2,5]. So we output [0,3].</p>\n</blockquote>\n<h3 id=\"example-2\"><a class=\"anchor\" href=\"#example-2\">#</a> Example 2</h3>\n<p><img data-src=\"https://assets.leetcode.com/uploads/2020/07/07/untitled.png\" alt=\"\"></p>\n<blockquote>\n<p><strong>Input</strong>: n = 5, edges = [[0,1],[2,1],[3,1],[1,4],[2,4]]<br>\n<strong>Output</strong>: [0,2,3]<br>\n<strong>Explanation</strong>: Notice that vertices 0, 3 and 2 are not reachable from any other node, so we must include them. Also any of these vertices can reach nodes 1 and 4.</p>\n</blockquote>\n<h2 id=\"solution\"><a class=\"anchor\" href=\"#solution\">#</a> Solution</h2>\n<div class=\"tab\" data-id=\"code\" data-title=\"C++\">\n<figure class=\"highlight cpp\"><figcaption data-lang=\"C++\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre><span class=\"token keyword\">class</span> <span class=\"token class-name\">Solution</span> <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"2\"></td><td><pre><span class=\"token keyword\">public</span><span class=\"token operator\">:</span></pre></td></tr><tr><td data-num=\"3\"></td><td><pre>    vector<span class=\"token operator\">&lt;</span><span class=\"token keyword\">int</span><span class=\"token operator\">></span> <span class=\"token function\">findSmallestSetOfVertices</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">int</span> n<span class=\"token punctuation\">,</span> vector<span class=\"token operator\">&lt;</span>vector<span class=\"token operator\">&lt;</span><span class=\"token keyword\">int</span><span class=\"token operator\">>></span><span class=\"token operator\">&amp;</span> edges<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"4\"></td><td><pre>        unordered_set<span class=\"token operator\">&lt;</span><span class=\"token keyword\">int</span><span class=\"token operator\">></span> s<span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"5\"></td><td><pre>        <span class=\"token keyword\">for</span> <span class=\"token punctuation\">(</span>vector<span class=\"token operator\">&lt;</span><span class=\"token keyword\">int</span><span class=\"token operator\">></span><span class=\"token operator\">&amp;</span> edge <span class=\"token operator\">:</span> edges<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"6\"></td><td><pre>            s<span class=\"token punctuation\">.</span><span class=\"token function\">insert</span><span class=\"token punctuation\">(</span>edge<span class=\"token punctuation\">[</span><span class=\"token number\">1</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"7\"></td><td><pre>        <span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"8\"></td><td><pre>        vector<span class=\"token operator\">&lt;</span><span class=\"token keyword\">int</span><span class=\"token operator\">></span> res<span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"9\"></td><td><pre>        <span class=\"token keyword\">for</span> <span class=\"token punctuation\">(</span><span class=\"token keyword\">int</span> i<span class=\"token operator\">=</span><span class=\"token number\">0</span><span class=\"token punctuation\">;</span> i<span class=\"token operator\">&lt;</span>n<span class=\"token punctuation\">;</span> i<span class=\"token operator\">++</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"10\"></td><td><pre>            <span class=\"token keyword\">if</span> <span class=\"token punctuation\">(</span>s<span class=\"token punctuation\">.</span><span class=\"token function\">find</span><span class=\"token punctuation\">(</span>i<span class=\"token punctuation\">)</span> <span class=\"token operator\">==</span> s<span class=\"token punctuation\">.</span><span class=\"token function\">end</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"11\"></td><td><pre>                res<span class=\"token punctuation\">.</span><span class=\"token function\">push_back</span><span class=\"token punctuation\">(</span>i<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"12\"></td><td><pre>            <span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"13\"></td><td><pre>        <span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"14\"></td><td><pre>        <span class=\"token keyword\">return</span> res<span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"15\"></td><td><pre>    <span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"16\"></td><td><pre><span class=\"token punctuation\">&#125;</span><span class=\"token punctuation\">;</span></pre></td></tr></table></figure></div>\n<div class=\"tab\" data-id=\"code\" data-title=\"Java\">\n<figure class=\"highlight java\"><figcaption data-lang=\"java\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre><span class=\"token keyword\">class</span> <span class=\"token class-name\">Solution</span> <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"2\"></td><td><pre>    <span class=\"token keyword\">public</span> <span class=\"token class-name\">List</span><span class=\"token generics\"><span class=\"token punctuation\">&lt;</span><span class=\"token class-name\">Integer</span><span class=\"token punctuation\">></span></span> <span class=\"token function\">findSmallestSetOfVertices</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">int</span> n<span class=\"token punctuation\">,</span> <span class=\"token class-name\">List</span><span class=\"token generics\"><span class=\"token punctuation\">&lt;</span><span class=\"token class-name\">List</span><span class=\"token punctuation\">&lt;</span><span class=\"token class-name\">Integer</span><span class=\"token punctuation\">></span><span class=\"token punctuation\">></span></span> edges<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"3\"></td><td><pre>        <span class=\"token class-name\">Set</span><span class=\"token generics\"><span class=\"token punctuation\">&lt;</span><span class=\"token class-name\">Integer</span><span class=\"token punctuation\">></span></span> link <span class=\"token operator\">=</span> <span class=\"token keyword\">new</span> <span class=\"token class-name\">HashSet</span><span class=\"token generics\"><span class=\"token punctuation\">&lt;</span><span class=\"token punctuation\">></span></span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"4\"></td><td><pre>        <span class=\"token keyword\">for</span> <span class=\"token punctuation\">(</span><span class=\"token class-name\">List</span><span class=\"token generics\"><span class=\"token punctuation\">&lt;</span><span class=\"token class-name\">Integer</span><span class=\"token punctuation\">></span></span> edge <span class=\"token operator\">:</span> edges<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"5\"></td><td><pre>            link<span class=\"token punctuation\">.</span><span class=\"token function\">add</span><span class=\"token punctuation\">(</span>edge<span class=\"token punctuation\">.</span><span class=\"token function\">get</span><span class=\"token punctuation\">(</span><span class=\"token number\">1</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"6\"></td><td><pre>        <span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"7\"></td><td><pre>        </pre></td></tr><tr><td data-num=\"8\"></td><td><pre>        <span class=\"token class-name\">List</span><span class=\"token generics\"><span class=\"token punctuation\">&lt;</span><span class=\"token class-name\">Integer</span><span class=\"token punctuation\">></span></span> ans <span class=\"token operator\">=</span> <span class=\"token keyword\">new</span> <span class=\"token class-name\">ArrayList</span><span class=\"token generics\"><span class=\"token punctuation\">&lt;</span><span class=\"token punctuation\">></span></span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"9\"></td><td><pre>        <span class=\"token keyword\">for</span> <span class=\"token punctuation\">(</span><span class=\"token keyword\">int</span> i <span class=\"token operator\">=</span> <span class=\"token number\">0</span><span class=\"token punctuation\">;</span> i <span class=\"token operator\">&lt;</span> n<span class=\"token punctuation\">;</span> i<span class=\"token operator\">++</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"10\"></td><td><pre>            <span class=\"token keyword\">if</span> <span class=\"token punctuation\">(</span><span class=\"token operator\">!</span>link<span class=\"token punctuation\">.</span><span class=\"token function\">contains</span><span class=\"token punctuation\">(</span>i<span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"11\"></td><td><pre>                ans<span class=\"token punctuation\">.</span><span class=\"token function\">add</span><span class=\"token punctuation\">(</span>i<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"12\"></td><td><pre>            <span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"13\"></td><td><pre>        <span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"14\"></td><td><pre>        </pre></td></tr><tr><td data-num=\"15\"></td><td><pre>        <span class=\"token keyword\">return</span> ans<span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"16\"></td><td><pre>    <span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"17\"></td><td><pre><span class=\"token punctuation\">&#125;</span></pre></td></tr></table></figure></div>\n<div class=\"tab\" data-id=\"code\" data-title=\"Python\">\n<pre><code class=\"language-python\">\n</code></pre>\n</div>\n",
            "tags": [
                "Coding",
                "Leetcode",
                "Medium",
                "Leetcode",
                "Graph",
                "Medium"
            ]
        },
        {
            "id": "https://chienikao.github.io/2023/05/17/Coding/leetcode/Medium/2130%20Maximum%20Twin%20Sum%20of%20a%20Linked%20List/",
            "url": "https://chienikao.github.io/2023/05/17/Coding/leetcode/Medium/2130%20Maximum%20Twin%20Sum%20of%20a%20Linked%20List/",
            "title": "2130. Maximum Twin Sum of a Linked List",
            "date_published": "2023-05-17T05:51:35.000Z",
            "content_html": "<p>⭐️⭐️</p>\n<h2 id=\"題目敘述\"><a class=\"anchor\" href=\"#題目敘述\">#</a> <span class=\"exturl\" data-url=\"aHR0cHM6Ly9sZWV0Y29kZS5jb20vcHJvYmxlbXMvbWF4aW11bS10d2luLXN1bS1vZi1hLWxpbmtlZC1saXN0Lw==\">題目敘述</span></h2>\n<p>In a linked list of size  <code>n</code> , where  <code>n</code>  is even, the  <code>ith</code>  node <strong>(0-indexed)</strong> of the linked list is known as the <strong>twin</strong> of the  <code>(n-1-i)th</code>  node, if  <code>0 &lt;= i &lt;= (n / 2) - 1</code> .</p>\n<ul>\n<li>For example, if  <code>n = 4</code> , then node  <code>0</code>  is the twin of node  <code>3</code> , and node  <code>1</code>  is the twin of node  <code>2</code> . These are the only nodes with twins for  <code>n = 4</code> .</li>\n</ul>\n<p>The <strong>twin sum</strong> is defined as the sum of a node and its twin.</p>\n<p>Given the  <code>head</code>  of a linked list with even length, return <em>the maximum twin sum of the linked list</em>.</p>\n<h3 id=\"example-1\"><a class=\"anchor\" href=\"#example-1\">#</a> Example 1</h3>\n<p><img data-src=\"https://assets.leetcode.com/uploads/2021/12/03/eg1drawio.png\" alt=\"\"></p>\n<blockquote>\n<p><strong>Input</strong>: head = [5,4,2,1]<br>\n<strong>Output</strong>: 6<br>\n<strong>Explanation</strong>:<br>\nNodes 0 and 1 are the twins of nodes 3 and 2, respectively. All have twin sum = 6.<br>\nThere are no other nodes with twins in the linked list.<br>\nThus, the maximum twin sum of the linked list is 6.</p>\n</blockquote>\n<h3 id=\"example-2\"><a class=\"anchor\" href=\"#example-2\">#</a> Example 2</h3>\n<p><img data-src=\"https://assets.leetcode.com/uploads/2021/12/03/eg2drawio.png\" alt=\"\"></p>\n<blockquote>\n<p><strong>Input</strong>: head = [4,2,2,3]<br>\n<strong>Output</strong>: 7<br>\n<strong>Explanation</strong>:<br>\nThe nodes with twins present in this linked list are:</p>\n<ul>\n<li>Node 0 is the twin of node 3 having a twin sum of 4 + 3 = 7.</li>\n<li>Node 1 is the twin of node 2 having a twin sum of 2 + 2 = 4.<br>\nThus, the maximum twin sum of the linked list is max(7, 4) = 7.</li>\n</ul>\n</blockquote>\n<h3 id=\"example-3\"><a class=\"anchor\" href=\"#example-3\">#</a> Example 3</h3>\n<p><img data-src=\"https://assets.leetcode.com/uploads/2021/12/03/eg3drawio.png\" alt=\"\"></p>\n<blockquote>\n<p><strong>Input</strong>: head = [1,100000]<br>\n<strong>Output</strong>: 100001<br>\n<strong>Explanation</strong>:<br>\nThere is only one node with a twin in the linked list having twin sum of 1 + 100000 = 100001.</p>\n</blockquote>\n<h2 id=\"solution\"><a class=\"anchor\" href=\"#solution\">#</a> Solution</h2>\n<div class=\"tab\" data-id=\"code\" data-title=\"C++\">\n<figure class=\"highlight cpp\"><figcaption data-lang=\"C++\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre><span class=\"token comment\">/**</pre></td></tr><tr><td data-num=\"2\"></td><td><pre> * Definition for singly-linked list.</pre></td></tr><tr><td data-num=\"3\"></td><td><pre> * struct ListNode &#123;</pre></td></tr><tr><td data-num=\"4\"></td><td><pre> *     int val;</pre></td></tr><tr><td data-num=\"5\"></td><td><pre> *     ListNode *next;</pre></td></tr><tr><td data-num=\"6\"></td><td><pre> *     ListNode() : val(0), next(nullptr) &#123;&#125;</pre></td></tr><tr><td data-num=\"7\"></td><td><pre> *     ListNode(int x) : val(x), next(nullptr) &#123;&#125;</pre></td></tr><tr><td data-num=\"8\"></td><td><pre> *     ListNode(int x, ListNode *next) : val(x), next(next) &#123;&#125;</pre></td></tr><tr><td data-num=\"9\"></td><td><pre> * &#125;;</pre></td></tr><tr><td data-num=\"10\"></td><td><pre> */</span></pre></td></tr><tr><td data-num=\"11\"></td><td><pre><span class=\"token keyword\">class</span> <span class=\"token class-name\">Solution</span> <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"12\"></td><td><pre><span class=\"token keyword\">public</span><span class=\"token operator\">:</span></pre></td></tr><tr><td data-num=\"13\"></td><td><pre>    <span class=\"token keyword\">int</span> <span class=\"token function\">pairSum</span><span class=\"token punctuation\">(</span>ListNode<span class=\"token operator\">*</span> head<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"14\"></td><td><pre>        vector<span class=\"token operator\">&lt;</span><span class=\"token keyword\">int</span><span class=\"token operator\">></span> left<span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"15\"></td><td><pre>        ListNode <span class=\"token operator\">*</span>slow <span class=\"token operator\">=</span> head<span class=\"token punctuation\">,</span> <span class=\"token operator\">*</span>fast <span class=\"token operator\">=</span> head<span class=\"token operator\">-></span>next<span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"16\"></td><td><pre>        left<span class=\"token punctuation\">.</span><span class=\"token function\">push_back</span><span class=\"token punctuation\">(</span>slow<span class=\"token operator\">-></span>val<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"17\"></td><td><pre>        <span class=\"token keyword\">while</span> <span class=\"token punctuation\">(</span>fast<span class=\"token operator\">-></span>next <span class=\"token operator\">&amp;&amp;</span> fast<span class=\"token operator\">-></span>next<span class=\"token operator\">-></span>next<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"18\"></td><td><pre>            slow <span class=\"token operator\">=</span> slow<span class=\"token operator\">-></span>next<span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"19\"></td><td><pre>            fast <span class=\"token operator\">=</span> fast<span class=\"token operator\">-></span>next<span class=\"token operator\">-></span>next<span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"20\"></td><td><pre>            left<span class=\"token punctuation\">.</span><span class=\"token function\">push_back</span><span class=\"token punctuation\">(</span>slow<span class=\"token operator\">-></span>val<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"21\"></td><td><pre>        <span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"22\"></td><td><pre>        slow <span class=\"token operator\">=</span> slow<span class=\"token operator\">-></span>next<span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"23\"></td><td><pre>        <span class=\"token keyword\">int</span> res <span class=\"token operator\">=</span> <span class=\"token number\">0</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"24\"></td><td><pre>        <span class=\"token function\">reverse</span><span class=\"token punctuation\">(</span>left<span class=\"token punctuation\">.</span><span class=\"token function\">begin</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">,</span> left<span class=\"token punctuation\">.</span><span class=\"token function\">end</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"25\"></td><td><pre>        <span class=\"token keyword\">for</span> <span class=\"token punctuation\">(</span><span class=\"token keyword\">int</span> i<span class=\"token operator\">=</span><span class=\"token number\">0</span><span class=\"token punctuation\">;</span> i<span class=\"token operator\">&lt;</span>left<span class=\"token punctuation\">.</span><span class=\"token function\">size</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span> i<span class=\"token operator\">++</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"26\"></td><td><pre>            res <span class=\"token operator\">=</span> <span class=\"token function\">max</span><span class=\"token punctuation\">(</span>res<span class=\"token punctuation\">,</span> left<span class=\"token punctuation\">[</span>i<span class=\"token punctuation\">]</span> <span class=\"token operator\">+</span> slow<span class=\"token operator\">-></span>val<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"27\"></td><td><pre>            slow <span class=\"token operator\">=</span> slow<span class=\"token operator\">-></span>next<span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"28\"></td><td><pre>        <span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"29\"></td><td><pre>        <span class=\"token keyword\">return</span> res<span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"30\"></td><td><pre>    <span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"31\"></td><td><pre><span class=\"token punctuation\">&#125;</span><span class=\"token punctuation\">;</span></pre></td></tr></table></figure></div>\n<div class=\"tab\" data-id=\"code\" data-title=\"Java\">\n<figure class=\"highlight java\"><figcaption data-lang=\"java\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre><span class=\"token keyword\">class</span> <span class=\"token class-name\">Solution</span> <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"2\"></td><td><pre>    <span class=\"token keyword\">public</span> <span class=\"token keyword\">int</span> <span class=\"token function\">pairSum</span><span class=\"token punctuation\">(</span><span class=\"token class-name\">ListNode</span> head<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"3\"></td><td><pre>        <span class=\"token class-name\">Deque</span><span class=\"token generics\"><span class=\"token punctuation\">&lt;</span><span class=\"token class-name\">Integer</span><span class=\"token punctuation\">></span></span> dq <span class=\"token operator\">=</span> <span class=\"token keyword\">new</span> <span class=\"token class-name\">LinkedList</span><span class=\"token generics\"><span class=\"token punctuation\">&lt;</span><span class=\"token punctuation\">></span></span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"4\"></td><td><pre></pre></td></tr><tr><td data-num=\"5\"></td><td><pre>        <span class=\"token class-name\">ListNode</span> curr <span class=\"token operator\">=</span> <span class=\"token keyword\">new</span> <span class=\"token class-name\">ListNode</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"6\"></td><td><pre>        curr <span class=\"token operator\">=</span> head<span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"7\"></td><td><pre>        <span class=\"token keyword\">while</span><span class=\"token punctuation\">(</span>curr <span class=\"token operator\">!=</span> <span class=\"token keyword\">null</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"8\"></td><td><pre>            dq<span class=\"token punctuation\">.</span><span class=\"token function\">add</span><span class=\"token punctuation\">(</span>curr<span class=\"token punctuation\">.</span>val<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"9\"></td><td><pre>            curr <span class=\"token operator\">=</span> curr<span class=\"token punctuation\">.</span>next<span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"10\"></td><td><pre>        <span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"11\"></td><td><pre></pre></td></tr><tr><td data-num=\"12\"></td><td><pre>        <span class=\"token keyword\">int</span> max <span class=\"token operator\">=</span> <span class=\"token class-name\">Integer</span><span class=\"token punctuation\">.</span><span class=\"token constant\">MIN_VALUE</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"13\"></td><td><pre>        <span class=\"token keyword\">while</span><span class=\"token punctuation\">(</span><span class=\"token operator\">!</span>dq<span class=\"token punctuation\">.</span><span class=\"token function\">isEmpty</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token operator\">&amp;&amp;</span> dq<span class=\"token punctuation\">.</span><span class=\"token function\">size</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token operator\">>=</span> <span class=\"token number\">2</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"14\"></td><td><pre>            max <span class=\"token operator\">=</span> <span class=\"token class-name\">Math</span><span class=\"token punctuation\">.</span><span class=\"token function\">max</span><span class=\"token punctuation\">(</span>max<span class=\"token punctuation\">,</span> dq<span class=\"token punctuation\">.</span><span class=\"token function\">pollFirst</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token operator\">+</span> dq<span class=\"token punctuation\">.</span><span class=\"token function\">pollLast</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"15\"></td><td><pre>        <span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"16\"></td><td><pre></pre></td></tr><tr><td data-num=\"17\"></td><td><pre>        <span class=\"token keyword\">return</span> max<span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"18\"></td><td><pre>    <span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"19\"></td><td><pre><span class=\"token punctuation\">&#125;</span></pre></td></tr></table></figure></div>\n<div class=\"tab\" data-id=\"code\" data-title=\"Python\">\n<pre><code class=\"language-python\">\n</code></pre>\n</div>\n",
            "tags": [
                "Coding",
                "Leetcode",
                "Medium",
                "Leetcode",
                "Medium",
                "Two Pointers",
                "Linked List",
                "Stack"
            ]
        },
        {
            "id": "https://chienikao.github.io/2023/05/16/Coding/leetcode/Medium/24%20Swap%20Nodes%20in%20Pairs/",
            "url": "https://chienikao.github.io/2023/05/16/Coding/leetcode/Medium/24%20Swap%20Nodes%20in%20Pairs/",
            "title": "24. Swap Nodes in Pairs",
            "date_published": "2023-05-16T02:43:22.000Z",
            "content_html": "<p>⭐️⭐️</p>\n<h2 id=\"題目敘述\"><a class=\"anchor\" href=\"#題目敘述\">#</a> <span class=\"exturl\" data-url=\"aHR0cHM6Ly9sZWV0Y29kZS5jb20vcHJvYmxlbXMvc3dhcC1ub2Rlcy1pbi1wYWlycy9kZXNjcmlwdGlvbi8=\">題目敘述</span></h2>\n<p>Given a linked list, swap every two adjacent nodes and return its head. You must solve the problem without modifying the values in the list’s nodes (i.e., only nodes themselves may be changed.)</p>\n<h3 id=\"example-1\"><a class=\"anchor\" href=\"#example-1\">#</a> Example 1</h3>\n<p><img data-src=\"https://imgur.com/HJxT8bR.png\" alt=\"\"></p>\n<blockquote>\n<p><strong>Input</strong>: head = [1,2,3,4]<br>\n<strong>Output</strong>: [2,1,4,3]</p>\n</blockquote>\n<h3 id=\"example-2\"><a class=\"anchor\" href=\"#example-2\">#</a> Example 2</h3>\n<blockquote>\n<p><strong>Input</strong>: head = []<br>\n<strong>Output</strong>: []</p>\n</blockquote>\n<h3 id=\"example-3\"><a class=\"anchor\" href=\"#example-3\">#</a> Example 3</h3>\n<blockquote>\n<p><strong>Input</strong>: head = [1]<br>\n<strong>Output</strong>: [1]</p>\n</blockquote>\n<h2 id=\"solution\"><a class=\"anchor\" href=\"#solution\">#</a> Solution</h2>\n<div class=\"tab\" data-id=\"code\" data-title=\"C++\">\n<figure class=\"highlight cpp\"><figcaption data-lang=\"C++\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre><span class=\"token comment\">/**</pre></td></tr><tr><td data-num=\"2\"></td><td><pre> * Definition for singly-linked list.</pre></td></tr><tr><td data-num=\"3\"></td><td><pre> * struct ListNode &#123;</pre></td></tr><tr><td data-num=\"4\"></td><td><pre> *     int val;</pre></td></tr><tr><td data-num=\"5\"></td><td><pre> *     ListNode *next;</pre></td></tr><tr><td data-num=\"6\"></td><td><pre> *     ListNode() : val(0), next(nullptr) &#123;&#125;</pre></td></tr><tr><td data-num=\"7\"></td><td><pre> *     ListNode(int x) : val(x), next(nullptr) &#123;&#125;</pre></td></tr><tr><td data-num=\"8\"></td><td><pre> *     ListNode(int x, ListNode *next) : val(x), next(next) &#123;&#125;</pre></td></tr><tr><td data-num=\"9\"></td><td><pre> * &#125;;</pre></td></tr><tr><td data-num=\"10\"></td><td><pre> */</span></pre></td></tr><tr><td data-num=\"11\"></td><td><pre><span class=\"token keyword\">class</span> <span class=\"token class-name\">Solution</span> <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"12\"></td><td><pre><span class=\"token keyword\">public</span><span class=\"token operator\">:</span></pre></td></tr><tr><td data-num=\"13\"></td><td><pre>    ListNode<span class=\"token operator\">*</span> <span class=\"token function\">swapPairs</span><span class=\"token punctuation\">(</span>ListNode<span class=\"token operator\">*</span> head<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span>        </pre></td></tr><tr><td data-num=\"14\"></td><td><pre>        ListNode<span class=\"token operator\">*</span> first <span class=\"token operator\">=</span> head<span class=\"token punctuation\">;</span>        </pre></td></tr><tr><td data-num=\"15\"></td><td><pre>        <span class=\"token keyword\">if</span> <span class=\"token punctuation\">(</span>first<span class=\"token operator\">==</span><span class=\"token constant\">NULL</span> <span class=\"token operator\">||</span> first<span class=\"token operator\">-></span>next<span class=\"token operator\">==</span><span class=\"token constant\">NULL</span><span class=\"token punctuation\">)</span> <span class=\"token keyword\">return</span> head<span class=\"token punctuation\">;</span>        </pre></td></tr><tr><td data-num=\"16\"></td><td><pre>        ListNode<span class=\"token operator\">*</span> second <span class=\"token operator\">=</span> head<span class=\"token operator\">-></span>next<span class=\"token punctuation\">;</span>        </pre></td></tr><tr><td data-num=\"17\"></td><td><pre>        </pre></td></tr><tr><td data-num=\"18\"></td><td><pre>        <span class=\"token keyword\">while</span> <span class=\"token punctuation\">(</span>second <span class=\"token operator\">&amp;&amp;</span> second<span class=\"token operator\">-></span>next<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"19\"></td><td><pre>            <span class=\"token keyword\">int</span> temp <span class=\"token operator\">=</span> first<span class=\"token operator\">-></span>val<span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"20\"></td><td><pre>            first<span class=\"token operator\">-></span>val <span class=\"token operator\">=</span> second<span class=\"token operator\">-></span>val<span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"21\"></td><td><pre>            second<span class=\"token operator\">-></span>val <span class=\"token operator\">=</span> temp<span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"22\"></td><td><pre>            </pre></td></tr><tr><td data-num=\"23\"></td><td><pre>            first <span class=\"token operator\">=</span> first<span class=\"token operator\">-></span>next<span class=\"token operator\">-></span>next<span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"24\"></td><td><pre>            second <span class=\"token operator\">=</span> second<span class=\"token operator\">-></span>next<span class=\"token operator\">-></span>next<span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"25\"></td><td><pre>        <span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"26\"></td><td><pre>        </pre></td></tr><tr><td data-num=\"27\"></td><td><pre>        <span class=\"token keyword\">if</span> <span class=\"token punctuation\">(</span>second<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"28\"></td><td><pre>            <span class=\"token keyword\">int</span> temp <span class=\"token operator\">=</span> first<span class=\"token operator\">-></span>val<span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"29\"></td><td><pre>            first<span class=\"token operator\">-></span>val <span class=\"token operator\">=</span> second<span class=\"token operator\">-></span>val<span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"30\"></td><td><pre>            second<span class=\"token operator\">-></span>val <span class=\"token operator\">=</span> temp<span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"31\"></td><td><pre>        <span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"32\"></td><td><pre>        <span class=\"token keyword\">return</span> head<span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"33\"></td><td><pre>    <span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"34\"></td><td><pre><span class=\"token punctuation\">&#125;</span><span class=\"token punctuation\">;</span></pre></td></tr></table></figure></div>\n<div class=\"tab\" data-id=\"code\" data-title=\"Java\">\n<pre><code class=\"language-java\">\n</code></pre>\n</div>\n<div class=\"tab\" data-id=\"code\" data-title=\"Python\">\n<pre><code class=\"language-python\">\n</code></pre>\n</div>\n",
            "tags": [
                "Coding",
                "Leetcode",
                "Medium",
                "Leetcode",
                "Medium",
                "Linked List",
                "Recursion"
            ]
        },
        {
            "id": "https://chienikao.github.io/2023/05/16/Coding/leetcode/Easy/2637%20Promise%20Time%20Limit/",
            "url": "https://chienikao.github.io/2023/05/16/Coding/leetcode/Easy/2637%20Promise%20Time%20Limit/",
            "title": "2637. Promise Time Limit",
            "date_published": "2023-05-16T02:35:48.000Z",
            "content_html": "<p>⭐️</p>\n<h2 id=\"題目敘述\"><a class=\"anchor\" href=\"#題目敘述\">#</a> <span class=\"exturl\" data-url=\"aHR0cHM6Ly9sZWV0Y29kZS5jb20vcHJvYmxlbXMvcHJvbWlzZS10aW1lLWxpbWl0Lz91dG1fY2FtcGFpZ249UG9zdEQxMiZhbXA7dXRtX21lZGl1bT1Qb3N0JmFtcDt1dG1fc291cmNlPVBvc3QmYW1wO2dpb19saW5rX2lkPW5vbWJONVo5\">題目敘述</span></h2>\n<p>Given an asyncronous function  <code>fn</code>  and a time  <code>t</code>  in milliseconds, return a new <strong>time limited</strong> version of the input function.</p>\n<p>A <strong>time limited</strong> function is a function that is identical to the original unless it takes longer than  <code>t</code>  milliseconds to fullfill. In that case, it will reject with  <code>&quot;Time Limit Exceeded&quot;</code> .  Note that it should reject with a string, not an  <code>Error</code> .</p>\n<h3 id=\"example-1\"><a class=\"anchor\" href=\"#example-1\">#</a> Example 1</h3>\n<blockquote>\n<p><strong>Input</strong>:<br>\nfn = async (n) =&gt; {<br>\nawait new Promise(res =&gt; setTimeout(res, 100));<br>\nreturn n * n;<br>\n}<br>\ninputs = [5]<br>\nt = 50<br>\n<strong>Output</strong>: {“rejected”:“Time Limit Exceeded”,“time”:50}<br>\n<strong>Explanation</strong>:<br>\nThe provided function is set to resolve after 100ms. However, the time limit is set to 50ms. It rejects at t=50ms because the time limit was reached.</p>\n</blockquote>\n<h3 id=\"example-2\"><a class=\"anchor\" href=\"#example-2\">#</a> Example 2</h3>\n<blockquote>\n<p><strong>Input</strong>:<br>\nfn = async (n) =&gt; {<br>\nawait new Promise(res =&gt; setTimeout(res, 100));<br>\nreturn n * n;<br>\n}<br>\ninputs = [5]<br>\nt = 150<br>\n<strong>Output</strong>: {“resolved”:25,“time”:100}<br>\n<strong>Explanation</strong>:<br>\nThe function resolved 5 * 5 = 25 at t=100ms. The time limit is never reached.</p>\n</blockquote>\n<h3 id=\"example-3\"><a class=\"anchor\" href=\"#example-3\">#</a> Example 3</h3>\n<blockquote>\n<p><strong>Input</strong>:<br>\nfn = async (a, b) =&gt; {<br>\nawait new Promise(res =&gt; setTimeout(res, 120));<br>\nreturn a + b;<br>\n}<br>\ninputs = [5,10]<br>\nt = 150<br>\n<strong>Output</strong>: {“resolved”:15,“time”:120}<br>\n<strong>Explanation</strong>:<br>\nThe function resolved 5 + 10 = 15 at t=120ms. The time limit is never reached.</p>\n</blockquote>\n<h3 id=\"example-4\"><a class=\"anchor\" href=\"#example-4\">#</a> Example 4</h3>\n<blockquote>\n<p><strong>Input</strong>:<br>\nfn = async () =&gt; {<br>\nthrow “Error”;<br>\n}<br>\ninputs = []<br>\nt = 1000<br>\n<strong>Output</strong>: {“rejected”:“Error”,“time”:0}<br>\n<strong>Explanation</strong>:<br>\nThe function immediately throws an error.</p>\n</blockquote>\n<h2 id=\"solution\"><a class=\"anchor\" href=\"#solution\">#</a> Solution</h2>\n<div class=\"tab\" data-id=\"code\" data-title=\"Javascript\">\n<figure class=\"highlight javascript\"><figcaption data-lang=\"javascript\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre><span class=\"token comment\">/**</pre></td></tr><tr><td data-num=\"2\"></td><td><pre> * @param &#123;Function&#125; fn</pre></td></tr><tr><td data-num=\"3\"></td><td><pre> * @param &#123;number&#125; t</pre></td></tr><tr><td data-num=\"4\"></td><td><pre> * @return &#123;Function&#125;</pre></td></tr><tr><td data-num=\"5\"></td><td><pre> */</span></pre></td></tr><tr><td data-num=\"6\"></td><td><pre><span class=\"token keyword\">var</span> <span class=\"token function-variable function\">timeLimit</span> <span class=\"token operator\">=</span> <span class=\"token keyword\">function</span><span class=\"token punctuation\">(</span><span class=\"token parameter\">fn<span class=\"token punctuation\">,</span> t</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"7\"></td><td><pre>\t<span class=\"token keyword\">return</span> <span class=\"token keyword\">async</span> <span class=\"token keyword\">function</span><span class=\"token punctuation\">(</span><span class=\"token parameter\"><span class=\"token operator\">...</span>args</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"8\"></td><td><pre>        <span class=\"token keyword\">const</span> orgfn <span class=\"token operator\">=</span> <span class=\"token function\">fn</span><span class=\"token punctuation\">(</span><span class=\"token operator\">...</span>args<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"9\"></td><td><pre>        <span class=\"token keyword\">const</span> timeoutfn <span class=\"token operator\">=</span> <span class=\"token keyword\">new</span> <span class=\"token class-name\">Promise</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">(</span><span class=\"token parameter\">resolved<span class=\"token punctuation\">,</span> reject</span><span class=\"token punctuation\">)</span> <span class=\"token operator\">=></span> <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"10\"></td><td><pre>            <span class=\"token function\">setTimeout</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token operator\">=></span> <span class=\"token function\">reject</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"Time Limit Exceeded\"</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">,</span> t<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"11\"></td><td><pre>        <span class=\"token punctuation\">&#125;</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"12\"></td><td><pre>        <span class=\"token keyword\">return</span> Promise<span class=\"token punctuation\">.</span><span class=\"token function\">race</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">[</span>orgfn<span class=\"token punctuation\">,</span> timeoutfn<span class=\"token punctuation\">]</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"13\"></td><td><pre>    <span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"14\"></td><td><pre><span class=\"token punctuation\">&#125;</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"15\"></td><td><pre></pre></td></tr><tr><td data-num=\"16\"></td><td><pre><span class=\"token comment\">/**</pre></td></tr><tr><td data-num=\"17\"></td><td><pre> * const limited = timeLimit((t) => new Promise(res => setTimeout(res, t)), 100);</pre></td></tr><tr><td data-num=\"18\"></td><td><pre> * limited(150).catch(console.log) // \"Time Limit Exceeded\" at t=100ms</pre></td></tr><tr><td data-num=\"19\"></td><td><pre> */</span></pre></td></tr></table></figure></div>\n<div class=\"tab\" data-id=\"code\" data-title=\"Typescript\">\n<figure class=\"highlight typescript\"><figcaption data-lang=\"typescript\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre><span class=\"token keyword\">type</span> <span class=\"token class-name\">Fn</span> <span class=\"token operator\">=</span> <span class=\"token punctuation\">(</span><span class=\"token operator\">...</span>params<span class=\"token operator\">:</span> <span class=\"token builtin\">any</span><span class=\"token punctuation\">[</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">)</span> <span class=\"token operator\">=></span> <span class=\"token builtin\">Promise</span><span class=\"token operator\">&lt;</span><span class=\"token builtin\">any</span><span class=\"token operator\">></span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"2\"></td><td><pre></pre></td></tr><tr><td data-num=\"3\"></td><td><pre><span class=\"token keyword\">function</span> <span class=\"token function\">timeLimit</span><span class=\"token punctuation\">(</span>fn<span class=\"token operator\">:</span> Fn<span class=\"token punctuation\">,</span> t<span class=\"token operator\">:</span> <span class=\"token builtin\">number</span><span class=\"token punctuation\">)</span><span class=\"token operator\">:</span> Fn <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"4\"></td><td><pre>\t<span class=\"token keyword\">return</span> <span class=\"token keyword\">async</span> <span class=\"token keyword\">function</span><span class=\"token punctuation\">(</span><span class=\"token operator\">...</span>args<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"5\"></td><td><pre>        <span class=\"token keyword\">const</span> orgfn <span class=\"token operator\">=</span> <span class=\"token function\">fn</span><span class=\"token punctuation\">(</span><span class=\"token operator\">...</span>args<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"6\"></td><td><pre>        <span class=\"token keyword\">const</span> timeoutfn <span class=\"token operator\">=</span> <span class=\"token keyword\">new</span> <span class=\"token class-name\"><span class=\"token builtin\">Promise</span></span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">(</span>resolve<span class=\"token punctuation\">,</span> reject<span class=\"token punctuation\">)</span> <span class=\"token operator\">=></span> <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"7\"></td><td><pre>            <span class=\"token function\">setTimeout</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token operator\">=></span> <span class=\"token function\">reject</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"Time Limit Exceeded\"</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">,</span> t<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"8\"></td><td><pre>        <span class=\"token punctuation\">&#125;</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"9\"></td><td><pre>        <span class=\"token keyword\">return</span> <span class=\"token builtin\">Promise</span><span class=\"token punctuation\">.</span><span class=\"token function\">race</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">[</span>orgfn<span class=\"token punctuation\">,</span> timeoutfn<span class=\"token punctuation\">]</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"10\"></td><td><pre>    <span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"11\"></td><td><pre><span class=\"token punctuation\">&#125;</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"12\"></td><td><pre></pre></td></tr><tr><td data-num=\"13\"></td><td><pre><span class=\"token comment\">/**</pre></td></tr><tr><td data-num=\"14\"></td><td><pre> * const limited = timeLimit((t) => new Promise(res => setTimeout(res, t)), 100);</pre></td></tr><tr><td data-num=\"15\"></td><td><pre> * limited(150).catch(console.log) // \"Time Limit Exceeded\" at t=100ms</pre></td></tr><tr><td data-num=\"16\"></td><td><pre> */</span></pre></td></tr></table></figure></div>\n",
            "tags": [
                "Coding",
                "Leetcode",
                "Easy",
                "Leetcode",
                "Easy",
                "Typescript",
                "Promise",
                "Javasscript"
            ]
        },
        {
            "id": "https://chienikao.github.io/2023/05/15/Coding/leetcode/Medium/1721%20Swapping%20Nodes%20in%20a%20Linked%20List/",
            "url": "https://chienikao.github.io/2023/05/15/Coding/leetcode/Medium/1721%20Swapping%20Nodes%20in%20a%20Linked%20List/",
            "title": "1721. Swapping Nodes in a Linked List",
            "date_published": "2023-05-15T03:30:56.000Z",
            "content_html": "<p>⭐️⭐️</p>\n<h2 id=\"題目敘述\"><a class=\"anchor\" href=\"#題目敘述\">#</a> <span class=\"exturl\" data-url=\"aHR0cHM6Ly9sZWV0Y29kZS5jb20vcHJvYmxlbXMvc3dhcHBpbmctbm9kZXMtaW4tYS1saW5rZWQtbGlzdC8=\">題目敘述</span></h2>\n<p>You are given the  <code>head</code>  of a linked list, and an integer  <code>k</code> .</p>\n<p>Return <em>the head of the linked list after <strong>swapping</strong> the values of the  <code>kth</code>  node from the beginning and the  <code>kth</code>  node from the end (the list is <strong>1-indexed</strong>)</em>.</p>\n<h3 id=\"example-1\"><a class=\"anchor\" href=\"#example-1\">#</a> Example 1</h3>\n<p><img data-src=\"https://imgur.com/GLx5YvE.png\" alt=\"\"></p>\n<blockquote>\n<p><strong>Input</strong>: head = [1,2,3,4,5], k = 2<br>\n<strong>Output</strong>: [1,4,3,2,5]</p>\n</blockquote>\n<h3 id=\"example-2\"><a class=\"anchor\" href=\"#example-2\">#</a> Example 2</h3>\n<blockquote>\n<p><strong>Input</strong>: head = [7,9,6,6,7,8,3,0,9,5], k = 5<br>\n<strong>Output</strong>: [7,9,6,6,8,7,3,0,9,5]</p>\n</blockquote>\n<h2 id=\"solution\"><a class=\"anchor\" href=\"#solution\">#</a> Solution</h2>\n<div class=\"tab\" data-id=\"code\" data-title=\"C++\">\n<figure class=\"highlight cpp\"><figcaption data-lang=\"C++\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre><span class=\"token comment\">/**</pre></td></tr><tr><td data-num=\"2\"></td><td><pre> * Definition for singly-linked list.</pre></td></tr><tr><td data-num=\"3\"></td><td><pre> * struct ListNode &#123;</pre></td></tr><tr><td data-num=\"4\"></td><td><pre> *     int val;</pre></td></tr><tr><td data-num=\"5\"></td><td><pre> *     ListNode *next;</pre></td></tr><tr><td data-num=\"6\"></td><td><pre> *     ListNode() : val(0), next(nullptr) &#123;&#125;</pre></td></tr><tr><td data-num=\"7\"></td><td><pre> *     ListNode(int x) : val(x), next(nullptr) &#123;&#125;</pre></td></tr><tr><td data-num=\"8\"></td><td><pre> *     ListNode(int x, ListNode *next) : val(x), next(next) &#123;&#125;</pre></td></tr><tr><td data-num=\"9\"></td><td><pre> * &#125;;</pre></td></tr><tr><td data-num=\"10\"></td><td><pre> */</span></pre></td></tr><tr><td data-num=\"11\"></td><td><pre><span class=\"token keyword\">class</span> <span class=\"token class-name\">Solution</span> <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"12\"></td><td><pre><span class=\"token keyword\">public</span><span class=\"token operator\">:</span></pre></td></tr><tr><td data-num=\"13\"></td><td><pre>    ListNode<span class=\"token operator\">*</span> <span class=\"token function\">swapNodes</span><span class=\"token punctuation\">(</span>ListNode<span class=\"token operator\">*</span> head<span class=\"token punctuation\">,</span> <span class=\"token keyword\">int</span> k<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"14\"></td><td><pre>        <span class=\"token keyword\">int</span> len <span class=\"token operator\">=</span> <span class=\"token number\">0</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"15\"></td><td><pre>        ListNode<span class=\"token operator\">*</span> tmp <span class=\"token operator\">=</span> head<span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"16\"></td><td><pre>        <span class=\"token keyword\">while</span> <span class=\"token punctuation\">(</span>tmp<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"17\"></td><td><pre>            len<span class=\"token operator\">++</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"18\"></td><td><pre>            tmp <span class=\"token operator\">=</span> tmp<span class=\"token operator\">-></span>next<span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"19\"></td><td><pre>        <span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"20\"></td><td><pre></pre></td></tr><tr><td data-num=\"21\"></td><td><pre>        ListNode<span class=\"token operator\">*</span> left <span class=\"token operator\">=</span> head<span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"22\"></td><td><pre>        ListNode<span class=\"token operator\">*</span> right <span class=\"token operator\">=</span> head<span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"23\"></td><td><pre>        <span class=\"token keyword\">for</span> <span class=\"token punctuation\">(</span><span class=\"token keyword\">int</span> i<span class=\"token operator\">=</span><span class=\"token number\">1</span><span class=\"token punctuation\">;</span> i<span class=\"token operator\">&lt;</span>k<span class=\"token punctuation\">;</span> i<span class=\"token operator\">++</span><span class=\"token punctuation\">)</span> left <span class=\"token operator\">=</span> left<span class=\"token operator\">-></span>next<span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"24\"></td><td><pre>        <span class=\"token keyword\">for</span> <span class=\"token punctuation\">(</span><span class=\"token keyword\">int</span> j<span class=\"token operator\">=</span><span class=\"token number\">1</span><span class=\"token punctuation\">;</span> j<span class=\"token operator\">&lt;=</span>len<span class=\"token operator\">-</span>k<span class=\"token punctuation\">;</span> j<span class=\"token operator\">++</span><span class=\"token punctuation\">)</span> right <span class=\"token operator\">=</span> right<span class=\"token operator\">-></span>next<span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"25\"></td><td><pre>        <span class=\"token function\">swap</span><span class=\"token punctuation\">(</span>left<span class=\"token operator\">-></span>val<span class=\"token punctuation\">,</span> right<span class=\"token operator\">-></span>val<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"26\"></td><td><pre>        <span class=\"token keyword\">return</span> head<span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"27\"></td><td><pre>    <span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"28\"></td><td><pre><span class=\"token punctuation\">&#125;</span><span class=\"token punctuation\">;</span></pre></td></tr></table></figure></div>\n<div class=\"tab\" data-id=\"code\" data-title=\"Java\">\n<figure class=\"highlight java\"><figcaption data-lang=\"java\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre><span class=\"token keyword\">class</span> <span class=\"token class-name\">Solution</span> <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"2\"></td><td><pre>    <span class=\"token keyword\">public</span> <span class=\"token class-name\">ListNode</span> <span class=\"token function\">swapNodes</span><span class=\"token punctuation\">(</span><span class=\"token class-name\">ListNode</span> head<span class=\"token punctuation\">,</span> <span class=\"token keyword\">int</span> k<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"3\"></td><td><pre>        <span class=\"token class-name\">ListNode</span> start <span class=\"token operator\">=</span> head<span class=\"token punctuation\">,</span> end <span class=\"token operator\">=</span> head<span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"4\"></td><td><pre>        </pre></td></tr><tr><td data-num=\"5\"></td><td><pre>        <span class=\"token keyword\">for</span> <span class=\"token punctuation\">(</span><span class=\"token keyword\">int</span> i <span class=\"token operator\">=</span> <span class=\"token number\">1</span><span class=\"token punctuation\">;</span> i <span class=\"token operator\">&lt;</span> k<span class=\"token punctuation\">;</span> i<span class=\"token operator\">++</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"6\"></td><td><pre>            start <span class=\"token operator\">=</span> start<span class=\"token punctuation\">.</span>next<span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"7\"></td><td><pre>        <span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"8\"></td><td><pre>        </pre></td></tr><tr><td data-num=\"9\"></td><td><pre>        <span class=\"token class-name\">ListNode</span> curr <span class=\"token operator\">=</span> start<span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"10\"></td><td><pre>        <span class=\"token keyword\">while</span> <span class=\"token punctuation\">(</span>curr<span class=\"token punctuation\">.</span>next <span class=\"token operator\">!=</span> <span class=\"token keyword\">null</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"11\"></td><td><pre>            curr <span class=\"token operator\">=</span> curr<span class=\"token punctuation\">.</span>next<span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"12\"></td><td><pre>            end <span class=\"token operator\">=</span> end<span class=\"token punctuation\">.</span>next<span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"13\"></td><td><pre>        <span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"14\"></td><td><pre>        </pre></td></tr><tr><td data-num=\"15\"></td><td><pre>        <span class=\"token keyword\">int</span> temp <span class=\"token operator\">=</span> start<span class=\"token punctuation\">.</span>val<span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"16\"></td><td><pre>        start<span class=\"token punctuation\">.</span>val <span class=\"token operator\">=</span> end<span class=\"token punctuation\">.</span>val<span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"17\"></td><td><pre>        end<span class=\"token punctuation\">.</span>val <span class=\"token operator\">=</span> temp<span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"18\"></td><td><pre>        </pre></td></tr><tr><td data-num=\"19\"></td><td><pre>        <span class=\"token keyword\">return</span> head<span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"20\"></td><td><pre>    <span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"21\"></td><td><pre><span class=\"token punctuation\">&#125;</span></pre></td></tr></table></figure></div>\n<div class=\"tab\" data-id=\"code\" data-title=\"Python\">\n<pre><code class=\"language-python\">\n</code></pre>\n</div>\n",
            "tags": [
                "Coding",
                "Leetcode",
                "Medium",
                "Leetcode",
                "Medium",
                "Two Pointers",
                "Linked List"
            ]
        },
        {
            "id": "https://chienikao.github.io/2023/05/15/Coding/leetcode/Easy/2621%20Sleep/",
            "url": "https://chienikao.github.io/2023/05/15/Coding/leetcode/Easy/2621%20Sleep/",
            "title": "2621. Sleep",
            "date_published": "2023-05-15T03:29:29.000Z",
            "content_html": "<p>⭐️</p>\n<h2 id=\"題目敘述\"><a class=\"anchor\" href=\"#題目敘述\">#</a> <span class=\"exturl\" data-url=\"aHR0cHM6Ly9sZWV0Y29kZS5jb20vcHJvYmxlbXMvc2xlZXAvP3V0bV9jYW1wYWlnbj1Qb3N0RDExJmFtcDt1dG1fbWVkaXVtPVBvc3QmYW1wO3V0bV9zb3VyY2U9UG9zdCZhbXA7Z2lvX2xpbmtfaWQ9NVJwMldtem8=\">題目敘述</span></h2>\n<p>Given a positive integer  <code>millis</code> , write an asyncronous function that sleeps for  <code>millis</code>  milliseconds. It can resolve any value.</p>\n<h3 id=\"example-1\"><a class=\"anchor\" href=\"#example-1\">#</a> Example 1</h3>\n<blockquote>\n<p><strong>Input</strong>: millis = 100<br>\n<strong>Output</strong>: 100<br>\n<strong>Explanation</strong>: It should return a promise that resolves after 100ms.<br>\nlet t = Date.now();<br>\nsleep(100).then(() =&gt; {<br>\nconsole.log(Date.now() - t); // 100<br>\n});</p>\n</blockquote>\n<h3 id=\"example-2\"><a class=\"anchor\" href=\"#example-2\">#</a> Example 2</h3>\n<blockquote>\n<p><strong>Input</strong>: millis = 200<br>\n<strong>Output</strong>: 200<br>\n<strong>Explanation</strong>: It should return a promise that resolves after 200ms.</p>\n</blockquote>\n<h2 id=\"solution\"><a class=\"anchor\" href=\"#solution\">#</a> Solution</h2>\n<div class=\"tab\" data-id=\"code\" data-title=\"Javascript\">\n<figure class=\"highlight javascript\"><figcaption data-lang=\"javascript\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre><span class=\"token comment\">/**</pre></td></tr><tr><td data-num=\"2\"></td><td><pre> * @param &#123;number&#125; millis</pre></td></tr><tr><td data-num=\"3\"></td><td><pre> */</span></pre></td></tr><tr><td data-num=\"4\"></td><td><pre><span class=\"token keyword\">async</span> <span class=\"token keyword\">function</span> <span class=\"token function\">sleep</span><span class=\"token punctuation\">(</span><span class=\"token parameter\">millis</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"5\"></td><td><pre>    <span class=\"token keyword\">return</span> <span class=\"token keyword\">new</span> <span class=\"token class-name\">Promise</span><span class=\"token punctuation\">(</span><span class=\"token parameter\">resolve</span> <span class=\"token operator\">=></span> <span class=\"token function\">setTimeout</span><span class=\"token punctuation\">(</span>resolve<span class=\"token punctuation\">,</span> millis<span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"6\"></td><td><pre><span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"7\"></td><td><pre></pre></td></tr><tr><td data-num=\"8\"></td><td><pre><span class=\"token comment\">/** </pre></td></tr><tr><td data-num=\"9\"></td><td><pre> * let t = Date.now()</pre></td></tr><tr><td data-num=\"10\"></td><td><pre> * sleep(100).then(() => console.log(Date.now() - t)) // 100</pre></td></tr><tr><td data-num=\"11\"></td><td><pre> */</span></pre></td></tr></table></figure></div>\n<div class=\"tab\" data-id=\"code\" data-title=\"Typescript\">\n<figure class=\"highlight typescript\"><figcaption data-lang=\"typescript\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre><span class=\"token keyword\">async</span> <span class=\"token keyword\">function</span> <span class=\"token function\">sleep</span><span class=\"token punctuation\">(</span>millis<span class=\"token operator\">:</span> <span class=\"token builtin\">number</span><span class=\"token punctuation\">)</span><span class=\"token operator\">:</span> <span class=\"token builtin\">Promise</span><span class=\"token operator\">&lt;</span><span class=\"token keyword\">void</span><span class=\"token operator\">></span> <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"2\"></td><td><pre>    <span class=\"token keyword\">return</span> <span class=\"token keyword\">new</span> <span class=\"token class-name\"><span class=\"token builtin\">Promise</span></span><span class=\"token punctuation\">(</span>resolve <span class=\"token operator\">=></span> <span class=\"token function\">setTimeout</span><span class=\"token punctuation\">(</span>resolve<span class=\"token punctuation\">,</span> millis<span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>   </pre></td></tr><tr><td data-num=\"3\"></td><td><pre><span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"4\"></td><td><pre></pre></td></tr><tr><td data-num=\"5\"></td><td><pre></pre></td></tr><tr><td data-num=\"6\"></td><td><pre><span class=\"token comment\">/** </pre></td></tr><tr><td data-num=\"7\"></td><td><pre> * let t = Date.now()</pre></td></tr><tr><td data-num=\"8\"></td><td><pre> * sleep(100).then(() => console.log(Date.now() - t)) // 100</pre></td></tr><tr><td data-num=\"9\"></td><td><pre> */</span></pre></td></tr></table></figure></div>\n",
            "tags": [
                "Coding",
                "Leetcode",
                "Easy",
                "Javascript",
                "Leetcode",
                "Easy",
                "Typescript",
                "Promise"
            ]
        },
        {
            "id": "https://chienikao.github.io/2023/05/15/Coding/leetcode/Medium/2632%20Curry/",
            "url": "https://chienikao.github.io/2023/05/15/Coding/leetcode/Medium/2632%20Curry/",
            "title": "2632. Curry",
            "date_published": "2023-05-15T03:26:49.000Z",
            "content_html": "<p>⭐️⭐️</p>\n<h2 id=\"題目敘述\"><a class=\"anchor\" href=\"#題目敘述\">#</a> <span class=\"exturl\" data-url=\"aHR0cHM6Ly9sZWV0Y29kZS5jb20vcHJvYmxlbXMvY3VycnkvP3V0bV9jYW1wYWlnbj1Qb3N0RDEwJmFtcDt1dG1fbWVkaXVtPVBvc3QmYW1wO3V0bV9zb3VyY2U9UG9zdCZhbXA7Z2lvX2xpbmtfaWQ9UVJla3hnam8=\">題目敘述</span></h2>\n<p>Given a function  <code>fn</code> , return a <strong>curried</strong> version of that function.</p>\n<p>A <strong>curried</strong> function is a function that accepts fewer or an equal number of parameters as the original function and returns either another <strong>curried</strong> function or the same value the original function would have returned.</p>\n<p>In practical terms, if you called the original function like  <code>sum(1,2,3)</code> , you would call the curried version like  <code>csum(1)(2)(3)</code> ,  <code>csum(1)(2,3)</code> ,  <code>csum(1,2)(3)</code> , or  <code>csum(1,2,3)</code> . All these methods of calling the <strong>curried</strong> function should return the same value as the original.</p>\n<h3 id=\"example-1\"><a class=\"anchor\" href=\"#example-1\">#</a> Example 1</h3>\n<blockquote>\n<p><strong>Input</strong>:<br>\nfn = function sum(a, b, c) { return a + b + c; }<br>\ninputs = [[1],[2],[3]]<br>\n<strong>Output</strong>: 6<br>\n<strong>Explanation</strong>:<br>\nThe code being executed is:<br>\nconst curriedSum = curry(fn);<br>\ncurriedSum(1)(2)(3) === 6;<br>\ncurriedSum(1)(2)(3) should return the same value as sum(1, 2, 3).</p>\n</blockquote>\n<h3 id=\"example-2\"><a class=\"anchor\" href=\"#example-2\">#</a> Example 2</h3>\n<blockquote>\n<p><strong>Input</strong>:<br>\nfn = function sum(a, b, c) { return a + b + c; }<br>\ninputs = [[1,2],[3]]<br>\n<strong>Output</strong>: 6<br>\n<strong>Explanation</strong>:<br>\ncurriedSum(1, 2)(3) should return the same value as sum(1, 2, 3).</p>\n</blockquote>\n<h3 id=\"example-3\"><a class=\"anchor\" href=\"#example-3\">#</a> Example 3</h3>\n<blockquote>\n<p><strong>Input</strong>:<br>\nfn = function sum(a, b, c) { return a + b + c; }<br>\ninputs = [[],[],[1,2,3]]<br>\n<strong>Output</strong>: 6<br>\n<strong>Explanation</strong>:<br>\nYou should be able to pass the parameters in any way, including all at once or none at all.<br>\ncurriedSum()()(1, 2, 3) should return the same value as sum(1, 2, 3).</p>\n</blockquote>\n<h3 id=\"example-4\"><a class=\"anchor\" href=\"#example-4\">#</a> Example 4</h3>\n<blockquote>\n<p><strong>Input</strong>:<br>\nfn = function life() { return 42; }<br>\ninputs = [[]]<br>\n<strong>Output</strong>: 42<br>\n<strong>Explanation</strong>:<br>\ncurrying a function that accepts zero parameters should effectively do nothing.<br>\ncurriedLife() === 42</p>\n</blockquote>\n<h2 id=\"solution\"><a class=\"anchor\" href=\"#solution\">#</a> Solution</h2>\n<div class=\"tab\" data-id=\"code\" data-title=\"Javascript\">\n<figure class=\"highlight javascript\"><figcaption data-lang=\"javascript\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre><span class=\"token comment\">/**</pre></td></tr><tr><td data-num=\"2\"></td><td><pre> * @param &#123;Function&#125; fn</pre></td></tr><tr><td data-num=\"3\"></td><td><pre> * @return &#123;Function&#125;</pre></td></tr><tr><td data-num=\"4\"></td><td><pre> */</span></pre></td></tr><tr><td data-num=\"5\"></td><td><pre><span class=\"token keyword\">var</span> <span class=\"token function-variable function\">curry</span> <span class=\"token operator\">=</span> <span class=\"token keyword\">function</span><span class=\"token punctuation\">(</span><span class=\"token parameter\">fn</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"6\"></td><td><pre>    <span class=\"token keyword\">return</span> <span class=\"token keyword\">function</span> <span class=\"token function\">curried</span><span class=\"token punctuation\">(</span><span class=\"token parameter\"><span class=\"token operator\">...</span>args</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"7\"></td><td><pre>        <span class=\"token keyword\">if</span> <span class=\"token punctuation\">(</span>args<span class=\"token punctuation\">.</span>length <span class=\"token operator\">>=</span> fn<span class=\"token punctuation\">.</span>length<span class=\"token punctuation\">)</span> <span class=\"token keyword\">return</span> <span class=\"token function\">fn</span><span class=\"token punctuation\">(</span><span class=\"token operator\">...</span>args<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"8\"></td><td><pre>        <span class=\"token keyword\">else</span> <span class=\"token keyword\">return</span> <span class=\"token punctuation\">(</span><span class=\"token parameter\"><span class=\"token operator\">...</span>moreArgs</span><span class=\"token punctuation\">)</span> <span class=\"token operator\">=></span> <span class=\"token function\">curried</span><span class=\"token punctuation\">(</span><span class=\"token operator\">...</span>args<span class=\"token punctuation\">,</span> <span class=\"token operator\">...</span>moreArgs<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"9\"></td><td><pre>    <span class=\"token punctuation\">&#125;</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"10\"></td><td><pre><span class=\"token punctuation\">&#125;</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"11\"></td><td><pre></pre></td></tr><tr><td data-num=\"12\"></td><td><pre><span class=\"token comment\">/**</pre></td></tr><tr><td data-num=\"13\"></td><td><pre> * function sum(a, b) &#123; return a + b; &#125;</pre></td></tr><tr><td data-num=\"14\"></td><td><pre> * const csum = curry(sum);</pre></td></tr><tr><td data-num=\"15\"></td><td><pre> * csum(1)(2) // 3</pre></td></tr><tr><td data-num=\"16\"></td><td><pre> */</span></pre></td></tr></table></figure></div>\n<div class=\"tab\" data-id=\"code\" data-title=\"Typescript\">\n<figure class=\"highlight typescript\"><figcaption data-lang=\"typescript\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre><span class=\"token keyword\">function</span> <span class=\"token function\">curry</span><span class=\"token punctuation\">(</span>fn<span class=\"token operator\">:</span> <span class=\"token builtin\">Function</span><span class=\"token punctuation\">)</span><span class=\"token operator\">:</span> <span class=\"token builtin\">Function</span> <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"2\"></td><td><pre>    <span class=\"token keyword\">return</span> <span class=\"token keyword\">function</span> <span class=\"token function\">curried</span><span class=\"token punctuation\">(</span><span class=\"token operator\">...</span>args<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"3\"></td><td><pre>        <span class=\"token keyword\">if</span> <span class=\"token punctuation\">(</span>args<span class=\"token punctuation\">.</span>length <span class=\"token operator\">>=</span> fn<span class=\"token punctuation\">.</span>length<span class=\"token punctuation\">)</span> <span class=\"token keyword\">return</span> <span class=\"token function\">fn</span><span class=\"token punctuation\">(</span><span class=\"token operator\">...</span>args<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"4\"></td><td><pre>        <span class=\"token keyword\">else</span> <span class=\"token keyword\">return</span> <span class=\"token punctuation\">(</span><span class=\"token operator\">...</span>moreArgs<span class=\"token punctuation\">)</span> <span class=\"token operator\">=></span> <span class=\"token function\">curried</span><span class=\"token punctuation\">(</span><span class=\"token operator\">...</span>args<span class=\"token punctuation\">,</span> <span class=\"token operator\">...</span>moreArgs<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"5\"></td><td><pre>    <span class=\"token punctuation\">&#125;</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"6\"></td><td><pre><span class=\"token punctuation\">&#125;</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"7\"></td><td><pre></pre></td></tr><tr><td data-num=\"8\"></td><td><pre><span class=\"token comment\">/**</pre></td></tr><tr><td data-num=\"9\"></td><td><pre> * function sum(a, b) &#123; return a + b; &#125;</pre></td></tr><tr><td data-num=\"10\"></td><td><pre> * const csum = curry(sum);</pre></td></tr><tr><td data-num=\"11\"></td><td><pre> * csum(1)(2) // 3</pre></td></tr><tr><td data-num=\"12\"></td><td><pre> */</span></pre></td></tr></table></figure></div>\n",
            "tags": [
                "Coding",
                "Leetcode",
                "Medium",
                "Javascript",
                "Leetcode",
                "Typescript",
                "Medium"
            ]
        },
        {
            "id": "https://chienikao.github.io/2023/05/15/Coding/leetcode/Medium/2623%20Memoize/",
            "url": "https://chienikao.github.io/2023/05/15/Coding/leetcode/Medium/2623%20Memoize/",
            "title": "2623. Memoize",
            "date_published": "2023-05-15T03:10:27.000Z",
            "content_html": "<p>⭐️⭐️</p>\n<h2 id=\"題目敘述\"><a class=\"anchor\" href=\"#題目敘述\">#</a> <span class=\"exturl\" data-url=\"aHR0cHM6Ly9sZWV0Y29kZS5jb20vcHJvYmxlbXMvbWVtb2l6ZS9kZXNjcmlwdGlvbi8/dXRtX2NhbXBhaWduPVBvc3REOSZhbXA7dXRtX21lZGl1bT1Qb3N0JmFtcDt1dG1fc291cmNlPVBvc3QmYW1wO2dpb19saW5rX2lkPW5SYkFEVmQ5\">題目敘述</span></h2>\n<p>Given a function  <code>fn</code> , return a <strong>memoized</strong> version of that function.</p>\n<p>A <strong>memoized</strong> function is a function that will never be called twice with the same inputs. Instead it will return a cached value.</p>\n<p>You can assume there are <strong>3</strong> possible input functions:  <code>sum</code> ,  <code>fib</code> , and  <code>factorial</code> .</p>\n<ul>\n<li><code>sum</code>  accepts two integers  <code>a</code>  and  <code>b</code>  and returns  <code>a + b</code> .</li>\n<li><code>fib</code>  accepts a single integer n and returns  <code>1</code>  if  <code>n &lt;= 1</code>  or  <code>fib(n - 1) + fib(n - 2)</code>  otherwise.</li>\n<li><code>factorial</code>  accepts a single integer  <code>n</code>  and returns  <code>1</code>  if  <code>n &lt;= 1</code>  or  <code>factorial(n - 1) * n</code>  otherwise.</li>\n</ul>\n<h3 id=\"example-1\"><a class=\"anchor\" href=\"#example-1\">#</a> Example 1</h3>\n<blockquote>\n<p><strong>Input</strong><br>\n“sum”<br>\n[“call”,“call”,“getCallCount”,“call”,“getCallCount”]<br>\n[[2,2],[2,2],[],[1,2],[]]<br>\n<strong>Output</strong><br>\n[4,4,1,3,2]<br>\n<strong>Explanation</strong><br>\nconst sum = (a, b) =&gt; a + b;<br>\nconst memoizedSum = memoize(sum);<br>\nmemoizedSum(2, 2); // Returns 4. sum() was called as (2, 2) was not seen before.<br>\nmemoizedSum(2, 2); // Returns 4. However sum() was not called because the same inputs were seen before.<br>\n// Total call count: 1<br>\nmemoizedSum(1, 2); // Returns 3. sum() was called as (1, 2) was not seen before.<br>\n// Total call count: 2</p>\n</blockquote>\n<h3 id=\"example-2\"><a class=\"anchor\" href=\"#example-2\">#</a> Example 2</h3>\n<blockquote>\n<p><strong>Input</strong><br>\n“factorial”<br>\n[“call”,“call”,“call”,“getCallCount”,“call”,“getCallCount”]<br>\n[[2],[3],[2],[],[3],[]]<br>\n<strong>Output</strong><br>\n[2,6,2,2,6,2]<br>\n<strong>Explanation</strong><br>\nconst factorial = (n) =&gt; (n &lt;= 1) ? 1 : (n * factorial(n - 1));<br>\nconst memoFactorial = memoize(factorial);<br>\nmemoFactorial(2); // Returns 2.<br>\nmemoFactorial(3); // Returns 6.<br>\nmemoFactorial(2); // Returns 2. However factorial was not called because 2 was seen before.<br>\n// Total call count: 2<br>\nmemoFactorial(3); // Returns 6. However factorial was not called because 3 was seen before.<br>\n// Total call count: 2</p>\n</blockquote>\n<h3 id=\"example-3\"><a class=\"anchor\" href=\"#example-3\">#</a> Example 3</h3>\n<blockquote>\n<p><strong>Input</strong><br>\n“fib”<br>\n[“call”,“getCallCount”]<br>\n[[5],[]]<br>\n<strong>Output</strong><br>\n[8,1]<br>\n<strong>Explanation</strong><br>\nfib(5) = 8<br>\n// Total call count: 1</p>\n</blockquote>\n<h2 id=\"solution\"><a class=\"anchor\" href=\"#solution\">#</a> Solution</h2>\n<div class=\"tab\" data-id=\"code\" data-title=\"Javescript\">\n<figure class=\"highlight javascript\"><figcaption data-lang=\"javascript\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre><span class=\"token comment\">/**</pre></td></tr><tr><td data-num=\"2\"></td><td><pre> * @param &#123;Function&#125; fn</pre></td></tr><tr><td data-num=\"3\"></td><td><pre> */</span></pre></td></tr><tr><td data-num=\"4\"></td><td><pre><span class=\"token keyword\">function</span> <span class=\"token function\">memoize</span><span class=\"token punctuation\">(</span><span class=\"token parameter\">fn</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"5\"></td><td><pre>    <span class=\"token keyword\">const</span> cache <span class=\"token operator\">=</span> <span class=\"token punctuation\">&#123;</span><span class=\"token punctuation\">&#125;</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"6\"></td><td><pre>    <span class=\"token keyword\">return</span> <span class=\"token keyword\">function</span><span class=\"token punctuation\">(</span><span class=\"token parameter\"><span class=\"token operator\">...</span>args</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"7\"></td><td><pre>        <span class=\"token keyword\">const</span> key <span class=\"token operator\">=</span> <span class=\"token constant\">JSON</span><span class=\"token punctuation\">.</span><span class=\"token function\">stringify</span><span class=\"token punctuation\">(</span>args<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"8\"></td><td><pre>        <span class=\"token keyword\">if</span> <span class=\"token punctuation\">(</span>key <span class=\"token keyword\">in</span> cache<span class=\"token punctuation\">)</span> <span class=\"token keyword\">return</span> cache<span class=\"token punctuation\">[</span>key<span class=\"token punctuation\">]</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"9\"></td><td><pre>        <span class=\"token keyword\">const</span> result <span class=\"token operator\">=</span> <span class=\"token function\">fn</span><span class=\"token punctuation\">.</span><span class=\"token function\">apply</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">this</span><span class=\"token punctuation\">,</span> args<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"10\"></td><td><pre>        cache<span class=\"token punctuation\">[</span>key<span class=\"token punctuation\">]</span> <span class=\"token operator\">=</span> result<span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"11\"></td><td><pre>        <span class=\"token keyword\">return</span> result<span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"12\"></td><td><pre>    <span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"13\"></td><td><pre><span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"14\"></td><td><pre></pre></td></tr><tr><td data-num=\"15\"></td><td><pre><span class=\"token comment\">/** </pre></td></tr><tr><td data-num=\"16\"></td><td><pre> * let callCount = 0;</pre></td></tr><tr><td data-num=\"17\"></td><td><pre> * const memoizedFn = memoize(function (a, b) &#123;</pre></td></tr><tr><td data-num=\"18\"></td><td><pre> *\t callCount += 1;</pre></td></tr><tr><td data-num=\"19\"></td><td><pre> *   return a + b;</pre></td></tr><tr><td data-num=\"20\"></td><td><pre> * &#125;)</pre></td></tr><tr><td data-num=\"21\"></td><td><pre> * memoizedFn(2, 3) // 5</pre></td></tr><tr><td data-num=\"22\"></td><td><pre> * memoizedFn(2, 3) // 5</pre></td></tr><tr><td data-num=\"23\"></td><td><pre> * console.log(callCount) // 1 </pre></td></tr><tr><td data-num=\"24\"></td><td><pre> */</span></pre></td></tr></table></figure></div>\n<div class=\"tab\" data-id=\"code\" data-title=\"Typescript\">\n<figure class=\"highlight typescript\"><figcaption data-lang=\"typescript\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre><span class=\"token keyword\">type</span> <span class=\"token class-name\">Fn</span> <span class=\"token operator\">=</span> <span class=\"token punctuation\">(</span><span class=\"token operator\">...</span>params<span class=\"token operator\">:</span> <span class=\"token builtin\">any</span><span class=\"token punctuation\">)</span> <span class=\"token operator\">=></span> <span class=\"token builtin\">any</span></pre></td></tr><tr><td data-num=\"2\"></td><td><pre></pre></td></tr><tr><td data-num=\"3\"></td><td><pre><span class=\"token keyword\">function</span> <span class=\"token function\">memoize</span><span class=\"token punctuation\">(</span>fn<span class=\"token operator\">:</span> Fn<span class=\"token punctuation\">)</span><span class=\"token operator\">:</span> Fn <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"4\"></td><td><pre>    <span class=\"token keyword\">const</span> cache <span class=\"token operator\">=</span> <span class=\"token punctuation\">&#123;</span><span class=\"token punctuation\">&#125;</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"5\"></td><td><pre>    <span class=\"token keyword\">return</span> <span class=\"token keyword\">function</span><span class=\"token punctuation\">(</span><span class=\"token operator\">...</span>args<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"6\"></td><td><pre>        <span class=\"token keyword\">const</span> key <span class=\"token operator\">=</span> <span class=\"token constant\">JSON</span><span class=\"token punctuation\">.</span><span class=\"token function\">stringify</span><span class=\"token punctuation\">(</span>args<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"7\"></td><td><pre>        <span class=\"token keyword\">if</span> <span class=\"token punctuation\">(</span>key <span class=\"token keyword\">in</span> cache<span class=\"token punctuation\">)</span> <span class=\"token keyword\">return</span> cache<span class=\"token punctuation\">[</span>key<span class=\"token punctuation\">]</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"8\"></td><td><pre>        <span class=\"token keyword\">const</span> result <span class=\"token operator\">=</span> <span class=\"token function\">fn</span><span class=\"token punctuation\">.</span><span class=\"token function\">apply</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">this</span><span class=\"token punctuation\">,</span> args<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"9\"></td><td><pre>        cache<span class=\"token punctuation\">[</span>key<span class=\"token punctuation\">]</span> <span class=\"token operator\">=</span> result<span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"10\"></td><td><pre>        <span class=\"token keyword\">return</span> result<span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"11\"></td><td><pre>    <span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"12\"></td><td><pre><span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"13\"></td><td><pre></pre></td></tr><tr><td data-num=\"14\"></td><td><pre></pre></td></tr><tr><td data-num=\"15\"></td><td><pre><span class=\"token comment\">/** </pre></td></tr><tr><td data-num=\"16\"></td><td><pre> * let callCount = 0;</pre></td></tr><tr><td data-num=\"17\"></td><td><pre> * const memoizedFn = memoize(function (a, b) &#123;</pre></td></tr><tr><td data-num=\"18\"></td><td><pre> *\t callCount += 1;</pre></td></tr><tr><td data-num=\"19\"></td><td><pre> *   return a + b;</pre></td></tr><tr><td data-num=\"20\"></td><td><pre> * &#125;)</pre></td></tr><tr><td data-num=\"21\"></td><td><pre> * memoizedFn(2, 3) // 5</pre></td></tr><tr><td data-num=\"22\"></td><td><pre> * memoizedFn(2, 3) // 5</pre></td></tr><tr><td data-num=\"23\"></td><td><pre> * console.log(callCount) // 1 </pre></td></tr><tr><td data-num=\"24\"></td><td><pre> */</span></pre></td></tr></table></figure></div>\n",
            "tags": [
                "Coding",
                "Leetcode",
                "Medium",
                "Javascript",
                "Leetcode",
                "Typescript",
                "Medium"
            ]
        },
        {
            "id": "https://chienikao.github.io/2023/05/15/Coding/leetcode/Easy/2666%20Allow%20One%20Function%20Call/",
            "url": "https://chienikao.github.io/2023/05/15/Coding/leetcode/Easy/2666%20Allow%20One%20Function%20Call/",
            "title": "2666. Allow One Function Call",
            "date_published": "2023-05-15T03:08:46.000Z",
            "content_html": "<p>⭐️</p>\n<h2 id=\"題目敘述\"><a class=\"anchor\" href=\"#題目敘述\">#</a> <span class=\"exturl\" data-url=\"aHR0cHM6Ly9sZWV0Y29kZS5jb20vcHJvYmxlbXMvYWxsb3ctb25lLWZ1bmN0aW9uLWNhbGwvZGVzY3JpcHRpb24vP3V0bV9jYW1wYWlnbj1Qb3N0RDgmYW1wO3V0bV9tZWRpdW09UG9zdCZhbXA7dXRtX3NvdXJjZT1Qb3N0JmFtcDtnaW9fbGlua19pZD1hOUJ5MDFPbw==\">題目敘述</span></h2>\n<p>Given a function  <code>fn</code> , return a new function that is identical to the original function except that it ensures  <code>fn</code>  is called at most once.</p>\n<ul>\n<li>The first time the returned function is called, it should return the same result as  <code>fn</code> .</li>\n<li>Every subsequent time it is called, it should return  <code>undefined</code> .</li>\n</ul>\n<h3 id=\"example-1\"><a class=\"anchor\" href=\"#example-1\">#</a> Example 1</h3>\n<blockquote>\n<p><strong>Input</strong>: fn = (a,b,c) =&gt; (a + b + c), calls = [[1,2,3],[2,3,6]]<br>\n<strong>Output</strong>: [{“calls”:1,“value”:6}]<br>\n<strong>Explanation</strong>:<br>\nconst onceFn = once(fn);<br>\nonceFn(1, 2, 3); // 6<br>\nonceFn(2, 3, 6); // undefined, fn was not called</p>\n</blockquote>\n<h3 id=\"example-2\"><a class=\"anchor\" href=\"#example-2\">#</a> Example 2</h3>\n<blockquote>\n<p><strong>Input</strong>: fn = (a,b,c) =&gt; (a * b * c), calls = [[5,7,4],[2,3,6],[4,6,8]]<br>\n<strong>Output</strong>: [{“calls”:1,“value”:140}]<br>\n<strong>Explanation</strong>:<br>\nconst onceFn = once(fn);<br>\nonceFn(5, 7, 4); // 140<br>\nonceFn(2, 3, 6); // undefined, fn was not called<br>\nonceFn(4, 6, 8); // undefined, fn was not called</p>\n</blockquote>\n<h2 id=\"solution\"><a class=\"anchor\" href=\"#solution\">#</a> Solution</h2>\n<div class=\"tab\" data-id=\"code\" data-title=\"Javascript\">\n<figure class=\"highlight javascript\"><figcaption data-lang=\"javascript\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre><span class=\"token comment\">/**</pre></td></tr><tr><td data-num=\"2\"></td><td><pre> * @param &#123;Function&#125; fn</pre></td></tr><tr><td data-num=\"3\"></td><td><pre> * @return &#123;Function&#125;</pre></td></tr><tr><td data-num=\"4\"></td><td><pre> */</span></pre></td></tr><tr><td data-num=\"5\"></td><td><pre><span class=\"token keyword\">var</span> <span class=\"token function-variable function\">once</span> <span class=\"token operator\">=</span> <span class=\"token keyword\">function</span><span class=\"token punctuation\">(</span><span class=\"token parameter\">fn</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"6\"></td><td><pre>    <span class=\"token keyword\">let</span> cnt <span class=\"token operator\">=</span> <span class=\"token number\">0</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"7\"></td><td><pre>    <span class=\"token keyword\">return</span> <span class=\"token keyword\">function</span><span class=\"token punctuation\">(</span><span class=\"token parameter\"><span class=\"token operator\">...</span>args</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"8\"></td><td><pre>        cnt<span class=\"token operator\">++</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"9\"></td><td><pre>        <span class=\"token keyword\">if</span> <span class=\"token punctuation\">(</span>cnt <span class=\"token operator\">==</span> <span class=\"token number\">1</span><span class=\"token punctuation\">)</span> <span class=\"token keyword\">return</span> <span class=\"token function\">fn</span><span class=\"token punctuation\">(</span><span class=\"token operator\">...</span>args<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"10\"></td><td><pre>        <span class=\"token keyword\">else</span> <span class=\"token keyword\">return</span> <span class=\"token keyword\">undefined</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"11\"></td><td><pre>    <span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"12\"></td><td><pre><span class=\"token punctuation\">&#125;</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"13\"></td><td><pre></pre></td></tr><tr><td data-num=\"14\"></td><td><pre><span class=\"token comment\">/**</pre></td></tr><tr><td data-num=\"15\"></td><td><pre> * let fn = (a,b,c) => (a + b + c)</pre></td></tr><tr><td data-num=\"16\"></td><td><pre> * let onceFn = once(fn)</pre></td></tr><tr><td data-num=\"17\"></td><td><pre> *</pre></td></tr><tr><td data-num=\"18\"></td><td><pre> * onceFn(1,2,3); // 6</pre></td></tr><tr><td data-num=\"19\"></td><td><pre> * onceFn(2,3,6); // returns undefined without calling fn</pre></td></tr><tr><td data-num=\"20\"></td><td><pre> */</span></pre></td></tr></table></figure></div>\n<div class=\"tab\" data-id=\"code\" data-title=\"Typescript\">\n<figure class=\"highlight typescript\"><figcaption data-lang=\"typescript\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre><span class=\"token keyword\">function</span> once<span class=\"token operator\">&lt;</span><span class=\"token constant\">T</span> <span class=\"token keyword\">extends</span> <span class=\"token punctuation\">(</span><span class=\"token operator\">...</span>args<span class=\"token operator\">:</span> <span class=\"token builtin\">any</span><span class=\"token punctuation\">[</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">)</span> <span class=\"token operator\">=></span> <span class=\"token builtin\">any</span><span class=\"token operator\">></span><span class=\"token punctuation\">(</span>fn<span class=\"token operator\">:</span> <span class=\"token constant\">T</span><span class=\"token punctuation\">)</span><span class=\"token operator\">:</span> </pre></td></tr><tr><td data-num=\"2\"></td><td><pre> <span class=\"token punctuation\">(</span><span class=\"token punctuation\">(</span><span class=\"token operator\">...</span>args<span class=\"token operator\">:</span> Parameters<span class=\"token operator\">&lt;</span><span class=\"token constant\">T</span><span class=\"token operator\">></span><span class=\"token punctuation\">)</span> <span class=\"token operator\">=></span> ReturnType<span class=\"token operator\">&lt;</span><span class=\"token constant\">T</span><span class=\"token operator\">></span> <span class=\"token operator\">|</span> <span class=\"token keyword\">undefined</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"3\"></td><td><pre>  <span class=\"token keyword\">let</span> cnt <span class=\"token operator\">=</span> <span class=\"token number\">0</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"4\"></td><td><pre>  <span class=\"token keyword\">return</span> <span class=\"token keyword\">function</span> <span class=\"token punctuation\">(</span><span class=\"token operator\">...</span>args<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"5\"></td><td><pre>      cnt<span class=\"token operator\">++</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"6\"></td><td><pre>      <span class=\"token keyword\">if</span> <span class=\"token punctuation\">(</span>cnt <span class=\"token operator\">==</span> <span class=\"token number\">1</span><span class=\"token punctuation\">)</span> <span class=\"token keyword\">return</span> <span class=\"token function\">fn</span><span class=\"token punctuation\">(</span><span class=\"token operator\">...</span>args<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"7\"></td><td><pre>      <span class=\"token keyword\">else</span> <span class=\"token keyword\">return</span> <span class=\"token keyword\">undefined</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"8\"></td><td><pre>  <span class=\"token punctuation\">&#125;</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"9\"></td><td><pre><span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"10\"></td><td><pre></pre></td></tr><tr><td data-num=\"11\"></td><td><pre><span class=\"token comment\">/**</pre></td></tr><tr><td data-num=\"12\"></td><td><pre> * let fn = (a,b,c) => (a + b + c)</pre></td></tr><tr><td data-num=\"13\"></td><td><pre> * let onceFn = once(fn)</pre></td></tr><tr><td data-num=\"14\"></td><td><pre> *</pre></td></tr><tr><td data-num=\"15\"></td><td><pre> * onceFn(1,2,3); // 6</pre></td></tr><tr><td data-num=\"16\"></td><td><pre> * onceFn(2,3,6); // returns undefined without calling fn</pre></td></tr><tr><td data-num=\"17\"></td><td><pre> */</span></pre></td></tr></table></figure></div>\n",
            "tags": [
                "Coding",
                "Leetcode",
                "Easy",
                "Javascript",
                "Leetcode",
                "Easy",
                "Typescript"
            ]
        },
        {
            "id": "https://chienikao.github.io/2023/05/15/Coding/leetcode/Medium/2140%20Solving%20Questions%20With%20Brainpower/",
            "url": "https://chienikao.github.io/2023/05/15/Coding/leetcode/Medium/2140%20Solving%20Questions%20With%20Brainpower/",
            "title": "2140. Solving Questions With Brainpower",
            "date_published": "2023-05-15T03:05:17.000Z",
            "content_html": "<p>⭐️⭐️</p>\n<h2 id=\"題目敘述\"><a class=\"anchor\" href=\"#題目敘述\">#</a> <span class=\"exturl\" data-url=\"aHR0cHM6Ly9sZWV0Y29kZS5jb20vcHJvYmxlbXMvc29sdmluZy1xdWVzdGlvbnMtd2l0aC1icmFpbnBvd2VyLw==\">題目敘述</span></h2>\n<p>You are given <strong>a 0-indexed</strong> 2D integer array  <code>questions</code>  where  <code>questions[i] = [pointsi, brainpoweri]</code> .</p>\n<p>The array describes the questions of an exam, where you have to process the questions <strong>in order</strong> (i.e., starting from question  <code>0</code> ) and make a decision whether to <strong>solve</strong> or <strong>skip</strong> each question. Solving question  <code>i</code>  will earn you  <code>pointsi</code>  points but you will be <strong>unable</strong> to solve each of the next  <code>brainpoweri</code>  questions. If you skip question  <code>i</code> , you get to make the decision on the next question.</p>\n<ul>\n<li>For example, given  <code>questions = [[3, 2], [4, 3], [4, 4], [2, 5]]</code> :\n<ul>\n<li>If question  <code>0</code>  is solved, you will earn  <code>3</code>  points but you will be unable to solve questions  <code>1</code>  and  <code>2</code> .</li>\n<li>If instead, question  <code>0</code>  is skipped and question  <code>1</code>  is solved, you will earn  <code>4</code>  points but you will be unable to solve questions  <code>2</code>  and  <code>3</code> .</li>\n</ul>\n</li>\n</ul>\n<p>Return <em>the <strong>maximum</strong> points you can earn for the exam</em>.</p>\n<h3 id=\"example-1\"><a class=\"anchor\" href=\"#example-1\">#</a> Example 1</h3>\n<blockquote>\n<p><strong>Input:</strong> questions = [[3,2],[4,3],[4,4],[2,5]]<br>\n<strong>Output:</strong> 5<br>\n<strong>Explanation:</strong> The maximum points can be earned by solving questions 0 and 3.</p>\n<ul>\n<li>Solve question 0: Earn 3 points, will be unable to solve the next 2 questions</li>\n<li>Unable to solve questions 1 and 2</li>\n<li>Solve question 3: Earn 2 points<br>\nTotal points earned: 3 + 2 = 5. There is no other way to earn 5 or more points.</li>\n</ul>\n</blockquote>\n<h3 id=\"example-2\"><a class=\"anchor\" href=\"#example-2\">#</a> Example 2</h3>\n<blockquote>\n<p><strong>Input:</strong> questions = [[1,1],[2,2],[3,3],[4,4],[5,5]]<br>\n<strong>Output:</strong> 7<br>\n<strong>Explanation:</strong> The maximum points can be earned by solving questions 1 and 4.</p>\n<ul>\n<li>Skip question 0</li>\n<li>Solve question 1: Earn 2 points, will be unable to solve the next 2 questions</li>\n<li>Unable to solve questions 2 and 3</li>\n<li>Solve question 4: Earn 5 points<br>\nTotal points earned: 2 + 5 = 7. There is no other way to earn 7 or more points.</li>\n</ul>\n</blockquote>\n<h2 id=\"solution\"><a class=\"anchor\" href=\"#solution\">#</a> Solution</h2>\n<div class=\"tab\" data-id=\"code\" data-title=\"C++\">\n<figure class=\"highlight cpp\"><figcaption data-lang=\"C++\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre><span class=\"token keyword\">class</span> <span class=\"token class-name\">Solution</span> <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"2\"></td><td><pre><span class=\"token keyword\">public</span><span class=\"token operator\">:</span></pre></td></tr><tr><td data-num=\"3\"></td><td><pre>    <span class=\"token keyword\">long</span> <span class=\"token keyword\">long</span> <span class=\"token function\">mostPoints</span><span class=\"token punctuation\">(</span>vector<span class=\"token operator\">&lt;</span>vector<span class=\"token operator\">&lt;</span><span class=\"token keyword\">int</span><span class=\"token operator\">>></span><span class=\"token operator\">&amp;</span> questions<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"4\"></td><td><pre>        <span class=\"token keyword\">int</span> n <span class=\"token operator\">=</span> questions<span class=\"token punctuation\">.</span><span class=\"token function\">size</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"5\"></td><td><pre>        vector<span class=\"token operator\">&lt;</span><span class=\"token keyword\">long</span> <span class=\"token keyword\">long</span> <span class=\"token keyword\">int</span><span class=\"token operator\">></span> <span class=\"token function\">dp</span><span class=\"token punctuation\">(</span>n<span class=\"token operator\">+</span><span class=\"token number\">1</span><span class=\"token punctuation\">,</span> <span class=\"token number\">0</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"6\"></td><td><pre></pre></td></tr><tr><td data-num=\"7\"></td><td><pre>        <span class=\"token keyword\">for</span> <span class=\"token punctuation\">(</span><span class=\"token keyword\">int</span> i<span class=\"token operator\">=</span>n<span class=\"token operator\">-</span><span class=\"token number\">1</span><span class=\"token punctuation\">;</span> i<span class=\"token operator\">></span><span class=\"token operator\">-</span><span class=\"token number\">1</span><span class=\"token punctuation\">;</span> i<span class=\"token operator\">--</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"8\"></td><td><pre>            <span class=\"token keyword\">int</span> p <span class=\"token operator\">=</span> questions<span class=\"token punctuation\">[</span>i<span class=\"token punctuation\">]</span><span class=\"token punctuation\">[</span><span class=\"token number\">0</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">,</span> bp <span class=\"token operator\">=</span> questions<span class=\"token punctuation\">[</span>i<span class=\"token punctuation\">]</span><span class=\"token punctuation\">[</span><span class=\"token number\">1</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"9\"></td><td><pre>            <span class=\"token keyword\">int</span> nextq <span class=\"token operator\">=</span> <span class=\"token function\">min</span><span class=\"token punctuation\">(</span>bp <span class=\"token operator\">+</span> i <span class=\"token operator\">+</span> <span class=\"token number\">1</span><span class=\"token punctuation\">,</span> n<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"10\"></td><td><pre></pre></td></tr><tr><td data-num=\"11\"></td><td><pre>            dp<span class=\"token punctuation\">[</span>i<span class=\"token punctuation\">]</span> <span class=\"token operator\">=</span> <span class=\"token function\">max</span><span class=\"token punctuation\">(</span>dp<span class=\"token punctuation\">[</span>i<span class=\"token operator\">+</span><span class=\"token number\">1</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">,</span> p <span class=\"token operator\">+</span> dp<span class=\"token punctuation\">[</span>nextq<span class=\"token punctuation\">]</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"12\"></td><td><pre>        <span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"13\"></td><td><pre>        <span class=\"token keyword\">return</span> dp<span class=\"token punctuation\">[</span><span class=\"token number\">0</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"14\"></td><td><pre>    <span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"15\"></td><td><pre><span class=\"token punctuation\">&#125;</span><span class=\"token punctuation\">;</span></pre></td></tr></table></figure></div>\n<div class=\"tab\" data-id=\"code\" data-title=\"Java\">\n<figure class=\"highlight java\"><figcaption data-lang=\"java\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre><span class=\"token keyword\">class</span> <span class=\"token class-name\">Solution</span> <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"2\"></td><td><pre>    <span class=\"token keyword\">public</span> <span class=\"token keyword\">long</span> <span class=\"token function\">mostPoints</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">int</span><span class=\"token punctuation\">[</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">[</span><span class=\"token punctuation\">]</span> questions<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"3\"></td><td><pre>        <span class=\"token keyword\">int</span> n <span class=\"token operator\">=</span> questions<span class=\"token punctuation\">.</span>length<span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"4\"></td><td><pre>        <span class=\"token keyword\">long</span><span class=\"token punctuation\">[</span><span class=\"token punctuation\">]</span> dp <span class=\"token operator\">=</span> <span class=\"token keyword\">new</span> <span class=\"token keyword\">long</span><span class=\"token punctuation\">[</span>n<span class=\"token punctuation\">]</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"5\"></td><td><pre>        dp<span class=\"token punctuation\">[</span>n <span class=\"token operator\">-</span> <span class=\"token number\">1</span><span class=\"token punctuation\">]</span> <span class=\"token operator\">=</span> questions<span class=\"token punctuation\">[</span>n <span class=\"token operator\">-</span> <span class=\"token number\">1</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">[</span><span class=\"token number\">0</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"6\"></td><td><pre>        </pre></td></tr><tr><td data-num=\"7\"></td><td><pre>        <span class=\"token keyword\">for</span> <span class=\"token punctuation\">(</span><span class=\"token keyword\">int</span> i <span class=\"token operator\">=</span> n <span class=\"token operator\">-</span> <span class=\"token number\">2</span><span class=\"token punctuation\">;</span> i <span class=\"token operator\">>=</span> <span class=\"token number\">0</span><span class=\"token punctuation\">;</span> <span class=\"token operator\">--</span>i<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"8\"></td><td><pre>            dp<span class=\"token punctuation\">[</span>i<span class=\"token punctuation\">]</span> <span class=\"token operator\">=</span> questions<span class=\"token punctuation\">[</span>i<span class=\"token punctuation\">]</span><span class=\"token punctuation\">[</span><span class=\"token number\">0</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"9\"></td><td><pre>            <span class=\"token keyword\">int</span> skip <span class=\"token operator\">=</span> questions<span class=\"token punctuation\">[</span>i<span class=\"token punctuation\">]</span><span class=\"token punctuation\">[</span><span class=\"token number\">1</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"10\"></td><td><pre>            <span class=\"token keyword\">if</span> <span class=\"token punctuation\">(</span>i <span class=\"token operator\">+</span> skip <span class=\"token operator\">+</span> <span class=\"token number\">1</span> <span class=\"token operator\">&lt;</span> n<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"11\"></td><td><pre>                dp<span class=\"token punctuation\">[</span>i<span class=\"token punctuation\">]</span> <span class=\"token operator\">+=</span> dp<span class=\"token punctuation\">[</span>i <span class=\"token operator\">+</span> skip <span class=\"token operator\">+</span> <span class=\"token number\">1</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"12\"></td><td><pre>            <span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"13\"></td><td><pre>            </pre></td></tr><tr><td data-num=\"14\"></td><td><pre>            <span class=\"token comment\">// dp[i] = max(solve it, skip it)</span></pre></td></tr><tr><td data-num=\"15\"></td><td><pre>            dp<span class=\"token punctuation\">[</span>i<span class=\"token punctuation\">]</span> <span class=\"token operator\">=</span> <span class=\"token class-name\">Math</span><span class=\"token punctuation\">.</span><span class=\"token function\">max</span><span class=\"token punctuation\">(</span>dp<span class=\"token punctuation\">[</span>i<span class=\"token punctuation\">]</span><span class=\"token punctuation\">,</span> dp<span class=\"token punctuation\">[</span>i <span class=\"token operator\">+</span> <span class=\"token number\">1</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"16\"></td><td><pre>        <span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"17\"></td><td><pre>        </pre></td></tr><tr><td data-num=\"18\"></td><td><pre>        <span class=\"token keyword\">return</span> dp<span class=\"token punctuation\">[</span><span class=\"token number\">0</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"19\"></td><td><pre>    <span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"20\"></td><td><pre><span class=\"token punctuation\">&#125;</span></pre></td></tr></table></figure></div>\n<div class=\"tab\" data-id=\"code\" data-title=\"Python\">\n<figure class=\"highlight python\"><figcaption data-lang=\"python\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre><span class=\"token keyword\">class</span> <span class=\"token class-name\">Solution</span><span class=\"token punctuation\">:</span></pre></td></tr><tr><td data-num=\"2\"></td><td><pre>    <span class=\"token keyword\">def</span> <span class=\"token function\">mostPoints</span><span class=\"token punctuation\">(</span>self<span class=\"token punctuation\">,</span> questions<span class=\"token punctuation\">:</span> List<span class=\"token punctuation\">[</span>List<span class=\"token punctuation\">[</span><span class=\"token builtin\">int</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">)</span> <span class=\"token operator\">-</span><span class=\"token operator\">></span> <span class=\"token builtin\">int</span><span class=\"token punctuation\">:</span></pre></td></tr><tr><td data-num=\"3\"></td><td><pre>        n <span class=\"token operator\">=</span> <span class=\"token builtin\">len</span><span class=\"token punctuation\">(</span>questions<span class=\"token punctuation\">)</span></pre></td></tr><tr><td data-num=\"4\"></td><td><pre>        dp <span class=\"token operator\">=</span> <span class=\"token punctuation\">[</span><span class=\"token number\">0</span><span class=\"token punctuation\">]</span> <span class=\"token operator\">*</span> <span class=\"token punctuation\">(</span>n<span class=\"token operator\">+</span><span class=\"token number\">1</span><span class=\"token punctuation\">)</span></pre></td></tr><tr><td data-num=\"5\"></td><td><pre>        <span class=\"token keyword\">for</span> i <span class=\"token keyword\">in</span> <span class=\"token builtin\">range</span><span class=\"token punctuation\">(</span>n<span class=\"token operator\">-</span><span class=\"token number\">1</span><span class=\"token punctuation\">,</span> <span class=\"token operator\">-</span><span class=\"token number\">1</span><span class=\"token punctuation\">,</span> <span class=\"token operator\">-</span><span class=\"token number\">1</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">:</span></pre></td></tr><tr><td data-num=\"6\"></td><td><pre>            p<span class=\"token punctuation\">,</span> bp <span class=\"token operator\">=</span> questions<span class=\"token punctuation\">[</span>i<span class=\"token punctuation\">]</span><span class=\"token punctuation\">[</span><span class=\"token number\">0</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">,</span> questions<span class=\"token punctuation\">[</span>i<span class=\"token punctuation\">]</span><span class=\"token punctuation\">[</span><span class=\"token number\">1</span><span class=\"token punctuation\">]</span></pre></td></tr><tr><td data-num=\"7\"></td><td><pre>            nextq <span class=\"token operator\">=</span> <span class=\"token builtin\">min</span><span class=\"token punctuation\">(</span>bp <span class=\"token operator\">+</span> i <span class=\"token operator\">+</span> <span class=\"token number\">1</span><span class=\"token punctuation\">,</span> n<span class=\"token punctuation\">)</span></pre></td></tr><tr><td data-num=\"8\"></td><td><pre></pre></td></tr><tr><td data-num=\"9\"></td><td><pre>            dp<span class=\"token punctuation\">[</span>i<span class=\"token punctuation\">]</span> <span class=\"token operator\">=</span> <span class=\"token builtin\">max</span><span class=\"token punctuation\">(</span>dp<span class=\"token punctuation\">[</span>i<span class=\"token operator\">+</span><span class=\"token number\">1</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">,</span> p <span class=\"token operator\">+</span> dp<span class=\"token punctuation\">[</span>nextq<span class=\"token punctuation\">]</span><span class=\"token punctuation\">)</span></pre></td></tr><tr><td data-num=\"10\"></td><td><pre>        <span class=\"token keyword\">return</span> dp<span class=\"token punctuation\">[</span><span class=\"token number\">0</span><span class=\"token punctuation\">]</span></pre></td></tr></table></figure></div>\n",
            "tags": [
                "Coding",
                "Leetcode",
                "Medium",
                "Leetcode",
                "Array",
                "Dynamic Programming",
                "Medium"
            ]
        },
        {
            "id": "https://chienikao.github.io/2023/05/15/Coding/leetcode/Medium/1035%20Uncrossed%20Lines/",
            "url": "https://chienikao.github.io/2023/05/15/Coding/leetcode/Medium/1035%20Uncrossed%20Lines/",
            "title": "1035. Uncrossed Lines",
            "date_published": "2023-05-15T03:01:25.000Z",
            "content_html": "<p>⭐️⭐️</p>\n<h2 id=\"題目敘述\"><a class=\"anchor\" href=\"#題目敘述\">#</a> <span class=\"exturl\" data-url=\"aHR0cHM6Ly9sZWV0Y29kZS5jb20vcHJvYmxlbXMvdW5jcm9zc2VkLWxpbmVzLw==\">題目敘述</span></h2>\n<p>You are given two integer arrays  <code>nums1</code>  and  <code>nums2</code> . We write the integers of  <code>nums1</code>  and  <code>nums2</code>  (in the order they are given) on two separate horizontal lines.</p>\n<p>We may draw connecting lines: a straight line connecting two numbers  <code>nums1[i]</code>  and  <code>nums2[j]</code>  such that:</p>\n<ul>\n<li><code>nums1[i] == nums2[j]</code> , and</li>\n<li>the line we draw does not intersect any other connecting (non-horizontal) line.</li>\n</ul>\n<p>Note that a connecting line cannot intersect even at the endpoints (i.e., each number can only belong to one connecting line).</p>\n<p>Return <em>the maximum number of connecting lines we can draw in this way</em>.</p>\n<h3 id=\"example-1\"><a class=\"anchor\" href=\"#example-1\">#</a> Example 1</h3>\n<p><img data-src=\"https://imgur.com/zLcVTiy.png\" alt=\"\"></p>\n<blockquote>\n<p><strong>Input:</strong> nums1 = [1,4,2], nums2 = [1,2,4]<br>\n<strong>Output:</strong> 2<br>\n<strong>Explanation:</strong> We can draw 2 uncrossed lines as in the diagram.<br>\nWe cannot draw 3 uncrossed lines, because the line from nums1[1] = 4 to nums2[2] = 4 will intersect the line from nums1[2]=2 to nums2[1]=2.</p>\n</blockquote>\n<h3 id=\"example-2\"><a class=\"anchor\" href=\"#example-2\">#</a> Example 2</h3>\n<blockquote>\n<p><strong>Input:</strong> nums1 = [2,5,1,2,5], nums2 = [10,5,2,1,5,2]<br>\n<strong>Output:</strong> 3</p>\n</blockquote>\n<h3 id=\"example-3\"><a class=\"anchor\" href=\"#example-3\">#</a> Example 3</h3>\n<blockquote>\n<p><strong>Input:</strong> nums1 = [1,3,7,1,7,5], nums2 = [1,9,2,5,1]<br>\n<strong>Output:</strong> 2</p>\n</blockquote>\n<h2 id=\"解題思路\"><a class=\"anchor\" href=\"#解題思路\">#</a> 解題思路</h2>\n<p>We can define a two-dimensional array  <code>dp</code> , where  <code>dp[i][j]</code>  represents the maximum number of uncrossed lines between the first  <code>i</code>  elements of  <code>nums1</code>  and the first  <code>j</code>  elements of  <code>nums2</code> .</p>\n<ul>\n<li>The base case is  <code>dp[0][j] = 0</code>  and  <code>dp[i][0] = 0</code> , since there are no elements in either array.</li>\n<li>For each element  <code>nums1[i-1]</code>  in  <code>nums1</code>  and each element  <code>nums2[j-1]</code>  in  <code>nums2</code> , we can either include or exclude the current element.\n<ul>\n<li>If  <code>nums1[i-1]</code>  <strong>is equal to</strong>  <code>nums2[j-1]</code> , then we can <strong>include</strong> it in the uncrossed lines, and the maximum number of uncrossed lines is  <code>dp[i-1][j-1] + 1</code> .</li>\n<li>Otherwise, we can <strong>exclude</strong> it, and the maximum number of uncrossed lines is the maximum of  <code>dp[i-1][j]</code>  and  <code>dp[i][j-1]</code> .</li>\n</ul>\n</li>\n<li>The final answer is  <code>dp[m][n]</code> , where  <code>m</code>  and  <code>n</code>  are the lengths of  <code>nums1</code>  and  <code>nums2</code>  respectively.</li>\n</ul>\n<h2 id=\"solution\"><a class=\"anchor\" href=\"#solution\">#</a> Solution</h2>\n<div class=\"tab\" data-id=\"code\" data-title=\"C++\">\n<figure class=\"highlight cpp\"><figcaption data-lang=\"C++\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre><span class=\"token keyword\">class</span> <span class=\"token class-name\">Solution</span> <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"2\"></td><td><pre><span class=\"token keyword\">public</span><span class=\"token operator\">:</span></pre></td></tr><tr><td data-num=\"3\"></td><td><pre>    <span class=\"token keyword\">int</span> <span class=\"token function\">maxUncrossedLines</span><span class=\"token punctuation\">(</span>vector<span class=\"token operator\">&lt;</span><span class=\"token keyword\">int</span><span class=\"token operator\">></span><span class=\"token operator\">&amp;</span> nums1<span class=\"token punctuation\">,</span> vector<span class=\"token operator\">&lt;</span><span class=\"token keyword\">int</span><span class=\"token operator\">></span><span class=\"token operator\">&amp;</span> nums2<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"4\"></td><td><pre>        <span class=\"token keyword\">int</span> n <span class=\"token operator\">=</span> nums1<span class=\"token punctuation\">.</span><span class=\"token function\">size</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">,</span> m <span class=\"token operator\">=</span> nums2<span class=\"token punctuation\">.</span><span class=\"token function\">size</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"5\"></td><td><pre>        vector<span class=\"token operator\">&lt;</span>vector<span class=\"token operator\">&lt;</span><span class=\"token keyword\">int</span><span class=\"token operator\">>></span> <span class=\"token function\">dp</span><span class=\"token punctuation\">(</span>n<span class=\"token operator\">+</span><span class=\"token number\">1</span><span class=\"token punctuation\">,</span> <span class=\"token generic-function\"><span class=\"token function\">vector</span><span class=\"token generic class-name\"><span class=\"token operator\">&lt;</span><span class=\"token keyword\">int</span><span class=\"token operator\">></span></span></span><span class=\"token punctuation\">(</span>m<span class=\"token operator\">+</span><span class=\"token number\">1</span><span class=\"token punctuation\">,</span> <span class=\"token number\">0</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"6\"></td><td><pre>        <span class=\"token keyword\">for</span> <span class=\"token punctuation\">(</span><span class=\"token keyword\">int</span> i<span class=\"token operator\">=</span><span class=\"token number\">1</span><span class=\"token punctuation\">;</span> i<span class=\"token operator\">&lt;=</span>n<span class=\"token punctuation\">;</span> i<span class=\"token operator\">++</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"7\"></td><td><pre>            <span class=\"token keyword\">for</span> <span class=\"token punctuation\">(</span><span class=\"token keyword\">int</span> j<span class=\"token operator\">=</span><span class=\"token number\">1</span><span class=\"token punctuation\">;</span> j<span class=\"token operator\">&lt;=</span>m<span class=\"token punctuation\">;</span> j<span class=\"token operator\">++</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"8\"></td><td><pre>                dp<span class=\"token punctuation\">[</span>i<span class=\"token punctuation\">]</span><span class=\"token punctuation\">[</span>j<span class=\"token punctuation\">]</span> <span class=\"token operator\">=</span> <span class=\"token punctuation\">(</span>nums1<span class=\"token punctuation\">[</span>i<span class=\"token operator\">-</span><span class=\"token number\">1</span><span class=\"token punctuation\">]</span> <span class=\"token operator\">==</span> nums2<span class=\"token punctuation\">[</span>j<span class=\"token operator\">-</span><span class=\"token number\">1</span><span class=\"token punctuation\">]</span> <span class=\"token operator\">?</span> <span class=\"token punctuation\">(</span><span class=\"token number\">1</span> <span class=\"token operator\">+</span> dp<span class=\"token punctuation\">[</span>i<span class=\"token operator\">-</span><span class=\"token number\">1</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">[</span>j<span class=\"token operator\">-</span><span class=\"token number\">1</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">)</span> <span class=\"token operator\">:</span> <span class=\"token function\">max</span><span class=\"token punctuation\">(</span>dp<span class=\"token punctuation\">[</span>i<span class=\"token punctuation\">]</span><span class=\"token punctuation\">[</span>j<span class=\"token operator\">-</span><span class=\"token number\">1</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">,</span> dp<span class=\"token punctuation\">[</span>i<span class=\"token operator\">-</span><span class=\"token number\">1</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">[</span>j<span class=\"token punctuation\">]</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"9\"></td><td><pre>            <span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"10\"></td><td><pre>        <span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"11\"></td><td><pre>        <span class=\"token keyword\">return</span> dp<span class=\"token punctuation\">[</span>n<span class=\"token punctuation\">]</span><span class=\"token punctuation\">[</span>m<span class=\"token punctuation\">]</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"12\"></td><td><pre>    <span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"13\"></td><td><pre><span class=\"token punctuation\">&#125;</span><span class=\"token punctuation\">;</span></pre></td></tr></table></figure></div>\n<div class=\"tab\" data-id=\"code\" data-title=\"Java\">\n<figure class=\"highlight java\"><figcaption data-lang=\"java\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre><span class=\"token keyword\">class</span> <span class=\"token class-name\">Solution</span> <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"2\"></td><td><pre>    <span class=\"token keyword\">public</span> <span class=\"token keyword\">int</span> <span class=\"token function\">maxUncrossedLines</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">int</span><span class=\"token punctuation\">[</span><span class=\"token punctuation\">]</span> nums1<span class=\"token punctuation\">,</span> <span class=\"token keyword\">int</span><span class=\"token punctuation\">[</span><span class=\"token punctuation\">]</span> nums2<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"3\"></td><td><pre>        <span class=\"token keyword\">int</span> n <span class=\"token operator\">=</span> nums1<span class=\"token punctuation\">.</span>length<span class=\"token punctuation\">,</span> m <span class=\"token operator\">=</span> nums2<span class=\"token punctuation\">.</span>length<span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"4\"></td><td><pre>        <span class=\"token keyword\">int</span><span class=\"token punctuation\">[</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">[</span><span class=\"token punctuation\">]</span> dp <span class=\"token operator\">=</span> <span class=\"token keyword\">new</span> <span class=\"token keyword\">int</span><span class=\"token punctuation\">[</span>n <span class=\"token operator\">+</span> <span class=\"token number\">1</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">[</span>m <span class=\"token operator\">+</span> <span class=\"token number\">1</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"5\"></td><td><pre></pre></td></tr><tr><td data-num=\"6\"></td><td><pre>        <span class=\"token keyword\">for</span> <span class=\"token punctuation\">(</span><span class=\"token keyword\">int</span> i <span class=\"token operator\">=</span> <span class=\"token number\">1</span><span class=\"token punctuation\">;</span> i <span class=\"token operator\">&lt;=</span> n<span class=\"token punctuation\">;</span> i<span class=\"token operator\">++</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"7\"></td><td><pre>            <span class=\"token keyword\">for</span> <span class=\"token punctuation\">(</span><span class=\"token keyword\">int</span> j <span class=\"token operator\">=</span> <span class=\"token number\">1</span><span class=\"token punctuation\">;</span> j <span class=\"token operator\">&lt;=</span> m<span class=\"token punctuation\">;</span> j<span class=\"token operator\">++</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"8\"></td><td><pre>                dp<span class=\"token punctuation\">[</span>i<span class=\"token punctuation\">]</span><span class=\"token punctuation\">[</span>j<span class=\"token punctuation\">]</span> <span class=\"token operator\">=</span> <span class=\"token punctuation\">(</span>nums1<span class=\"token punctuation\">[</span>i <span class=\"token operator\">-</span> <span class=\"token number\">1</span><span class=\"token punctuation\">]</span> <span class=\"token operator\">==</span> nums2<span class=\"token punctuation\">[</span>j <span class=\"token operator\">-</span> <span class=\"token number\">1</span><span class=\"token punctuation\">]</span> <span class=\"token operator\">?</span> <span class=\"token number\">1</span> <span class=\"token operator\">+</span> dp<span class=\"token punctuation\">[</span>i <span class=\"token operator\">-</span> <span class=\"token number\">1</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">[</span>j <span class=\"token operator\">-</span> <span class=\"token number\">1</span><span class=\"token punctuation\">]</span> <span class=\"token operator\">:</span> <span class=\"token class-name\">Math</span><span class=\"token punctuation\">.</span><span class=\"token function\">max</span><span class=\"token punctuation\">(</span>dp<span class=\"token punctuation\">[</span>i<span class=\"token punctuation\">]</span><span class=\"token punctuation\">[</span>j <span class=\"token operator\">-</span> <span class=\"token number\">1</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">,</span> dp<span class=\"token punctuation\">[</span>i <span class=\"token operator\">-</span> <span class=\"token number\">1</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">[</span>j<span class=\"token punctuation\">]</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"9\"></td><td><pre>            <span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"10\"></td><td><pre>        <span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"11\"></td><td><pre></pre></td></tr><tr><td data-num=\"12\"></td><td><pre>        <span class=\"token keyword\">return</span> dp<span class=\"token punctuation\">[</span>n<span class=\"token punctuation\">]</span><span class=\"token punctuation\">[</span>m<span class=\"token punctuation\">]</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"13\"></td><td><pre>    <span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"14\"></td><td><pre><span class=\"token punctuation\">&#125;</span></pre></td></tr></table></figure></div>\n<div class=\"tab\" data-id=\"code\" data-title=\"Python\">\n<pre><code class=\"language-python\">\n</code></pre>\n</div>\n",
            "tags": [
                "Coding",
                "Leetcode",
                "Medium",
                "Leetcode",
                "Array",
                "Dynamic Programming",
                "Medium"
            ]
        },
        {
            "id": "https://chienikao.github.io/2023/05/11/Algorithm/Ch07%20Sorting/",
            "url": "https://chienikao.github.io/2023/05/11/Algorithm/Ch07%20Sorting/",
            "title": "Ch07. Sorting",
            "date_published": "2023-05-11T06:40:03.000Z",
            "content_html": "<h2 id=\"insertion-sort\"><a class=\"anchor\" href=\"#insertion-sort\">#</a> Insertion Sort</h2>\n<p>原理是逐一將原始資料加入已排序好資料中，並逐一與已排序好的資料作比較，找到對的位置插入。<br>\n<span class=\"red\">平均時間複雜度為: O (n²)</span></p>\n<figure class=\"highlight c\"><figcaption data-lang=\"c\"><span>PseudoCode</span></figcaption><table><tr><td data-num=\"1\"></td><td><pre><span class=\"token keyword\">void</span> <span class=\"token function\">insertionsort</span> <span class=\"token punctuation\">(</span><span class=\"token keyword\">int</span> n<span class=\"token punctuation\">,</span> keytype S<span class=\"token punctuation\">[</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"2\"></td><td><pre>    index i<span class=\"token punctuation\">,</span> j<span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"3\"></td><td><pre>    keytype x<span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"4\"></td><td><pre>    <span class=\"token keyword\">for</span> <span class=\"token punctuation\">(</span>i<span class=\"token operator\">=</span><span class=\"token number\">2</span><span class=\"token punctuation\">;</span> i<span class=\"token operator\">&lt;=</span>n<span class=\"token punctuation\">;</span> i<span class=\"token operator\">++</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"5\"></td><td><pre>        x <span class=\"token operator\">=</span> S<span class=\"token punctuation\">[</span>i<span class=\"token punctuation\">]</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"6\"></td><td><pre>        j <span class=\"token operator\">=</span> i<span class=\"token operator\">-</span><span class=\"token number\">1</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"7\"></td><td><pre>        <span class=\"token keyword\">while</span> <span class=\"token punctuation\">(</span>j <span class=\"token operator\">></span> <span class=\"token number\">0</span> <span class=\"token operator\">&amp;&amp;</span> S<span class=\"token punctuation\">[</span>j<span class=\"token punctuation\">]</span> <span class=\"token operator\">></span> x<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"8\"></td><td><pre>            S<span class=\"token punctuation\">[</span>j<span class=\"token operator\">+</span><span class=\"token number\">1</span><span class=\"token punctuation\">]</span> <span class=\"token operator\">=</span> S<span class=\"token punctuation\">[</span>j<span class=\"token punctuation\">]</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"9\"></td><td><pre>            j<span class=\"token operator\">--</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"10\"></td><td><pre>        <span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"11\"></td><td><pre>        S<span class=\"token punctuation\">[</span>j<span class=\"token operator\">+</span><span class=\"token number\">1</span><span class=\"token punctuation\">]</span> <span class=\"token operator\">=</span> x<span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"12\"></td><td><pre>    <span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"13\"></td><td><pre><span class=\"token punctuation\">&#125;</span></pre></td></tr></table></figure><p><img data-src=\"https://miro.medium.com/v2/resize:fit:1012/1*JP-wURjwf4k23U2G3GNQDw.gif\" alt=\"\"></p>\n<h2 id=\"selection-sort\"><a class=\"anchor\" href=\"#selection-sort\">#</a> Selection Sort</h2>\n<p>原理是反覆從未排序數列中找出最小值，將它與左邊的數做交換。<br>\n<span class=\"red\">平均時間複雜度為: O (n²)</span></p>\n<figure class=\"highlight c\"><figcaption data-lang=\"c\"><span>PesudoCode</span></figcaption><table><tr><td data-num=\"1\"></td><td><pre><span class=\"token keyword\">void</span> <span class=\"token function\">selectionsort</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">int</span> n<span class=\"token punctuation\">,</span> keytype S<span class=\"token punctuation\">[</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"2\"></td><td><pre>    index i<span class=\"token punctuation\">,</span> j<span class=\"token punctuation\">,</span> smallest<span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"3\"></td><td><pre>    <span class=\"token keyword\">for</span> <span class=\"token punctuation\">(</span>i<span class=\"token operator\">=</span><span class=\"token number\">1</span><span class=\"token punctuation\">;</span> i<span class=\"token operator\">&lt;=</span>n<span class=\"token operator\">-</span><span class=\"token number\">1</span><span class=\"token punctuation\">;</span> i<span class=\"token operator\">++</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"4\"></td><td><pre>        smallest <span class=\"token operator\">=</span> i<span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"5\"></td><td><pre>        <span class=\"token keyword\">for</span> <span class=\"token punctuation\">(</span>j<span class=\"token operator\">=</span>i<span class=\"token operator\">+</span><span class=\"token number\">1</span><span class=\"token punctuation\">;</span> j<span class=\"token operator\">&lt;=</span>n<span class=\"token punctuation\">;</span> j<span class=\"token operator\">++</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"6\"></td><td><pre>            <span class=\"token keyword\">if</span> <span class=\"token punctuation\">(</span>S<span class=\"token punctuation\">[</span>j<span class=\"token punctuation\">]</span> <span class=\"token operator\">&lt;</span> S<span class=\"token punctuation\">[</span>smallest<span class=\"token punctuation\">]</span><span class=\"token punctuation\">)</span> smallest <span class=\"token operator\">=</span> j<span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"7\"></td><td><pre>        <span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"8\"></td><td><pre>        exchange S<span class=\"token punctuation\">[</span>i<span class=\"token punctuation\">]</span> amd S<span class=\"token punctuation\">[</span>smallest<span class=\"token punctuation\">]</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"9\"></td><td><pre>    <span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"10\"></td><td><pre><span class=\"token punctuation\">&#125;</span></pre></td></tr></table></figure><p><img data-src=\"https://www.michaelfxu.com/assets/gifs/sorts/selection-sort.gif\" alt=\"\"></p>\n<h2 id=\"merge-sort\"><a class=\"anchor\" href=\"#merge-sort\">#</a> Merge Sort</h2>\n<p>原理是會先將原始資料分割成兩個資料列，接著再將兩個資料繼續分割成兩個資料列，依此類推，直到無法再分割，也就是每組都只剩下一筆資料時，再兩兩合併各組資料，合併時也會進行該組排序，每次排序都是比較最左邊的資料，將較小的資料加到新的資料列中，依此類推，直到最後合併成一個排序好的資料列為止。</p>\n<h2 id=\"quick-sort\"><a class=\"anchor\" href=\"#quick-sort\">#</a> Quick Sort</h2>\n<p>原理是先從原始資料列中找一個基準值 (Pivot)，接著逐一將資料與基準值比較，小於基準值的資料放在左邊，大於基準值的資料放在右邊，再將兩邊區塊分別再找出基準值，重複前面的步驟，直到排序完為止。</p>\n<figure class=\"highlight c\"><figcaption data-lang=\"c\"><span>PesudoCode</span></figcaption><table><tr><td data-num=\"1\"></td><td><pre><span class=\"token keyword\">void</span> <span class=\"token function\">quicksort</span><span class=\"token punctuation\">(</span>index low<span class=\"token punctuation\">,</span> index high<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"2\"></td><td><pre>    index pivotpoint<span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"3\"></td><td><pre>    <span class=\"token keyword\">if</span> <span class=\"token punctuation\">(</span>high <span class=\"token operator\">></span> low<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"4\"></td><td><pre>        <span class=\"token function\">partition</span><span class=\"token punctuation\">(</span>low<span class=\"token punctuation\">,</span> high<span class=\"token punctuation\">,</span> pivotpoint<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"5\"></td><td><pre>        <span class=\"token function\">quicksort</span><span class=\"token punctuation\">(</span>low<span class=\"token punctuation\">,</span> pivotpoint <span class=\"token operator\">-</span> <span class=\"token number\">1</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"6\"></td><td><pre>        <span class=\"token function\">quicksort</span><span class=\"token punctuation\">(</span>pivotpoint <span class=\"token operator\">+</span> <span class=\"token number\">1</span><span class=\"token punctuation\">,</span> high<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"7\"></td><td><pre>    <span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"8\"></td><td><pre><span class=\"token punctuation\">&#125;</span></pre></td></tr></table></figure><h2 id=\"heap-sort\"><a class=\"anchor\" href=\"#heap-sort\">#</a> Heap Sort</h2>\n<p><strong>操作流程 (最大堆積為例):</strong></p>\n<ol>\n<li>將陣列轉換最大堆積 (Max Heap)</li>\n<li>將 Root 與最後一個節點交換</li>\n<li>將最後一個節點移除</li>\n<li>將剩餘未排序完的節點重複 1~3 步驟，直到所有節點被移除，即完成排序。</li>\n</ol>\n",
            "tags": [
                "Algorithm",
                "Algorithm",
                "Sorting"
            ]
        },
        {
            "id": "https://chienikao.github.io/2023/05/11/Coding/leetcode/Easy/2629%20Function%20Composition/",
            "url": "https://chienikao.github.io/2023/05/11/Coding/leetcode/Easy/2629%20Function%20Composition/",
            "title": "2629. Function Composition",
            "date_published": "2023-05-11T01:51:30.000Z",
            "content_html": "<p>⭐️</p>\n<h2 id=\"題目敘述\"><a class=\"anchor\" href=\"#題目敘述\">#</a> <span class=\"exturl\" data-url=\"aHR0cHM6Ly9sZWV0Y29kZS5jb20vcHJvYmxlbXMvZnVuY3Rpb24tY29tcG9zaXRpb24vZGVzY3JpcHRpb24vP3V0bV9jYW1wYWlnbj1Qb3N0RDcmYW1wO3V0bV9tZWRpdW09UG9zdCZhbXA7dXRtX3NvdXJjZT1Qb3N0JmFtcDtnaW9fbGlua19pZD00UFk3d1pNOQ==\">題目敘述</span></h2>\n<p>Given an array of functions  <code>[f1, f2, f3, ..., fn]</code> , return a new function  <code>fn</code>  that is the <strong>function composition</strong> of the array of functions.</p>\n<p>The <strong>function composition</strong> of  <code>[f(x), g(x), h(x)]</code>  is  <code>fn(x) = f(g(h(x)))</code> .</p>\n<p>The <strong>function composition</strong> of an empty list of functions is the <strong>identity function</strong>  <code>f(x) = x</code> .</p>\n<p>You may assume each function in the array accepts one integer as input and returns one integer as output.</p>\n<h3 id=\"example-1\"><a class=\"anchor\" href=\"#example-1\">#</a> Example 1</h3>\n<blockquote>\n<p><strong>Input</strong>: functions = [x =&gt; x + 1, x =&gt; x * x, x =&gt; 2 * x], x = 4<br>\n<strong>Output</strong>: 65<br>\n<strong>Explanation</strong>:<br>\nEvaluating from right to left …<br>\nStarting with x = 4.<br>\n2 * (4) = 8<br>\n(8) * (8) = 64<br>\n(64) + 1 = 65</p>\n</blockquote>\n<h3 id=\"example-2\"><a class=\"anchor\" href=\"#example-2\">#</a> Example 2</h3>\n<blockquote>\n<p><strong>Input</strong>: functions = [x =&gt; 10 * x, x =&gt; 10 * x, x =&gt; 10 * x], x = 1<br>\n<strong>Output</strong>: 1000<br>\n<strong>Explanation</strong>:<br>\nEvaluating from right to left …<br>\n10 * (1) = 10<br>\n10 * (10) = 100<br>\n10 * (100) = 1000</p>\n</blockquote>\n<h3 id=\"example-3\"><a class=\"anchor\" href=\"#example-3\">#</a> Example 3</h3>\n<blockquote>\n<p><strong>Input</strong>: functions = [], x = 42<br>\n<strong>Output</strong>: 42<br>\n<strong>Explanation</strong>:<br>\nThe composition of zero functions is the identity function</p>\n</blockquote>\n<h2 id=\"solution\"><a class=\"anchor\" href=\"#solution\">#</a> Solution</h2>\n<div class=\"tab\" data-id=\"code\" data-title=\"Javascript\">\n<figure class=\"highlight javascript\"><figcaption data-lang=\"javascript\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre><span class=\"token comment\">/**</pre></td></tr><tr><td data-num=\"2\"></td><td><pre> * @param &#123;Function[]&#125; functions</pre></td></tr><tr><td data-num=\"3\"></td><td><pre> * @return &#123;Function&#125;</pre></td></tr><tr><td data-num=\"4\"></td><td><pre> */</span></pre></td></tr><tr><td data-num=\"5\"></td><td><pre><span class=\"token keyword\">var</span> <span class=\"token function-variable function\">compose</span> <span class=\"token operator\">=</span> <span class=\"token keyword\">function</span><span class=\"token punctuation\">(</span><span class=\"token parameter\">functions</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"6\"></td><td><pre>\t<span class=\"token keyword\">return</span> <span class=\"token keyword\">function</span><span class=\"token punctuation\">(</span><span class=\"token parameter\">x</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"7\"></td><td><pre>        functions<span class=\"token punctuation\">.</span><span class=\"token function\">reverse</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">.</span><span class=\"token function\">forEach</span><span class=\"token punctuation\">(</span><span class=\"token parameter\">fn</span> <span class=\"token operator\">=></span> x <span class=\"token operator\">=</span> <span class=\"token function\">fn</span><span class=\"token punctuation\">(</span>x<span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"8\"></td><td><pre>        <span class=\"token keyword\">return</span> x<span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"9\"></td><td><pre>    <span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"10\"></td><td><pre><span class=\"token punctuation\">&#125;</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"11\"></td><td><pre></pre></td></tr><tr><td data-num=\"12\"></td><td><pre><span class=\"token comment\">/**</pre></td></tr><tr><td data-num=\"13\"></td><td><pre> * const fn = compose([x => x + 1, x => 2 * x])</pre></td></tr><tr><td data-num=\"14\"></td><td><pre> * fn(4) // 9</pre></td></tr><tr><td data-num=\"15\"></td><td><pre> */</span></pre></td></tr></table></figure></div>\n<div class=\"tab\" data-id=\"code\" data-title=\"Typescript\">\n<figure class=\"highlight typescript\"><figcaption data-lang=\"typescript\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre><span class=\"token keyword\">type</span> <span class=\"token class-name\"><span class=\"token constant\">F</span></span> <span class=\"token operator\">=</span> <span class=\"token punctuation\">(</span>x<span class=\"token operator\">:</span> <span class=\"token builtin\">number</span><span class=\"token punctuation\">)</span> <span class=\"token operator\">=></span> <span class=\"token builtin\">number</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"2\"></td><td><pre></pre></td></tr><tr><td data-num=\"3\"></td><td><pre><span class=\"token keyword\">function</span> <span class=\"token function\">compose</span><span class=\"token punctuation\">(</span>functions<span class=\"token operator\">:</span> <span class=\"token constant\">F</span><span class=\"token punctuation\">[</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">)</span><span class=\"token operator\">:</span> <span class=\"token constant\">F</span> <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"4\"></td><td><pre>\t<span class=\"token keyword\">return</span> <span class=\"token keyword\">function</span><span class=\"token punctuation\">(</span>x<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"5\"></td><td><pre>        functions<span class=\"token punctuation\">.</span><span class=\"token function\">reverse</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">.</span><span class=\"token function\">forEach</span><span class=\"token punctuation\">(</span>fn <span class=\"token operator\">=></span> x <span class=\"token operator\">=</span> <span class=\"token function\">fn</span><span class=\"token punctuation\">(</span>x<span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"6\"></td><td><pre>        <span class=\"token keyword\">return</span> x<span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"7\"></td><td><pre>    <span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"8\"></td><td><pre><span class=\"token punctuation\">&#125;</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"9\"></td><td><pre></pre></td></tr><tr><td data-num=\"10\"></td><td><pre><span class=\"token comment\">/**</pre></td></tr><tr><td data-num=\"11\"></td><td><pre> * const fn = compose([x => x + 1, x => 2 * x])</pre></td></tr><tr><td data-num=\"12\"></td><td><pre> * fn(4) // 9</pre></td></tr><tr><td data-num=\"13\"></td><td><pre> */</span></pre></td></tr></table></figure></div>\n",
            "tags": [
                "Coding",
                "Leetcode",
                "Easy",
                "Javascript",
                "Leetcode",
                "Easy",
                "Typescript"
            ]
        },
        {
            "id": "https://chienikao.github.io/2023/05/10/Coding/leetcode/Medium/59%20Spiral%20Matrix%20II/",
            "url": "https://chienikao.github.io/2023/05/10/Coding/leetcode/Medium/59%20Spiral%20Matrix%20II/",
            "title": "59. Spiral Matrix II",
            "date_published": "2023-05-10T14:40:49.000Z",
            "content_html": "<p>⭐️⭐️</p>\n<h2 id=\"題目敘述\"><a class=\"anchor\" href=\"#題目敘述\">#</a> <span class=\"exturl\" data-url=\"aHR0cHM6Ly9sZWV0Y29kZS5jb20vcHJvYmxlbXMvc3BpcmFsLW1hdHJpeC1paS8=\">題目敘述</span></h2>\n<p>Given a positive integer  <code>n</code> , generate an  <code>n x n</code>   <code>matrix</code>  filled with elements from  <code>1</code>  to  <code>n^2</code>  in spiral order.</p>\n<h3 id=\"example-1\"><a class=\"anchor\" href=\"#example-1\">#</a> Example 1</h3>\n<p><img data-src=\"https://imgur.com/rrw0jpY.png\" alt=\"\"></p>\n<blockquote>\n<p><strong>Input:</strong> n = 3<br>\n<strong>Output:</strong> [[1,2,3],[8,9,4],[7,6,5]]</p>\n</blockquote>\n<h3 id=\"example-2\"><a class=\"anchor\" href=\"#example-2\">#</a> Example 2</h3>\n<blockquote>\n<p><strong>Input:</strong> n = 1<br>\n<strong>Output:</strong> [[1]]</p>\n</blockquote>\n<h2 id=\"solution\"><a class=\"anchor\" href=\"#solution\">#</a> Solution</h2>\n<div class=\"tab\" data-id=\"code\" data-title=\"C++\">\n<figure class=\"highlight cpp\"><figcaption data-lang=\"C++\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre><span class=\"token keyword\">class</span> <span class=\"token class-name\">Solution</span> <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"2\"></td><td><pre><span class=\"token keyword\">public</span><span class=\"token operator\">:</span></pre></td></tr><tr><td data-num=\"3\"></td><td><pre>    vector<span class=\"token operator\">&lt;</span>vector<span class=\"token operator\">&lt;</span><span class=\"token keyword\">int</span><span class=\"token operator\">>></span> <span class=\"token function\">generateMatrix</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">int</span> n<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"4\"></td><td><pre>        vector<span class=\"token operator\">&lt;</span>vector<span class=\"token operator\">&lt;</span><span class=\"token keyword\">int</span><span class=\"token operator\">>></span> <span class=\"token function\">res</span><span class=\"token punctuation\">(</span>n<span class=\"token punctuation\">,</span> <span class=\"token generic-function\"><span class=\"token function\">vector</span><span class=\"token generic class-name\"><span class=\"token operator\">&lt;</span><span class=\"token keyword\">int</span><span class=\"token operator\">></span></span></span><span class=\"token punctuation\">(</span>n<span class=\"token punctuation\">,</span> <span class=\"token number\">0</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"5\"></td><td><pre>        <span class=\"token keyword\">int</span> left <span class=\"token operator\">=</span> <span class=\"token number\">0</span><span class=\"token punctuation\">,</span> right <span class=\"token operator\">=</span> n<span class=\"token operator\">-</span><span class=\"token number\">1</span><span class=\"token punctuation\">,</span> up <span class=\"token operator\">=</span> <span class=\"token number\">0</span><span class=\"token punctuation\">,</span> down <span class=\"token operator\">=</span> n<span class=\"token operator\">-</span><span class=\"token number\">1</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"6\"></td><td><pre>        <span class=\"token keyword\">int</span> val <span class=\"token operator\">=</span> <span class=\"token number\">1</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"7\"></td><td><pre>        <span class=\"token keyword\">while</span> <span class=\"token punctuation\">(</span>left <span class=\"token operator\">&lt;=</span> right <span class=\"token operator\">&amp;&amp;</span> up <span class=\"token operator\">&lt;=</span> down<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"8\"></td><td><pre>            <span class=\"token keyword\">for</span> <span class=\"token punctuation\">(</span><span class=\"token keyword\">int</span> j<span class=\"token operator\">=</span>left<span class=\"token punctuation\">;</span> j<span class=\"token operator\">&lt;=</span>right<span class=\"token punctuation\">;</span> j<span class=\"token operator\">++</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"9\"></td><td><pre>                res<span class=\"token punctuation\">[</span>up<span class=\"token punctuation\">]</span><span class=\"token punctuation\">[</span>j<span class=\"token punctuation\">]</span> <span class=\"token operator\">=</span> val<span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"10\"></td><td><pre>                val<span class=\"token operator\">++</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"11\"></td><td><pre>            <span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"12\"></td><td><pre>            up<span class=\"token operator\">++</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"13\"></td><td><pre>            <span class=\"token keyword\">if</span> <span class=\"token punctuation\">(</span>up <span class=\"token operator\">></span> down<span class=\"token punctuation\">)</span> <span class=\"token keyword\">break</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"14\"></td><td><pre></pre></td></tr><tr><td data-num=\"15\"></td><td><pre>            <span class=\"token keyword\">for</span> <span class=\"token punctuation\">(</span><span class=\"token keyword\">int</span> i<span class=\"token operator\">=</span>up<span class=\"token punctuation\">;</span> i<span class=\"token operator\">&lt;=</span>down<span class=\"token punctuation\">;</span> i<span class=\"token operator\">++</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"16\"></td><td><pre>                res<span class=\"token punctuation\">[</span>i<span class=\"token punctuation\">]</span><span class=\"token punctuation\">[</span>right<span class=\"token punctuation\">]</span> <span class=\"token operator\">=</span> val<span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"17\"></td><td><pre>                val<span class=\"token operator\">++</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"18\"></td><td><pre>            <span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"19\"></td><td><pre>            right<span class=\"token operator\">--</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"20\"></td><td><pre>            <span class=\"token keyword\">if</span> <span class=\"token punctuation\">(</span>left <span class=\"token operator\">></span> right<span class=\"token punctuation\">)</span> <span class=\"token keyword\">break</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"21\"></td><td><pre></pre></td></tr><tr><td data-num=\"22\"></td><td><pre>            <span class=\"token keyword\">for</span> <span class=\"token punctuation\">(</span><span class=\"token keyword\">int</span> j<span class=\"token operator\">=</span>right<span class=\"token punctuation\">;</span> j<span class=\"token operator\">>=</span>left<span class=\"token punctuation\">;</span> j<span class=\"token operator\">--</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"23\"></td><td><pre>                res<span class=\"token punctuation\">[</span>down<span class=\"token punctuation\">]</span><span class=\"token punctuation\">[</span>j<span class=\"token punctuation\">]</span> <span class=\"token operator\">=</span> val<span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"24\"></td><td><pre>                val<span class=\"token operator\">++</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"25\"></td><td><pre>            <span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"26\"></td><td><pre>            down<span class=\"token operator\">--</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"27\"></td><td><pre>            <span class=\"token keyword\">if</span> <span class=\"token punctuation\">(</span>up <span class=\"token operator\">></span> down<span class=\"token punctuation\">)</span> <span class=\"token keyword\">break</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"28\"></td><td><pre></pre></td></tr><tr><td data-num=\"29\"></td><td><pre>            <span class=\"token keyword\">for</span> <span class=\"token punctuation\">(</span><span class=\"token keyword\">int</span> i<span class=\"token operator\">=</span>down<span class=\"token punctuation\">;</span> i<span class=\"token operator\">>=</span> up<span class=\"token punctuation\">;</span> i<span class=\"token operator\">--</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"30\"></td><td><pre>                res<span class=\"token punctuation\">[</span>i<span class=\"token punctuation\">]</span><span class=\"token punctuation\">[</span>left<span class=\"token punctuation\">]</span> <span class=\"token operator\">=</span> val<span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"31\"></td><td><pre>                val<span class=\"token operator\">++</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"32\"></td><td><pre>            <span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"33\"></td><td><pre>            left<span class=\"token operator\">++</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"34\"></td><td><pre>            <span class=\"token keyword\">if</span> <span class=\"token punctuation\">(</span>left <span class=\"token operator\">></span> right<span class=\"token punctuation\">)</span> <span class=\"token keyword\">break</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"35\"></td><td><pre>        <span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"36\"></td><td><pre>        <span class=\"token keyword\">return</span> res<span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"37\"></td><td><pre>    <span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"38\"></td><td><pre><span class=\"token punctuation\">&#125;</span><span class=\"token punctuation\">;</span></pre></td></tr></table></figure></div>\n<div class=\"tab\" data-id=\"code\" data-title=\"Java\">\n<figure class=\"highlight java\"><figcaption data-lang=\"java\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre><span class=\"token keyword\">class</span> <span class=\"token class-name\">Solution</span> <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"2\"></td><td><pre>    <span class=\"token keyword\">public</span> <span class=\"token keyword\">int</span><span class=\"token punctuation\">[</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">[</span><span class=\"token punctuation\">]</span> <span class=\"token function\">generateMatrix</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">int</span> n<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"3\"></td><td><pre>        <span class=\"token keyword\">int</span><span class=\"token punctuation\">[</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">[</span><span class=\"token punctuation\">]</span> ans <span class=\"token operator\">=</span> <span class=\"token keyword\">new</span> <span class=\"token keyword\">int</span><span class=\"token punctuation\">[</span>n<span class=\"token punctuation\">]</span><span class=\"token punctuation\">[</span>n<span class=\"token punctuation\">]</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"4\"></td><td><pre>        <span class=\"token keyword\">int</span> count <span class=\"token operator\">=</span> <span class=\"token number\">1</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"5\"></td><td><pre></pre></td></tr><tr><td data-num=\"6\"></td><td><pre>        <span class=\"token keyword\">int</span> left <span class=\"token operator\">=</span> <span class=\"token number\">0</span><span class=\"token punctuation\">,</span> right <span class=\"token operator\">=</span> n <span class=\"token operator\">-</span> <span class=\"token number\">1</span><span class=\"token punctuation\">,</span> top <span class=\"token operator\">=</span> <span class=\"token number\">0</span><span class=\"token punctuation\">,</span> bottom <span class=\"token operator\">=</span> n <span class=\"token operator\">-</span> <span class=\"token number\">1</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"7\"></td><td><pre>        <span class=\"token keyword\">while</span> <span class=\"token punctuation\">(</span>left <span class=\"token operator\">&lt;=</span> right <span class=\"token operator\">&amp;&amp;</span> top <span class=\"token operator\">&lt;=</span> bottom<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"8\"></td><td><pre>            <span class=\"token keyword\">for</span> <span class=\"token punctuation\">(</span><span class=\"token keyword\">int</span> i <span class=\"token operator\">=</span> left<span class=\"token punctuation\">;</span> i <span class=\"token operator\">&lt;=</span> right<span class=\"token punctuation\">;</span> i<span class=\"token operator\">++</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"9\"></td><td><pre>                ans<span class=\"token punctuation\">[</span>top<span class=\"token punctuation\">]</span><span class=\"token punctuation\">[</span>i<span class=\"token punctuation\">]</span> <span class=\"token operator\">=</span> count<span class=\"token operator\">++</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"10\"></td><td><pre>            <span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"11\"></td><td><pre>            top<span class=\"token operator\">++</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"12\"></td><td><pre>            </pre></td></tr><tr><td data-num=\"13\"></td><td><pre>            <span class=\"token keyword\">for</span> <span class=\"token punctuation\">(</span><span class=\"token keyword\">int</span> i <span class=\"token operator\">=</span> top<span class=\"token punctuation\">;</span> i <span class=\"token operator\">&lt;=</span> bottom<span class=\"token punctuation\">;</span> i<span class=\"token operator\">++</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"14\"></td><td><pre>                ans<span class=\"token punctuation\">[</span>i<span class=\"token punctuation\">]</span><span class=\"token punctuation\">[</span>right<span class=\"token punctuation\">]</span> <span class=\"token operator\">=</span> count<span class=\"token operator\">++</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"15\"></td><td><pre>            <span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"16\"></td><td><pre>            right<span class=\"token operator\">--</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"17\"></td><td><pre>            </pre></td></tr><tr><td data-num=\"18\"></td><td><pre>            <span class=\"token keyword\">if</span> <span class=\"token punctuation\">(</span>top <span class=\"token operator\">&lt;=</span> bottom<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"19\"></td><td><pre>                <span class=\"token keyword\">for</span> <span class=\"token punctuation\">(</span><span class=\"token keyword\">int</span> i <span class=\"token operator\">=</span> right<span class=\"token punctuation\">;</span> i <span class=\"token operator\">>=</span> left<span class=\"token punctuation\">;</span> i<span class=\"token operator\">--</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"20\"></td><td><pre>                    ans<span class=\"token punctuation\">[</span>bottom<span class=\"token punctuation\">]</span><span class=\"token punctuation\">[</span>i<span class=\"token punctuation\">]</span> <span class=\"token operator\">=</span> count<span class=\"token operator\">++</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"21\"></td><td><pre>                <span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"22\"></td><td><pre>                bottom<span class=\"token operator\">--</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"23\"></td><td><pre>            <span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"24\"></td><td><pre>            </pre></td></tr><tr><td data-num=\"25\"></td><td><pre>            <span class=\"token keyword\">if</span> <span class=\"token punctuation\">(</span>left <span class=\"token operator\">&lt;=</span> right<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"26\"></td><td><pre>                <span class=\"token keyword\">for</span> <span class=\"token punctuation\">(</span><span class=\"token keyword\">int</span> i <span class=\"token operator\">=</span> bottom<span class=\"token punctuation\">;</span> i <span class=\"token operator\">>=</span> top<span class=\"token punctuation\">;</span> i<span class=\"token operator\">--</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"27\"></td><td><pre>                    ans<span class=\"token punctuation\">[</span>i<span class=\"token punctuation\">]</span><span class=\"token punctuation\">[</span>left<span class=\"token punctuation\">]</span> <span class=\"token operator\">=</span> count<span class=\"token operator\">++</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"28\"></td><td><pre>                <span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"29\"></td><td><pre>                left<span class=\"token operator\">++</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"30\"></td><td><pre>            <span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"31\"></td><td><pre>        <span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"32\"></td><td><pre>        </pre></td></tr><tr><td data-num=\"33\"></td><td><pre>        <span class=\"token keyword\">return</span> ans<span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"34\"></td><td><pre>    <span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"35\"></td><td><pre><span class=\"token punctuation\">&#125;</span></pre></td></tr></table></figure></div>\n<div class=\"tab\" data-id=\"code\" data-title=\"Python\">\n<pre><code class=\"language-python\">\n</code></pre>\n</div>\n",
            "tags": [
                "Coding",
                "Leetcode",
                "Medium",
                "Leetcode",
                "Array",
                "Matrix",
                "Simulation",
                "Medium"
            ]
        },
        {
            "id": "https://chienikao.github.io/2023/05/10/Coding/leetcode/Easy/2626%20Array%20Reduce%20Transformation/",
            "url": "https://chienikao.github.io/2023/05/10/Coding/leetcode/Easy/2626%20Array%20Reduce%20Transformation/",
            "title": "2626. Array Reduce Transformation",
            "date_published": "2023-05-10T14:38:35.000Z",
            "content_html": "<p>⭐️</p>\n<h2 id=\"題目敘述\"><a class=\"anchor\" href=\"#題目敘述\">#</a> <span class=\"exturl\" data-url=\"aHR0cHM6Ly9sZWV0Y29kZS5jb20vcHJvYmxlbXMvYXJyYXktcmVkdWNlLXRyYW5zZm9ybWF0aW9uL2Rlc2NyaXB0aW9uLz91dG1fY2FtcGFpZ249UG9zdEQ2JmFtcDt1dG1fbWVkaXVtPVBvc3QmYW1wO3V0bV9zb3VyY2U9UG9zdCZhbXA7Z2lvX2xpbmtfaWQ9blBONDVqRDk=\">題目敘述</span></h2>\n<p>Given an integer array  <code>nums</code> , a reducer function  <code>fn</code> , and an initial value  <code>init</code> , return a <strong>reduced</strong> array.</p>\n<p>A <strong>reduced</strong> array is created by applying the following operation:  <code>val = fn(init, nums[0])</code> ,  <code>val = fn(val, nums[1])</code> ,  <code>val = fn(val, nums[2])</code> ,  <code>...</code>  until every element in the array has been processed. The final value of  <code>val</code>  is returned.</p>\n<p>If the length of the array is 0, it should return  <code>init</code> .</p>\n<p>Please solve it without using the built-in  <code>Array.reduce</code>  method.</p>\n<h3 id=\"example-1\"><a class=\"anchor\" href=\"#example-1\">#</a> Example 1</h3>\n<blockquote>\n<p><strong>Input</strong>:<br>\nnums = [1,2,3,4]<br>\nfn = function sum(accum, curr) { return accum + curr; }<br>\ninit = 0<br>\n<strong>Output</strong>: 10<br>\n<strong>Explanation</strong>:<br>\ninitially, the value is init=0.<br>\n(0) + nums[0] = 1<br>\n(1) + nums[1] = 3<br>\n(3) + nums[2] = 6<br>\n(6) + nums[3] = 10<br>\nThe final answer is 10.</p>\n</blockquote>\n<h3 id=\"example-2\"><a class=\"anchor\" href=\"#example-2\">#</a> Example 2</h3>\n<blockquote>\n<p><strong>Input</strong>:<br>\nnums = [1,2,3,4]<br>\nfn = function sum(accum, curr) { return accum + curr * curr; }<br>\ninit = 100<br>\n<strong>Output</strong>: 130<br>\n<strong>Explanation</strong>:<br>\ninitially, the value is init=100.<br>\n(100) + nums[0]^2 = 101<br>\n(101) + nums[1]^2 = 105<br>\n(105) + nums[2]^2 = 114<br>\n(114) + nums[3]^2 = 130<br>\nThe final answer is 130.</p>\n</blockquote>\n<h3 id=\"example-3\"><a class=\"anchor\" href=\"#example-3\">#</a> Example 3</h3>\n<blockquote>\n<p><strong>Input</strong>:<br>\nnums = []<br>\nfn = function sum(accum, curr) { return 0; }<br>\ninit = 25<br>\n<strong>Output</strong>: 25<br>\n<strong>Explanation</strong>: For empty arrays, the answer is always init.</p>\n</blockquote>\n<h2 id=\"solution\"><a class=\"anchor\" href=\"#solution\">#</a> Solution</h2>\n<div class=\"tab\" data-id=\"code\" data-title=\"Javascript\">\n<figure class=\"highlight javascript\"><figcaption data-lang=\"javascript\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre><span class=\"token comment\">/**</pre></td></tr><tr><td data-num=\"2\"></td><td><pre> * @param &#123;number[]&#125; nums</pre></td></tr><tr><td data-num=\"3\"></td><td><pre> * @param &#123;Function&#125; fn</pre></td></tr><tr><td data-num=\"4\"></td><td><pre> * @param &#123;number&#125; init</pre></td></tr><tr><td data-num=\"5\"></td><td><pre> * @return &#123;number&#125;</pre></td></tr><tr><td data-num=\"6\"></td><td><pre> */</span></pre></td></tr><tr><td data-num=\"7\"></td><td><pre><span class=\"token keyword\">var</span> <span class=\"token function-variable function\">reduce</span> <span class=\"token operator\">=</span> <span class=\"token keyword\">function</span><span class=\"token punctuation\">(</span><span class=\"token parameter\">nums<span class=\"token punctuation\">,</span> fn<span class=\"token punctuation\">,</span> init</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"8\"></td><td><pre>    nums<span class=\"token punctuation\">.</span><span class=\"token function\">forEach</span><span class=\"token punctuation\">(</span><span class=\"token parameter\">num</span> <span class=\"token operator\">=></span> init <span class=\"token operator\">=</span> <span class=\"token function\">fn</span><span class=\"token punctuation\">(</span>init<span class=\"token punctuation\">,</span> num<span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"9\"></td><td><pre>    <span class=\"token keyword\">return</span> init<span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"10\"></td><td><pre><span class=\"token punctuation\">&#125;</span><span class=\"token punctuation\">;</span></pre></td></tr></table></figure></div>\n<div class=\"tab\" data-id=\"code\" data-title=\"Typescript\">\n<figure class=\"highlight typescript\"><figcaption data-lang=\"typescript\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre><span class=\"token keyword\">type</span> <span class=\"token class-name\">Fn</span> <span class=\"token operator\">=</span> <span class=\"token punctuation\">(</span>accum<span class=\"token operator\">:</span> <span class=\"token builtin\">number</span><span class=\"token punctuation\">,</span> curr<span class=\"token operator\">:</span> <span class=\"token builtin\">number</span><span class=\"token punctuation\">)</span> <span class=\"token operator\">=></span> <span class=\"token builtin\">number</span></pre></td></tr><tr><td data-num=\"2\"></td><td><pre></pre></td></tr><tr><td data-num=\"3\"></td><td><pre><span class=\"token keyword\">function</span> <span class=\"token function\">reduce</span><span class=\"token punctuation\">(</span>nums<span class=\"token operator\">:</span> <span class=\"token builtin\">number</span><span class=\"token punctuation\">[</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">,</span> fn<span class=\"token operator\">:</span> Fn<span class=\"token punctuation\">,</span> init<span class=\"token operator\">:</span> <span class=\"token builtin\">number</span><span class=\"token punctuation\">)</span><span class=\"token operator\">:</span> <span class=\"token builtin\">number</span> <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"4\"></td><td><pre>    nums<span class=\"token punctuation\">.</span><span class=\"token function\">forEach</span><span class=\"token punctuation\">(</span>num <span class=\"token operator\">=></span> init <span class=\"token operator\">=</span> <span class=\"token function\">fn</span><span class=\"token punctuation\">(</span>init<span class=\"token punctuation\">,</span> num<span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"5\"></td><td><pre>    <span class=\"token keyword\">return</span> init<span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"6\"></td><td><pre><span class=\"token punctuation\">&#125;</span><span class=\"token punctuation\">;</span></pre></td></tr></table></figure></div>\n",
            "tags": [
                "Coding",
                "Leetcode",
                "Easy",
                "Javascript",
                "Leetcode",
                "Easy",
                "Typescript"
            ]
        },
        {
            "id": "https://chienikao.github.io/2023/05/09/Coding/leetcode/Medium/54%20Spiral%20Matrix/",
            "url": "https://chienikao.github.io/2023/05/09/Coding/leetcode/Medium/54%20Spiral%20Matrix/",
            "title": "54. Spiral Matrix",
            "date_published": "2023-05-09T02:37:25.000Z",
            "content_html": "<p>⭐️⭐️</p>\n<h2 id=\"題目敘述\"><a class=\"anchor\" href=\"#題目敘述\">#</a> <span class=\"exturl\" data-url=\"aHR0cHM6Ly9sZWV0Y29kZS5jb20vcHJvYmxlbXMvc3BpcmFsLW1hdHJpeC8=\">題目敘述</span></h2>\n<p>Given an  <code>m x n</code>   <code>matrix</code> , return <em>all elements of the  <code>matrix</code>  in spiral order.</em></p>\n<h3 id=\"example-1\"><a class=\"anchor\" href=\"#example-1\">#</a> Example 1</h3>\n<p><img data-src=\"https://hackmd.io/_uploads/rJiuimwNh.png\" alt=\"\"></p>\n<blockquote>\n<p><strong>Input</strong>: matrix = [[1,2,3],[4,5,6],[7,8,9]]<br>\n<strong>Output</strong>: [1,2,3,6,9,8,7,4,5]</p>\n</blockquote>\n<h3 id=\"example-2\"><a class=\"anchor\" href=\"#example-2\">#</a> Example 2</h3>\n<p><img data-src=\"https://hackmd.io/_uploads/rJgtsmDVn.png\" alt=\"\"></p>\n<blockquote>\n<p><strong>Input</strong>: matrix = [[1,2,3,4],[5,6,7,8],[9,10,11,12]]<br>\n<strong>Output</strong>: [1,2,3,4,8,12,11,10,9,5,6,7]</p>\n</blockquote>\n<h2 id=\"solution\"><a class=\"anchor\" href=\"#solution\">#</a> Solution</h2>\n<div class=\"tab\" data-id=\"code\" data-title=\"C++\">\n<figure class=\"highlight cpp\"><figcaption data-lang=\"C++\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre><span class=\"token keyword\">class</span> <span class=\"token class-name\">Solution</span> <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"2\"></td><td><pre><span class=\"token keyword\">public</span><span class=\"token operator\">:</span></pre></td></tr><tr><td data-num=\"3\"></td><td><pre>    vector<span class=\"token operator\">&lt;</span><span class=\"token keyword\">int</span><span class=\"token operator\">></span> <span class=\"token function\">spiralOrder</span><span class=\"token punctuation\">(</span>vector<span class=\"token operator\">&lt;</span>vector<span class=\"token operator\">&lt;</span><span class=\"token keyword\">int</span><span class=\"token operator\">>></span><span class=\"token operator\">&amp;</span> matrix<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"4\"></td><td><pre>        vector<span class=\"token operator\">&lt;</span><span class=\"token keyword\">int</span><span class=\"token operator\">></span> res<span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"5\"></td><td><pre>        <span class=\"token keyword\">int</span> m <span class=\"token operator\">=</span> matrix<span class=\"token punctuation\">.</span><span class=\"token function\">size</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token operator\">-</span><span class=\"token number\">1</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"6\"></td><td><pre>        <span class=\"token keyword\">int</span> n <span class=\"token operator\">=</span> matrix<span class=\"token punctuation\">[</span><span class=\"token number\">0</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">.</span><span class=\"token function\">size</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token operator\">-</span><span class=\"token number\">1</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"7\"></td><td><pre></pre></td></tr><tr><td data-num=\"8\"></td><td><pre>        <span class=\"token keyword\">int</span> left <span class=\"token operator\">=</span> <span class=\"token number\">0</span><span class=\"token punctuation\">,</span> right <span class=\"token operator\">=</span> n<span class=\"token punctuation\">,</span> up <span class=\"token operator\">=</span> <span class=\"token number\">0</span><span class=\"token punctuation\">,</span> down <span class=\"token operator\">=</span> m<span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"9\"></td><td><pre>        <span class=\"token keyword\">while</span> <span class=\"token punctuation\">(</span>left <span class=\"token operator\">&lt;=</span> right <span class=\"token operator\">&amp;&amp;</span> up <span class=\"token operator\">&lt;=</span> down<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"10\"></td><td><pre>            <span class=\"token keyword\">for</span> <span class=\"token punctuation\">(</span><span class=\"token keyword\">int</span> j<span class=\"token operator\">=</span>left<span class=\"token punctuation\">;</span> j<span class=\"token operator\">&lt;=</span>right<span class=\"token punctuation\">;</span> j<span class=\"token operator\">++</span><span class=\"token punctuation\">)</span> res<span class=\"token punctuation\">.</span><span class=\"token function\">push_back</span><span class=\"token punctuation\">(</span>matrix<span class=\"token punctuation\">[</span>up<span class=\"token punctuation\">]</span><span class=\"token punctuation\">[</span>j<span class=\"token punctuation\">]</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"11\"></td><td><pre>            up<span class=\"token operator\">++</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"12\"></td><td><pre>            <span class=\"token keyword\">if</span> <span class=\"token punctuation\">(</span>up <span class=\"token operator\">></span> down<span class=\"token punctuation\">)</span> <span class=\"token keyword\">break</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"13\"></td><td><pre></pre></td></tr><tr><td data-num=\"14\"></td><td><pre>            <span class=\"token keyword\">for</span> <span class=\"token punctuation\">(</span><span class=\"token keyword\">int</span> i<span class=\"token operator\">=</span>up<span class=\"token punctuation\">;</span> i<span class=\"token operator\">&lt;=</span>down<span class=\"token punctuation\">;</span> i<span class=\"token operator\">++</span><span class=\"token punctuation\">)</span> res<span class=\"token punctuation\">.</span><span class=\"token function\">push_back</span><span class=\"token punctuation\">(</span>matrix<span class=\"token punctuation\">[</span>i<span class=\"token punctuation\">]</span><span class=\"token punctuation\">[</span>right<span class=\"token punctuation\">]</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"15\"></td><td><pre>            right<span class=\"token operator\">--</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"16\"></td><td><pre>            <span class=\"token keyword\">if</span> <span class=\"token punctuation\">(</span>left <span class=\"token operator\">></span> right<span class=\"token punctuation\">)</span> <span class=\"token keyword\">break</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"17\"></td><td><pre></pre></td></tr><tr><td data-num=\"18\"></td><td><pre>            <span class=\"token keyword\">for</span> <span class=\"token punctuation\">(</span><span class=\"token keyword\">int</span> j<span class=\"token operator\">=</span>right<span class=\"token punctuation\">;</span> j<span class=\"token operator\">>=</span>left<span class=\"token punctuation\">;</span> j<span class=\"token operator\">--</span><span class=\"token punctuation\">)</span> res<span class=\"token punctuation\">.</span><span class=\"token function\">push_back</span><span class=\"token punctuation\">(</span>matrix<span class=\"token punctuation\">[</span>down<span class=\"token punctuation\">]</span><span class=\"token punctuation\">[</span>j<span class=\"token punctuation\">]</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"19\"></td><td><pre>            down<span class=\"token operator\">--</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"20\"></td><td><pre>            <span class=\"token keyword\">if</span> <span class=\"token punctuation\">(</span>up <span class=\"token operator\">></span> down<span class=\"token punctuation\">)</span> <span class=\"token keyword\">break</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"21\"></td><td><pre></pre></td></tr><tr><td data-num=\"22\"></td><td><pre>            <span class=\"token keyword\">for</span> <span class=\"token punctuation\">(</span><span class=\"token keyword\">int</span> i<span class=\"token operator\">=</span>down<span class=\"token punctuation\">;</span> i<span class=\"token operator\">>=</span>up<span class=\"token punctuation\">;</span> i<span class=\"token operator\">--</span><span class=\"token punctuation\">)</span> res<span class=\"token punctuation\">.</span><span class=\"token function\">push_back</span><span class=\"token punctuation\">(</span>matrix<span class=\"token punctuation\">[</span>i<span class=\"token punctuation\">]</span><span class=\"token punctuation\">[</span>left<span class=\"token punctuation\">]</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"23\"></td><td><pre>            left<span class=\"token operator\">++</span><span class=\"token punctuation\">;</span>  </pre></td></tr><tr><td data-num=\"24\"></td><td><pre>            <span class=\"token keyword\">if</span> <span class=\"token punctuation\">(</span>left <span class=\"token operator\">></span> right<span class=\"token punctuation\">)</span> <span class=\"token keyword\">break</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"25\"></td><td><pre>        <span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"26\"></td><td><pre>        <span class=\"token keyword\">return</span> res<span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"27\"></td><td><pre>    <span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"28\"></td><td><pre><span class=\"token punctuation\">&#125;</span><span class=\"token punctuation\">;</span></pre></td></tr></table></figure></div>\n<div class=\"tab\" data-id=\"code\" data-title=\"Java\">\n<pre><code class=\"language-java\">\n</code></pre>\n</div>\n<div class=\"tab\" data-id=\"code\" data-title=\"Python\">\n<pre><code class=\"language-python\">\n</code></pre>\n</div>\n",
            "tags": [
                "Coding",
                "Leetcode",
                "Medium",
                "Leetcode",
                "Array",
                "Matrix",
                "Simulation",
                "Medium"
            ]
        },
        {
            "id": "https://chienikao.github.io/2023/05/09/Coding/leetcode/Easy/2634%20Filter%20Elements%20from%20Array/",
            "url": "https://chienikao.github.io/2023/05/09/Coding/leetcode/Easy/2634%20Filter%20Elements%20from%20Array/",
            "title": "2634. Filter Elements from Array",
            "date_published": "2023-05-09T02:05:43.000Z",
            "content_html": "<p>⭐️</p>\n<h2 id=\"題目敘述\"><a class=\"anchor\" href=\"#題目敘述\">#</a> <span class=\"exturl\" data-url=\"aHR0cHM6Ly9sZWV0Y29kZS5jb20vcHJvYmxlbXMvZmlsdGVyLWVsZW1lbnRzLWZyb20tYXJyYXkvZGVzY3JpcHRpb24vP3V0bV9jYW1wYWlnbj1Qb3N0RDUmYW1wO3V0bV9tZWRpdW09UG9zdCZhbXA7dXRtX3NvdXJjZT1Qb3N0JmFtcDtnaW9fbGlua19pZD1hOWE1VlpyOQ==\">題目敘述</span></h2>\n<p>Given an integer array  <code>arr</code>  and a filtering function  <code>fn</code> , return a new array with a fewer or equal number of elements.</p>\n<p>The returned array should only contain elements where  <code>fn(arr[i], i)</code>  evaluated to a truthy value.</p>\n<p>Please solve it without the built-in  <code>Array.filter</code>  method.</p>\n<h3 id=\"example-1\"><a class=\"anchor\" href=\"#example-1\">#</a> Example 1</h3>\n<blockquote>\n<p><strong>Input</strong>: arr = [0,10,20,30], fn = function greaterThan10(n) { return n &gt; 10; }<br>\n<strong>Output</strong>: [20,30]<br>\n<strong>Explanation</strong>:<br>\nconst newArray = filter(arr, fn); // [20, 30]<br>\nThe function filters out values that are not greater than 10</p>\n</blockquote>\n<h3 id=\"example-2\"><a class=\"anchor\" href=\"#example-2\">#</a> Example 2</h3>\n<blockquote>\n<p><strong>Input</strong>: arr = [1,2,3], fn = function firstIndex(n, i) { return i === 0; }<br>\n<strong>Output</strong>: [1]<br>\n<strong>Explanation</strong>:<br>\nfn can also accept the index of each element<br>\nIn this case, the function removes elements not at index 0</p>\n</blockquote>\n<h3 id=\"example-3\"><a class=\"anchor\" href=\"#example-3\">#</a> Example 3</h3>\n<blockquote>\n<p><strong>Input</strong>: arr = [-2,-1,0,1,2], fn = function plusOne(n) { return n + 1 }<br>\n<strong>Output</strong>: [-2,0,1,2]<br>\n<strong>Explanation</strong>:<br>\nFalsey values such as 0 should be filtered out</p>\n</blockquote>\n<h2 id=\"solution\"><a class=\"anchor\" href=\"#solution\">#</a> Solution</h2>\n<div class=\"tab\" data-id=\"code\" data-title=\"Javascript\">\n<figure class=\"highlight javascript\"><figcaption data-lang=\"javascript\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre><span class=\"token comment\">/**</pre></td></tr><tr><td data-num=\"2\"></td><td><pre> * @param &#123;number[]&#125; arr</pre></td></tr><tr><td data-num=\"3\"></td><td><pre> * @param &#123;Function&#125; fn</pre></td></tr><tr><td data-num=\"4\"></td><td><pre> * @return &#123;number[]&#125;</pre></td></tr><tr><td data-num=\"5\"></td><td><pre> */</span></pre></td></tr><tr><td data-num=\"6\"></td><td><pre><span class=\"token keyword\">var</span> <span class=\"token function-variable function\">filter</span> <span class=\"token operator\">=</span> <span class=\"token keyword\">function</span><span class=\"token punctuation\">(</span><span class=\"token parameter\">arr<span class=\"token punctuation\">,</span> fn</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"7\"></td><td><pre>    <span class=\"token keyword\">const</span> res <span class=\"token operator\">=</span> <span class=\"token punctuation\">[</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"8\"></td><td><pre>    <span class=\"token keyword\">for</span> <span class=\"token punctuation\">(</span><span class=\"token keyword\">let</span> i<span class=\"token operator\">=</span><span class=\"token number\">0</span><span class=\"token punctuation\">;</span> i<span class=\"token operator\">&lt;</span>arr<span class=\"token punctuation\">.</span>length<span class=\"token punctuation\">;</span> i<span class=\"token operator\">++</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"9\"></td><td><pre>        <span class=\"token keyword\">if</span> <span class=\"token punctuation\">(</span><span class=\"token function\">fn</span><span class=\"token punctuation\">(</span>arr<span class=\"token punctuation\">[</span>i<span class=\"token punctuation\">]</span><span class=\"token punctuation\">,</span> i<span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span> res<span class=\"token punctuation\">.</span><span class=\"token function\">push</span><span class=\"token punctuation\">(</span>arr<span class=\"token punctuation\">[</span>i<span class=\"token punctuation\">]</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"10\"></td><td><pre>    <span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"11\"></td><td><pre>    <span class=\"token keyword\">return</span> res<span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"12\"></td><td><pre><span class=\"token punctuation\">&#125;</span><span class=\"token punctuation\">;</span></pre></td></tr></table></figure></div>\n<div class=\"tab\" data-id=\"code\" data-title=\"Typescript\">\n<pre><code class=\"language-Typescript\">function filter(arr: number[], fn: (n: number, i: number) =&gt; any): number[] &#123;\n    const res = [];\n    for (let i=0; i&lt;arr.length; i++) &#123;\n        if (fn(arr[i], i)) res.push(arr[i]);\n    &#125;\n    return res;\n&#125;;\n</code></pre>\n</div>\n",
            "tags": [
                "Coding",
                "Leetcode",
                "Easy",
                "Javascript",
                "Leetcode",
                "Easy",
                "Typescript"
            ]
        }
    ]
}