{
    "version": "https://jsonfeed.org/version/1",
    "title": "Nothing is true, everything is permitted",
    "subtitle": "",
    "icon": "https://chienikao.github.io/images/favicon.ico",
    "description": "This is a note blog",
    "home_page_url": "https://chienikao.github.io",
    "items": [
        {
            "id": "https://chienikao.github.io/2023/05/08/Coding/leetcode/Easy/2635%20Apply%20Transform%20Over%20Each%20Element%20in%20Array/",
            "url": "https://chienikao.github.io/2023/05/08/Coding/leetcode/Easy/2635%20Apply%20Transform%20Over%20Each%20Element%20in%20Array/",
            "title": "2635. Apply Transform Over Each Element in Array",
            "date_published": "2023-05-08T02:08:30.000Z",
            "content_html": "<p>⭐️</p>\n<h2 id=\"題目敘述\"><a class=\"anchor\" href=\"#題目敘述\">#</a> <span class=\"exturl\" data-url=\"aHR0cHM6Ly9sZWV0Y29kZS5jb20vcHJvYmxlbXMvYXBwbHktdHJhbnNmb3JtLW92ZXItZWFjaC1lbGVtZW50LWluLWFycmF5Lz91dG1fY2FtcGFpZ249UG9zdEQ0JmFtcDt1dG1fbWVkaXVtPVBvc3QmYW1wO3V0bV9zb3VyY2U9UG9zdCZhbXA7Z2lvX2xpbmtfaWQ9bm9xYk5Pdjk=\">題目敘述</span></h2>\n<p>Given an integer array  <code>arr</code>  and a mapping function  <code>fn</code> , return a new array with a transformation applied to each element.</p>\n<p>The returned array should be created such that  <code>returnedArray[i] = fn(arr[i], i)</code> .</p>\n<p>Please solve it without the built-in  <code>Array.map</code>  method.</p>\n<h3 id=\"example-1\"><a class=\"anchor\" href=\"#example-1\">#</a> Example 1</h3>\n<blockquote>\n<p><strong>Input:</strong> arr = [1,2,3], fn = function plusone(n) { return n + 1; }<br>\n<strong>Output:</strong> [2,3,4]<br>\n<strong>Explanation:</strong><br>\nconst newArray = map(arr, plusone); // [2,3,4]<br>\nThe function increases each value in the array by one.</p>\n</blockquote>\n<h3 id=\"example-2\"><a class=\"anchor\" href=\"#example-2\">#</a> Example 2</h3>\n<blockquote>\n<p><strong>Input:</strong> arr = [1,2,3], fn = function plusI(n, i) { return n + i; }<br>\n<strong>Output:</strong> [1,3,5]<br>\n<strong>Explanation:</strong> The function increases each value by the index it resides in.</p>\n</blockquote>\n<h3 id=\"example-3\"><a class=\"anchor\" href=\"#example-3\">#</a> Example 3</h3>\n<blockquote>\n<p><strong>Input:</strong> arr = [10,20,30], fn = function constant() { return 42; }<br>\n<strong>Output:</strong> [42,42,42]<br>\n<strong>Explanation:</strong> The function always returns 42.</p>\n</blockquote>\n<h2 id=\"solution\"><a class=\"anchor\" href=\"#solution\">#</a> Solution</h2>\n<div class=\"tab\" data-id=\"code\" data-title=\"Javascript\">\n<figure class=\"highlight javascript\"><figcaption data-lang=\"javascript\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre><span class=\"token comment\">/**</pre></td></tr><tr><td data-num=\"2\"></td><td><pre> * @param &#123;number[]&#125; arr</pre></td></tr><tr><td data-num=\"3\"></td><td><pre> * @param &#123;Function&#125; fn</pre></td></tr><tr><td data-num=\"4\"></td><td><pre> * @return &#123;number[]&#125;</pre></td></tr><tr><td data-num=\"5\"></td><td><pre> */</span></pre></td></tr><tr><td data-num=\"6\"></td><td><pre><span class=\"token keyword\">var</span> <span class=\"token function-variable function\">map</span> <span class=\"token operator\">=</span> <span class=\"token keyword\">function</span><span class=\"token punctuation\">(</span><span class=\"token parameter\">arr<span class=\"token punctuation\">,</span> fn</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"7\"></td><td><pre>    <span class=\"token keyword\">return</span> arr<span class=\"token punctuation\">.</span><span class=\"token function\">map</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">(</span><span class=\"token parameter\">val<span class=\"token punctuation\">,</span> idx</span><span class=\"token punctuation\">)</span> <span class=\"token operator\">=></span> val <span class=\"token operator\">=</span> <span class=\"token function\">fn</span><span class=\"token punctuation\">(</span>val<span class=\"token punctuation\">,</span> idx<span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"8\"></td><td><pre><span class=\"token punctuation\">&#125;</span><span class=\"token punctuation\">;</span></pre></td></tr></table></figure></div>\n<div class=\"tab\" data-id=\"code\" data-title=\"Typescript\">\n<figure class=\"highlight typescript\"><figcaption data-lang=\"typescript\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre><span class=\"token keyword\">function</span> <span class=\"token function\">map</span><span class=\"token punctuation\">(</span>arr<span class=\"token operator\">:</span> <span class=\"token builtin\">number</span><span class=\"token punctuation\">[</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">,</span> <span class=\"token function-variable function\">fn</span><span class=\"token operator\">:</span> <span class=\"token punctuation\">(</span>n<span class=\"token operator\">:</span> <span class=\"token builtin\">number</span><span class=\"token punctuation\">,</span> i<span class=\"token operator\">:</span> <span class=\"token builtin\">number</span><span class=\"token punctuation\">)</span> <span class=\"token operator\">=></span> <span class=\"token builtin\">number</span><span class=\"token punctuation\">)</span><span class=\"token operator\">:</span> <span class=\"token builtin\">number</span><span class=\"token punctuation\">[</span><span class=\"token punctuation\">]</span> <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"2\"></td><td><pre>    <span class=\"token keyword\">return</span> arr<span class=\"token punctuation\">.</span><span class=\"token function\">map</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">(</span>val<span class=\"token operator\">:</span> <span class=\"token builtin\">number</span><span class=\"token punctuation\">,</span> idx<span class=\"token operator\">:</span> <span class=\"token builtin\">number</span><span class=\"token punctuation\">)</span> <span class=\"token operator\">=></span> val <span class=\"token operator\">=</span> <span class=\"token function\">fn</span><span class=\"token punctuation\">(</span>val<span class=\"token punctuation\">,</span> idx<span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"3\"></td><td><pre><span class=\"token punctuation\">&#125;</span><span class=\"token punctuation\">;</span></pre></td></tr></table></figure></div>\n",
            "tags": [
                "Coding",
                "Leetcode",
                "Easy",
                "Leetcode",
                "Easy",
                "Javascript",
                "Typescript"
            ]
        },
        {
            "id": "https://chienikao.github.io/2023/05/08/Coding/leetcode/Easy/1572%20Matrix%20Diagonal%20Sum/",
            "url": "https://chienikao.github.io/2023/05/08/Coding/leetcode/Easy/1572%20Matrix%20Diagonal%20Sum/",
            "title": "1572. Matrix Diagonal Sum",
            "date_published": "2023-05-08T01:46:44.000Z",
            "content_html": "<p>⭐️</p>\n<h2 id=\"題目敘述\"><a class=\"anchor\" href=\"#題目敘述\">#</a> <span class=\"exturl\" data-url=\"aHR0cHM6Ly9sZWV0Y29kZS5jb20vcHJvYmxlbXMvbWF0cml4LWRpYWdvbmFsLXN1bS8=\">題目敘述</span></h2>\n<p>Given a square matrix  <code>mat</code> , return the sum of the matrix diagonals.</p>\n<p>Only include the sum of all the elements on the primary diagonal and all the elements on the secondary diagonal that are not part of the primary diagonal.</p>\n<h3 id=\"example-1\"><a class=\"anchor\" href=\"#example-1\">#</a> Example 1</h3>\n<p><img data-src=\"https://hackmd.io/_uploads/rJ0RgRHVh.png\" alt=\"\"></p>\n<blockquote>\n<p><strong>Input:</strong> mat =<br>\n[[<strong>1</strong>,2,<strong>3</strong>],<br>\n[4,<strong>5</strong>,6],<br>\n[<strong>7</strong>,8,<strong>9</strong>]]<br>\n<strong>Output:</strong> 25<br>\n<strong>Explanation:</strong> Diagonals sum: 1 + 5 + 9 + 3 + 7 = 25<br>\nNotice that element mat[1][1] = 5 is counted only once.</p>\n</blockquote>\n<h3 id=\"example-2\"><a class=\"anchor\" href=\"#example-2\">#</a> Example 2</h3>\n<blockquote>\n<p><strong>Input:</strong> mat =<br>\n[[<strong>1</strong>,1,1,<strong>1</strong>],<br>\n[1,<strong>1</strong>,<strong>1</strong>,1],<br>\n[1,<strong>1</strong>,<strong>1</strong>,1],<br>\n[<strong>1</strong>,1,1,<strong>1</strong>]]<br>\n<strong>Output:</strong> 8</p>\n</blockquote>\n<h3 id=\"example-3\"><a class=\"anchor\" href=\"#example-3\">#</a> Example 3</h3>\n<blockquote>\n<p><strong>Input:</strong> mat = [[<strong>5</strong>]]<br>\n<strong>Output:</strong> 5</p>\n</blockquote>\n<h2 id=\"solution\"><a class=\"anchor\" href=\"#solution\">#</a> Solution</h2>\n<div class=\"tab\" data-id=\"code\" data-title=\"C++\">\n<figure class=\"highlight cpp\"><figcaption data-lang=\"C++\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre><span class=\"token keyword\">class</span> <span class=\"token class-name\">Solution</span> <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"2\"></td><td><pre><span class=\"token keyword\">public</span><span class=\"token operator\">:</span></pre></td></tr><tr><td data-num=\"3\"></td><td><pre>    <span class=\"token keyword\">int</span> <span class=\"token function\">diagonalSum</span><span class=\"token punctuation\">(</span>vector<span class=\"token operator\">&lt;</span>vector<span class=\"token operator\">&lt;</span><span class=\"token keyword\">int</span><span class=\"token operator\">>></span><span class=\"token operator\">&amp;</span> mat<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"4\"></td><td><pre>        <span class=\"token keyword\">int</span> res <span class=\"token operator\">=</span> <span class=\"token number\">0</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"5\"></td><td><pre>        <span class=\"token keyword\">int</span> n <span class=\"token operator\">=</span> mat<span class=\"token punctuation\">.</span><span class=\"token function\">size</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"6\"></td><td><pre>        <span class=\"token keyword\">for</span> <span class=\"token punctuation\">(</span><span class=\"token keyword\">int</span> i<span class=\"token operator\">=</span><span class=\"token number\">0</span><span class=\"token punctuation\">;</span> i<span class=\"token operator\">&lt;</span>n<span class=\"token punctuation\">;</span> i<span class=\"token operator\">++</span><span class=\"token punctuation\">)</span> res <span class=\"token operator\">+=</span> mat<span class=\"token punctuation\">[</span>i<span class=\"token punctuation\">]</span><span class=\"token punctuation\">[</span>i<span class=\"token punctuation\">]</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"7\"></td><td><pre>        <span class=\"token keyword\">for</span> <span class=\"token punctuation\">(</span><span class=\"token keyword\">int</span> i<span class=\"token operator\">=</span>n<span class=\"token operator\">-</span><span class=\"token number\">1</span><span class=\"token punctuation\">;</span> i<span class=\"token operator\">>=</span><span class=\"token number\">0</span><span class=\"token punctuation\">;</span> i<span class=\"token operator\">--</span><span class=\"token punctuation\">)</span> res <span class=\"token operator\">+=</span> mat<span class=\"token punctuation\">[</span>i<span class=\"token punctuation\">]</span><span class=\"token punctuation\">[</span>n<span class=\"token operator\">-</span><span class=\"token number\">1</span><span class=\"token operator\">-</span>i<span class=\"token punctuation\">]</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"8\"></td><td><pre>        <span class=\"token keyword\">if</span> <span class=\"token punctuation\">(</span>n <span class=\"token operator\">%</span> <span class=\"token number\">2</span><span class=\"token punctuation\">)</span> <span class=\"token keyword\">return</span> res <span class=\"token operator\">-</span> mat<span class=\"token punctuation\">[</span>n<span class=\"token operator\">/</span><span class=\"token number\">2</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">[</span>n<span class=\"token operator\">/</span><span class=\"token number\">2</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"9\"></td><td><pre>        <span class=\"token keyword\">else</span> <span class=\"token keyword\">return</span> res<span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"10\"></td><td><pre>    <span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"11\"></td><td><pre><span class=\"token punctuation\">&#125;</span><span class=\"token punctuation\">;</span></pre></td></tr></table></figure></div>\n<div class=\"tab\" data-id=\"code\" data-title=\"Java\">\n<pre><code class=\"language-java\">\n</code></pre>\n</div>\n<div class=\"tab\" data-id=\"code\" data-title=\"Python\">\n<figure class=\"highlight python\"><figcaption data-lang=\"python\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre><span class=\"token keyword\">class</span> <span class=\"token class-name\">Solution</span><span class=\"token punctuation\">:</span></pre></td></tr><tr><td data-num=\"2\"></td><td><pre>    <span class=\"token keyword\">def</span> <span class=\"token function\">diagonalSum</span><span class=\"token punctuation\">(</span>self<span class=\"token punctuation\">,</span> mat<span class=\"token punctuation\">:</span> List<span class=\"token punctuation\">[</span>List<span class=\"token punctuation\">[</span><span class=\"token builtin\">int</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">)</span> <span class=\"token operator\">-</span><span class=\"token operator\">></span> <span class=\"token builtin\">int</span><span class=\"token punctuation\">:</span></pre></td></tr><tr><td data-num=\"3\"></td><td><pre>        n <span class=\"token operator\">=</span> <span class=\"token builtin\">len</span><span class=\"token punctuation\">(</span>mat<span class=\"token punctuation\">)</span></pre></td></tr><tr><td data-num=\"4\"></td><td><pre>        res <span class=\"token operator\">=</span> <span class=\"token number\">0</span></pre></td></tr><tr><td data-num=\"5\"></td><td><pre>        <span class=\"token keyword\">for</span> i <span class=\"token keyword\">in</span> <span class=\"token builtin\">range</span><span class=\"token punctuation\">(</span><span class=\"token number\">0</span><span class=\"token punctuation\">,</span> n<span class=\"token punctuation\">)</span><span class=\"token punctuation\">:</span> res <span class=\"token operator\">+=</span> mat<span class=\"token punctuation\">[</span>i<span class=\"token punctuation\">]</span><span class=\"token punctuation\">[</span>i<span class=\"token punctuation\">]</span></pre></td></tr><tr><td data-num=\"6\"></td><td><pre>        <span class=\"token keyword\">for</span> i <span class=\"token keyword\">in</span> <span class=\"token builtin\">range</span><span class=\"token punctuation\">(</span>n<span class=\"token operator\">-</span><span class=\"token number\">1</span><span class=\"token punctuation\">,</span> <span class=\"token operator\">-</span><span class=\"token number\">1</span><span class=\"token punctuation\">,</span> <span class=\"token operator\">-</span><span class=\"token number\">1</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">:</span> res <span class=\"token operator\">+=</span> mat<span class=\"token punctuation\">[</span>i<span class=\"token punctuation\">]</span><span class=\"token punctuation\">[</span>n<span class=\"token operator\">-</span><span class=\"token number\">1</span><span class=\"token operator\">-</span>i<span class=\"token punctuation\">]</span></pre></td></tr><tr><td data-num=\"7\"></td><td><pre>        <span class=\"token keyword\">if</span> n <span class=\"token operator\">%</span> <span class=\"token number\">2</span> <span class=\"token operator\">==</span> <span class=\"token number\">1</span><span class=\"token punctuation\">:</span> <span class=\"token keyword\">return</span> res <span class=\"token operator\">-</span> mat<span class=\"token punctuation\">[</span>n<span class=\"token operator\">//</span><span class=\"token number\">2</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">[</span>n<span class=\"token operator\">//</span><span class=\"token number\">2</span><span class=\"token punctuation\">]</span> </pre></td></tr><tr><td data-num=\"8\"></td><td><pre>        <span class=\"token keyword\">else</span><span class=\"token punctuation\">:</span> <span class=\"token keyword\">return</span> res</pre></td></tr></table></figure></div>\n",
            "tags": [
                "Coding",
                "Leetcode",
                "Easy",
                "Leetcode",
                "Easy",
                "Array",
                "Matrix"
            ]
        },
        {
            "id": "https://chienikao.github.io/2023/05/07/Coding/leetcode/Easy/2665%20Counter%20II/",
            "url": "https://chienikao.github.io/2023/05/07/Coding/leetcode/Easy/2665%20Counter%20II/",
            "title": "2665. Counter II",
            "date_published": "2023-05-07T12:27:35.000Z",
            "content_html": "<p>⭐️</p>\n<h2 id=\"題目敘述\"><a class=\"anchor\" href=\"#題目敘述\">#</a> <span class=\"exturl\" data-url=\"aHR0cHM6Ly9sZWV0Y29kZS5jb20vcHJvYmxlbXMvY291bnRlci1paS9kZXNjcmlwdGlvbi8/dXRtX2NhbXBhaWduPVBvc3REMyZhbXA7dXRtX21lZGl1bT1Qb3N0JmFtcDt1dG1fc291cmNlPVBvc3QmYW1wO2dpb19saW5rX2lkPXhSeFZZT1hv\">題目敘述</span></h2>\n<p>Write a function  <code>createCounter</code> . It should accept an initial integer  <code>init</code> . It should return an object with three functions.</p>\n<p>The three functions are:</p>\n<ul>\n<li><code>increment()</code>  increases the current value by 1 and then returns it.</li>\n<li><code>decrement()</code>  reduces the current value by 1 and then returns it.</li>\n<li><code>reset()</code>  sets the current value to  <code>init</code>  and then returns it.</li>\n</ul>\n<h3 id=\"example-1\"><a class=\"anchor\" href=\"#example-1\">#</a> Example 1</h3>\n<blockquote>\n<p><strong>Input</strong>: init = 5, calls = [“increment”,“reset”,“decrement”]<br>\n<strong>Output</strong>: [6,5,4]<br>\n<strong>Explanation</strong>:<br>\nconst counter = createCounter(5);<br>\ncounter.increment(); // 6<br>\ncounter.reset(); // 5<br>\ncounter.decrement(); // 4</p>\n</blockquote>\n<h3 id=\"example-2\"><a class=\"anchor\" href=\"#example-2\">#</a> Example 2</h3>\n<blockquote>\n<p><strong>Input</strong>: init = 0, calls = [“increment”,“increment”,“decrement”,“reset”,“reset”]<br>\n<strong>Output</strong>: [1,2,1,0,0]<br>\n<strong>Explanation</strong>:<br>\nconst counter = createCounter(0);<br>\ncounter.increment(); // 1<br>\ncounter.increment(); // 2<br>\ncounter.decrement(); // 1<br>\ncounter.reset(); // 0<br>\ncounter.reset(); // 0</p>\n</blockquote>\n<h2 id=\"solution\"><a class=\"anchor\" href=\"#solution\">#</a> Solution</h2>\n<div class=\"tab\" data-id=\"code\" data-title=\"Javascript\">\n<figure class=\"highlight javascript\"><figcaption data-lang=\"javascript\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre><span class=\"token comment\">/**</pre></td></tr><tr><td data-num=\"2\"></td><td><pre> * @param &#123;integer&#125; init</pre></td></tr><tr><td data-num=\"3\"></td><td><pre> * @return &#123; increment: Function, decrement: Function, reset: Function &#125;</pre></td></tr><tr><td data-num=\"4\"></td><td><pre> */</span></pre></td></tr><tr><td data-num=\"5\"></td><td><pre><span class=\"token keyword\">var</span> <span class=\"token function-variable function\">createCounter</span> <span class=\"token operator\">=</span> <span class=\"token keyword\">function</span><span class=\"token punctuation\">(</span><span class=\"token parameter\">init</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"6\"></td><td><pre>    <span class=\"token keyword\">let</span> tmp <span class=\"token operator\">=</span> init<span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"7\"></td><td><pre>    <span class=\"token function-variable function\">increment</span> <span class=\"token operator\">=</span> <span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token operator\">=></span> <span class=\"token operator\">++</span>tmp<span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"8\"></td><td><pre>    <span class=\"token function-variable function\">decrement</span> <span class=\"token operator\">=</span> <span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token operator\">=></span> <span class=\"token operator\">--</span>tmp<span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"9\"></td><td><pre>    <span class=\"token function-variable function\">reset</span> <span class=\"token operator\">=</span> <span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token operator\">=></span> tmp <span class=\"token operator\">=</span> init<span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"10\"></td><td><pre>    <span class=\"token keyword\">return</span> <span class=\"token punctuation\">&#123;</span>increment<span class=\"token punctuation\">,</span> decrement<span class=\"token punctuation\">,</span> reset<span class=\"token punctuation\">&#125;</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"11\"></td><td><pre><span class=\"token punctuation\">&#125;</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"12\"></td><td><pre></pre></td></tr><tr><td data-num=\"13\"></td><td><pre><span class=\"token comment\">/**</pre></td></tr><tr><td data-num=\"14\"></td><td><pre> * const counter = createCounter(5)</pre></td></tr><tr><td data-num=\"15\"></td><td><pre> * counter.increment(); // 6</pre></td></tr><tr><td data-num=\"16\"></td><td><pre> * counter.reset(); // 5</pre></td></tr><tr><td data-num=\"17\"></td><td><pre> * counter.decrement(); // 4</pre></td></tr><tr><td data-num=\"18\"></td><td><pre> */</span></pre></td></tr></table></figure></div>\n<div class=\"tab\" data-id=\"code\" data-title=\"Typescript\">\n<figure class=\"highlight typescript\"><figcaption data-lang=\"typescript\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre><span class=\"token keyword\">type</span> <span class=\"token class-name\">ReturnObj</span> <span class=\"token operator\">=</span> <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"2\"></td><td><pre>    <span class=\"token function-variable function\">increment</span><span class=\"token operator\">:</span> <span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token operator\">=></span> <span class=\"token builtin\">number</span><span class=\"token punctuation\">,</span></pre></td></tr><tr><td data-num=\"3\"></td><td><pre>    <span class=\"token function-variable function\">decrement</span><span class=\"token operator\">:</span> <span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token operator\">=></span> <span class=\"token builtin\">number</span><span class=\"token punctuation\">,</span></pre></td></tr><tr><td data-num=\"4\"></td><td><pre>    <span class=\"token function-variable function\">reset</span><span class=\"token operator\">:</span> <span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token operator\">=></span> <span class=\"token builtin\">number</span><span class=\"token punctuation\">,</span></pre></td></tr><tr><td data-num=\"5\"></td><td><pre><span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"6\"></td><td><pre></pre></td></tr><tr><td data-num=\"7\"></td><td><pre><span class=\"token keyword\">function</span> <span class=\"token function\">createCounter</span><span class=\"token punctuation\">(</span>init<span class=\"token operator\">:</span> <span class=\"token builtin\">number</span><span class=\"token punctuation\">)</span><span class=\"token operator\">:</span> ReturnObj <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"8\"></td><td><pre>    <span class=\"token keyword\">let</span> tmp<span class=\"token operator\">:</span> <span class=\"token builtin\">number</span> <span class=\"token operator\">=</span> init<span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"9\"></td><td><pre>    <span class=\"token keyword\">const</span> increment <span class=\"token operator\">=</span> <span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token operator\">:</span> <span class=\"token builtin\">number</span> <span class=\"token operator\">=></span> <span class=\"token operator\">++</span>tmp<span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"10\"></td><td><pre>    <span class=\"token keyword\">const</span> <span class=\"token function-variable function\">decrement</span> <span class=\"token operator\">=</span> <span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token operator\">=></span> <span class=\"token operator\">--</span>tmp<span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"11\"></td><td><pre>    <span class=\"token keyword\">const</span> reset <span class=\"token operator\">=</span> <span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token operator\">:</span> <span class=\"token builtin\">number</span> <span class=\"token operator\">=></span> tmp <span class=\"token operator\">=</span> init<span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"12\"></td><td><pre>    <span class=\"token keyword\">return</span> <span class=\"token punctuation\">&#123;</span>increment<span class=\"token punctuation\">,</span> decrement<span class=\"token punctuation\">,</span> reset<span class=\"token punctuation\">&#125;</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"13\"></td><td><pre><span class=\"token punctuation\">&#125;</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"14\"></td><td><pre></pre></td></tr><tr><td data-num=\"15\"></td><td><pre><span class=\"token comment\">/**</pre></td></tr><tr><td data-num=\"16\"></td><td><pre> * const counter = createCounter(5)</pre></td></tr><tr><td data-num=\"17\"></td><td><pre> * counter.increment(); // 6</pre></td></tr><tr><td data-num=\"18\"></td><td><pre> * counter.reset(); // 5</pre></td></tr><tr><td data-num=\"19\"></td><td><pre> * counter.decrement(); // 4</pre></td></tr><tr><td data-num=\"20\"></td><td><pre> */</span></pre></td></tr></table></figure></div>\n",
            "tags": [
                "Coding",
                "Leetcode",
                "Easy",
                "Leetcode",
                "Easy",
                "Javascript",
                "Typescript"
            ]
        },
        {
            "id": "https://chienikao.github.io/2023/05/07/Coding/leetcode/Medium/1498%20Number%20of%20Subsequences%20That%20Satisfy%20the%20Given%20Sum%20Condition/",
            "url": "https://chienikao.github.io/2023/05/07/Coding/leetcode/Medium/1498%20Number%20of%20Subsequences%20That%20Satisfy%20the%20Given%20Sum%20Condition/",
            "title": "1498. Number of Subsequences That Satisfy the Given Sum Condition",
            "date_published": "2023-05-07T12:23:22.000Z",
            "content_html": "<p>⭐️⭐️</p>\n<h2 id=\"題目敘述\"><a class=\"anchor\" href=\"#題目敘述\">#</a> <span class=\"exturl\" data-url=\"aHR0cHM6Ly9sZWV0Y29kZS5jb20vcHJvYmxlbXMvbnVtYmVyLW9mLXN1YnNlcXVlbmNlcy10aGF0LXNhdGlzZnktdGhlLWdpdmVuLXN1bS1jb25kaXRpb24v\">題目敘述</span></h2>\n<p>You are given an array of integers  <code>nums</code>  and an integer  <code>target</code> .</p>\n<p>Return <em>the number of non-empty subsequences of  <code>nums</code>  such that the sum of the minimum and maximum element on it is less or equal to  <code>target</code> </em>. Since the answer may be too large, return it <strong>modulo</strong>  <code>10^9 + 7</code> .</p>\n<h3 id=\"example-1\"><a class=\"anchor\" href=\"#example-1\">#</a> Example 1</h3>\n<blockquote>\n<p><strong>Input:</strong> nums = [3,5,6,7], target = 9<br>\n<strong>Output:</strong> 4<br>\n<strong>Explanation:</strong> There are 4 subsequences that satisfy the condition.<br>\n[3] -&gt; Min value + max value &lt;= target (3 + 3 &lt;= 9)<br>\n[3,5] -&gt; (3 + 5 &lt;= 9)<br>\n[3,5,6] -&gt; (3 + 6 &lt;= 9)<br>\n[3,6] -&gt; (3 + 6 &lt;= 9)</p>\n</blockquote>\n<h3 id=\"example-2\"><a class=\"anchor\" href=\"#example-2\">#</a> Example 2</h3>\n<blockquote>\n<p><strong>Input:</strong> nums = [3,3,6,8], target = 10<br>\n<strong>Output:</strong> 6<br>\n<strong>Explanation:</strong> There are 6 subsequences that satisfy the condition. (nums can have repeated numbers).<br>\n[3] , [3] , [3,3], [3,6] , [3,6] , [3,3,6]</p>\n</blockquote>\n<h3 id=\"example-3\"><a class=\"anchor\" href=\"#example-3\">#</a> Example 3</h3>\n<blockquote>\n<p><strong>Input:</strong> nums = [2,3,3,4,6,7], target = 12<br>\n<strong>Output:</strong> 61<br>\n<strong>Explanation:</strong> There are 63 non-empty subsequences, two of them do not satisfy the condition ([6,7], [7]).<br>\nNumber of valid subsequences (63 - 2 = 61).</p>\n</blockquote>\n<h2 id=\"solution\"><a class=\"anchor\" href=\"#solution\">#</a> Solution</h2>\n<div class=\"tab\" data-id=\"code\" data-title=\"C++\">\n<pre><code class=\"language-cpp\">\n</code></pre>\n</div>\n<div class=\"tab\" data-id=\"code\" data-title=\"Java\">\n<figure class=\"highlight java\"><figcaption data-lang=\"java\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre><span class=\"token keyword\">import</span> <span class=\"token import\"><span class=\"token namespace\">java<span class=\"token punctuation\">.</span>util<span class=\"token punctuation\">.</span></span><span class=\"token class-name\">Arrays</span></span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"2\"></td><td><pre></pre></td></tr><tr><td data-num=\"3\"></td><td><pre><span class=\"token keyword\">class</span> <span class=\"token class-name\">Solution</span> <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"4\"></td><td><pre>    <span class=\"token keyword\">public</span> <span class=\"token keyword\">int</span> <span class=\"token function\">numSubseq</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">int</span><span class=\"token punctuation\">[</span><span class=\"token punctuation\">]</span> nums<span class=\"token punctuation\">,</span> <span class=\"token keyword\">int</span> target<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"5\"></td><td><pre>        <span class=\"token keyword\">int</span> n <span class=\"token operator\">=</span> nums<span class=\"token punctuation\">.</span>length<span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"6\"></td><td><pre>        <span class=\"token keyword\">int</span> mod <span class=\"token operator\">=</span> <span class=\"token number\">1000000007</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"7\"></td><td><pre>        <span class=\"token keyword\">int</span> ans <span class=\"token operator\">=</span> <span class=\"token number\">0</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"8\"></td><td><pre>        <span class=\"token class-name\">Arrays</span><span class=\"token punctuation\">.</span><span class=\"token function\">sort</span><span class=\"token punctuation\">(</span>nums<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"9\"></td><td><pre></pre></td></tr><tr><td data-num=\"10\"></td><td><pre>        <span class=\"token keyword\">int</span><span class=\"token punctuation\">[</span><span class=\"token punctuation\">]</span> count <span class=\"token operator\">=</span> <span class=\"token keyword\">new</span> <span class=\"token keyword\">int</span><span class=\"token punctuation\">[</span>n<span class=\"token punctuation\">]</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"11\"></td><td><pre>        count<span class=\"token punctuation\">[</span><span class=\"token number\">0</span><span class=\"token punctuation\">]</span> <span class=\"token operator\">=</span> <span class=\"token number\">1</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"12\"></td><td><pre>        <span class=\"token keyword\">for</span> <span class=\"token punctuation\">(</span><span class=\"token keyword\">int</span> i <span class=\"token operator\">=</span> <span class=\"token number\">1</span><span class=\"token punctuation\">;</span> i <span class=\"token operator\">&lt;</span> n<span class=\"token punctuation\">;</span> i<span class=\"token operator\">++</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"13\"></td><td><pre>            count<span class=\"token punctuation\">[</span>i<span class=\"token punctuation\">]</span> <span class=\"token operator\">=</span> <span class=\"token punctuation\">(</span>count<span class=\"token punctuation\">[</span>i <span class=\"token operator\">-</span> <span class=\"token number\">1</span><span class=\"token punctuation\">]</span> <span class=\"token operator\">*</span> <span class=\"token number\">2</span><span class=\"token punctuation\">)</span> <span class=\"token operator\">%</span> mod<span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"14\"></td><td><pre>        <span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"15\"></td><td><pre></pre></td></tr><tr><td data-num=\"16\"></td><td><pre>        <span class=\"token keyword\">int</span> left <span class=\"token operator\">=</span> <span class=\"token number\">0</span><span class=\"token punctuation\">,</span> right <span class=\"token operator\">=</span> n <span class=\"token operator\">-</span> <span class=\"token number\">1</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"17\"></td><td><pre>        <span class=\"token keyword\">while</span> <span class=\"token punctuation\">(</span>left <span class=\"token operator\">&lt;=</span> right<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"18\"></td><td><pre>            <span class=\"token keyword\">if</span> <span class=\"token punctuation\">(</span>nums<span class=\"token punctuation\">[</span>left<span class=\"token punctuation\">]</span> <span class=\"token operator\">+</span> nums<span class=\"token punctuation\">[</span>right<span class=\"token punctuation\">]</span> <span class=\"token operator\">&lt;=</span> target<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"19\"></td><td><pre>                ans <span class=\"token operator\">=</span> <span class=\"token punctuation\">(</span>ans <span class=\"token operator\">+</span> count<span class=\"token punctuation\">[</span>right <span class=\"token operator\">-</span> left<span class=\"token punctuation\">]</span><span class=\"token punctuation\">)</span> <span class=\"token operator\">%</span> mod<span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"20\"></td><td><pre>                left<span class=\"token operator\">++</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"21\"></td><td><pre>            <span class=\"token punctuation\">&#125;</span> <span class=\"token keyword\">else</span> <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"22\"></td><td><pre>                right<span class=\"token operator\">--</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"23\"></td><td><pre>            <span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"24\"></td><td><pre>        <span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"25\"></td><td><pre>        </pre></td></tr><tr><td data-num=\"26\"></td><td><pre>        <span class=\"token keyword\">return</span> ans<span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"27\"></td><td><pre>    <span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"28\"></td><td><pre><span class=\"token punctuation\">&#125;</span></pre></td></tr></table></figure></div>\n<div class=\"tab\" data-id=\"code\" data-title=\"Python\">\n<pre><code class=\"language-python\">\n</code></pre>\n</div>\n",
            "tags": [
                "Coding",
                "Leetcode",
                "Medium",
                "Leetcode",
                "Array",
                "Sorting",
                "Two Pointers",
                "Binary Search",
                "Medium"
            ]
        },
        {
            "id": "https://chienikao.github.io/2023/05/07/Coding/leetcode/Easy/2620%20Counter/",
            "url": "https://chienikao.github.io/2023/05/07/Coding/leetcode/Easy/2620%20Counter/",
            "title": "2620. Counter",
            "date_published": "2023-05-07T12:21:30.000Z",
            "content_html": "<p>⭐️</p>\n<h2 id=\"題目敘述\"><a class=\"anchor\" href=\"#題目敘述\">#</a> <span class=\"exturl\" data-url=\"aHR0cHM6Ly9sZWV0Y29kZS5jb20vcHJvYmxlbXMvY291bnRlci8/dXRtX2NhbXBhaWduPVBvc3REMiZhbXA7dXRtX21lZGl1bT1Qb3N0JmFtcDt1dG1fc291cmNlPVBvc3QmYW1wO2dpb19saW5rX2lkPXhvZ2tWcUJv\">題目敘述</span></h2>\n<p>Given an integer  <code>n</code> , return a  <code>counter</code>  function. This counter function initially returns  <code>n</code>  and then returns 1 more than the previous value every subsequent time it is called ( <code>n</code> ,  <code>n + 1</code> ,  <code>n + 2</code> , etc).</p>\n<h3 id=\"example-1\"><a class=\"anchor\" href=\"#example-1\">#</a> Example 1</h3>\n<blockquote>\n<p><strong>Input:</strong><br>\nn = 10<br>\n[“call”,“call”,“call”]<br>\n<strong>Output:</strong> [10,11,12]<br>\n<strong>Explanation:</strong><br>\ncounter() = 10 // The first time counter() is called, it returns n.<br>\ncounter() = 11 // Returns 1 more than the previous time.<br>\ncounter() = 12 // Returns 1 more than the previous time.</p>\n</blockquote>\n<h3 id=\"example-2\"><a class=\"anchor\" href=\"#example-2\">#</a> Example 2</h3>\n<blockquote>\n<p><strong>Input:</strong><br>\nn = -2<br>\n[“call”,“call”,“call”,“call”,“call”]<br>\n<strong>Output:</strong> [-2,-1,0,1,2]<br>\n<strong>Explanation:</strong> counter() initially returns -2. Then increases after each sebsequent call.</p>\n</blockquote>\n<h2 id=\"solution\"><a class=\"anchor\" href=\"#solution\">#</a> Solution</h2>\n<div class=\"tab\" data-id=\"code\" data-title=\"Javascript\">\n<figure class=\"highlight javascript\"><figcaption data-lang=\"javascript\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre><span class=\"token comment\">/**</pre></td></tr><tr><td data-num=\"2\"></td><td><pre> * @param &#123;number&#125; n</pre></td></tr><tr><td data-num=\"3\"></td><td><pre> * @return &#123;Function&#125; counter</pre></td></tr><tr><td data-num=\"4\"></td><td><pre> */</span></pre></td></tr><tr><td data-num=\"5\"></td><td><pre><span class=\"token keyword\">var</span> <span class=\"token function-variable function\">createCounter</span> <span class=\"token operator\">=</span> <span class=\"token keyword\">function</span><span class=\"token punctuation\">(</span><span class=\"token parameter\">n</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"6\"></td><td><pre>    <span class=\"token keyword\">let</span> counter <span class=\"token operator\">=</span> n <span class=\"token operator\">-</span> <span class=\"token number\">1</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"7\"></td><td><pre>    <span class=\"token keyword\">return</span> <span class=\"token keyword\">function</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"8\"></td><td><pre>        counter <span class=\"token operator\">+=</span> <span class=\"token number\">1</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"9\"></td><td><pre>        <span class=\"token keyword\">return</span> counter<span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"10\"></td><td><pre>    <span class=\"token punctuation\">&#125;</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"11\"></td><td><pre><span class=\"token punctuation\">&#125;</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"12\"></td><td><pre></pre></td></tr><tr><td data-num=\"13\"></td><td><pre><span class=\"token comment\">/** </pre></td></tr><tr><td data-num=\"14\"></td><td><pre> * const counter = createCounter(10)</pre></td></tr><tr><td data-num=\"15\"></td><td><pre> * counter() // 10</pre></td></tr><tr><td data-num=\"16\"></td><td><pre> * counter() // 11</pre></td></tr><tr><td data-num=\"17\"></td><td><pre> * counter() // 12</pre></td></tr><tr><td data-num=\"18\"></td><td><pre> */</span></pre></td></tr></table></figure></div>\n<div class=\"tab\" data-id=\"code\" data-title=\"Typescript\">\n<figure class=\"highlight typescript\"><figcaption data-lang=\"typescript\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre><span class=\"token keyword\">function</span> <span class=\"token function\">createCounter</span><span class=\"token punctuation\">(</span>n<span class=\"token operator\">:</span> <span class=\"token builtin\">number</span><span class=\"token punctuation\">)</span><span class=\"token operator\">:</span> <span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token operator\">=></span> <span class=\"token builtin\">number</span> <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"2\"></td><td><pre>    <span class=\"token keyword\">let</span> counter <span class=\"token operator\">=</span> n <span class=\"token operator\">-</span> <span class=\"token number\">1</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"3\"></td><td><pre>    <span class=\"token keyword\">return</span> <span class=\"token keyword\">function</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"4\"></td><td><pre>        counter <span class=\"token operator\">+=</span> <span class=\"token number\">1</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"5\"></td><td><pre>        <span class=\"token keyword\">return</span> counter<span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"6\"></td><td><pre>    <span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"7\"></td><td><pre><span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"8\"></td><td><pre></pre></td></tr><tr><td data-num=\"9\"></td><td><pre></pre></td></tr><tr><td data-num=\"10\"></td><td><pre><span class=\"token comment\">/** </pre></td></tr><tr><td data-num=\"11\"></td><td><pre> * const counter = createCounter(10)</pre></td></tr><tr><td data-num=\"12\"></td><td><pre> * counter() // 10</pre></td></tr><tr><td data-num=\"13\"></td><td><pre> * counter() // 11</pre></td></tr><tr><td data-num=\"14\"></td><td><pre> * counter() // 12</pre></td></tr><tr><td data-num=\"15\"></td><td><pre> */</span></pre></td></tr></table></figure></div>\n",
            "tags": [
                "Coding",
                "Leetcode",
                "Easy",
                "Leetcode",
                "Easy",
                "Javascript",
                "Typescript"
            ]
        },
        {
            "id": "https://chienikao.github.io/2023/05/07/Coding/leetcode/Easy/2667%20Create%20Hello%20World%20Function/",
            "url": "https://chienikao.github.io/2023/05/07/Coding/leetcode/Easy/2667%20Create%20Hello%20World%20Function/",
            "title": "2667. Create Hello World Function",
            "date_published": "2023-05-07T12:19:25.000Z",
            "content_html": "<p>⭐️</p>\n<h2 id=\"題目敘述\"><a class=\"anchor\" href=\"#題目敘述\">#</a> <span class=\"exturl\" data-url=\"aHR0cHM6Ly9sZWV0Y29kZS5jb20vcHJvYmxlbXMvY3JlYXRlLWhlbGxvLXdvcmxkLWZ1bmN0aW9uLz91dG1fY2FtcGFpZ249UG9zdEQxJmFtcDt1dG1fbWVkaXVtPVBvc3QmYW1wO3V0bV9zb3VyY2U9UG9zdCZhbXA7Z2lvX2xpbmtfaWQ9UVBEdzBrSlI=\">題目敘述</span></h2>\n<p>Write a function  <code>createHelloWorld</code> . It should return a new function that always returns  <code>&quot;Hello World&quot;</code> .</p>\n<h3 id=\"example-1\"><a class=\"anchor\" href=\"#example-1\">#</a> Example 1</h3>\n<blockquote>\n<p><strong>Input:</strong> args = []<br>\n<strong>Output:</strong> “Hello World”<br>\n<strong>Explanation:</strong><br>\nconst f = createHelloWorld();<br>\nf(); // “Hello World”</p>\n<p>The function returned by createHelloWorld should always return “Hello World”.</p>\n</blockquote>\n<h3 id=\"example-2\"><a class=\"anchor\" href=\"#example-2\">#</a> Example 2</h3>\n<blockquote>\n<p><strong>Input:</strong> args = [{},null,42]<br>\n<strong>Output:</strong> “Hello World”<br>\n<strong>Explanation:</strong><br>\nconst f = createHelloWorld();<br>\nf({}, null, 42); // “Hello World”</p>\n<p>Any arguments could be passed to the function but it should still always return “Hello World”.</p>\n</blockquote>\n<h2 id=\"solution\"><a class=\"anchor\" href=\"#solution\">#</a> Solution</h2>\n<div class=\"tab\" data-id=\"code\" data-title=\"Javascript\">\n<figure class=\"highlight javascript\"><figcaption data-lang=\"javascript\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre><span class=\"token comment\">/**</pre></td></tr><tr><td data-num=\"2\"></td><td><pre> * @return &#123;Function&#125;</pre></td></tr><tr><td data-num=\"3\"></td><td><pre> */</span></pre></td></tr><tr><td data-num=\"4\"></td><td><pre><span class=\"token keyword\">var</span> <span class=\"token function-variable function\">createHelloWorld</span> <span class=\"token operator\">=</span> <span class=\"token keyword\">function</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"5\"></td><td><pre>    <span class=\"token keyword\">return</span> <span class=\"token keyword\">function</span><span class=\"token punctuation\">(</span><span class=\"token parameter\"><span class=\"token operator\">...</span>args</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"6\"></td><td><pre>        <span class=\"token keyword\">return</span> <span class=\"token string\">\"Hello World\"</span></pre></td></tr><tr><td data-num=\"7\"></td><td><pre>    <span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"8\"></td><td><pre><span class=\"token punctuation\">&#125;</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"9\"></td><td><pre></pre></td></tr><tr><td data-num=\"10\"></td><td><pre><span class=\"token comment\">/**</pre></td></tr><tr><td data-num=\"11\"></td><td><pre> * const f = createHelloWorld();</pre></td></tr><tr><td data-num=\"12\"></td><td><pre> * f(); // \"Hello World\"</pre></td></tr><tr><td data-num=\"13\"></td><td><pre> */</span></pre></td></tr></table></figure></div>\n<div class=\"tab\" data-id=\"code\" data-title=\"Typescript\">\n<figure class=\"highlight typescript\"><figcaption data-lang=\"typescript\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre><span class=\"token keyword\">function</span> <span class=\"token function\">createHelloWorld</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"2\"></td><td><pre>\t<span class=\"token keyword\">return</span> <span class=\"token keyword\">function</span><span class=\"token punctuation\">(</span><span class=\"token operator\">...</span>args<span class=\"token punctuation\">)</span><span class=\"token operator\">:</span> <span class=\"token builtin\">string</span> <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"3\"></td><td><pre>        <span class=\"token keyword\">return</span> <span class=\"token string\">\"Hello World\"</span></pre></td></tr><tr><td data-num=\"4\"></td><td><pre>    <span class=\"token punctuation\">&#125;</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"5\"></td><td><pre><span class=\"token punctuation\">&#125;</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"6\"></td><td><pre></pre></td></tr><tr><td data-num=\"7\"></td><td><pre><span class=\"token comment\">/**</pre></td></tr><tr><td data-num=\"8\"></td><td><pre> * const f = createHelloWorld();</pre></td></tr><tr><td data-num=\"9\"></td><td><pre> * f(); // \"Hello World\"</pre></td></tr><tr><td data-num=\"10\"></td><td><pre> */</span></pre></td></tr></table></figure></div>\n",
            "tags": [
                "Coding",
                "Leetcode",
                "Easy",
                "Leetcode",
                "Easy",
                "Javascript",
                "Typescript"
            ]
        },
        {
            "id": "https://chienikao.github.io/2023/05/07/Coding/leetcode/Medium/1456%20Maximum%20Number%20of%20Vowels%20in%20a%20Substring%20of%20Given%20Length/",
            "url": "https://chienikao.github.io/2023/05/07/Coding/leetcode/Medium/1456%20Maximum%20Number%20of%20Vowels%20in%20a%20Substring%20of%20Given%20Length/",
            "title": "1456. Maximum Number of Vowels in a Substring of Given Length",
            "date_published": "2023-05-07T12:16:51.000Z",
            "content_html": "<p>⭐️⭐️</p>\n<h2 id=\"題目敘述\"><a class=\"anchor\" href=\"#題目敘述\">#</a> <span class=\"exturl\" data-url=\"aHR0cHM6Ly9sZWV0Y29kZS5jb20vcHJvYmxlbXMvbWF4aW11bS1udW1iZXItb2Ytdm93ZWxzLWluLWEtc3Vic3RyaW5nLW9mLWdpdmVuLWxlbmd0aC8=\">題目敘述</span></h2>\n<p>Given a string  <code>s</code>  and an integer  <code>k</code> , return <em>the maximum number of vowel letters in any substring of  <code>s</code>  with length  <code>k</code> </em>.</p>\n<p><strong>Vowel letters</strong> in English are  <code>'a'</code> ,  <code>'e'</code> ,  <code>'i'</code> ,  <code>'o'</code> , and  <code>'u'</code> .</p>\n<h3 id=\"example-1\"><a class=\"anchor\" href=\"#example-1\">#</a> Example 1</h3>\n<blockquote>\n<p><strong>Input:</strong> s = “abciiidef”, k = 3<br>\n<strong>Output:</strong> 3<br>\n<strong>Explanation:</strong> The substring “iii” contains 3 vowel letters.</p>\n</blockquote>\n<h3 id=\"example-2\"><a class=\"anchor\" href=\"#example-2\">#</a> Example 2</h3>\n<blockquote>\n<p><strong>Input:</strong> s = “aeiou”, k = 2<br>\n<strong>Output:</strong> 2<br>\n<strong>Explanation:</strong> Any substring of length 2 contains 2 vowels.</p>\n</blockquote>\n<h3 id=\"example-3\"><a class=\"anchor\" href=\"#example-3\">#</a> Example 3</h3>\n<blockquote>\n<p><strong>Input:</strong> s = “leetcode”, k = 3<br>\n<strong>Output:</strong> 2<br>\n<strong>Explanation:</strong> “lee”, “eet” and “ode” contain 2 vowels.</p>\n</blockquote>\n<h2 id=\"solution\"><a class=\"anchor\" href=\"#solution\">#</a> Solution</h2>\n<div class=\"tab\" data-id=\"code\" data-title=\"C++\">\n<figure class=\"highlight cpp\"><figcaption data-lang=\"C++\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre><span class=\"token keyword\">class</span> <span class=\"token class-name\">Solution</span> <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"2\"></td><td><pre><span class=\"token keyword\">public</span><span class=\"token operator\">:</span></pre></td></tr><tr><td data-num=\"3\"></td><td><pre>    <span class=\"token keyword\">int</span> <span class=\"token function\">maxVowels</span><span class=\"token punctuation\">(</span>string s<span class=\"token punctuation\">,</span> <span class=\"token keyword\">int</span> k<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"4\"></td><td><pre>        <span class=\"token keyword\">int</span> res <span class=\"token operator\">=</span> <span class=\"token number\">0</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"5\"></td><td><pre>        unordered_set<span class=\"token operator\">&lt;</span><span class=\"token keyword\">char</span><span class=\"token operator\">></span> vowels <span class=\"token operator\">=</span> <span class=\"token punctuation\">&#123;</span><span class=\"token char\">'a'</span><span class=\"token punctuation\">,</span> <span class=\"token char\">'e'</span><span class=\"token punctuation\">,</span> <span class=\"token char\">'i'</span><span class=\"token punctuation\">,</span> <span class=\"token char\">'o'</span><span class=\"token punctuation\">,</span> <span class=\"token char\">'u'</span><span class=\"token punctuation\">&#125;</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"6\"></td><td><pre>        <span class=\"token keyword\">for</span> <span class=\"token punctuation\">(</span><span class=\"token keyword\">int</span> i<span class=\"token operator\">=</span><span class=\"token number\">0</span><span class=\"token punctuation\">,</span> tmp<span class=\"token operator\">=</span><span class=\"token number\">0</span><span class=\"token punctuation\">;</span> i<span class=\"token operator\">&lt;</span>s<span class=\"token punctuation\">.</span><span class=\"token function\">size</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span> i<span class=\"token operator\">++</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"7\"></td><td><pre>            tmp <span class=\"token operator\">+=</span> vowels<span class=\"token punctuation\">.</span><span class=\"token function\">count</span><span class=\"token punctuation\">(</span>s<span class=\"token punctuation\">[</span>i<span class=\"token punctuation\">]</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"8\"></td><td><pre>            <span class=\"token keyword\">if</span> <span class=\"token punctuation\">(</span>i <span class=\"token operator\">-</span> k <span class=\"token operator\">>=</span> <span class=\"token number\">0</span><span class=\"token punctuation\">)</span> tmp <span class=\"token operator\">-=</span> vowels<span class=\"token punctuation\">.</span><span class=\"token function\">count</span><span class=\"token punctuation\">(</span>s<span class=\"token punctuation\">[</span>i<span class=\"token operator\">-</span>k<span class=\"token punctuation\">]</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"9\"></td><td><pre>            res <span class=\"token operator\">=</span> <span class=\"token function\">max</span><span class=\"token punctuation\">(</span>res<span class=\"token punctuation\">,</span> tmp<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"10\"></td><td><pre>        <span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"11\"></td><td><pre>        <span class=\"token keyword\">return</span> res<span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"12\"></td><td><pre>    <span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"13\"></td><td><pre><span class=\"token punctuation\">&#125;</span><span class=\"token punctuation\">;</span></pre></td></tr></table></figure></div>\n<div class=\"tab\" data-id=\"code\" data-title=\"Java\">\n<figure class=\"highlight java\"><figcaption data-lang=\"java\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre><span class=\"token keyword\">class</span> <span class=\"token class-name\">Solution</span> <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"2\"></td><td><pre>    <span class=\"token keyword\">public</span> <span class=\"token keyword\">int</span> <span class=\"token function\">maxVowels</span><span class=\"token punctuation\">(</span><span class=\"token class-name\">String</span> s<span class=\"token punctuation\">,</span> <span class=\"token keyword\">int</span> k<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"3\"></td><td><pre>        <span class=\"token keyword\">int</span> ans <span class=\"token operator\">=</span> <span class=\"token number\">0</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"4\"></td><td><pre></pre></td></tr><tr><td data-num=\"5\"></td><td><pre>        <span class=\"token class-name\">String</span> temp <span class=\"token operator\">=</span> s<span class=\"token punctuation\">.</span><span class=\"token function\">substring</span><span class=\"token punctuation\">(</span><span class=\"token number\">0</span><span class=\"token punctuation\">,</span> k<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"6\"></td><td><pre>        <span class=\"token keyword\">for</span> <span class=\"token punctuation\">(</span><span class=\"token keyword\">char</span> t <span class=\"token operator\">:</span> temp<span class=\"token punctuation\">.</span><span class=\"token function\">toCharArray</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"7\"></td><td><pre>            <span class=\"token keyword\">if</span> <span class=\"token punctuation\">(</span><span class=\"token function\">isVowel</span><span class=\"token punctuation\">(</span>t<span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"8\"></td><td><pre>                ans<span class=\"token operator\">++</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"9\"></td><td><pre>            <span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"10\"></td><td><pre>        <span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"11\"></td><td><pre></pre></td></tr><tr><td data-num=\"12\"></td><td><pre>        <span class=\"token keyword\">int</span> cur <span class=\"token operator\">=</span> ans<span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"13\"></td><td><pre>        <span class=\"token keyword\">for</span> <span class=\"token punctuation\">(</span><span class=\"token keyword\">int</span> i <span class=\"token operator\">=</span> k<span class=\"token punctuation\">;</span> i <span class=\"token operator\">&lt;</span> s<span class=\"token punctuation\">.</span><span class=\"token function\">length</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span> i<span class=\"token operator\">++</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"14\"></td><td><pre>            <span class=\"token keyword\">if</span> <span class=\"token punctuation\">(</span><span class=\"token function\">isVowel</span><span class=\"token punctuation\">(</span>s<span class=\"token punctuation\">.</span><span class=\"token function\">charAt</span><span class=\"token punctuation\">(</span>i<span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span></pre></td></tr><tr><td data-num=\"15\"></td><td><pre>                cur<span class=\"token operator\">++</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"16\"></td><td><pre>            <span class=\"token keyword\">if</span> <span class=\"token punctuation\">(</span><span class=\"token function\">isVowel</span><span class=\"token punctuation\">(</span>s<span class=\"token punctuation\">.</span><span class=\"token function\">charAt</span><span class=\"token punctuation\">(</span>i <span class=\"token operator\">-</span> k<span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span></pre></td></tr><tr><td data-num=\"17\"></td><td><pre>                cur<span class=\"token operator\">--</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"18\"></td><td><pre>            ans <span class=\"token operator\">=</span> <span class=\"token class-name\">Math</span><span class=\"token punctuation\">.</span><span class=\"token function\">max</span><span class=\"token punctuation\">(</span>ans<span class=\"token punctuation\">,</span> cur<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"19\"></td><td><pre>        <span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"20\"></td><td><pre></pre></td></tr><tr><td data-num=\"21\"></td><td><pre>        <span class=\"token keyword\">return</span> ans<span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"22\"></td><td><pre>    <span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"23\"></td><td><pre></pre></td></tr><tr><td data-num=\"24\"></td><td><pre>    <span class=\"token keyword\">public</span> <span class=\"token keyword\">boolean</span> <span class=\"token function\">isVowel</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">char</span> c<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"25\"></td><td><pre>        <span class=\"token keyword\">if</span> <span class=\"token punctuation\">(</span>c <span class=\"token operator\">==</span> <span class=\"token char\">'a'</span> <span class=\"token operator\">||</span> c <span class=\"token operator\">==</span> <span class=\"token char\">'e'</span> <span class=\"token operator\">||</span> c <span class=\"token operator\">==</span> <span class=\"token char\">'i'</span> <span class=\"token operator\">||</span> c <span class=\"token operator\">==</span> <span class=\"token char\">'o'</span> <span class=\"token operator\">||</span> c <span class=\"token operator\">==</span> <span class=\"token char\">'u'</span><span class=\"token punctuation\">)</span></pre></td></tr><tr><td data-num=\"26\"></td><td><pre>            <span class=\"token keyword\">return</span> <span class=\"token boolean\">true</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"27\"></td><td><pre>        <span class=\"token keyword\">return</span> <span class=\"token boolean\">false</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"28\"></td><td><pre>    <span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"29\"></td><td><pre><span class=\"token punctuation\">&#125;</span></pre></td></tr></table></figure></div>\n<div class=\"tab\" data-id=\"code\" data-title=\"Python\">\n<pre><code class=\"language-python\">\n</code></pre>\n</div>\n",
            "tags": [
                "Coding",
                "Leetcode",
                "Medium",
                "String",
                "Leetcode",
                "Medium",
                "Sliding Window"
            ]
        },
        {
            "id": "https://chienikao.github.io/2023/05/07/Coding/leetcode/Hard/1964%20Find%20the%20Longest%20Valid%20Obstacle%20Course%20at%20Each%20Position/",
            "url": "https://chienikao.github.io/2023/05/07/Coding/leetcode/Hard/1964%20Find%20the%20Longest%20Valid%20Obstacle%20Course%20at%20Each%20Position/",
            "title": "1964. Find the Longest Valid Obstacle Course at Each Position",
            "date_published": "2023-05-07T12:13:05.000Z",
            "content_html": "<p>⭐️⭐️⭐️</p>\n<h2 id=\"題目敘述\"><a class=\"anchor\" href=\"#題目敘述\">#</a> <span class=\"exturl\" data-url=\"aHR0cHM6Ly9sZWV0Y29kZS5jb20vcHJvYmxlbXMvZmluZC10aGUtbG9uZ2VzdC12YWxpZC1vYnN0YWNsZS1jb3Vyc2UtYXQtZWFjaC1wb3NpdGlvbi8=\">題目敘述</span></h2>\n<p>You want to build some obstacle courses. You are given a <strong>0-indexed</strong> integer array  <code>obstacles</code>  of length  <code>n</code> , where  <code>obstacles[i]</code>  describes the height of the  <code>ith</code>  obstacle.</p>\n<p>For every index  <code>i</code>  between  <code>0</code>  and  <code>n - 1</code>  (<strong>inclusive</strong>), find the length of the <strong>longest obstacle course</strong> in  <code>obstacles</code>  such that:</p>\n<ul>\n<li>You choose any number of obstacles between  <code>0</code>  and  <code>i</code>  <strong>inclusive</strong>.</li>\n<li>You must include the  <code>ith</code>  obstacle in the course.</li>\n<li>You must put the chosen obstacles in the <strong>same order</strong> as they appear in  <code>obstacles</code> .</li>\n<li>Every obstacle (except the first) is <strong>taller</strong> than or the <strong>same height</strong> as the obstacle immediately before it.</li>\n</ul>\n<p>Return <em>an array  <code>ans</code>  of length  <code>n</code> , where  <code>ans[i]</code>  is the length of the <strong>longest obstacle course</strong> for index  <code>i</code>  as described above</em>.</p>\n<h3 id=\"example-1\"><a class=\"anchor\" href=\"#example-1\">#</a> Example 1</h3>\n<blockquote>\n<p><strong>Input:</strong> obstacles = [1,2,3,2]<br>\n<strong>Output:</strong> [1,2,3,3]<br>\n<strong>Explanation:</strong> The longest valid obstacle course at each position is:</p>\n<ul>\n<li>i = 0: [1], [1] has length 1.</li>\n<li>i = 1: [1,2], [1,2] has length 2.</li>\n<li>i = 2: [1,2,3], [1,2,3] has length 3.</li>\n<li>i = 3: [1,2,3,2], [1,2,2] has length 3.</li>\n</ul>\n</blockquote>\n<h3 id=\"example-2\"><a class=\"anchor\" href=\"#example-2\">#</a> Example 2</h3>\n<blockquote>\n<p><strong>Input:</strong> obstacles = [2,2,1]<br>\n<strong>Output:</strong> [1,2,1]<br>\n<strong>Explanation:</strong> The longest valid obstacle course at each position is:</p>\n<ul>\n<li>i = 0: [2], [2] has length 1.</li>\n<li>i = 1: [2,2], [2,2] has length 2.</li>\n<li>i = 2: [2,2,1], [1] has length 1.</li>\n</ul>\n</blockquote>\n<h3 id=\"example-3\"><a class=\"anchor\" href=\"#example-3\">#</a> Example 3</h3>\n<blockquote>\n<p><strong>Input:</strong> obstacles = [3,1,5,6,4,2]<br>\n<strong>Output:</strong> [1,1,2,3,2,2]<br>\n<strong>Explanation:</strong> The longest valid obstacle course at each position is:</p>\n<ul>\n<li>i = 0: [3], [3] has length 1.</li>\n<li>i = 1: [3,1], [1] has length 1.</li>\n<li>i = 2: [3,1,5], [3,5] has length 2. [1,5] is also valid.</li>\n<li>i = 3: [3,1,5,6], [3,5,6] has length 3. [1,5,6] is also valid.</li>\n<li>i = 4: [3,1,5,6,4], [3,4] has length 2. [1,4] is also valid.</li>\n<li>i = 5: [3,1,5,6,4,2], [1,2] has length 2.</li>\n</ul>\n</blockquote>\n<h2 id=\"解題思路\"><a class=\"anchor\" href=\"#解題思路\">#</a> 解題思路</h2>\n<p>Using DP.</p>\n<h2 id=\"solution\"><a class=\"anchor\" href=\"#solution\">#</a> Solution</h2>\n<div class=\"tab\" data-id=\"code\" data-title=\"C++\">\n<figure class=\"highlight cpp\"><figcaption data-lang=\"C++\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre><span class=\"token keyword\">class</span> <span class=\"token class-name\">Solution</span> <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"2\"></td><td><pre><span class=\"token keyword\">public</span><span class=\"token operator\">:</span></pre></td></tr><tr><td data-num=\"3\"></td><td><pre>    vector<span class=\"token operator\">&lt;</span><span class=\"token keyword\">int</span><span class=\"token operator\">></span> <span class=\"token function\">longestObstacleCourseAtEachPosition</span><span class=\"token punctuation\">(</span>vector<span class=\"token operator\">&lt;</span><span class=\"token keyword\">int</span><span class=\"token operator\">></span><span class=\"token operator\">&amp;</span> obstacles<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"4\"></td><td><pre>        <span class=\"token keyword\">int</span> n <span class=\"token operator\">=</span> obstacles<span class=\"token punctuation\">.</span><span class=\"token function\">size</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"5\"></td><td><pre>        <span class=\"token keyword\">int</span> length <span class=\"token operator\">=</span> <span class=\"token number\">0</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"6\"></td><td><pre>        vector<span class=\"token operator\">&lt;</span><span class=\"token keyword\">int</span><span class=\"token operator\">></span> <span class=\"token function\">result</span><span class=\"token punctuation\">(</span>n<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"7\"></td><td><pre>        vector<span class=\"token operator\">&lt;</span><span class=\"token keyword\">int</span><span class=\"token operator\">></span> <span class=\"token function\">increasingSubseq</span><span class=\"token punctuation\">(</span>n<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"8\"></td><td><pre>        <span class=\"token keyword\">for</span> <span class=\"token punctuation\">(</span><span class=\"token keyword\">int</span> i <span class=\"token operator\">=</span> <span class=\"token number\">0</span><span class=\"token punctuation\">;</span> i <span class=\"token operator\">&lt;</span> n<span class=\"token punctuation\">;</span> <span class=\"token operator\">++</span>i<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"9\"></td><td><pre>            <span class=\"token keyword\">int</span> left <span class=\"token operator\">=</span> <span class=\"token number\">0</span><span class=\"token punctuation\">,</span> right <span class=\"token operator\">=</span> length<span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"10\"></td><td><pre>            <span class=\"token keyword\">while</span> <span class=\"token punctuation\">(</span>left <span class=\"token operator\">&lt;</span> right<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"11\"></td><td><pre>                <span class=\"token keyword\">int</span> mid <span class=\"token operator\">=</span> <span class=\"token punctuation\">(</span>left <span class=\"token operator\">+</span> right<span class=\"token punctuation\">)</span> <span class=\"token operator\">/</span> <span class=\"token number\">2</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"12\"></td><td><pre>                <span class=\"token keyword\">if</span> <span class=\"token punctuation\">(</span>increasingSubseq<span class=\"token punctuation\">[</span>mid<span class=\"token punctuation\">]</span> <span class=\"token operator\">&lt;=</span> obstacles<span class=\"token punctuation\">[</span>i<span class=\"token punctuation\">]</span><span class=\"token punctuation\">)</span></pre></td></tr><tr><td data-num=\"13\"></td><td><pre>                    left <span class=\"token operator\">=</span> mid <span class=\"token operator\">+</span> <span class=\"token number\">1</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"14\"></td><td><pre>                <span class=\"token keyword\">else</span></pre></td></tr><tr><td data-num=\"15\"></td><td><pre>                    right <span class=\"token operator\">=</span> mid<span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"16\"></td><td><pre>            <span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"17\"></td><td><pre>            result<span class=\"token punctuation\">[</span>i<span class=\"token punctuation\">]</span> <span class=\"token operator\">=</span> left <span class=\"token operator\">+</span> <span class=\"token number\">1</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"18\"></td><td><pre>            <span class=\"token keyword\">if</span> <span class=\"token punctuation\">(</span>length <span class=\"token operator\">==</span> left<span class=\"token punctuation\">)</span></pre></td></tr><tr><td data-num=\"19\"></td><td><pre>                length<span class=\"token operator\">++</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"20\"></td><td><pre>            increasingSubseq<span class=\"token punctuation\">[</span>left<span class=\"token punctuation\">]</span> <span class=\"token operator\">=</span> obstacles<span class=\"token punctuation\">[</span>i<span class=\"token punctuation\">]</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"21\"></td><td><pre>        <span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"22\"></td><td><pre>        <span class=\"token keyword\">return</span> result<span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"23\"></td><td><pre>    <span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"24\"></td><td><pre><span class=\"token punctuation\">&#125;</span><span class=\"token punctuation\">;</span></pre></td></tr></table></figure></div>\n<div class=\"tab\" data-id=\"code\" data-title=\"Java\">\n<figure class=\"highlight java\"><figcaption data-lang=\"java\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre><span class=\"token keyword\">class</span> <span class=\"token class-name\">Solution</span> <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"2\"></td><td><pre>    <span class=\"token keyword\">public</span> <span class=\"token keyword\">int</span><span class=\"token punctuation\">[</span><span class=\"token punctuation\">]</span> <span class=\"token function\">longestObstacleCourseAtEachPosition</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">int</span><span class=\"token punctuation\">[</span><span class=\"token punctuation\">]</span> obstacles<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"3\"></td><td><pre>        <span class=\"token keyword\">int</span> n <span class=\"token operator\">=</span> obstacles<span class=\"token punctuation\">.</span>length<span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"4\"></td><td><pre>        <span class=\"token keyword\">int</span> length <span class=\"token operator\">=</span> <span class=\"token number\">0</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"5\"></td><td><pre>        <span class=\"token keyword\">int</span><span class=\"token punctuation\">[</span><span class=\"token punctuation\">]</span> result <span class=\"token operator\">=</span> <span class=\"token keyword\">new</span> <span class=\"token keyword\">int</span><span class=\"token punctuation\">[</span>n<span class=\"token punctuation\">]</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"6\"></td><td><pre>        <span class=\"token keyword\">int</span><span class=\"token punctuation\">[</span><span class=\"token punctuation\">]</span> sub <span class=\"token operator\">=</span> <span class=\"token keyword\">new</span> <span class=\"token keyword\">int</span><span class=\"token punctuation\">[</span>n<span class=\"token punctuation\">]</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"7\"></td><td><pre></pre></td></tr><tr><td data-num=\"8\"></td><td><pre>        <span class=\"token keyword\">for</span> <span class=\"token punctuation\">(</span><span class=\"token keyword\">int</span> i <span class=\"token operator\">=</span> <span class=\"token number\">0</span><span class=\"token punctuation\">;</span> i <span class=\"token operator\">&lt;</span> n<span class=\"token punctuation\">;</span> <span class=\"token operator\">++</span>i<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"9\"></td><td><pre>            <span class=\"token keyword\">int</span> left <span class=\"token operator\">=</span> <span class=\"token number\">0</span><span class=\"token punctuation\">,</span> right <span class=\"token operator\">=</span> length<span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"10\"></td><td><pre></pre></td></tr><tr><td data-num=\"11\"></td><td><pre>            <span class=\"token keyword\">while</span> <span class=\"token punctuation\">(</span>left <span class=\"token operator\">&lt;</span> right<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"12\"></td><td><pre>                <span class=\"token keyword\">int</span> mid <span class=\"token operator\">=</span> left <span class=\"token operator\">+</span> <span class=\"token punctuation\">(</span>right <span class=\"token operator\">-</span> left<span class=\"token punctuation\">)</span> <span class=\"token operator\">/</span> <span class=\"token number\">2</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"13\"></td><td><pre>                <span class=\"token keyword\">if</span> <span class=\"token punctuation\">(</span>sub<span class=\"token punctuation\">[</span>mid<span class=\"token punctuation\">]</span> <span class=\"token operator\">&lt;=</span> obstacles<span class=\"token punctuation\">[</span>i<span class=\"token punctuation\">]</span><span class=\"token punctuation\">)</span></pre></td></tr><tr><td data-num=\"14\"></td><td><pre>                    left <span class=\"token operator\">=</span> mid <span class=\"token operator\">+</span> <span class=\"token number\">1</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"15\"></td><td><pre>                <span class=\"token keyword\">else</span></pre></td></tr><tr><td data-num=\"16\"></td><td><pre>                    right <span class=\"token operator\">=</span> mid<span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"17\"></td><td><pre>            <span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"18\"></td><td><pre></pre></td></tr><tr><td data-num=\"19\"></td><td><pre>            result<span class=\"token punctuation\">[</span>i<span class=\"token punctuation\">]</span> <span class=\"token operator\">=</span> left <span class=\"token operator\">+</span> <span class=\"token number\">1</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"20\"></td><td><pre>            <span class=\"token keyword\">if</span> <span class=\"token punctuation\">(</span>length <span class=\"token operator\">==</span> left<span class=\"token punctuation\">)</span></pre></td></tr><tr><td data-num=\"21\"></td><td><pre>                length<span class=\"token operator\">++</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"22\"></td><td><pre>            sub<span class=\"token punctuation\">[</span>left<span class=\"token punctuation\">]</span> <span class=\"token operator\">=</span> obstacles<span class=\"token punctuation\">[</span>i<span class=\"token punctuation\">]</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"23\"></td><td><pre>        <span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"24\"></td><td><pre>        </pre></td></tr><tr><td data-num=\"25\"></td><td><pre>        <span class=\"token keyword\">return</span> result<span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"26\"></td><td><pre>    <span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"27\"></td><td><pre><span class=\"token punctuation\">&#125;</span></pre></td></tr></table></figure></div>\n<div class=\"tab\" data-id=\"code\" data-title=\"Python\">\n<pre><code class=\"language-python\">\n</code></pre>\n</div>\n",
            "tags": [
                "Coding",
                "Leetcode",
                "Hard",
                "Leetcode",
                "Array",
                "Hard",
                "Binary Search",
                "Binary Indexed  Tree"
            ]
        },
        {
            "id": "https://chienikao.github.io/2023/05/04/Coding/leetcode/Hard/649%20Dota2%20Senate/",
            "url": "https://chienikao.github.io/2023/05/04/Coding/leetcode/Hard/649%20Dota2%20Senate/",
            "title": "649. Dota2 Senate",
            "date_published": "2023-05-04T07:51:05.000Z",
            "content_html": "<p>⭐️⭐️</p>\n<h2 id=\"題目敘述\"><a class=\"anchor\" href=\"#題目敘述\">#</a> <span class=\"exturl\" data-url=\"aHR0cHM6Ly9sZWV0Y29kZS5jb20vcHJvYmxlbXMvZG90YTItc2VuYXRlLw==\">題目敘述</span></h2>\n<p>In the world of Dota2, there are two parties: the Radiant and the Dire.</p>\n<p>The Dota2 senate consists of senators coming from two parties. Now the Senate wants to decide on a change in the Dota2 game. The voting for this change is a round-based procedure. In each round, each senator can exercise <strong>one</strong> of the two rights:</p>\n<ul>\n<li><strong>Ban one senator’s right:</strong> A senator can make another senator lose all his rights in this and all the following rounds.</li>\n<li><strong>Announce the victory:</strong> If this senator found the senators who still have rights to vote are all from the same party, he can announce the victory and decide on the change in the game.</li>\n</ul>\n<p>Given a string  <code>senate</code>  representing each senator’s party belonging. The character  <code>'R'</code>  and  <code>'D'</code>  represent the Radiant party and the Dire party. Then if there are  <code>n</code>  senators, the size of the given string will be  <code>n</code> .</p>\n<p>The round-based procedure starts from the first senator to the last senator in the given order. This procedure will last until the end of voting. All the senators who have lost their rights will be skipped during the procedure.</p>\n<p>Suppose every senator is smart enough and will play the best strategy for his own party. Predict which party will finally announce the victory and change the Dota2 game. The output should be  <code>&quot;Radiant&quot;</code>  or  <code>&quot;Dire&quot;</code> .</p>\n<h3 id=\"example-1\"><a class=\"anchor\" href=\"#example-1\">#</a> Example 1</h3>\n<blockquote>\n<p><strong>Input:</strong> senate = “RD”<br>\n<strong>Output</strong>: “Radiant”<br>\n<strong>Explanation:</strong><br>\nThe first senator comes from Radiant and he can just ban the next senator’s right in round 1.<br>\nAnd the second senator can’t exercise any rights anymore since his right has been banned.<br>\nAnd in round 2, the first senator can just announce the victory since he is the only guy in the senate who can vote.</p>\n</blockquote>\n<h3 id=\"example-2\"><a class=\"anchor\" href=\"#example-2\">#</a> Example 2</h3>\n<blockquote>\n<p><strong>Input:</strong> senate = “RDD”<br>\n<strong>Output:</strong> “Dire”<br>\n<strong>Explanation:</strong><br>\nThe first senator comes from Radiant and he can just ban the next senator’s right in round 1.<br>\nAnd the second senator can’t exercise any rights anymore since his right has been banned.<br>\nAnd the third senator comes from Dire and he can ban the first senator’s right in round 1.<br>\nAnd in round 2, the third senator can just announce the victory since he is the only guy in the senate who can vote.</p>\n</blockquote>\n<div class=\"tab\" data-id=\"code\" data-title=\"C++\">\n<figure class=\"highlight cpp\"><figcaption data-lang=\"C++\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre><span class=\"token keyword\">class</span> <span class=\"token class-name\">Solution</span> <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"2\"></td><td><pre><span class=\"token keyword\">public</span><span class=\"token operator\">:</span></pre></td></tr><tr><td data-num=\"3\"></td><td><pre>    string <span class=\"token function\">predictPartyVictory</span><span class=\"token punctuation\">(</span>string senate<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"4\"></td><td><pre>        <span class=\"token keyword\">int</span> n <span class=\"token operator\">=</span> senate<span class=\"token punctuation\">.</span><span class=\"token function\">length</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"5\"></td><td><pre>        queue<span class=\"token operator\">&lt;</span><span class=\"token keyword\">int</span><span class=\"token operator\">></span> r<span class=\"token punctuation\">,</span> d<span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"6\"></td><td><pre>        <span class=\"token keyword\">for</span> <span class=\"token punctuation\">(</span><span class=\"token keyword\">int</span> i<span class=\"token operator\">=</span><span class=\"token number\">0</span><span class=\"token punctuation\">;</span> i<span class=\"token operator\">&lt;</span>n<span class=\"token punctuation\">;</span> i<span class=\"token operator\">++</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"7\"></td><td><pre>            senate<span class=\"token punctuation\">[</span>i<span class=\"token punctuation\">]</span> <span class=\"token operator\">==</span> <span class=\"token char\">'R'</span> <span class=\"token operator\">?</span> r<span class=\"token punctuation\">.</span><span class=\"token function\">push</span><span class=\"token punctuation\">(</span>i<span class=\"token punctuation\">)</span> <span class=\"token operator\">:</span> d<span class=\"token punctuation\">.</span><span class=\"token function\">push</span><span class=\"token punctuation\">(</span>i<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"8\"></td><td><pre>        <span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"9\"></td><td><pre></pre></td></tr><tr><td data-num=\"10\"></td><td><pre>        <span class=\"token keyword\">while</span> <span class=\"token punctuation\">(</span><span class=\"token operator\">!</span>r<span class=\"token punctuation\">.</span><span class=\"token function\">empty</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token operator\">&amp;&amp;</span> <span class=\"token operator\">!</span>d<span class=\"token punctuation\">.</span><span class=\"token function\">empty</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"11\"></td><td><pre>            <span class=\"token keyword\">int</span> tr <span class=\"token operator\">=</span> r<span class=\"token punctuation\">.</span><span class=\"token function\">front</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span> r<span class=\"token punctuation\">.</span><span class=\"token function\">pop</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"12\"></td><td><pre>            <span class=\"token keyword\">int</span> td <span class=\"token operator\">=</span> d<span class=\"token punctuation\">.</span><span class=\"token function\">front</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span> d<span class=\"token punctuation\">.</span><span class=\"token function\">pop</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"13\"></td><td><pre>            tr <span class=\"token operator\">&lt;</span> td <span class=\"token operator\">?</span> r<span class=\"token punctuation\">.</span><span class=\"token function\">push</span><span class=\"token punctuation\">(</span>tr <span class=\"token operator\">+</span> n<span class=\"token punctuation\">)</span> <span class=\"token operator\">:</span> d<span class=\"token punctuation\">.</span><span class=\"token function\">push</span><span class=\"token punctuation\">(</span>td <span class=\"token operator\">+</span> n<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"14\"></td><td><pre>        <span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"15\"></td><td><pre>        <span class=\"token keyword\">return</span> r<span class=\"token punctuation\">.</span><span class=\"token function\">empty</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token operator\">?</span> <span class=\"token string\">\"Dire\"</span> <span class=\"token operator\">:</span> <span class=\"token string\">\"Radiant\"</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"16\"></td><td><pre>    <span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"17\"></td><td><pre><span class=\"token punctuation\">&#125;</span><span class=\"token punctuation\">;</span></pre></td></tr></table></figure></div>\n<div class=\"tab\" data-id=\"code\" data-title=\"Java\">\n<figure class=\"highlight java\"><figcaption data-lang=\"java\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre><span class=\"token keyword\">import</span> <span class=\"token import\"><span class=\"token namespace\">java<span class=\"token punctuation\">.</span>util<span class=\"token punctuation\">.</span></span><span class=\"token class-name\">LinkedList</span></span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"2\"></td><td><pre><span class=\"token keyword\">import</span> <span class=\"token import\"><span class=\"token namespace\">java<span class=\"token punctuation\">.</span>util<span class=\"token punctuation\">.</span></span><span class=\"token class-name\">Queue</span></span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"3\"></td><td><pre></pre></td></tr><tr><td data-num=\"4\"></td><td><pre><span class=\"token keyword\">class</span> <span class=\"token class-name\">Solution</span> <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"5\"></td><td><pre>    <span class=\"token keyword\">public</span> <span class=\"token class-name\">String</span> <span class=\"token function\">predictPartyVictory</span><span class=\"token punctuation\">(</span><span class=\"token class-name\">String</span> senate<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"6\"></td><td><pre>        <span class=\"token keyword\">int</span> n <span class=\"token operator\">=</span> senate<span class=\"token punctuation\">.</span><span class=\"token function\">length</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"7\"></td><td><pre>        </pre></td></tr><tr><td data-num=\"8\"></td><td><pre>        <span class=\"token class-name\">Queue</span><span class=\"token generics\"><span class=\"token punctuation\">&lt;</span><span class=\"token class-name\">Integer</span><span class=\"token punctuation\">></span></span> rQueue <span class=\"token operator\">=</span> <span class=\"token keyword\">new</span> <span class=\"token class-name\">LinkedList</span><span class=\"token generics\"><span class=\"token punctuation\">&lt;</span><span class=\"token punctuation\">></span></span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"9\"></td><td><pre>        <span class=\"token class-name\">Queue</span><span class=\"token generics\"><span class=\"token punctuation\">&lt;</span><span class=\"token class-name\">Integer</span><span class=\"token punctuation\">></span></span> dQueue <span class=\"token operator\">=</span> <span class=\"token keyword\">new</span> <span class=\"token class-name\">LinkedList</span><span class=\"token generics\"><span class=\"token punctuation\">&lt;</span><span class=\"token punctuation\">></span></span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"10\"></td><td><pre></pre></td></tr><tr><td data-num=\"11\"></td><td><pre>        <span class=\"token keyword\">for</span> <span class=\"token punctuation\">(</span><span class=\"token keyword\">int</span> i <span class=\"token operator\">=</span> <span class=\"token number\">0</span><span class=\"token punctuation\">;</span> i <span class=\"token operator\">&lt;</span> n<span class=\"token punctuation\">;</span> i<span class=\"token operator\">++</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"12\"></td><td><pre>            <span class=\"token keyword\">if</span> <span class=\"token punctuation\">(</span>senate<span class=\"token punctuation\">.</span><span class=\"token function\">charAt</span><span class=\"token punctuation\">(</span>i<span class=\"token punctuation\">)</span> <span class=\"token operator\">==</span> <span class=\"token char\">'R'</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"13\"></td><td><pre>                rQueue<span class=\"token punctuation\">.</span><span class=\"token function\">add</span><span class=\"token punctuation\">(</span>i<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"14\"></td><td><pre>            <span class=\"token punctuation\">&#125;</span> <span class=\"token keyword\">else</span> <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"15\"></td><td><pre>                dQueue<span class=\"token punctuation\">.</span><span class=\"token function\">add</span><span class=\"token punctuation\">(</span>i<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"16\"></td><td><pre>            <span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"17\"></td><td><pre>        <span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"18\"></td><td><pre></pre></td></tr><tr><td data-num=\"19\"></td><td><pre>        <span class=\"token keyword\">while</span> <span class=\"token punctuation\">(</span><span class=\"token operator\">!</span>rQueue<span class=\"token punctuation\">.</span><span class=\"token function\">isEmpty</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token operator\">&amp;&amp;</span> <span class=\"token operator\">!</span>dQueue<span class=\"token punctuation\">.</span><span class=\"token function\">isEmpty</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"20\"></td><td><pre>            <span class=\"token keyword\">int</span> rTurn <span class=\"token operator\">=</span> rQueue<span class=\"token punctuation\">.</span><span class=\"token function\">poll</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"21\"></td><td><pre>            <span class=\"token keyword\">int</span> dTurn <span class=\"token operator\">=</span> dQueue<span class=\"token punctuation\">.</span><span class=\"token function\">poll</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"22\"></td><td><pre></pre></td></tr><tr><td data-num=\"23\"></td><td><pre>            <span class=\"token keyword\">if</span> <span class=\"token punctuation\">(</span>dTurn <span class=\"token operator\">&lt;</span> rTurn<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"24\"></td><td><pre>                dQueue<span class=\"token punctuation\">.</span><span class=\"token function\">add</span><span class=\"token punctuation\">(</span>dTurn <span class=\"token operator\">+</span> n<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"25\"></td><td><pre>            <span class=\"token punctuation\">&#125;</span> <span class=\"token keyword\">else</span> <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"26\"></td><td><pre>                rQueue<span class=\"token punctuation\">.</span><span class=\"token function\">add</span><span class=\"token punctuation\">(</span>rTurn <span class=\"token operator\">+</span> n<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"27\"></td><td><pre>            <span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"28\"></td><td><pre>        <span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"29\"></td><td><pre></pre></td></tr><tr><td data-num=\"30\"></td><td><pre>        <span class=\"token keyword\">return</span> rQueue<span class=\"token punctuation\">.</span><span class=\"token function\">isEmpty</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token operator\">?</span> <span class=\"token string\">\"Dire\"</span> <span class=\"token operator\">:</span> <span class=\"token string\">\"Radiant\"</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"31\"></td><td><pre>    <span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"32\"></td><td><pre><span class=\"token punctuation\">&#125;</span></pre></td></tr></table></figure></div>\n<div class=\"tab\" data-id=\"code\" data-title=\"Python\">\n<figure class=\"highlight python\"><figcaption data-lang=\"python\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre><span class=\"token keyword\">class</span> <span class=\"token class-name\">Solution</span><span class=\"token punctuation\">:</span></pre></td></tr><tr><td data-num=\"2\"></td><td><pre>    <span class=\"token keyword\">def</span> <span class=\"token function\">predictPartyVictory</span><span class=\"token punctuation\">(</span>self<span class=\"token punctuation\">,</span> senate<span class=\"token punctuation\">:</span> <span class=\"token builtin\">str</span><span class=\"token punctuation\">)</span> <span class=\"token operator\">-</span><span class=\"token operator\">></span> <span class=\"token builtin\">str</span><span class=\"token punctuation\">:</span></pre></td></tr><tr><td data-num=\"3\"></td><td><pre>        n <span class=\"token operator\">=</span> <span class=\"token builtin\">len</span><span class=\"token punctuation\">(</span>senate<span class=\"token punctuation\">)</span></pre></td></tr><tr><td data-num=\"4\"></td><td><pre>        r <span class=\"token operator\">=</span> <span class=\"token punctuation\">[</span><span class=\"token punctuation\">]</span></pre></td></tr><tr><td data-num=\"5\"></td><td><pre>        d <span class=\"token operator\">=</span> <span class=\"token punctuation\">[</span><span class=\"token punctuation\">]</span></pre></td></tr><tr><td data-num=\"6\"></td><td><pre>        <span class=\"token keyword\">for</span> i <span class=\"token keyword\">in</span> <span class=\"token builtin\">range</span><span class=\"token punctuation\">(</span><span class=\"token number\">0</span><span class=\"token punctuation\">,</span> n<span class=\"token punctuation\">)</span><span class=\"token punctuation\">:</span></pre></td></tr><tr><td data-num=\"7\"></td><td><pre>            r<span class=\"token punctuation\">.</span>append<span class=\"token punctuation\">(</span>i<span class=\"token punctuation\">)</span> <span class=\"token keyword\">if</span> senate<span class=\"token punctuation\">[</span>i<span class=\"token punctuation\">]</span> <span class=\"token operator\">==</span> <span class=\"token string\">'R'</span> <span class=\"token keyword\">else</span> d<span class=\"token punctuation\">.</span>append<span class=\"token punctuation\">(</span>i<span class=\"token punctuation\">)</span></pre></td></tr><tr><td data-num=\"8\"></td><td><pre>        <span class=\"token keyword\">while</span> r <span class=\"token keyword\">and</span> d<span class=\"token punctuation\">:</span></pre></td></tr><tr><td data-num=\"9\"></td><td><pre>            tr <span class=\"token operator\">=</span> r<span class=\"token punctuation\">.</span>pop<span class=\"token punctuation\">(</span><span class=\"token number\">0</span><span class=\"token punctuation\">)</span></pre></td></tr><tr><td data-num=\"10\"></td><td><pre>            td <span class=\"token operator\">=</span> d<span class=\"token punctuation\">.</span>pop<span class=\"token punctuation\">(</span><span class=\"token number\">0</span><span class=\"token punctuation\">)</span></pre></td></tr><tr><td data-num=\"11\"></td><td><pre>            r<span class=\"token punctuation\">.</span>append<span class=\"token punctuation\">(</span>tr <span class=\"token operator\">+</span> n<span class=\"token punctuation\">)</span> <span class=\"token keyword\">if</span> tr <span class=\"token operator\">&lt;</span> td <span class=\"token keyword\">else</span> d<span class=\"token punctuation\">.</span>append<span class=\"token punctuation\">(</span>td <span class=\"token operator\">+</span> n<span class=\"token punctuation\">)</span></pre></td></tr><tr><td data-num=\"12\"></td><td><pre>        <span class=\"token keyword\">return</span> <span class=\"token string\">\"Radiant\"</span> <span class=\"token keyword\">if</span> <span class=\"token builtin\">len</span><span class=\"token punctuation\">(</span>d<span class=\"token punctuation\">)</span> <span class=\"token operator\">==</span> <span class=\"token number\">0</span> <span class=\"token keyword\">else</span> <span class=\"token string\">\"Dire\"</span></pre></td></tr></table></figure></div>\n",
            "tags": [
                "Coding",
                "Leetcode",
                "Medium",
                "String",
                "Leetcode",
                "Medium",
                "Greedy",
                "Queue"
            ]
        },
        {
            "id": "https://chienikao.github.io/2023/05/03/Algorithm/Branch%20and%20Bound/",
            "url": "https://chienikao.github.io/2023/05/03/Algorithm/Branch%20and%20Bound/",
            "title": "Branch and Bound (B&B)",
            "date_published": "2023-05-03T10:11:54.000Z",
            "content_html": "<h2 id=\"branch-and-bound\"><a class=\"anchor\" href=\"#branch-and-bound\">#</a> Branch and Bound</h2>\n<ul>\n<li>The branch-and-bound algorithm developed here is <span class=\"red\">an improvement on the backtracking algorithm</span>.</li>\n<li>The B&amp;B design strategy is very similar to backtracking in that a state space tree is used to solve a problem.</li>\n<li>B&amp;B vs. Backtracking\n<ul>\n<li>B&amp;B does <strong>not limit</strong> us to any particular way of <strong>traversing</strong> the tree and</li>\n<li>B&amp;B is used only for optimization problems</li>\n</ul>\n</li>\n<li>A B&amp;B algorithm computes a number (<strong>bound</strong>) at a node to <strong>determine whether the node is promising</strong>.\n<ul>\n<li>If that bound is <strong>no better than</strong> the value of the best solution found so far, the node is <strong>nonpromising</strong>.</li>\n<li>Otherwise, it is <strong>promising</strong>.</li>\n</ul>\n</li>\n</ul>\n<h3 id=\"example\"><a class=\"anchor\" href=\"#example\">#</a> <a href=\"https://chienikao.github.io/2023/04/25/Algorithm/Backtracking/#0-1-knapsack-problem\">Example</a></h3>\n",
            "tags": [
                "Algorithm",
                "Algorithm"
            ]
        },
        {
            "id": "https://chienikao.github.io/2023/05/03/Coding/leetcode/Easy/2215%20Find%20the%20Difference%20of%20Two%20Arrays/",
            "url": "https://chienikao.github.io/2023/05/03/Coding/leetcode/Easy/2215%20Find%20the%20Difference%20of%20Two%20Arrays/",
            "title": "2215. Find the Difference of Two Arrays",
            "date_published": "2023-05-03T02:39:26.000Z",
            "content_html": "<p>⭐️</p>\n<h2 id=\"題目敘述\"><a class=\"anchor\" href=\"#題目敘述\">#</a> <span class=\"exturl\" data-url=\"aHR0cHM6Ly9sZWV0Y29kZS5jb20vcHJvYmxlbXMvZmluZC10aGUtZGlmZmVyZW5jZS1vZi10d28tYXJyYXlzLw==\">題目敘述</span></h2>\n<p>Given two <strong>0-indexed</strong> integer arrays  <code>nums1</code>  and  <code>nums2</code> , return a list  <code>answer</code>  of size  <code>2</code>  where:</p>\n<ul>\n<li><code>answer[0]</code>  <em>is a list of all <strong>distinct</strong> integers in  <code>nums1</code>  which are <strong>not</strong> present in  <code>nums2</code> </em>.</li>\n<li><code>answer[1]</code>  is a list of all <strong>distinct</strong> integers in  <code>nums2</code>  which are <strong>not</strong> present in  <code>nums1</code> .</li>\n</ul>\n<p><strong>Note</strong> that the integers in the lists may be returned in <strong>any</strong> order.</p>\n<h3 id=\"example-1\"><a class=\"anchor\" href=\"#example-1\">#</a> Example 1</h3>\n<blockquote>\n<p><strong>Input:</strong> nums1 = [1,2,3], nums2 = [2,4,6]<br>\n<strong>Output:</strong> [[1,3],[4,6]]<br>\n<strong>Explanation:</strong><br>\nFor nums1, nums1[1] = 2 is present at index 0 of nums2, whereas nums1[0] = 1 and nums1[2] = 3 are not present in nums2. Therefore, answer[0] = [1,3].<br>\nFor nums2, nums2[0] = 2 is present at index 1 of nums1, whereas nums2[1] = 4 and nums2[2] = 6 are not present in nums2. Therefore, answer[1] = [4,6].</p>\n</blockquote>\n<h3 id=\"example-2\"><a class=\"anchor\" href=\"#example-2\">#</a> Example 2</h3>\n<blockquote>\n<p><strong>Input:</strong> nums1 = [1,2,3,3], nums2 = [1,1,2,2]<br>\n<strong>Output:</strong> [[3],[]]<br>\n<strong>Explanation:</strong><br>\nFor nums1, nums1[2] and nums1[3] are not present in nums2. Since nums1[2] == nums1[3], their value is only included once and answer[0] = [3].<br>\nEvery integer in nums2 is present in nums1. Therefore, answer[1] = [].</p>\n</blockquote>\n<div class=\"tab\" data-id=\"code\" data-title=\"C++\">\n<figure class=\"highlight cpp\"><figcaption data-lang=\"C++\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre><span class=\"token keyword\">class</span> <span class=\"token class-name\">Solution</span> <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"2\"></td><td><pre><span class=\"token keyword\">public</span><span class=\"token operator\">:</span></pre></td></tr><tr><td data-num=\"3\"></td><td><pre>    vector<span class=\"token operator\">&lt;</span>vector<span class=\"token operator\">&lt;</span><span class=\"token keyword\">int</span><span class=\"token operator\">>></span> <span class=\"token function\">findDifference</span><span class=\"token punctuation\">(</span>vector<span class=\"token operator\">&lt;</span><span class=\"token keyword\">int</span><span class=\"token operator\">></span><span class=\"token operator\">&amp;</span> nums1<span class=\"token punctuation\">,</span> vector<span class=\"token operator\">&lt;</span><span class=\"token keyword\">int</span><span class=\"token operator\">></span><span class=\"token operator\">&amp;</span> nums2<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"4\"></td><td><pre>        vector<span class=\"token operator\">&lt;</span>vector<span class=\"token operator\">&lt;</span><span class=\"token keyword\">int</span><span class=\"token operator\">>></span> res<span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"5\"></td><td><pre>        vector<span class=\"token operator\">&lt;</span><span class=\"token keyword\">int</span><span class=\"token operator\">></span> tmp<span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"6\"></td><td><pre>        map<span class=\"token operator\">&lt;</span><span class=\"token keyword\">int</span><span class=\"token punctuation\">,</span> <span class=\"token keyword\">int</span><span class=\"token operator\">></span> mp1<span class=\"token punctuation\">,</span> mp2<span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"7\"></td><td><pre>        <span class=\"token keyword\">for</span> <span class=\"token punctuation\">(</span><span class=\"token keyword\">int</span> n <span class=\"token operator\">:</span> nums1<span class=\"token punctuation\">)</span> mp1<span class=\"token punctuation\">[</span>n<span class=\"token punctuation\">]</span> <span class=\"token operator\">=</span> <span class=\"token number\">1</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"8\"></td><td><pre>        <span class=\"token keyword\">for</span> <span class=\"token punctuation\">(</span><span class=\"token keyword\">int</span> n <span class=\"token operator\">:</span> nums2<span class=\"token punctuation\">)</span> mp2<span class=\"token punctuation\">[</span>n<span class=\"token punctuation\">]</span> <span class=\"token operator\">=</span> <span class=\"token number\">1</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"9\"></td><td><pre></pre></td></tr><tr><td data-num=\"10\"></td><td><pre>        <span class=\"token keyword\">for</span> <span class=\"token punctuation\">(</span><span class=\"token keyword\">auto</span> m <span class=\"token operator\">:</span> mp1<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"11\"></td><td><pre>            <span class=\"token keyword\">if</span> <span class=\"token punctuation\">(</span>mp2<span class=\"token punctuation\">.</span><span class=\"token function\">count</span><span class=\"token punctuation\">(</span>m<span class=\"token punctuation\">.</span>first<span class=\"token punctuation\">)</span> <span class=\"token operator\">==</span> <span class=\"token number\">0</span><span class=\"token punctuation\">)</span> tmp<span class=\"token punctuation\">.</span><span class=\"token function\">push_back</span><span class=\"token punctuation\">(</span>m<span class=\"token punctuation\">.</span>first<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"12\"></td><td><pre>        <span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"13\"></td><td><pre>        res<span class=\"token punctuation\">.</span><span class=\"token function\">push_back</span><span class=\"token punctuation\">(</span>tmp<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"14\"></td><td><pre>        tmp<span class=\"token punctuation\">.</span><span class=\"token function\">clear</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"15\"></td><td><pre>        <span class=\"token keyword\">for</span> <span class=\"token punctuation\">(</span><span class=\"token keyword\">auto</span> m <span class=\"token operator\">:</span> mp2<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"16\"></td><td><pre>            <span class=\"token keyword\">if</span> <span class=\"token punctuation\">(</span>mp1<span class=\"token punctuation\">.</span><span class=\"token function\">count</span><span class=\"token punctuation\">(</span>m<span class=\"token punctuation\">.</span>first<span class=\"token punctuation\">)</span> <span class=\"token operator\">==</span> <span class=\"token number\">0</span><span class=\"token punctuation\">)</span> tmp<span class=\"token punctuation\">.</span><span class=\"token function\">push_back</span><span class=\"token punctuation\">(</span>m<span class=\"token punctuation\">.</span>first<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"17\"></td><td><pre>        <span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"18\"></td><td><pre>        res<span class=\"token punctuation\">.</span><span class=\"token function\">push_back</span><span class=\"token punctuation\">(</span>tmp<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"19\"></td><td><pre>        <span class=\"token keyword\">return</span> res<span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"20\"></td><td><pre>    <span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"21\"></td><td><pre><span class=\"token punctuation\">&#125;</span><span class=\"token punctuation\">;</span></pre></td></tr></table></figure></div>\n<div class=\"tab\" data-id=\"code\" data-title=\"Java\">\n<figure class=\"highlight java\"><figcaption data-lang=\"java\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre><span class=\"token keyword\">import</span> <span class=\"token import\"><span class=\"token namespace\">java<span class=\"token punctuation\">.</span>util<span class=\"token punctuation\">.</span></span><span class=\"token class-name\">ArrayList</span></span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"2\"></td><td><pre><span class=\"token keyword\">import</span> <span class=\"token import\"><span class=\"token namespace\">java<span class=\"token punctuation\">.</span>util<span class=\"token punctuation\">.</span></span><span class=\"token class-name\">List</span></span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"3\"></td><td><pre></pre></td></tr><tr><td data-num=\"4\"></td><td><pre><span class=\"token keyword\">class</span> <span class=\"token class-name\">Solution</span> <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"5\"></td><td><pre>    <span class=\"token keyword\">public</span> <span class=\"token class-name\">List</span><span class=\"token generics\"><span class=\"token punctuation\">&lt;</span><span class=\"token class-name\">List</span><span class=\"token punctuation\">&lt;</span><span class=\"token class-name\">Integer</span><span class=\"token punctuation\">></span><span class=\"token punctuation\">></span></span> <span class=\"token function\">findDifference</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">int</span><span class=\"token punctuation\">[</span><span class=\"token punctuation\">]</span> nums1<span class=\"token punctuation\">,</span> <span class=\"token keyword\">int</span><span class=\"token punctuation\">[</span><span class=\"token punctuation\">]</span> nums2<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"6\"></td><td><pre>        <span class=\"token class-name\">List</span><span class=\"token generics\"><span class=\"token punctuation\">&lt;</span><span class=\"token class-name\">List</span><span class=\"token punctuation\">&lt;</span><span class=\"token class-name\">Integer</span><span class=\"token punctuation\">></span><span class=\"token punctuation\">></span></span> ans <span class=\"token operator\">=</span> <span class=\"token keyword\">new</span> <span class=\"token class-name\">ArrayList</span><span class=\"token generics\"><span class=\"token punctuation\">&lt;</span><span class=\"token punctuation\">></span></span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"7\"></td><td><pre>        <span class=\"token class-name\">List</span><span class=\"token generics\"><span class=\"token punctuation\">&lt;</span><span class=\"token class-name\">Integer</span><span class=\"token punctuation\">></span></span> map1 <span class=\"token operator\">=</span> <span class=\"token keyword\">new</span> <span class=\"token class-name\">ArrayList</span><span class=\"token generics\"><span class=\"token punctuation\">&lt;</span><span class=\"token punctuation\">></span></span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">,</span> map2 <span class=\"token operator\">=</span> <span class=\"token keyword\">new</span> <span class=\"token class-name\">ArrayList</span><span class=\"token generics\"><span class=\"token punctuation\">&lt;</span><span class=\"token punctuation\">></span></span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"8\"></td><td><pre>        <span class=\"token keyword\">for</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">int</span> n <span class=\"token operator\">:</span> nums1<span class=\"token punctuation\">)</span> map1<span class=\"token punctuation\">.</span><span class=\"token function\">add</span><span class=\"token punctuation\">(</span>n<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"9\"></td><td><pre>        <span class=\"token keyword\">for</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">int</span> n <span class=\"token operator\">:</span> nums2<span class=\"token punctuation\">)</span> map2<span class=\"token punctuation\">.</span><span class=\"token function\">add</span><span class=\"token punctuation\">(</span>n<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"10\"></td><td><pre></pre></td></tr><tr><td data-num=\"11\"></td><td><pre>        <span class=\"token class-name\">List</span><span class=\"token generics\"><span class=\"token punctuation\">&lt;</span><span class=\"token class-name\">Integer</span><span class=\"token punctuation\">></span></span> temp1 <span class=\"token operator\">=</span> <span class=\"token keyword\">new</span> <span class=\"token class-name\">ArrayList</span><span class=\"token generics\"><span class=\"token punctuation\">&lt;</span><span class=\"token punctuation\">></span></span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"12\"></td><td><pre>        <span class=\"token keyword\">for</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">int</span> n <span class=\"token operator\">:</span> nums1<span class=\"token punctuation\">)</span><span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"13\"></td><td><pre>            <span class=\"token keyword\">if</span><span class=\"token punctuation\">(</span><span class=\"token operator\">!</span>map2<span class=\"token punctuation\">.</span><span class=\"token function\">contains</span><span class=\"token punctuation\">(</span>n<span class=\"token punctuation\">)</span> <span class=\"token operator\">&amp;&amp;</span> <span class=\"token operator\">!</span>temp1<span class=\"token punctuation\">.</span><span class=\"token function\">contains</span><span class=\"token punctuation\">(</span>n<span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"14\"></td><td><pre>                temp1<span class=\"token punctuation\">.</span><span class=\"token function\">add</span><span class=\"token punctuation\">(</span>n<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"15\"></td><td><pre>            <span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"16\"></td><td><pre>        <span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"17\"></td><td><pre>        ans<span class=\"token punctuation\">.</span><span class=\"token function\">add</span><span class=\"token punctuation\">(</span>temp1<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"18\"></td><td><pre></pre></td></tr><tr><td data-num=\"19\"></td><td><pre>        <span class=\"token class-name\">List</span><span class=\"token generics\"><span class=\"token punctuation\">&lt;</span><span class=\"token class-name\">Integer</span><span class=\"token punctuation\">></span></span> temp2 <span class=\"token operator\">=</span> <span class=\"token keyword\">new</span> <span class=\"token class-name\">ArrayList</span><span class=\"token generics\"><span class=\"token punctuation\">&lt;</span><span class=\"token punctuation\">></span></span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"20\"></td><td><pre>        <span class=\"token keyword\">for</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">int</span> n <span class=\"token operator\">:</span> nums2<span class=\"token punctuation\">)</span><span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"21\"></td><td><pre>            <span class=\"token keyword\">if</span><span class=\"token punctuation\">(</span><span class=\"token operator\">!</span>map1<span class=\"token punctuation\">.</span><span class=\"token function\">contains</span><span class=\"token punctuation\">(</span>n<span class=\"token punctuation\">)</span> <span class=\"token operator\">&amp;&amp;</span> <span class=\"token operator\">!</span>temp2<span class=\"token punctuation\">.</span><span class=\"token function\">contains</span><span class=\"token punctuation\">(</span>n<span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"22\"></td><td><pre>                temp2<span class=\"token punctuation\">.</span><span class=\"token function\">add</span><span class=\"token punctuation\">(</span>n<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"23\"></td><td><pre>            <span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"24\"></td><td><pre>        <span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"25\"></td><td><pre>        ans<span class=\"token punctuation\">.</span><span class=\"token function\">add</span><span class=\"token punctuation\">(</span>temp2<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"26\"></td><td><pre></pre></td></tr><tr><td data-num=\"27\"></td><td><pre>        <span class=\"token keyword\">return</span> ans<span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"28\"></td><td><pre>    <span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"29\"></td><td><pre><span class=\"token punctuation\">&#125;</span></pre></td></tr></table></figure></div>\n<div class=\"tab\" data-id=\"code\" data-title=\"Python\">\n<figure class=\"highlight python\"><figcaption data-lang=\"python\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre><span class=\"token keyword\">class</span> <span class=\"token class-name\">Solution</span><span class=\"token punctuation\">:</span></pre></td></tr><tr><td data-num=\"2\"></td><td><pre>    <span class=\"token keyword\">def</span> <span class=\"token function\">findDifference</span><span class=\"token punctuation\">(</span>self<span class=\"token punctuation\">,</span> nums1<span class=\"token punctuation\">,</span> nums2<span class=\"token punctuation\">)</span><span class=\"token punctuation\">:</span>    </pre></td></tr><tr><td data-num=\"3\"></td><td><pre>        <span class=\"token keyword\">return</span> <span class=\"token punctuation\">[</span><span class=\"token builtin\">list</span><span class=\"token punctuation\">(</span><span class=\"token builtin\">set</span><span class=\"token punctuation\">(</span>nums1<span class=\"token punctuation\">)</span> <span class=\"token operator\">-</span> <span class=\"token builtin\">set</span><span class=\"token punctuation\">(</span>nums2<span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">,</span> <span class=\"token builtin\">list</span><span class=\"token punctuation\">(</span><span class=\"token builtin\">set</span><span class=\"token punctuation\">(</span>nums2<span class=\"token punctuation\">)</span> <span class=\"token operator\">-</span> <span class=\"token builtin\">set</span><span class=\"token punctuation\">(</span>nums1<span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">]</span></pre></td></tr></table></figure></div>\n",
            "tags": [
                "Coding",
                "Leetcode",
                "Easy",
                "Leetcode",
                "Easy",
                "Array",
                "Hash Table"
            ]
        },
        {
            "id": "https://chienikao.github.io/2023/05/02/Coding/leetcode/Easy/1822%20Sign%20of%20the%20Product%20of%20an%20Array/",
            "url": "https://chienikao.github.io/2023/05/02/Coding/leetcode/Easy/1822%20Sign%20of%20the%20Product%20of%20an%20Array/",
            "title": "1822. Sign of the Product of an Array",
            "date_published": "2023-05-02T02:27:18.000Z",
            "content_html": "<p>⭐️</p>\n<h2 id=\"題目敘述\"><a class=\"anchor\" href=\"#題目敘述\">#</a> <span class=\"exturl\" data-url=\"aHR0cHM6Ly9sZWV0Y29kZS5jb20vcHJvYmxlbXMvc2lnbi1vZi10aGUtcHJvZHVjdC1vZi1hbi1hcnJheS8=\">題目敘述</span></h2>\n<p>There is a function  <code>signFunc(x)</code>  that returns:</p>\n<ul>\n<li><code>1</code>  if  <code>x</code>  is positive.</li>\n<li><code>-1</code>  if  <code>x</code>  is negative.</li>\n<li><code>0</code>  if  <code>x</code>  is equal to  <code>0</code> .</li>\n</ul>\n<p>You are given an integer array  <code>nums</code> . Let  <code>product</code>  be the product of all values in the array  <code>nums</code> .</p>\n<p>Return  <code>signFunc(product)</code> .</p>\n<h3 id=\"example-1\"><a class=\"anchor\" href=\"#example-1\">#</a> Example 1</h3>\n<blockquote>\n<p><strong>Input</strong>: nums = [-1,-2,-3,-4,3,2,1]<br>\n<strong>Output</strong>: 1<br>\n<strong>Explanation</strong>: The product of all values in the array is 144, and signFunc(144) = 1</p>\n</blockquote>\n<h3 id=\"example-2\"><a class=\"anchor\" href=\"#example-2\">#</a> Example 2</h3>\n<blockquote>\n<p><strong>Input</strong>: nums = [1,5,0,2,-3]<br>\n<strong>Output</strong>: 0<br>\n<strong>Explanation</strong>: The product of all values in the array is 0, and signFunc(0) = 0</p>\n</blockquote>\n<h3 id=\"example-3\"><a class=\"anchor\" href=\"#example-3\">#</a> Example 3</h3>\n<blockquote>\n<p><strong>Input</strong>: nums = [-1,1,-1,1,-1]<br>\n<strong>Output</strong>: -1<br>\n<strong>Explanation</strong>: The product of all values in the array is -1, and signFunc(-1) = -1</p>\n</blockquote>\n<div class=\"tab\" data-id=\"code\" data-title=\"C++\">\n<figure class=\"highlight cpp\"><figcaption data-lang=\"C++\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre><span class=\"token keyword\">class</span> <span class=\"token class-name\">Solution</span> <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"2\"></td><td><pre><span class=\"token keyword\">public</span><span class=\"token operator\">:</span></pre></td></tr><tr><td data-num=\"3\"></td><td><pre>    <span class=\"token keyword\">int</span> <span class=\"token function\">arraySign</span><span class=\"token punctuation\">(</span>vector<span class=\"token operator\">&lt;</span><span class=\"token keyword\">int</span><span class=\"token operator\">></span><span class=\"token operator\">&amp;</span> nums<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"4\"></td><td><pre>        <span class=\"token keyword\">int</span> sign <span class=\"token operator\">=</span> <span class=\"token number\">1</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"5\"></td><td><pre>        <span class=\"token keyword\">for</span> <span class=\"token punctuation\">(</span><span class=\"token keyword\">int</span> n <span class=\"token operator\">:</span> nums<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"6\"></td><td><pre>            <span class=\"token keyword\">if</span> <span class=\"token punctuation\">(</span>n <span class=\"token operator\">==</span> <span class=\"token number\">0</span><span class=\"token punctuation\">)</span> <span class=\"token keyword\">return</span> <span class=\"token number\">0</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"7\"></td><td><pre>            <span class=\"token keyword\">if</span> <span class=\"token punctuation\">(</span>n <span class=\"token operator\">&lt;</span> <span class=\"token number\">0</span><span class=\"token punctuation\">)</span> sign <span class=\"token operator\">*=</span> <span class=\"token operator\">-</span><span class=\"token number\">1</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"8\"></td><td><pre>        <span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"9\"></td><td><pre>        <span class=\"token keyword\">if</span> <span class=\"token punctuation\">(</span>sign <span class=\"token operator\">></span> <span class=\"token number\">0</span><span class=\"token punctuation\">)</span> <span class=\"token keyword\">return</span> <span class=\"token number\">1</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"10\"></td><td><pre>        <span class=\"token keyword\">else</span> <span class=\"token keyword\">return</span> <span class=\"token operator\">-</span><span class=\"token number\">1</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"11\"></td><td><pre>    <span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"12\"></td><td><pre><span class=\"token punctuation\">&#125;</span><span class=\"token punctuation\">;</span></pre></td></tr></table></figure></div>\n<div class=\"tab\" data-id=\"code\" data-title=\"Java\">\n<figure class=\"highlight java\"><figcaption data-lang=\"java\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre><span class=\"token keyword\">class</span> <span class=\"token class-name\">Solution</span> <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"2\"></td><td><pre>    <span class=\"token keyword\">public</span> <span class=\"token keyword\">int</span> <span class=\"token function\">arraySign</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">int</span><span class=\"token punctuation\">[</span><span class=\"token punctuation\">]</span> nums<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"3\"></td><td><pre>        <span class=\"token keyword\">int</span> sign <span class=\"token operator\">=</span> <span class=\"token number\">1</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"4\"></td><td><pre>        <span class=\"token keyword\">for</span> <span class=\"token punctuation\">(</span><span class=\"token keyword\">int</span> n <span class=\"token operator\">:</span> nums<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"5\"></td><td><pre>            <span class=\"token keyword\">if</span> <span class=\"token punctuation\">(</span>n <span class=\"token operator\">==</span> <span class=\"token number\">0</span><span class=\"token punctuation\">)</span> <span class=\"token keyword\">return</span> <span class=\"token number\">0</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"6\"></td><td><pre>            <span class=\"token keyword\">if</span> <span class=\"token punctuation\">(</span>n <span class=\"token operator\">&lt;</span> <span class=\"token number\">0</span><span class=\"token punctuation\">)</span> sign <span class=\"token operator\">*=</span> <span class=\"token operator\">-</span><span class=\"token number\">1</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"7\"></td><td><pre>        <span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"8\"></td><td><pre>        <span class=\"token keyword\">return</span> sign <span class=\"token operator\">></span> <span class=\"token number\">0</span> <span class=\"token operator\">?</span> <span class=\"token number\">1</span> <span class=\"token operator\">:</span> <span class=\"token operator\">-</span><span class=\"token number\">1</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"9\"></td><td><pre>    <span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"10\"></td><td><pre><span class=\"token punctuation\">&#125;</span></pre></td></tr></table></figure></div>\n<div class=\"tab\" data-id=\"code\" data-title=\"Python\">\n<figure class=\"highlight python\"><figcaption data-lang=\"python\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre><span class=\"token keyword\">class</span> <span class=\"token class-name\">Solution</span><span class=\"token punctuation\">:</span></pre></td></tr><tr><td data-num=\"2\"></td><td><pre>    <span class=\"token keyword\">def</span> <span class=\"token function\">arraySign</span><span class=\"token punctuation\">(</span>self<span class=\"token punctuation\">,</span> nums<span class=\"token punctuation\">:</span> List<span class=\"token punctuation\">[</span><span class=\"token builtin\">int</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">)</span> <span class=\"token operator\">-</span><span class=\"token operator\">></span> <span class=\"token builtin\">int</span><span class=\"token punctuation\">:</span></pre></td></tr><tr><td data-num=\"3\"></td><td><pre>        sign <span class=\"token operator\">=</span> <span class=\"token number\">1</span></pre></td></tr><tr><td data-num=\"4\"></td><td><pre>        <span class=\"token keyword\">for</span> n <span class=\"token keyword\">in</span> nums<span class=\"token punctuation\">:</span></pre></td></tr><tr><td data-num=\"5\"></td><td><pre>            <span class=\"token keyword\">if</span> n <span class=\"token operator\">==</span> <span class=\"token number\">0</span><span class=\"token punctuation\">:</span> <span class=\"token keyword\">return</span> <span class=\"token number\">0</span></pre></td></tr><tr><td data-num=\"6\"></td><td><pre>            <span class=\"token keyword\">if</span> n <span class=\"token operator\">&lt;</span> <span class=\"token number\">0</span><span class=\"token punctuation\">:</span> sign <span class=\"token operator\">*=</span> <span class=\"token operator\">-</span><span class=\"token number\">1</span></pre></td></tr><tr><td data-num=\"7\"></td><td><pre>        <span class=\"token keyword\">return</span> <span class=\"token number\">1</span> <span class=\"token keyword\">if</span> sign <span class=\"token operator\">></span> <span class=\"token number\">0</span> <span class=\"token keyword\">else</span> <span class=\"token operator\">-</span><span class=\"token number\">1</span></pre></td></tr></table></figure></div>\n",
            "tags": [
                "Coding",
                "Leetcode",
                "Easy",
                "Leetcode",
                "Easy",
                "Array",
                "Math"
            ]
        },
        {
            "id": "https://chienikao.github.io/2023/05/01/Coding/leetcode/Easy/1491%20Average%20Salary%20Excluding%20the%20Minimum%20and%20Maximum%20Salary/",
            "url": "https://chienikao.github.io/2023/05/01/Coding/leetcode/Easy/1491%20Average%20Salary%20Excluding%20the%20Minimum%20and%20Maximum%20Salary/",
            "title": "1491. Average Salary Excluding the Minimum and Maximum Salary",
            "date_published": "2023-05-01T06:58:59.000Z",
            "content_html": "<p>⭐️</p>\n<h2 id=\"題目敘述\"><a class=\"anchor\" href=\"#題目敘述\">#</a> <span class=\"exturl\" data-url=\"aHR0cHM6Ly9sZWV0Y29kZS5jb20vcHJvYmxlbXMvYXZlcmFnZS1zYWxhcnktZXhjbHVkaW5nLXRoZS1taW5pbXVtLWFuZC1tYXhpbXVtLXNhbGFyeS8=\">題目敘述</span></h2>\n<p>You are given an array of <strong>unique</strong> integers  <code>salary</code>  where  <code>salary[i]</code>  is the salary of the  <code>ith</code>  employee.</p>\n<p>Return <em>the average salary of employees excluding the minimum and maximum salary</em>. Answers within  <code>10-5</code>  of the actual answer will be accepted.</p>\n<h3 id=\"example-1\"><a class=\"anchor\" href=\"#example-1\">#</a> Example 1</h3>\n<blockquote>\n<p><strong>Input:</strong> salary = [4000,3000,1000,2000]<br>\n<strong>Output:</strong> 2500.00000<br>\n<strong>Explanation:</strong> Minimum salary and maximum salary are 1000 and 4000 respectively.<br>\nAverage salary excluding minimum and maximum salary is (2000+3000) / 2 = 2500</p>\n</blockquote>\n<h3 id=\"example-2\"><a class=\"anchor\" href=\"#example-2\">#</a> Example 2</h3>\n<blockquote>\n<p><strong>Input:</strong> salary = [1000,2000,3000]<br>\n<strong>Output:</strong> 2000.00000<br>\n<strong>Explanation:</strong> Minimum salary and maximum salary are 1000 and 3000 respectively.<br>\nAverage salary excluding minimum and maximum salary is (2000) / 1 = 2000</p>\n</blockquote>\n<h2 id=\"solution\"><a class=\"anchor\" href=\"#solution\">#</a> Solution</h2>\n<div class=\"tab\" data-id=\"code\" data-title=\"C++\">\n<figure class=\"highlight cpp\"><figcaption data-lang=\"C++\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre><span class=\"token keyword\">class</span> <span class=\"token class-name\">Solution</span> <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"2\"></td><td><pre><span class=\"token keyword\">public</span><span class=\"token operator\">:</span></pre></td></tr><tr><td data-num=\"3\"></td><td><pre>    <span class=\"token keyword\">double</span> <span class=\"token function\">average</span><span class=\"token punctuation\">(</span>vector<span class=\"token operator\">&lt;</span><span class=\"token keyword\">int</span><span class=\"token operator\">></span><span class=\"token operator\">&amp;</span> salary<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"4\"></td><td><pre>        <span class=\"token keyword\">int</span> mn <span class=\"token operator\">=</span> salary<span class=\"token punctuation\">[</span><span class=\"token number\">0</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">,</span> mx <span class=\"token operator\">=</span> salary<span class=\"token punctuation\">[</span><span class=\"token number\">0</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"5\"></td><td><pre>        <span class=\"token keyword\">double</span> res <span class=\"token operator\">=</span> <span class=\"token number\">0</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"6\"></td><td><pre>        <span class=\"token keyword\">for</span> <span class=\"token punctuation\">(</span><span class=\"token keyword\">int</span> s <span class=\"token operator\">:</span> salary<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"7\"></td><td><pre>            res <span class=\"token operator\">+=</span> s<span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"8\"></td><td><pre>            mn <span class=\"token operator\">=</span> <span class=\"token function\">min</span><span class=\"token punctuation\">(</span>mn<span class=\"token punctuation\">,</span> s<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"9\"></td><td><pre>            mx <span class=\"token operator\">=</span> <span class=\"token function\">max</span><span class=\"token punctuation\">(</span>mx<span class=\"token punctuation\">,</span> s<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"10\"></td><td><pre>        <span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"11\"></td><td><pre>        res <span class=\"token operator\">-=</span> <span class=\"token punctuation\">(</span>mn <span class=\"token operator\">+</span> mx<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"12\"></td><td><pre>        <span class=\"token keyword\">return</span> res <span class=\"token operator\">/</span> <span class=\"token punctuation\">(</span>salary<span class=\"token punctuation\">.</span><span class=\"token function\">size</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token operator\">-</span><span class=\"token number\">2</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"13\"></td><td><pre>    <span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"14\"></td><td><pre><span class=\"token punctuation\">&#125;</span><span class=\"token punctuation\">;</span></pre></td></tr></table></figure></div>\n<div class=\"tab\" data-id=\"code\" data-title=\"Java\">\n<figure class=\"highlight java\"><figcaption data-lang=\"java\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre><span class=\"token keyword\">import</span> <span class=\"token import\"><span class=\"token namespace\">java<span class=\"token punctuation\">.</span>util<span class=\"token punctuation\">.</span></span><span class=\"token class-name\">Arrays</span></span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"2\"></td><td><pre></pre></td></tr><tr><td data-num=\"3\"></td><td><pre><span class=\"token keyword\">class</span> <span class=\"token class-name\">Solution</span> <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"4\"></td><td><pre>    <span class=\"token keyword\">public</span> <span class=\"token keyword\">double</span> <span class=\"token function\">average</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">int</span><span class=\"token punctuation\">[</span><span class=\"token punctuation\">]</span> salary<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"5\"></td><td><pre>        <span class=\"token class-name\">Arrays</span><span class=\"token punctuation\">.</span><span class=\"token function\">sort</span><span class=\"token punctuation\">(</span>salary<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"6\"></td><td><pre>        <span class=\"token keyword\">long</span> sum <span class=\"token operator\">=</span> <span class=\"token number\">0</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"7\"></td><td><pre>        <span class=\"token keyword\">for</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">int</span> i <span class=\"token operator\">=</span> <span class=\"token number\">1</span><span class=\"token punctuation\">;</span> i <span class=\"token operator\">&lt;</span> salary<span class=\"token punctuation\">.</span>length <span class=\"token operator\">-</span> <span class=\"token number\">1</span><span class=\"token punctuation\">;</span> i<span class=\"token operator\">++</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"8\"></td><td><pre>            sum <span class=\"token operator\">+=</span> salary<span class=\"token punctuation\">[</span>i<span class=\"token punctuation\">]</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"9\"></td><td><pre>        <span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"10\"></td><td><pre>        </pre></td></tr><tr><td data-num=\"11\"></td><td><pre>        <span class=\"token keyword\">return</span> sum <span class=\"token operator\">/</span> <span class=\"token punctuation\">(</span>salary<span class=\"token punctuation\">.</span>length <span class=\"token operator\">-</span> <span class=\"token number\">2</span> <span class=\"token operator\">*</span> <span class=\"token number\">1.0</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"12\"></td><td><pre>    <span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"13\"></td><td><pre><span class=\"token punctuation\">&#125;</span></pre></td></tr></table></figure></div>\n<div class=\"tab\" data-id=\"code\" data-title=\"Python\">\n<figure class=\"highlight python\"><figcaption data-lang=\"python\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre><span class=\"token keyword\">class</span> <span class=\"token class-name\">Solution</span><span class=\"token punctuation\">:</span></pre></td></tr><tr><td data-num=\"2\"></td><td><pre>    <span class=\"token keyword\">def</span> <span class=\"token function\">average</span><span class=\"token punctuation\">(</span>self<span class=\"token punctuation\">,</span> salary<span class=\"token punctuation\">:</span> List<span class=\"token punctuation\">[</span><span class=\"token builtin\">int</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">)</span> <span class=\"token operator\">-</span><span class=\"token operator\">></span> <span class=\"token builtin\">float</span><span class=\"token punctuation\">:</span></pre></td></tr><tr><td data-num=\"3\"></td><td><pre>        min_salary <span class=\"token operator\">=</span> <span class=\"token builtin\">min</span><span class=\"token punctuation\">(</span>salary<span class=\"token punctuation\">)</span></pre></td></tr><tr><td data-num=\"4\"></td><td><pre>        max_salary <span class=\"token operator\">=</span> <span class=\"token builtin\">max</span><span class=\"token punctuation\">(</span>salary<span class=\"token punctuation\">)</span></pre></td></tr><tr><td data-num=\"5\"></td><td><pre>        total_salary <span class=\"token operator\">=</span> <span class=\"token builtin\">sum</span><span class=\"token punctuation\">(</span>salary<span class=\"token punctuation\">)</span> <span class=\"token operator\">-</span> min_salary <span class=\"token operator\">-</span> max_salary</pre></td></tr><tr><td data-num=\"6\"></td><td><pre>        num_employees <span class=\"token operator\">=</span> <span class=\"token builtin\">len</span><span class=\"token punctuation\">(</span>salary<span class=\"token punctuation\">)</span> <span class=\"token operator\">-</span> <span class=\"token number\">2</span></pre></td></tr><tr><td data-num=\"7\"></td><td><pre>        <span class=\"token keyword\">return</span> total_salary <span class=\"token operator\">/</span> num_employees</pre></td></tr></table></figure></div>\n",
            "tags": [
                "Coding",
                "Leetcode",
                "Easy",
                "Leetcode",
                "Easy",
                "Array",
                "Sorting"
            ]
        },
        {
            "id": "https://chienikao.github.io/2023/04/30/Coding/leetcode/Hard/1579%20Remove%20Max%20Number%20of%20Edges%20to%20Keep%20Graph%20Fully%20Traversable/",
            "url": "https://chienikao.github.io/2023/04/30/Coding/leetcode/Hard/1579%20Remove%20Max%20Number%20of%20Edges%20to%20Keep%20Graph%20Fully%20Traversable/",
            "title": "1579. Remove Max Number of Edges to Keep Graph Fully Traversable",
            "date_published": "2023-04-30T04:42:38.000Z",
            "content_html": "<p>⭐️⭐️⭐️</p>\n<h2 id=\"題目敘述\"><a class=\"anchor\" href=\"#題目敘述\">#</a> <span class=\"exturl\" data-url=\"aHR0cHM6Ly9sZWV0Y29kZS5jb20vcHJvYmxlbXMvcmVtb3ZlLW1heC1udW1iZXItb2YtZWRnZXMtdG8ta2VlcC1ncmFwaC1mdWxseS10cmF2ZXJzYWJsZS8=\">題目敘述</span></h2>\n<p>Alice and Bob have an undirected graph of  <code>n</code>  nodes and three types of edges:</p>\n<ul>\n<li>Type 1: Can be traversed by Alice only.</li>\n<li>Type 2: Can be traversed by Bob only.</li>\n<li>Type 3: Can be traversed by both Alice and Bob.</li>\n</ul>\n<p>Given an array  <code>edges</code>  where  <code>edges[i] = [typei, ui, vi]</code>  represents a bidirectional edge of type  <code>typei</code>  between nodes  <code>ui</code>  and  <code>vi</code> , find the maximum number of edges you can remove so that after removing the edges, the graph can still be fully traversed by both Alice and Bob. The graph is fully traversed by Alice and Bob if starting from any node, they can reach all other nodes.</p>\n<p>Return <em>the maximum number of edges you can remove, or return  <code>-1</code>  if Alice and Bob cannot fully traverse the graph</em>.</p>\n<h3 id=\"example-1\"><a class=\"anchor\" href=\"#example-1\">#</a> Example 1</h3>\n<p><img data-src=\"https://i.imgur.com/2SsBc9T.png\" alt=\"\"></p>\n<blockquote>\n<p><strong>Input</strong>: n = 4, edges = [[3,1,2],[3,2,3],[1,1,3],[1,2,4],[1,1,2],[2,3,4]]<br>\n<strong>Output</strong>: 2<br>\n<strong>Explanation</strong>: If we remove the 2 edges [1,1,2] and [1,1,3]. The graph will still be fully traversable by Alice and Bob. Removing any additional edge will not make it so. So the maximum number of edges we can remove is 2.</p>\n</blockquote>\n<h3 id=\"example-2\"><a class=\"anchor\" href=\"#example-2\">#</a> Example 2</h3>\n<p><img data-src=\"https://i.imgur.com/sNylQd6.png\" alt=\"\"></p>\n<blockquote>\n<p><strong>Input</strong>: n = 4, edges = [[3,1,2],[3,2,3],[1,1,4],[2,1,4]]<br>\n<strong>Output</strong>: 0<br>\n<strong>Explanation</strong>: Notice that removing any edge will not make the graph fully traversable by Alice and Bob.</p>\n</blockquote>\n<h3 id=\"example-3\"><a class=\"anchor\" href=\"#example-3\">#</a> Example 3</h3>\n<p><img data-src=\"https://i.imgur.com/jYOpe7F.png\" alt=\"\"></p>\n<blockquote>\n<p><strong>Input</strong>: n = 4, edges = [[3,2,3],[1,1,2],[2,3,4]]<br>\n<strong>Output</strong>: -1<br>\n<strong>Explanation</strong>: In the current graph, Alice cannot reach node 4 from the other nodes. Likewise, Bob cannot reach 1. Therefore it’s impossible to make the graph fully traversable.</p>\n</blockquote>\n<h2 id=\"solution\"><a class=\"anchor\" href=\"#solution\">#</a> Solution</h2>\n<div class=\"tab\" data-id=\"code\" data-title=\"C++\">\n<figure class=\"highlight cpp\"><figcaption data-lang=\"C++\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre><span class=\"token keyword\">class</span> <span class=\"token class-name\">UnionFind</span> <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"2\"></td><td><pre><span class=\"token keyword\">public</span><span class=\"token operator\">:</span></pre></td></tr><tr><td data-num=\"3\"></td><td><pre>    vector<span class=\"token operator\">&lt;</span><span class=\"token keyword\">int</span><span class=\"token operator\">></span> parent<span class=\"token punctuation\">,</span> rank<span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"4\"></td><td><pre>    <span class=\"token keyword\">int</span> nodes<span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"5\"></td><td><pre>    <span class=\"token function\">UnionFind</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">int</span> n<span class=\"token punctuation\">)</span><span class=\"token operator\">:</span> <span class=\"token function\">parent</span><span class=\"token punctuation\">(</span>n<span class=\"token operator\">+</span><span class=\"token number\">1</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">,</span> <span class=\"token function\">rank</span><span class=\"token punctuation\">(</span>n<span class=\"token operator\">+</span><span class=\"token number\">1</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">,</span> <span class=\"token function\">nodes</span><span class=\"token punctuation\">(</span><span class=\"token number\">1</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"6\"></td><td><pre>        <span class=\"token keyword\">for</span> <span class=\"token punctuation\">(</span><span class=\"token keyword\">int</span> i<span class=\"token operator\">=</span><span class=\"token number\">1</span><span class=\"token punctuation\">;</span> i<span class=\"token operator\">&lt;=</span>n<span class=\"token punctuation\">;</span> i<span class=\"token operator\">++</span><span class=\"token punctuation\">)</span> parent<span class=\"token punctuation\">[</span>i<span class=\"token punctuation\">]</span> <span class=\"token operator\">=</span> i<span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"7\"></td><td><pre>    <span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"8\"></td><td><pre></pre></td></tr><tr><td data-num=\"9\"></td><td><pre>    <span class=\"token keyword\">int</span> <span class=\"token function\">find</span> <span class=\"token punctuation\">(</span><span class=\"token keyword\">int</span> x<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"10\"></td><td><pre>        <span class=\"token keyword\">if</span> <span class=\"token punctuation\">(</span>x <span class=\"token operator\">==</span> parent<span class=\"token punctuation\">[</span>x<span class=\"token punctuation\">]</span><span class=\"token punctuation\">)</span> <span class=\"token keyword\">return</span> x<span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"11\"></td><td><pre>        <span class=\"token keyword\">return</span> parent<span class=\"token punctuation\">[</span>x<span class=\"token punctuation\">]</span> <span class=\"token operator\">=</span> <span class=\"token function\">find</span><span class=\"token punctuation\">(</span>parent<span class=\"token punctuation\">[</span>x<span class=\"token punctuation\">]</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"12\"></td><td><pre>    <span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"13\"></td><td><pre></pre></td></tr><tr><td data-num=\"14\"></td><td><pre>    <span class=\"token keyword\">bool</span> <span class=\"token function\">union_</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">int</span> x<span class=\"token punctuation\">,</span> <span class=\"token keyword\">int</span> y<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"15\"></td><td><pre>        <span class=\"token keyword\">int</span> px <span class=\"token operator\">=</span> <span class=\"token function\">find</span><span class=\"token punctuation\">(</span>x<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"16\"></td><td><pre>        <span class=\"token keyword\">int</span> py <span class=\"token operator\">=</span> <span class=\"token function\">find</span><span class=\"token punctuation\">(</span>y<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"17\"></td><td><pre>        <span class=\"token keyword\">if</span> <span class=\"token punctuation\">(</span>px <span class=\"token operator\">==</span> py<span class=\"token punctuation\">)</span> <span class=\"token keyword\">return</span> <span class=\"token boolean\">false</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"18\"></td><td><pre>        <span class=\"token keyword\">if</span> <span class=\"token punctuation\">(</span>rank<span class=\"token punctuation\">[</span>px<span class=\"token punctuation\">]</span> <span class=\"token operator\">></span> rank<span class=\"token punctuation\">[</span>py<span class=\"token punctuation\">]</span><span class=\"token punctuation\">)</span> parent<span class=\"token punctuation\">[</span>py<span class=\"token punctuation\">]</span> <span class=\"token operator\">=</span> px<span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"19\"></td><td><pre>        <span class=\"token keyword\">else</span> <span class=\"token keyword\">if</span> <span class=\"token punctuation\">(</span>rank<span class=\"token punctuation\">[</span>px<span class=\"token punctuation\">]</span> <span class=\"token operator\">&lt;</span> rank<span class=\"token punctuation\">[</span>py<span class=\"token punctuation\">]</span><span class=\"token punctuation\">)</span> parent<span class=\"token punctuation\">[</span>px<span class=\"token punctuation\">]</span> <span class=\"token operator\">=</span> py<span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"20\"></td><td><pre>        <span class=\"token keyword\">else</span> <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"21\"></td><td><pre>            parent<span class=\"token punctuation\">[</span>py<span class=\"token punctuation\">]</span> <span class=\"token operator\">=</span> px<span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"22\"></td><td><pre>            rank<span class=\"token punctuation\">[</span>px<span class=\"token punctuation\">]</span><span class=\"token operator\">++</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"23\"></td><td><pre>        <span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"24\"></td><td><pre>        <span class=\"token keyword\">return</span> <span class=\"token boolean\">true</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"25\"></td><td><pre>    <span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"26\"></td><td><pre><span class=\"token punctuation\">&#125;</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"27\"></td><td><pre></pre></td></tr><tr><td data-num=\"28\"></td><td><pre><span class=\"token keyword\">class</span> <span class=\"token class-name\">Solution</span> <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"29\"></td><td><pre><span class=\"token keyword\">public</span><span class=\"token operator\">:</span></pre></td></tr><tr><td data-num=\"30\"></td><td><pre>    <span class=\"token keyword\">int</span> <span class=\"token function\">maxNumEdgesToRemove</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">int</span> n<span class=\"token punctuation\">,</span> vector<span class=\"token operator\">&lt;</span>vector<span class=\"token operator\">&lt;</span><span class=\"token keyword\">int</span><span class=\"token operator\">>></span><span class=\"token operator\">&amp;</span> edges<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"31\"></td><td><pre>        UnionFind <span class=\"token function\">Alice</span><span class=\"token punctuation\">(</span>n<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"32\"></td><td><pre>        UnionFind <span class=\"token function\">Bob</span><span class=\"token punctuation\">(</span>n<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"33\"></td><td><pre></pre></td></tr><tr><td data-num=\"34\"></td><td><pre>        <span class=\"token keyword\">int</span> res <span class=\"token operator\">=</span> <span class=\"token number\">0</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"35\"></td><td><pre>        <span class=\"token keyword\">for</span> <span class=\"token punctuation\">(</span>vector<span class=\"token operator\">&lt;</span><span class=\"token keyword\">int</span><span class=\"token operator\">></span><span class=\"token operator\">&amp;</span> edge <span class=\"token operator\">:</span> edges<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"36\"></td><td><pre>            <span class=\"token keyword\">if</span> <span class=\"token punctuation\">(</span>edge<span class=\"token punctuation\">[</span><span class=\"token number\">0</span><span class=\"token punctuation\">]</span> <span class=\"token operator\">==</span> <span class=\"token number\">3</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"37\"></td><td><pre>                <span class=\"token keyword\">if</span> <span class=\"token punctuation\">(</span>Alice<span class=\"token punctuation\">.</span><span class=\"token function\">union_</span><span class=\"token punctuation\">(</span>edge<span class=\"token punctuation\">[</span><span class=\"token number\">1</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">,</span> edge<span class=\"token punctuation\">[</span><span class=\"token number\">2</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">)</span> <span class=\"token operator\">&amp;&amp;</span> Bob<span class=\"token punctuation\">.</span><span class=\"token function\">union_</span><span class=\"token punctuation\">(</span>edge<span class=\"token punctuation\">[</span><span class=\"token number\">1</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">,</span> edge<span class=\"token punctuation\">[</span><span class=\"token number\">2</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"38\"></td><td><pre>                    Alice<span class=\"token punctuation\">.</span>nodes <span class=\"token operator\">+=</span> <span class=\"token number\">1</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"39\"></td><td><pre>                    Bob<span class=\"token punctuation\">.</span>nodes <span class=\"token operator\">+=</span> <span class=\"token number\">1</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"40\"></td><td><pre>                <span class=\"token punctuation\">&#125;</span> <span class=\"token keyword\">else</span> <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"41\"></td><td><pre>                    res <span class=\"token operator\">+=</span> <span class=\"token number\">1</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"42\"></td><td><pre>                <span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"43\"></td><td><pre>            <span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"44\"></td><td><pre>        <span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"45\"></td><td><pre></pre></td></tr><tr><td data-num=\"46\"></td><td><pre>        <span class=\"token keyword\">for</span> <span class=\"token punctuation\">(</span><span class=\"token keyword\">auto</span><span class=\"token operator\">&amp;</span> edge <span class=\"token operator\">:</span> edges<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"47\"></td><td><pre>            <span class=\"token keyword\">if</span> <span class=\"token punctuation\">(</span>edge<span class=\"token punctuation\">[</span><span class=\"token number\">0</span><span class=\"token punctuation\">]</span> <span class=\"token operator\">==</span> <span class=\"token number\">1</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"48\"></td><td><pre>                <span class=\"token keyword\">if</span> <span class=\"token punctuation\">(</span>Alice<span class=\"token punctuation\">.</span><span class=\"token function\">union_</span><span class=\"token punctuation\">(</span>edge<span class=\"token punctuation\">[</span><span class=\"token number\">1</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">,</span> edge<span class=\"token punctuation\">[</span><span class=\"token number\">2</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span> Alice<span class=\"token punctuation\">.</span>nodes <span class=\"token operator\">+=</span> <span class=\"token number\">1</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"49\"></td><td><pre>                <span class=\"token keyword\">else</span> res <span class=\"token operator\">+=</span> <span class=\"token number\">1</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"50\"></td><td><pre>            <span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"51\"></td><td><pre></pre></td></tr><tr><td data-num=\"52\"></td><td><pre>            <span class=\"token keyword\">if</span> <span class=\"token punctuation\">(</span>edge<span class=\"token punctuation\">[</span><span class=\"token number\">0</span><span class=\"token punctuation\">]</span> <span class=\"token operator\">==</span> <span class=\"token number\">2</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"53\"></td><td><pre>                <span class=\"token keyword\">if</span> <span class=\"token punctuation\">(</span>Bob<span class=\"token punctuation\">.</span><span class=\"token function\">union_</span><span class=\"token punctuation\">(</span>edge<span class=\"token punctuation\">[</span><span class=\"token number\">1</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">,</span> edge<span class=\"token punctuation\">[</span><span class=\"token number\">2</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span> Bob<span class=\"token punctuation\">.</span>nodes <span class=\"token operator\">+=</span> <span class=\"token number\">1</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"54\"></td><td><pre>                <span class=\"token keyword\">else</span> res <span class=\"token operator\">+=</span> <span class=\"token number\">1</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"55\"></td><td><pre>            <span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"56\"></td><td><pre>        <span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"57\"></td><td><pre>        <span class=\"token keyword\">return</span> <span class=\"token punctuation\">(</span>Alice<span class=\"token punctuation\">.</span>nodes <span class=\"token operator\">==</span> Bob<span class=\"token punctuation\">.</span>nodes <span class=\"token operator\">&amp;&amp;</span> Alice<span class=\"token punctuation\">.</span>nodes <span class=\"token operator\">==</span> n<span class=\"token punctuation\">)</span> <span class=\"token operator\">?</span> res <span class=\"token operator\">:</span> <span class=\"token operator\">-</span><span class=\"token number\">1</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"58\"></td><td><pre>    <span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"59\"></td><td><pre><span class=\"token punctuation\">&#125;</span><span class=\"token punctuation\">;</span></pre></td></tr></table></figure></div>\n<div class=\"tab\" data-id=\"code\" data-title=\"Java\">\n<figure class=\"highlight java\"><figcaption data-lang=\"java\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre><span class=\"token keyword\">class</span> <span class=\"token class-name\">Solution</span> <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"2\"></td><td><pre>    <span class=\"token keyword\">class</span> <span class=\"token class-name\">UnionFind</span> <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"3\"></td><td><pre>        <span class=\"token keyword\">int</span><span class=\"token punctuation\">[</span><span class=\"token punctuation\">]</span> parent<span class=\"token punctuation\">,</span> rank<span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"4\"></td><td><pre>        <span class=\"token keyword\">int</span> nodes<span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"5\"></td><td><pre></pre></td></tr><tr><td data-num=\"6\"></td><td><pre>        <span class=\"token keyword\">public</span> <span class=\"token class-name\">UnionFind</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">int</span> n<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"7\"></td><td><pre>            parent <span class=\"token operator\">=</span> <span class=\"token keyword\">new</span> <span class=\"token keyword\">int</span><span class=\"token punctuation\">[</span>n<span class=\"token operator\">+</span><span class=\"token number\">1</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"8\"></td><td><pre>            rank <span class=\"token operator\">=</span> <span class=\"token keyword\">new</span> <span class=\"token keyword\">int</span><span class=\"token punctuation\">[</span>n<span class=\"token operator\">+</span><span class=\"token number\">1</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"9\"></td><td><pre>            nodes <span class=\"token operator\">=</span> <span class=\"token number\">1</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"10\"></td><td><pre>            <span class=\"token keyword\">for</span> <span class=\"token punctuation\">(</span><span class=\"token keyword\">int</span> i<span class=\"token operator\">=</span><span class=\"token number\">1</span><span class=\"token punctuation\">;</span> i<span class=\"token operator\">&lt;=</span>n<span class=\"token punctuation\">;</span> i<span class=\"token operator\">++</span><span class=\"token punctuation\">)</span> parent<span class=\"token punctuation\">[</span>i<span class=\"token punctuation\">]</span> <span class=\"token operator\">=</span> i<span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"11\"></td><td><pre>        <span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"12\"></td><td><pre></pre></td></tr><tr><td data-num=\"13\"></td><td><pre>        <span class=\"token keyword\">public</span> <span class=\"token keyword\">int</span> <span class=\"token function\">find</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">int</span> x<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"14\"></td><td><pre>            <span class=\"token keyword\">if</span> <span class=\"token punctuation\">(</span>parent<span class=\"token punctuation\">[</span>x<span class=\"token punctuation\">]</span> <span class=\"token operator\">!=</span> x<span class=\"token punctuation\">)</span> parent<span class=\"token punctuation\">[</span>x<span class=\"token punctuation\">]</span> <span class=\"token operator\">=</span> <span class=\"token function\">find</span><span class=\"token punctuation\">(</span>parent<span class=\"token punctuation\">[</span>x<span class=\"token punctuation\">]</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"15\"></td><td><pre>            <span class=\"token keyword\">return</span> parent<span class=\"token punctuation\">[</span>x<span class=\"token punctuation\">]</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"16\"></td><td><pre>        <span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"17\"></td><td><pre></pre></td></tr><tr><td data-num=\"18\"></td><td><pre>        <span class=\"token keyword\">public</span> <span class=\"token keyword\">boolean</span> <span class=\"token function\">union_</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">int</span> x<span class=\"token punctuation\">,</span> <span class=\"token keyword\">int</span> y<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"19\"></td><td><pre>            <span class=\"token keyword\">int</span> px <span class=\"token operator\">=</span> <span class=\"token function\">find</span><span class=\"token punctuation\">(</span>x<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"20\"></td><td><pre>            <span class=\"token keyword\">int</span> py <span class=\"token operator\">=</span> <span class=\"token function\">find</span><span class=\"token punctuation\">(</span>y<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"21\"></td><td><pre>            <span class=\"token keyword\">if</span> <span class=\"token punctuation\">(</span>px <span class=\"token operator\">==</span> py<span class=\"token punctuation\">)</span> <span class=\"token keyword\">return</span> <span class=\"token boolean\">false</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"22\"></td><td><pre>            <span class=\"token keyword\">if</span> <span class=\"token punctuation\">(</span>rank<span class=\"token punctuation\">[</span>px<span class=\"token punctuation\">]</span> <span class=\"token operator\">></span> rank<span class=\"token punctuation\">[</span>py<span class=\"token punctuation\">]</span><span class=\"token punctuation\">)</span> parent<span class=\"token punctuation\">[</span>py<span class=\"token punctuation\">]</span> <span class=\"token operator\">=</span> px<span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"23\"></td><td><pre>            <span class=\"token keyword\">else</span> <span class=\"token keyword\">if</span> <span class=\"token punctuation\">(</span>rank<span class=\"token punctuation\">[</span>px<span class=\"token punctuation\">]</span> <span class=\"token operator\">&lt;</span> rank<span class=\"token punctuation\">[</span>py<span class=\"token punctuation\">]</span><span class=\"token punctuation\">)</span> parent<span class=\"token punctuation\">[</span>px<span class=\"token punctuation\">]</span> <span class=\"token operator\">=</span> py<span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"24\"></td><td><pre>            <span class=\"token keyword\">else</span> <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"25\"></td><td><pre>                parent<span class=\"token punctuation\">[</span>py<span class=\"token punctuation\">]</span> <span class=\"token operator\">=</span> px<span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"26\"></td><td><pre>                rank<span class=\"token punctuation\">[</span>px<span class=\"token punctuation\">]</span> <span class=\"token operator\">+=</span> <span class=\"token number\">1</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"27\"></td><td><pre>            <span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"28\"></td><td><pre>            <span class=\"token keyword\">return</span> <span class=\"token boolean\">true</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"29\"></td><td><pre>        <span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"30\"></td><td><pre>    <span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"31\"></td><td><pre></pre></td></tr><tr><td data-num=\"32\"></td><td><pre>    <span class=\"token keyword\">public</span> <span class=\"token keyword\">int</span> <span class=\"token function\">maxNumEdgesToRemove</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">int</span> n<span class=\"token punctuation\">,</span> <span class=\"token keyword\">int</span><span class=\"token punctuation\">[</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">[</span><span class=\"token punctuation\">]</span> edges<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"33\"></td><td><pre>        <span class=\"token class-name\">UnionFind</span> <span class=\"token class-name\">Alice</span> <span class=\"token operator\">=</span> <span class=\"token keyword\">new</span> <span class=\"token class-name\">UnionFind</span><span class=\"token punctuation\">(</span>n<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"34\"></td><td><pre>        <span class=\"token class-name\">UnionFind</span> <span class=\"token class-name\">Bob</span> <span class=\"token operator\">=</span> <span class=\"token keyword\">new</span> <span class=\"token class-name\">UnionFind</span><span class=\"token punctuation\">(</span>n<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"35\"></td><td><pre>        <span class=\"token keyword\">int</span> res <span class=\"token operator\">=</span> <span class=\"token number\">0</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"36\"></td><td><pre>        <span class=\"token keyword\">for</span> <span class=\"token punctuation\">(</span><span class=\"token keyword\">int</span><span class=\"token punctuation\">[</span><span class=\"token punctuation\">]</span> edge <span class=\"token operator\">:</span> edges<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"37\"></td><td><pre>            <span class=\"token keyword\">if</span> <span class=\"token punctuation\">(</span>edge<span class=\"token punctuation\">[</span><span class=\"token number\">0</span><span class=\"token punctuation\">]</span> <span class=\"token operator\">==</span> <span class=\"token number\">3</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"38\"></td><td><pre>                <span class=\"token keyword\">if</span> <span class=\"token punctuation\">(</span><span class=\"token class-name\">Alice</span><span class=\"token punctuation\">.</span><span class=\"token function\">union_</span><span class=\"token punctuation\">(</span>edge<span class=\"token punctuation\">[</span><span class=\"token number\">1</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">,</span> edge<span class=\"token punctuation\">[</span><span class=\"token number\">2</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">)</span> <span class=\"token operator\">&amp;&amp;</span> <span class=\"token class-name\">Bob</span><span class=\"token punctuation\">.</span><span class=\"token function\">union_</span><span class=\"token punctuation\">(</span>edge<span class=\"token punctuation\">[</span><span class=\"token number\">1</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">,</span> edge<span class=\"token punctuation\">[</span><span class=\"token number\">2</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"39\"></td><td><pre>                    <span class=\"token class-name\">Alice</span><span class=\"token punctuation\">.</span>nodes <span class=\"token operator\">+=</span> <span class=\"token number\">1</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"40\"></td><td><pre>                    <span class=\"token class-name\">Bob</span><span class=\"token punctuation\">.</span>nodes <span class=\"token operator\">+=</span> <span class=\"token number\">1</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"41\"></td><td><pre>                <span class=\"token punctuation\">&#125;</span> <span class=\"token keyword\">else</span> res <span class=\"token operator\">+=</span> <span class=\"token number\">1</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"42\"></td><td><pre>            <span class=\"token punctuation\">&#125;</span> </pre></td></tr><tr><td data-num=\"43\"></td><td><pre>        <span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"44\"></td><td><pre></pre></td></tr><tr><td data-num=\"45\"></td><td><pre>        <span class=\"token keyword\">for</span> <span class=\"token punctuation\">(</span><span class=\"token keyword\">int</span><span class=\"token punctuation\">[</span><span class=\"token punctuation\">]</span> edge <span class=\"token operator\">:</span> edges<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"46\"></td><td><pre>            <span class=\"token keyword\">if</span> <span class=\"token punctuation\">(</span>edge<span class=\"token punctuation\">[</span><span class=\"token number\">0</span><span class=\"token punctuation\">]</span> <span class=\"token operator\">==</span> <span class=\"token number\">1</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"47\"></td><td><pre>                <span class=\"token keyword\">if</span> <span class=\"token punctuation\">(</span><span class=\"token class-name\">Alice</span><span class=\"token punctuation\">.</span><span class=\"token function\">union_</span><span class=\"token punctuation\">(</span>edge<span class=\"token punctuation\">[</span><span class=\"token number\">1</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">,</span> edge<span class=\"token punctuation\">[</span><span class=\"token number\">2</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span> <span class=\"token class-name\">Alice</span><span class=\"token punctuation\">.</span>nodes <span class=\"token operator\">+=</span> <span class=\"token number\">1</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"48\"></td><td><pre>                <span class=\"token keyword\">else</span> res <span class=\"token operator\">+=</span> <span class=\"token number\">1</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"49\"></td><td><pre>            <span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"50\"></td><td><pre>            <span class=\"token keyword\">if</span> <span class=\"token punctuation\">(</span>edge<span class=\"token punctuation\">[</span><span class=\"token number\">0</span><span class=\"token punctuation\">]</span> <span class=\"token operator\">==</span> <span class=\"token number\">2</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"51\"></td><td><pre>                <span class=\"token keyword\">if</span> <span class=\"token punctuation\">(</span><span class=\"token class-name\">Bob</span><span class=\"token punctuation\">.</span><span class=\"token function\">union_</span><span class=\"token punctuation\">(</span>edge<span class=\"token punctuation\">[</span><span class=\"token number\">1</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">,</span> edge<span class=\"token punctuation\">[</span><span class=\"token number\">2</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span> <span class=\"token class-name\">Bob</span><span class=\"token punctuation\">.</span>nodes <span class=\"token operator\">+=</span> <span class=\"token number\">1</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"52\"></td><td><pre>                <span class=\"token keyword\">else</span> res <span class=\"token operator\">+=</span> <span class=\"token number\">1</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"53\"></td><td><pre>            <span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"54\"></td><td><pre>        <span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"55\"></td><td><pre>        <span class=\"token keyword\">return</span> <span class=\"token class-name\">Alice</span><span class=\"token punctuation\">.</span>nodes <span class=\"token operator\">==</span> <span class=\"token class-name\">Bob</span><span class=\"token punctuation\">.</span>nodes <span class=\"token operator\">&amp;&amp;</span> <span class=\"token class-name\">Alice</span><span class=\"token punctuation\">.</span>nodes <span class=\"token operator\">==</span> n <span class=\"token operator\">?</span> res <span class=\"token operator\">:</span> <span class=\"token operator\">-</span><span class=\"token number\">1</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"56\"></td><td><pre>    <span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"57\"></td><td><pre><span class=\"token punctuation\">&#125;</span></pre></td></tr></table></figure></div>\n<div class=\"tab\" data-id=\"code\" data-title=\"Python\">\n<figure class=\"highlight python\"><figcaption data-lang=\"python\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre><span class=\"token keyword\">class</span> <span class=\"token class-name\">UnionFind</span><span class=\"token punctuation\">:</span></pre></td></tr><tr><td data-num=\"2\"></td><td><pre>    <span class=\"token keyword\">def</span> <span class=\"token function\">__init__</span><span class=\"token punctuation\">(</span>self<span class=\"token punctuation\">,</span> n<span class=\"token punctuation\">)</span><span class=\"token punctuation\">:</span></pre></td></tr><tr><td data-num=\"3\"></td><td><pre>        self<span class=\"token punctuation\">.</span>parent <span class=\"token operator\">=</span> <span class=\"token builtin\">list</span><span class=\"token punctuation\">(</span><span class=\"token builtin\">range</span><span class=\"token punctuation\">(</span>n<span class=\"token operator\">+</span><span class=\"token number\">1</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span></pre></td></tr><tr><td data-num=\"4\"></td><td><pre>        self<span class=\"token punctuation\">.</span>rank <span class=\"token operator\">=</span> <span class=\"token punctuation\">[</span><span class=\"token number\">0</span><span class=\"token punctuation\">]</span> <span class=\"token operator\">*</span> <span class=\"token punctuation\">(</span>n<span class=\"token operator\">+</span><span class=\"token number\">1</span><span class=\"token punctuation\">)</span></pre></td></tr><tr><td data-num=\"5\"></td><td><pre>        self<span class=\"token punctuation\">.</span>nodes <span class=\"token operator\">=</span> <span class=\"token number\">1</span></pre></td></tr><tr><td data-num=\"6\"></td><td><pre></pre></td></tr><tr><td data-num=\"7\"></td><td><pre>    <span class=\"token keyword\">def</span> <span class=\"token function\">find</span><span class=\"token punctuation\">(</span>self<span class=\"token punctuation\">,</span> x<span class=\"token punctuation\">)</span><span class=\"token punctuation\">:</span></pre></td></tr><tr><td data-num=\"8\"></td><td><pre>        <span class=\"token keyword\">if</span> self<span class=\"token punctuation\">.</span>parent<span class=\"token punctuation\">[</span>x<span class=\"token punctuation\">]</span> <span class=\"token operator\">!=</span> x<span class=\"token punctuation\">:</span></pre></td></tr><tr><td data-num=\"9\"></td><td><pre>            self<span class=\"token punctuation\">.</span>parent<span class=\"token punctuation\">[</span>x<span class=\"token punctuation\">]</span> <span class=\"token operator\">=</span> self<span class=\"token punctuation\">.</span>find<span class=\"token punctuation\">(</span>self<span class=\"token punctuation\">.</span>parent<span class=\"token punctuation\">[</span>x<span class=\"token punctuation\">]</span><span class=\"token punctuation\">)</span></pre></td></tr><tr><td data-num=\"10\"></td><td><pre>        <span class=\"token keyword\">return</span> self<span class=\"token punctuation\">.</span>parent<span class=\"token punctuation\">[</span>x<span class=\"token punctuation\">]</span></pre></td></tr><tr><td data-num=\"11\"></td><td><pre></pre></td></tr><tr><td data-num=\"12\"></td><td><pre>    <span class=\"token keyword\">def</span> <span class=\"token function\">union_</span><span class=\"token punctuation\">(</span>self<span class=\"token punctuation\">,</span> x<span class=\"token punctuation\">,</span> y<span class=\"token punctuation\">)</span><span class=\"token punctuation\">:</span></pre></td></tr><tr><td data-num=\"13\"></td><td><pre>        px <span class=\"token operator\">=</span> self<span class=\"token punctuation\">.</span>find<span class=\"token punctuation\">(</span>x<span class=\"token punctuation\">)</span></pre></td></tr><tr><td data-num=\"14\"></td><td><pre>        py <span class=\"token operator\">=</span> self<span class=\"token punctuation\">.</span>find<span class=\"token punctuation\">(</span>y<span class=\"token punctuation\">)</span></pre></td></tr><tr><td data-num=\"15\"></td><td><pre>        <span class=\"token keyword\">if</span> px <span class=\"token operator\">==</span> py<span class=\"token punctuation\">:</span> <span class=\"token keyword\">return</span> <span class=\"token boolean\">False</span></pre></td></tr><tr><td data-num=\"16\"></td><td><pre>        <span class=\"token keyword\">if</span> self<span class=\"token punctuation\">.</span>rank<span class=\"token punctuation\">[</span>px<span class=\"token punctuation\">]</span> <span class=\"token operator\">></span> self<span class=\"token punctuation\">.</span>rank<span class=\"token punctuation\">[</span>py<span class=\"token punctuation\">]</span><span class=\"token punctuation\">:</span> self<span class=\"token punctuation\">.</span>parent<span class=\"token punctuation\">[</span>py<span class=\"token punctuation\">]</span> <span class=\"token operator\">=</span> px</pre></td></tr><tr><td data-num=\"17\"></td><td><pre>        <span class=\"token keyword\">elif</span> self<span class=\"token punctuation\">.</span>rank<span class=\"token punctuation\">[</span>px<span class=\"token punctuation\">]</span> <span class=\"token operator\">&lt;</span> self<span class=\"token punctuation\">.</span>rank<span class=\"token punctuation\">[</span>py<span class=\"token punctuation\">]</span><span class=\"token punctuation\">:</span> self<span class=\"token punctuation\">.</span>parent<span class=\"token punctuation\">[</span>px<span class=\"token punctuation\">]</span> <span class=\"token operator\">=</span> py</pre></td></tr><tr><td data-num=\"18\"></td><td><pre>        <span class=\"token keyword\">else</span><span class=\"token punctuation\">:</span></pre></td></tr><tr><td data-num=\"19\"></td><td><pre>            self<span class=\"token punctuation\">.</span>parent<span class=\"token punctuation\">[</span>py<span class=\"token punctuation\">]</span> <span class=\"token operator\">=</span> px</pre></td></tr><tr><td data-num=\"20\"></td><td><pre>            self<span class=\"token punctuation\">.</span>rank<span class=\"token punctuation\">[</span>px<span class=\"token punctuation\">]</span> <span class=\"token operator\">+=</span> <span class=\"token number\">1</span></pre></td></tr><tr><td data-num=\"21\"></td><td><pre>        <span class=\"token keyword\">return</span> <span class=\"token boolean\">True</span></pre></td></tr><tr><td data-num=\"22\"></td><td><pre></pre></td></tr><tr><td data-num=\"23\"></td><td><pre><span class=\"token keyword\">class</span> <span class=\"token class-name\">Solution</span><span class=\"token punctuation\">:</span></pre></td></tr><tr><td data-num=\"24\"></td><td><pre>    <span class=\"token keyword\">def</span> <span class=\"token function\">maxNumEdgesToRemove</span><span class=\"token punctuation\">(</span>self<span class=\"token punctuation\">,</span> n<span class=\"token punctuation\">:</span> <span class=\"token builtin\">int</span><span class=\"token punctuation\">,</span> edges<span class=\"token punctuation\">:</span> List<span class=\"token punctuation\">[</span>List<span class=\"token punctuation\">[</span><span class=\"token builtin\">int</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">)</span> <span class=\"token operator\">-</span><span class=\"token operator\">></span> <span class=\"token builtin\">int</span><span class=\"token punctuation\">:</span></pre></td></tr><tr><td data-num=\"25\"></td><td><pre>        Alice <span class=\"token operator\">=</span> UnionFind<span class=\"token punctuation\">(</span>n<span class=\"token punctuation\">)</span></pre></td></tr><tr><td data-num=\"26\"></td><td><pre>        Bob <span class=\"token operator\">=</span> UnionFind<span class=\"token punctuation\">(</span>n<span class=\"token punctuation\">)</span></pre></td></tr><tr><td data-num=\"27\"></td><td><pre></pre></td></tr><tr><td data-num=\"28\"></td><td><pre>        res <span class=\"token operator\">=</span> <span class=\"token number\">0</span></pre></td></tr><tr><td data-num=\"29\"></td><td><pre>        <span class=\"token keyword\">for</span> t<span class=\"token punctuation\">,</span> i<span class=\"token punctuation\">,</span> j <span class=\"token keyword\">in</span> edges<span class=\"token punctuation\">:</span></pre></td></tr><tr><td data-num=\"30\"></td><td><pre>            <span class=\"token keyword\">if</span> t <span class=\"token operator\">==</span> <span class=\"token number\">3</span><span class=\"token punctuation\">:</span></pre></td></tr><tr><td data-num=\"31\"></td><td><pre>                <span class=\"token keyword\">if</span> Alice<span class=\"token punctuation\">.</span>union_<span class=\"token punctuation\">(</span>i<span class=\"token punctuation\">,</span> j<span class=\"token punctuation\">)</span> <span class=\"token keyword\">and</span> Bob<span class=\"token punctuation\">.</span>union_<span class=\"token punctuation\">(</span>i<span class=\"token punctuation\">,</span> j<span class=\"token punctuation\">)</span><span class=\"token punctuation\">:</span></pre></td></tr><tr><td data-num=\"32\"></td><td><pre>                    Alice<span class=\"token punctuation\">.</span>nodes <span class=\"token operator\">+=</span> <span class=\"token number\">1</span></pre></td></tr><tr><td data-num=\"33\"></td><td><pre>                    Bob<span class=\"token punctuation\">.</span>nodes <span class=\"token operator\">+=</span> <span class=\"token number\">1</span></pre></td></tr><tr><td data-num=\"34\"></td><td><pre>                <span class=\"token keyword\">else</span><span class=\"token punctuation\">:</span> res <span class=\"token operator\">+=</span> <span class=\"token number\">1</span></pre></td></tr><tr><td data-num=\"35\"></td><td><pre>        </pre></td></tr><tr><td data-num=\"36\"></td><td><pre>        <span class=\"token keyword\">for</span> t<span class=\"token punctuation\">,</span> i<span class=\"token punctuation\">,</span> j <span class=\"token keyword\">in</span> edges<span class=\"token punctuation\">:</span></pre></td></tr><tr><td data-num=\"37\"></td><td><pre>            <span class=\"token keyword\">if</span> t <span class=\"token operator\">==</span> <span class=\"token number\">1</span><span class=\"token punctuation\">:</span></pre></td></tr><tr><td data-num=\"38\"></td><td><pre>                <span class=\"token keyword\">if</span> Alice<span class=\"token punctuation\">.</span>union_<span class=\"token punctuation\">(</span>i<span class=\"token punctuation\">,</span> j<span class=\"token punctuation\">)</span><span class=\"token punctuation\">:</span> Alice<span class=\"token punctuation\">.</span>nodes <span class=\"token operator\">+=</span> <span class=\"token number\">1</span></pre></td></tr><tr><td data-num=\"39\"></td><td><pre>                <span class=\"token keyword\">else</span><span class=\"token punctuation\">:</span> res <span class=\"token operator\">+=</span> <span class=\"token number\">1</span></pre></td></tr><tr><td data-num=\"40\"></td><td><pre>            <span class=\"token keyword\">if</span> t <span class=\"token operator\">==</span> <span class=\"token number\">2</span><span class=\"token punctuation\">:</span></pre></td></tr><tr><td data-num=\"41\"></td><td><pre>                <span class=\"token keyword\">if</span> Bob<span class=\"token punctuation\">.</span>union_<span class=\"token punctuation\">(</span>i<span class=\"token punctuation\">,</span> j<span class=\"token punctuation\">)</span><span class=\"token punctuation\">:</span> Bob<span class=\"token punctuation\">.</span>nodes <span class=\"token operator\">+=</span> <span class=\"token number\">1</span></pre></td></tr><tr><td data-num=\"42\"></td><td><pre>                <span class=\"token keyword\">else</span><span class=\"token punctuation\">:</span> res <span class=\"token operator\">+=</span> <span class=\"token number\">1</span></pre></td></tr><tr><td data-num=\"43\"></td><td><pre>        </pre></td></tr><tr><td data-num=\"44\"></td><td><pre>        <span class=\"token keyword\">return</span> res <span class=\"token keyword\">if</span> Alice<span class=\"token punctuation\">.</span>nodes <span class=\"token operator\">==</span> Bob<span class=\"token punctuation\">.</span>nodes <span class=\"token operator\">==</span> n <span class=\"token keyword\">else</span> <span class=\"token operator\">-</span><span class=\"token number\">1</span></pre></td></tr></table></figure></div>\n",
            "tags": [
                "Coding",
                "Leetcode",
                "Hard",
                "Union Find",
                "Leetcode",
                "Hard",
                "Graph"
            ]
        },
        {
            "id": "https://chienikao.github.io/2023/04/28/Algorithm/Union%20Find/",
            "url": "https://chienikao.github.io/2023/04/28/Algorithm/Union%20Find/",
            "title": "Union Find",
            "date_published": "2023-04-28T02:43:29.000Z",
            "content_html": "<p><strong>Union-Find data structure</strong> 又稱 <strong>Disjoint-set data structure</strong>，用於<strong>處理不相交集合 (disjoint set) 的合併 (Union) 與查詢 (Find) 問題。</strong></p>\n<h2 id=\"disjoint-set\"><a class=\"anchor\" href=\"#disjoint-set\">#</a> Disjoint Set</h2>\n<p><em><strong>Disjoint set</strong></em> 表示數個 set 之間，擁有的元素都不相同，彼此<strong>互斥 (disjoint)</strong>。</p>\n<p>可以去看看這篇文章 - <span class=\"exturl\" data-url=\"aHR0cHM6Ly9oYWNrbWQuaW8vQENMS08vcmtSVlNfby00P3R5cGU9dmlldw==\">disjoint set</span></p>\n<h2 id=\"union-find-algorithm\"><a class=\"anchor\" href=\"#union-find-algorithm\">#</a> Union Find Algorithm</h2>\n<!-- 補forest資料結構 -->\n<p>Union-Find Data Structure 是一種 <a href=\"\"><strong>forest</strong></a> 結構，forest 是一種 N-way Tree 結構，互相連通的節點放在同一個 set，任意選擇其中一個節點作為 root。</p>\n<p><img data-src=\"https://i.imgur.com/606kd33.png\" alt=\"\"></p>\n<p>Union Find 提供以下兩種操作:</p>\n<ul>\n<li>\n<p><strong>Find:</strong> 找到 input 節點的 root，可以藉此確定 input 節點屬於哪個子集。</p>\n<ul>\n<li>Find 函數能夠找到節點的 root。</li>\n<li>如果要確認兩個節點是否為同一子集，只要分別找兩個節點的 root ，如果一樣，即屬於同一子集 (為 connected component)。</li>\n<li>Find 的時間複雜度最差就是遍歷整棵樹，時間複雜度為 O (n)。</li>\n</ul>\n</li>\n<li>\n<p><strong>Union:</strong> 將兩個子集合併為同一子集。</p>\n<ul>\n<li>Union 能夠將兩個所屬的子集進行合併。</li>\n<li>最簡單的方法就是將一個子集的 root 直接作為另一子集 root 的子節點即可</li>\n</ul>\n<p><img data-src=\"https://i.imgur.com/Z3V1vnw.png\" alt=\"\"></p>\n<ul>\n<li>Union 的實踐需要依靠 find，因此時間複雜度最差為 O (n)。</li>\n</ul>\n</li>\n</ul>\n<p>以上圖的兩個樹來說，以 0 為 root 的樹大於以 2 為 root 的樹，如果將後者合併到前者下，合併過後的樹高度會比較小，根據這個觀察可以歸納出，如果兩個子集要合併，應該讓<strong>高度較小的子集合併到高度比較大的子集下</strong>，可以避免樹的不平衡。</p>\n<h2 id=\"find-with-path-compression\"><a class=\"anchor\" href=\"#find-with-path-compression\">#</a> Find with Path Compression</h2>\n<p>Path compression 是一個優化技巧，也有人稱為 set collapsing, <strong>讓每個節點直接連到它的 root 節點</strong>，這樣 Find 跟 Union 操作的時間複雜度可以降到 O (1)。</p>\n<p><img data-src=\"https://i.imgur.com/0Nl0hMt.png\" alt=\"\"></p>\n<p>但要如何有效地讓所有節點 parent node 都指向 root 呢？<br>\n 答案就是透過<strong>遞迴</strong>，透過遞迴找到 root， 再依序回傳更新為每個走訪過的 parent。</p>\n<figure class=\"highlight cpp\"><figcaption data-lang=\"C++\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre><span class=\"token keyword\">int</span> <span class=\"token function\">find</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">int</span> x<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"2\"></td><td><pre>    <span class=\"token keyword\">if</span> <span class=\"token punctuation\">(</span>x <span class=\"token operator\">==</span> root<span class=\"token punctuation\">[</span>x<span class=\"token punctuation\">]</span><span class=\"token punctuation\">)</span> <span class=\"token keyword\">return</span> x<span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"3\"></td><td><pre>    <span class=\"token keyword\">return</span> root<span class=\"token punctuation\">[</span>x<span class=\"token punctuation\">]</span> <span class=\"token operator\">=</span> <span class=\"token function\">find</span><span class=\"token punctuation\">(</span>root<span class=\"token punctuation\">[</span>x<span class=\"token punctuation\">]</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"4\"></td><td><pre><span class=\"token punctuation\">&#125;</span></pre></td></tr></table></figure><h2 id=\"union-by-sizerank\"><a class=\"anchor\" href=\"#union-by-sizerank\">#</a> Union by Size/Rank</h2>\n<p>應用 <em><strong>path compression</strong></em> 後的樹可以盡可能縮減樹的高度 ，若要再 Union 兩個壓縮後的子集，可以採取 <em><strong>union by size</strong></em> 技巧，<strong>將子節點比較少的 root 加入比較大的子集。</strong></p>\n<p>依照 rank 來排序，起初每個點的 rank 均為 0 ，依據 rank 大小來決定如何合併，<strong>rank 大的子集合併小的，合併別人的子集其 rank 往上增加。</strong></p>\n<figure class=\"highlight cpp\"><figcaption data-lang=\"C++\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre><span class=\"token keyword\">void</span> <span class=\"token function\">unionSet</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">int</span> x<span class=\"token punctuation\">,</span> <span class=\"token keyword\">int</span> y<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"2\"></td><td><pre>    <span class=\"token keyword\">int</span> root_x <span class=\"token operator\">=</span> <span class=\"token function\">find</span><span class=\"token punctuation\">(</span>x<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"3\"></td><td><pre>    <span class=\"token keyword\">int</span> root_y <span class=\"token operator\">=</span> <span class=\"token function\">find</span><span class=\"token punctuation\">(</span>y<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"4\"></td><td><pre>    <span class=\"token keyword\">if</span> <span class=\"token punctuation\">(</span>root_x <span class=\"token operator\">==</span> root_y<span class=\"token punctuation\">)</span> <span class=\"token keyword\">return</span> <span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"5\"></td><td><pre>    <span class=\"token keyword\">if</span> <span class=\"token punctuation\">(</span>rank<span class=\"token punctuation\">[</span>root_x<span class=\"token punctuation\">]</span> <span class=\"token operator\">></span> rank<span class=\"token punctuation\">[</span>root_y<span class=\"token punctuation\">]</span><span class=\"token punctuation\">)</span> root<span class=\"token punctuation\">[</span>root_y<span class=\"token punctuation\">]</span> <span class=\"token operator\">=</span> root_x<span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"6\"></td><td><pre>    <span class=\"token keyword\">else</span> <span class=\"token keyword\">if</span> <span class=\"token punctuation\">(</span>rank<span class=\"token punctuation\">[</span>root_x<span class=\"token punctuation\">]</span> <span class=\"token operator\">&lt;</span> rank<span class=\"token punctuation\">[</span>root_y<span class=\"token punctuation\">]</span><span class=\"token punctuation\">)</span> root<span class=\"token punctuation\">[</span>root_x<span class=\"token punctuation\">]</span> <span class=\"token operator\">=</span> root_y<span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"7\"></td><td><pre>    <span class=\"token keyword\">else</span> <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"8\"></td><td><pre>        root<span class=\"token punctuation\">[</span>root_y<span class=\"token punctuation\">]</span> <span class=\"token operator\">=</span> root_x<span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"9\"></td><td><pre>        rank<span class=\"token punctuation\">[</span>root_x<span class=\"token punctuation\">]</span><span class=\"token operator\">++</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"10\"></td><td><pre>    <span class=\"token punctuation\">&#125;</span>  </pre></td></tr><tr><td data-num=\"11\"></td><td><pre><span class=\"token punctuation\">&#125;</span></pre></td></tr></table></figure><p>一開始每個點的  <code>rank</code>  都為 0 ，有一點特別容易寫出 bug ，在比較彼此  <code>rank</code>  或是更新  <code>rank</code>  時候，需要以  <code>find()</code>  所找出的  <code>root</code>  來比，不是各個節點本身的  <code>rank</code>  。</p>\n",
            "tags": [
                "Algorithm",
                "Algorithm",
                "Data Structure",
                "Union Find"
            ]
        },
        {
            "id": "https://chienikao.github.io/2023/04/28/Coding/leetcode/Hard/839%20Similar%20String%20Groups/",
            "url": "https://chienikao.github.io/2023/04/28/Coding/leetcode/Hard/839%20Similar%20String%20Groups/",
            "title": "839. Similar String Groups",
            "date_published": "2023-04-28T02:36:34.000Z",
            "content_html": "<p>⭐️⭐️⭐️</p>\n<h2 id=\"題目敘述\"><a class=\"anchor\" href=\"#題目敘述\">#</a> <span class=\"exturl\" data-url=\"aHR0cHM6Ly9sZWV0Y29kZS5jb20vcHJvYmxlbXMvc2ltaWxhci1zdHJpbmctZ3JvdXBzL2Rlc2NyaXB0aW9uLw==\">題目敘述</span></h2>\n<p>Two strings  <code>X</code>  and  <code>Y</code>  are similar if we can swap two letters (in different positions) of  <code>X</code> , so that it equals  <code>Y</code> . Also two strings  <code>X</code>  and  <code>Y</code>  are similar if they are equal.</p>\n<p>For example,  <code>&quot;tars&quot;</code>  and  <code>&quot;rats&quot;</code>  are similar (swapping at positions 0 and 2), and  <code>&quot;rats&quot;</code>  and  <code>&quot;arts&quot;</code>  are similar, but  <code>&quot;star&quot;</code>  is not similar to  <code>&quot;tars&quot;</code> ,  <code>&quot;rats&quot;</code> , or  <code>&quot;arts&quot;</code> .</p>\n<p>Together, these form two connected groups by similarity:  <code>&#123;&quot;tars&quot;, &quot;rats&quot;, &quot;arts&quot;&#125;</code>  and  <code>&#123;&quot;star&quot;&#125;</code> .  Notice that  <code>&quot;tars&quot;</code>  and  <code>&quot;arts&quot;</code>  are in the same group even though they are not similar.  Formally, each group is such that a word is in the group if and only if it is similar to at least one other word in the group.</p>\n<p>We are given a list  <code>strs</code>  of strings where every string in  <code>strs</code>  is an anagram of every other string in  <code>strs</code> . How many groups are there?</p>\n<h3 id=\"example-1\"><a class=\"anchor\" href=\"#example-1\">#</a> Example 1</h3>\n<blockquote>\n<p><strong>Input</strong>: strs = [“tars”,“rats”,“arts”,“star”]<br>\n<strong>Output</strong>: 2</p>\n</blockquote>\n<h3 id=\"example-2\"><a class=\"anchor\" href=\"#example-2\">#</a> Example 2</h3>\n<blockquote>\n<p><strong>Input</strong>: strs = [“omv”,“ovm”]<br>\n<strong>Output</strong>: 1</p>\n</blockquote>\n<h2 id=\"解題思路\"><a class=\"anchor\" href=\"#解題思路\">#</a> 解題思路</h2>\n<p>遍歷整個陣列將相似的字串組合為群組，最後輸出群組的數量。</p>\n<p>比對字串相似的方法，如果差異的字元數量大於 2，則兩字串不相似。</p>\n<p>Union Find 的部分可以參考這個文章 <a href=\"https://chienikao.github.io/2023/04/28/Algorithm/Union%20Find/\">連結</a></p>\n<h2 id=\"solution\"><a class=\"anchor\" href=\"#solution\">#</a> Solution</h2>\n<div class=\"tab\" data-id=\"code\" data-title=\"C++\">\n<figure class=\"highlight cpp\"><figcaption data-lang=\"C++\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre><span class=\"token keyword\">class</span> <span class=\"token class-name\">Solution</span> <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"2\"></td><td><pre><span class=\"token keyword\">public</span><span class=\"token operator\">:</span></pre></td></tr><tr><td data-num=\"3\"></td><td><pre>    vector<span class=\"token operator\">&lt;</span><span class=\"token keyword\">int</span><span class=\"token operator\">></span> parent<span class=\"token punctuation\">,</span> rank<span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"4\"></td><td><pre>    <span class=\"token keyword\">int</span> res<span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"5\"></td><td><pre>    <span class=\"token keyword\">bool</span> <span class=\"token function\">similar</span><span class=\"token punctuation\">(</span>string<span class=\"token operator\">&amp;</span> s1<span class=\"token punctuation\">,</span> string<span class=\"token operator\">&amp;</span> s2<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"6\"></td><td><pre>        <span class=\"token keyword\">if</span> <span class=\"token punctuation\">(</span>s1 <span class=\"token operator\">==</span> s2<span class=\"token punctuation\">)</span> <span class=\"token keyword\">return</span> <span class=\"token boolean\">true</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"7\"></td><td><pre>        <span class=\"token keyword\">int</span> diff <span class=\"token operator\">=</span> <span class=\"token number\">0</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"8\"></td><td><pre>        <span class=\"token keyword\">for</span> <span class=\"token punctuation\">(</span><span class=\"token keyword\">int</span> i<span class=\"token operator\">=</span><span class=\"token number\">0</span><span class=\"token punctuation\">;</span> i<span class=\"token operator\">&lt;</span>s1<span class=\"token punctuation\">.</span><span class=\"token function\">size</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span> i<span class=\"token operator\">++</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"9\"></td><td><pre>            <span class=\"token keyword\">if</span> <span class=\"token punctuation\">(</span>s1<span class=\"token punctuation\">[</span>i<span class=\"token punctuation\">]</span> <span class=\"token operator\">!=</span> s2<span class=\"token punctuation\">[</span>i<span class=\"token punctuation\">]</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"10\"></td><td><pre>                diff<span class=\"token operator\">++</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"11\"></td><td><pre>                <span class=\"token keyword\">if</span> <span class=\"token punctuation\">(</span>diff <span class=\"token operator\">></span> <span class=\"token number\">2</span><span class=\"token punctuation\">)</span> <span class=\"token keyword\">return</span> <span class=\"token boolean\">false</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"12\"></td><td><pre>            <span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"13\"></td><td><pre>        <span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"14\"></td><td><pre>        <span class=\"token keyword\">return</span> diff <span class=\"token operator\">==</span> <span class=\"token number\">2</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"15\"></td><td><pre>    <span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"16\"></td><td><pre></pre></td></tr><tr><td data-num=\"17\"></td><td><pre>    <span class=\"token keyword\">int</span> <span class=\"token function\">find</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">int</span> x<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"18\"></td><td><pre>        <span class=\"token keyword\">if</span> <span class=\"token punctuation\">(</span>x <span class=\"token operator\">==</span> parent<span class=\"token punctuation\">[</span>x<span class=\"token punctuation\">]</span><span class=\"token punctuation\">)</span> <span class=\"token keyword\">return</span> x<span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"19\"></td><td><pre>        <span class=\"token keyword\">return</span> parent<span class=\"token punctuation\">[</span>x<span class=\"token punctuation\">]</span> <span class=\"token operator\">=</span> <span class=\"token function\">find</span><span class=\"token punctuation\">(</span>parent<span class=\"token punctuation\">[</span>x<span class=\"token punctuation\">]</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"20\"></td><td><pre>    <span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"21\"></td><td><pre></pre></td></tr><tr><td data-num=\"22\"></td><td><pre>    <span class=\"token keyword\">void</span> <span class=\"token function\">unionSet</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">int</span> x<span class=\"token punctuation\">,</span> <span class=\"token keyword\">int</span> y<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"23\"></td><td><pre>        <span class=\"token keyword\">int</span> px <span class=\"token operator\">=</span> <span class=\"token function\">find</span><span class=\"token punctuation\">(</span>x<span class=\"token punctuation\">)</span><span class=\"token punctuation\">,</span> py <span class=\"token operator\">=</span> <span class=\"token function\">find</span><span class=\"token punctuation\">(</span>y<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"24\"></td><td><pre>        <span class=\"token keyword\">if</span> <span class=\"token punctuation\">(</span>px <span class=\"token operator\">==</span> py<span class=\"token punctuation\">)</span> <span class=\"token keyword\">return</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"25\"></td><td><pre>        <span class=\"token keyword\">if</span> <span class=\"token punctuation\">(</span>rank<span class=\"token punctuation\">[</span>px<span class=\"token punctuation\">]</span> <span class=\"token operator\">></span> rank<span class=\"token punctuation\">[</span>py<span class=\"token punctuation\">]</span><span class=\"token punctuation\">)</span> parent<span class=\"token punctuation\">[</span>py<span class=\"token punctuation\">]</span> <span class=\"token operator\">=</span> px<span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"26\"></td><td><pre>        <span class=\"token keyword\">else</span> <span class=\"token keyword\">if</span> <span class=\"token punctuation\">(</span>rank<span class=\"token punctuation\">[</span>px<span class=\"token punctuation\">]</span> <span class=\"token operator\">&lt;</span> rank<span class=\"token punctuation\">[</span>py<span class=\"token punctuation\">]</span><span class=\"token punctuation\">)</span> parent<span class=\"token punctuation\">[</span>px<span class=\"token punctuation\">]</span> <span class=\"token operator\">=</span> py<span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"27\"></td><td><pre>        <span class=\"token keyword\">else</span> <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"28\"></td><td><pre>            parent<span class=\"token punctuation\">[</span>py<span class=\"token punctuation\">]</span> <span class=\"token operator\">=</span> px<span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"29\"></td><td><pre>            rank<span class=\"token punctuation\">[</span>px<span class=\"token punctuation\">]</span> <span class=\"token operator\">++</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"30\"></td><td><pre>        <span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"31\"></td><td><pre>        res<span class=\"token operator\">--</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"32\"></td><td><pre>    <span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"33\"></td><td><pre></pre></td></tr><tr><td data-num=\"34\"></td><td><pre>    <span class=\"token keyword\">int</span> <span class=\"token function\">numSimilarGroups</span><span class=\"token punctuation\">(</span>vector<span class=\"token operator\">&lt;</span>string<span class=\"token operator\">></span><span class=\"token operator\">&amp;</span> strs<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"35\"></td><td><pre>        <span class=\"token keyword\">int</span> n <span class=\"token operator\">=</span> strs<span class=\"token punctuation\">.</span><span class=\"token function\">size</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"36\"></td><td><pre>        res <span class=\"token operator\">=</span> n<span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"37\"></td><td><pre>        parent<span class=\"token punctuation\">.</span><span class=\"token function\">resize</span><span class=\"token punctuation\">(</span>n<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"38\"></td><td><pre>        rank<span class=\"token punctuation\">.</span><span class=\"token function\">resize</span><span class=\"token punctuation\">(</span>n<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"39\"></td><td><pre>        <span class=\"token keyword\">for</span> <span class=\"token punctuation\">(</span><span class=\"token keyword\">int</span> i<span class=\"token operator\">=</span><span class=\"token number\">0</span><span class=\"token punctuation\">;</span> i<span class=\"token operator\">&lt;</span>n<span class=\"token punctuation\">;</span> i<span class=\"token operator\">++</span><span class=\"token punctuation\">)</span> parent<span class=\"token punctuation\">[</span>i<span class=\"token punctuation\">]</span> <span class=\"token operator\">=</span> i<span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"40\"></td><td><pre>        <span class=\"token keyword\">for</span> <span class=\"token punctuation\">(</span><span class=\"token keyword\">int</span> i<span class=\"token operator\">=</span><span class=\"token number\">0</span><span class=\"token punctuation\">;</span> i<span class=\"token operator\">&lt;</span>n<span class=\"token punctuation\">;</span> i<span class=\"token operator\">++</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"41\"></td><td><pre>            <span class=\"token keyword\">for</span> <span class=\"token punctuation\">(</span><span class=\"token keyword\">int</span> j<span class=\"token operator\">=</span>i<span class=\"token operator\">+</span><span class=\"token number\">1</span><span class=\"token punctuation\">;</span> j<span class=\"token operator\">&lt;</span>n<span class=\"token punctuation\">;</span> j<span class=\"token operator\">++</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"42\"></td><td><pre>                <span class=\"token keyword\">if</span> <span class=\"token punctuation\">(</span><span class=\"token function\">similar</span><span class=\"token punctuation\">(</span>strs<span class=\"token punctuation\">[</span>i<span class=\"token punctuation\">]</span><span class=\"token punctuation\">,</span> strs<span class=\"token punctuation\">[</span>j<span class=\"token punctuation\">]</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span> <span class=\"token function\">unionSet</span><span class=\"token punctuation\">(</span>i<span class=\"token punctuation\">,</span> j<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"43\"></td><td><pre>            <span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"44\"></td><td><pre>        <span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"45\"></td><td><pre>        <span class=\"token keyword\">return</span> res<span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"46\"></td><td><pre>    <span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"47\"></td><td><pre><span class=\"token punctuation\">&#125;</span><span class=\"token punctuation\">;</span></pre></td></tr></table></figure></div>\n<div class=\"tab\" data-id=\"code\" data-title=\"Java\">\n<figure class=\"highlight java\"><figcaption data-lang=\"java\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre><span class=\"token keyword\">class</span> <span class=\"token class-name\">Solution</span> <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"2\"></td><td><pre>    <span class=\"token keyword\">class</span> <span class=\"token class-name\">UnionFind</span> <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"3\"></td><td><pre>        <span class=\"token keyword\">int</span><span class=\"token punctuation\">[</span><span class=\"token punctuation\">]</span> parent<span class=\"token punctuation\">,</span> rank<span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"4\"></td><td><pre>        <span class=\"token keyword\">int</span> count<span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"5\"></td><td><pre></pre></td></tr><tr><td data-num=\"6\"></td><td><pre>        <span class=\"token keyword\">public</span> <span class=\"token class-name\">UnionFind</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">int</span> n<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"7\"></td><td><pre>            parent <span class=\"token operator\">=</span> <span class=\"token keyword\">new</span> <span class=\"token keyword\">int</span><span class=\"token punctuation\">[</span>n<span class=\"token punctuation\">]</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"8\"></td><td><pre>            rank <span class=\"token operator\">=</span> <span class=\"token keyword\">new</span> <span class=\"token keyword\">int</span><span class=\"token punctuation\">[</span>n<span class=\"token punctuation\">]</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"9\"></td><td><pre>            count <span class=\"token operator\">=</span> n<span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"10\"></td><td><pre></pre></td></tr><tr><td data-num=\"11\"></td><td><pre>            <span class=\"token keyword\">for</span> <span class=\"token punctuation\">(</span><span class=\"token keyword\">int</span> i <span class=\"token operator\">=</span> <span class=\"token number\">0</span><span class=\"token punctuation\">;</span> i <span class=\"token operator\">&lt;</span> n<span class=\"token punctuation\">;</span> i<span class=\"token operator\">++</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"12\"></td><td><pre>                parent<span class=\"token punctuation\">[</span>i<span class=\"token punctuation\">]</span> <span class=\"token operator\">=</span> i<span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"13\"></td><td><pre>            <span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"14\"></td><td><pre>        <span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"15\"></td><td><pre></pre></td></tr><tr><td data-num=\"16\"></td><td><pre>        <span class=\"token keyword\">public</span> <span class=\"token keyword\">int</span> <span class=\"token function\">find</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">int</span> x<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"17\"></td><td><pre>            <span class=\"token keyword\">if</span> <span class=\"token punctuation\">(</span>parent<span class=\"token punctuation\">[</span>x<span class=\"token punctuation\">]</span> <span class=\"token operator\">!=</span> x<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"18\"></td><td><pre>                parent<span class=\"token punctuation\">[</span>x<span class=\"token punctuation\">]</span> <span class=\"token operator\">=</span> <span class=\"token function\">find</span><span class=\"token punctuation\">(</span>parent<span class=\"token punctuation\">[</span>x<span class=\"token punctuation\">]</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"19\"></td><td><pre>            <span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"20\"></td><td><pre>            <span class=\"token keyword\">return</span> parent<span class=\"token punctuation\">[</span>x<span class=\"token punctuation\">]</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"21\"></td><td><pre>        <span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"22\"></td><td><pre></pre></td></tr><tr><td data-num=\"23\"></td><td><pre>        <span class=\"token keyword\">public</span> <span class=\"token keyword\">boolean</span> <span class=\"token function\">union</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">int</span> x<span class=\"token punctuation\">,</span> <span class=\"token keyword\">int</span> y<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"24\"></td><td><pre>            <span class=\"token keyword\">int</span> rootX <span class=\"token operator\">=</span> <span class=\"token function\">find</span><span class=\"token punctuation\">(</span>x<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"25\"></td><td><pre>            <span class=\"token keyword\">int</span> rootY <span class=\"token operator\">=</span> <span class=\"token function\">find</span><span class=\"token punctuation\">(</span>y<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"26\"></td><td><pre></pre></td></tr><tr><td data-num=\"27\"></td><td><pre>            <span class=\"token keyword\">if</span> <span class=\"token punctuation\">(</span>rootX <span class=\"token operator\">==</span> rootY<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"28\"></td><td><pre>                <span class=\"token keyword\">return</span> <span class=\"token boolean\">false</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"29\"></td><td><pre>            <span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"30\"></td><td><pre></pre></td></tr><tr><td data-num=\"31\"></td><td><pre>            <span class=\"token keyword\">if</span> <span class=\"token punctuation\">(</span>rank<span class=\"token punctuation\">[</span>rootX<span class=\"token punctuation\">]</span> <span class=\"token operator\">&lt;</span> rank<span class=\"token punctuation\">[</span>rootY<span class=\"token punctuation\">]</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"32\"></td><td><pre>                <span class=\"token keyword\">int</span> temp <span class=\"token operator\">=</span> rootX<span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"33\"></td><td><pre>                rootX <span class=\"token operator\">=</span> rootY<span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"34\"></td><td><pre>                rootY <span class=\"token operator\">=</span> temp<span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"35\"></td><td><pre>            <span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"36\"></td><td><pre></pre></td></tr><tr><td data-num=\"37\"></td><td><pre>            parent<span class=\"token punctuation\">[</span>rootY<span class=\"token punctuation\">]</span> <span class=\"token operator\">=</span> rootX<span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"38\"></td><td><pre></pre></td></tr><tr><td data-num=\"39\"></td><td><pre>            <span class=\"token keyword\">if</span> <span class=\"token punctuation\">(</span>rank<span class=\"token punctuation\">[</span>rootX<span class=\"token punctuation\">]</span> <span class=\"token operator\">==</span> rank<span class=\"token punctuation\">[</span>rootY<span class=\"token punctuation\">]</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"40\"></td><td><pre>                rank<span class=\"token punctuation\">[</span>rootX<span class=\"token punctuation\">]</span><span class=\"token operator\">++</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"41\"></td><td><pre>            <span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"42\"></td><td><pre></pre></td></tr><tr><td data-num=\"43\"></td><td><pre>            count<span class=\"token operator\">--</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"44\"></td><td><pre></pre></td></tr><tr><td data-num=\"45\"></td><td><pre>            <span class=\"token keyword\">return</span> <span class=\"token boolean\">true</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"46\"></td><td><pre>        <span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"47\"></td><td><pre></pre></td></tr><tr><td data-num=\"48\"></td><td><pre>        <span class=\"token keyword\">public</span> <span class=\"token keyword\">int</span> <span class=\"token function\">getCount</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"49\"></td><td><pre>            <span class=\"token keyword\">return</span> count<span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"50\"></td><td><pre>        <span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"51\"></td><td><pre>    <span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"52\"></td><td><pre></pre></td></tr><tr><td data-num=\"53\"></td><td><pre>    <span class=\"token keyword\">public</span> <span class=\"token keyword\">int</span> <span class=\"token function\">numSimilarGroups</span><span class=\"token punctuation\">(</span><span class=\"token class-name\">String</span><span class=\"token punctuation\">[</span><span class=\"token punctuation\">]</span> strs<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"54\"></td><td><pre>        <span class=\"token keyword\">int</span> n <span class=\"token operator\">=</span> strs<span class=\"token punctuation\">.</span>length<span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"55\"></td><td><pre>        <span class=\"token class-name\">UnionFind</span> uf <span class=\"token operator\">=</span> <span class=\"token keyword\">new</span> <span class=\"token class-name\">UnionFind</span><span class=\"token punctuation\">(</span>n<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"56\"></td><td><pre></pre></td></tr><tr><td data-num=\"57\"></td><td><pre>        <span class=\"token keyword\">for</span> <span class=\"token punctuation\">(</span><span class=\"token keyword\">int</span> i <span class=\"token operator\">=</span> <span class=\"token number\">0</span><span class=\"token punctuation\">;</span> i <span class=\"token operator\">&lt;</span> n<span class=\"token punctuation\">;</span> i<span class=\"token operator\">++</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"58\"></td><td><pre>            <span class=\"token keyword\">for</span> <span class=\"token punctuation\">(</span><span class=\"token keyword\">int</span> j <span class=\"token operator\">=</span> i <span class=\"token operator\">+</span> <span class=\"token number\">1</span><span class=\"token punctuation\">;</span> j <span class=\"token operator\">&lt;</span> n<span class=\"token punctuation\">;</span> j<span class=\"token operator\">++</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"59\"></td><td><pre>                <span class=\"token keyword\">if</span> <span class=\"token punctuation\">(</span><span class=\"token function\">isSimilar</span><span class=\"token punctuation\">(</span>strs<span class=\"token punctuation\">[</span>i<span class=\"token punctuation\">]</span><span class=\"token punctuation\">,</span> strs<span class=\"token punctuation\">[</span>j<span class=\"token punctuation\">]</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"60\"></td><td><pre>                    uf<span class=\"token punctuation\">.</span><span class=\"token function\">union</span><span class=\"token punctuation\">(</span>i<span class=\"token punctuation\">,</span> j<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"61\"></td><td><pre>                <span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"62\"></td><td><pre>            <span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"63\"></td><td><pre>        <span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"64\"></td><td><pre></pre></td></tr><tr><td data-num=\"65\"></td><td><pre>        <span class=\"token keyword\">return</span> uf<span class=\"token punctuation\">.</span><span class=\"token function\">getCount</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"66\"></td><td><pre>    <span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"67\"></td><td><pre></pre></td></tr><tr><td data-num=\"68\"></td><td><pre>    <span class=\"token keyword\">private</span> <span class=\"token keyword\">boolean</span> <span class=\"token function\">isSimilar</span><span class=\"token punctuation\">(</span><span class=\"token class-name\">String</span> s1<span class=\"token punctuation\">,</span> <span class=\"token class-name\">String</span> s2<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"69\"></td><td><pre>        <span class=\"token keyword\">if</span> <span class=\"token punctuation\">(</span>s1<span class=\"token punctuation\">.</span><span class=\"token function\">equals</span><span class=\"token punctuation\">(</span>s2<span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"70\"></td><td><pre>            <span class=\"token keyword\">return</span> <span class=\"token boolean\">true</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"71\"></td><td><pre>        <span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"72\"></td><td><pre></pre></td></tr><tr><td data-num=\"73\"></td><td><pre>        <span class=\"token keyword\">int</span> diff <span class=\"token operator\">=</span> <span class=\"token number\">0</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"74\"></td><td><pre>        <span class=\"token keyword\">for</span> <span class=\"token punctuation\">(</span><span class=\"token keyword\">int</span> i <span class=\"token operator\">=</span> <span class=\"token number\">0</span><span class=\"token punctuation\">;</span> i <span class=\"token operator\">&lt;</span> s1<span class=\"token punctuation\">.</span><span class=\"token function\">length</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span> i<span class=\"token operator\">++</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"75\"></td><td><pre>            <span class=\"token keyword\">if</span> <span class=\"token punctuation\">(</span>s1<span class=\"token punctuation\">.</span><span class=\"token function\">charAt</span><span class=\"token punctuation\">(</span>i<span class=\"token punctuation\">)</span> <span class=\"token operator\">!=</span> s2<span class=\"token punctuation\">.</span><span class=\"token function\">charAt</span><span class=\"token punctuation\">(</span>i<span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"76\"></td><td><pre>                diff<span class=\"token operator\">++</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"77\"></td><td><pre>                <span class=\"token keyword\">if</span> <span class=\"token punctuation\">(</span>diff <span class=\"token operator\">></span> <span class=\"token number\">2</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"78\"></td><td><pre>                    <span class=\"token keyword\">return</span> <span class=\"token boolean\">false</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"79\"></td><td><pre>                <span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"80\"></td><td><pre>            <span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"81\"></td><td><pre>        <span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"82\"></td><td><pre></pre></td></tr><tr><td data-num=\"83\"></td><td><pre>        <span class=\"token keyword\">return</span> diff <span class=\"token operator\">==</span> <span class=\"token number\">2</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"84\"></td><td><pre>    <span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"85\"></td><td><pre><span class=\"token punctuation\">&#125;</span></pre></td></tr></table></figure></div>\n<div class=\"tab\" data-id=\"code\" data-title=\"Python\">\n<figure class=\"highlight python\"><figcaption data-lang=\"python\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre><span class=\"token keyword\">class</span> <span class=\"token class-name\">UnionFind</span><span class=\"token punctuation\">:</span></pre></td></tr><tr><td data-num=\"2\"></td><td><pre>    <span class=\"token keyword\">def</span> <span class=\"token function\">__init__</span><span class=\"token punctuation\">(</span>self<span class=\"token punctuation\">,</span> n<span class=\"token punctuation\">)</span><span class=\"token punctuation\">:</span></pre></td></tr><tr><td data-num=\"3\"></td><td><pre>        self<span class=\"token punctuation\">.</span>parent <span class=\"token operator\">=</span> <span class=\"token builtin\">list</span><span class=\"token punctuation\">(</span><span class=\"token builtin\">range</span><span class=\"token punctuation\">(</span>n<span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span></pre></td></tr><tr><td data-num=\"4\"></td><td><pre>        self<span class=\"token punctuation\">.</span>rank <span class=\"token operator\">=</span> <span class=\"token punctuation\">[</span><span class=\"token number\">0</span><span class=\"token punctuation\">]</span> <span class=\"token operator\">*</span> n</pre></td></tr><tr><td data-num=\"5\"></td><td><pre>        self<span class=\"token punctuation\">.</span>count <span class=\"token operator\">=</span> n</pre></td></tr><tr><td data-num=\"6\"></td><td><pre></pre></td></tr><tr><td data-num=\"7\"></td><td><pre>    <span class=\"token keyword\">def</span> <span class=\"token function\">find</span><span class=\"token punctuation\">(</span>self<span class=\"token punctuation\">,</span> x<span class=\"token punctuation\">)</span><span class=\"token punctuation\">:</span></pre></td></tr><tr><td data-num=\"8\"></td><td><pre>        <span class=\"token keyword\">if</span> self<span class=\"token punctuation\">.</span>parent<span class=\"token punctuation\">[</span>x<span class=\"token punctuation\">]</span> <span class=\"token operator\">!=</span> x<span class=\"token punctuation\">:</span></pre></td></tr><tr><td data-num=\"9\"></td><td><pre>            self<span class=\"token punctuation\">.</span>parent<span class=\"token punctuation\">[</span>x<span class=\"token punctuation\">]</span> <span class=\"token operator\">=</span> self<span class=\"token punctuation\">.</span>find<span class=\"token punctuation\">(</span>self<span class=\"token punctuation\">.</span>parent<span class=\"token punctuation\">[</span>x<span class=\"token punctuation\">]</span><span class=\"token punctuation\">)</span></pre></td></tr><tr><td data-num=\"10\"></td><td><pre>        <span class=\"token keyword\">return</span> self<span class=\"token punctuation\">.</span>parent<span class=\"token punctuation\">[</span>x<span class=\"token punctuation\">]</span></pre></td></tr><tr><td data-num=\"11\"></td><td><pre></pre></td></tr><tr><td data-num=\"12\"></td><td><pre>    <span class=\"token keyword\">def</span> <span class=\"token function\">union</span><span class=\"token punctuation\">(</span>self<span class=\"token punctuation\">,</span> x<span class=\"token punctuation\">,</span> y<span class=\"token punctuation\">)</span><span class=\"token punctuation\">:</span></pre></td></tr><tr><td data-num=\"13\"></td><td><pre>        root_x <span class=\"token operator\">=</span> self<span class=\"token punctuation\">.</span>find<span class=\"token punctuation\">(</span>x<span class=\"token punctuation\">)</span></pre></td></tr><tr><td data-num=\"14\"></td><td><pre>        root_y <span class=\"token operator\">=</span> self<span class=\"token punctuation\">.</span>find<span class=\"token punctuation\">(</span>y<span class=\"token punctuation\">)</span></pre></td></tr><tr><td data-num=\"15\"></td><td><pre></pre></td></tr><tr><td data-num=\"16\"></td><td><pre>        <span class=\"token keyword\">if</span> root_x <span class=\"token operator\">==</span> root_y<span class=\"token punctuation\">:</span></pre></td></tr><tr><td data-num=\"17\"></td><td><pre>            <span class=\"token keyword\">return</span> <span class=\"token boolean\">False</span></pre></td></tr><tr><td data-num=\"18\"></td><td><pre></pre></td></tr><tr><td data-num=\"19\"></td><td><pre>        <span class=\"token keyword\">if</span> self<span class=\"token punctuation\">.</span>rank<span class=\"token punctuation\">[</span>root_x<span class=\"token punctuation\">]</span> <span class=\"token operator\">&lt;</span> self<span class=\"token punctuation\">.</span>rank<span class=\"token punctuation\">[</span>root_y<span class=\"token punctuation\">]</span><span class=\"token punctuation\">:</span></pre></td></tr><tr><td data-num=\"20\"></td><td><pre>            root_x<span class=\"token punctuation\">,</span> root_y <span class=\"token operator\">=</span> root_y<span class=\"token punctuation\">,</span> root_x</pre></td></tr><tr><td data-num=\"21\"></td><td><pre></pre></td></tr><tr><td data-num=\"22\"></td><td><pre>        self<span class=\"token punctuation\">.</span>parent<span class=\"token punctuation\">[</span>root_y<span class=\"token punctuation\">]</span> <span class=\"token operator\">=</span> root_x</pre></td></tr><tr><td data-num=\"23\"></td><td><pre></pre></td></tr><tr><td data-num=\"24\"></td><td><pre>        <span class=\"token keyword\">if</span> self<span class=\"token punctuation\">.</span>rank<span class=\"token punctuation\">[</span>root_x<span class=\"token punctuation\">]</span> <span class=\"token operator\">==</span> self<span class=\"token punctuation\">.</span>rank<span class=\"token punctuation\">[</span>root_y<span class=\"token punctuation\">]</span><span class=\"token punctuation\">:</span></pre></td></tr><tr><td data-num=\"25\"></td><td><pre>            self<span class=\"token punctuation\">.</span>rank<span class=\"token punctuation\">[</span>root_x<span class=\"token punctuation\">]</span> <span class=\"token operator\">+=</span> <span class=\"token number\">1</span></pre></td></tr><tr><td data-num=\"26\"></td><td><pre></pre></td></tr><tr><td data-num=\"27\"></td><td><pre>        self<span class=\"token punctuation\">.</span>count <span class=\"token operator\">-=</span> <span class=\"token number\">1</span></pre></td></tr><tr><td data-num=\"28\"></td><td><pre></pre></td></tr><tr><td data-num=\"29\"></td><td><pre>        <span class=\"token keyword\">return</span> <span class=\"token boolean\">True</span></pre></td></tr><tr><td data-num=\"30\"></td><td><pre></pre></td></tr><tr><td data-num=\"31\"></td><td><pre><span class=\"token keyword\">class</span> <span class=\"token class-name\">Solution</span><span class=\"token punctuation\">:</span></pre></td></tr><tr><td data-num=\"32\"></td><td><pre>    <span class=\"token keyword\">def</span> <span class=\"token function\">numSimilarGroups</span><span class=\"token punctuation\">(</span>self<span class=\"token punctuation\">,</span> strs<span class=\"token punctuation\">:</span> List<span class=\"token punctuation\">[</span><span class=\"token builtin\">str</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">)</span> <span class=\"token operator\">-</span><span class=\"token operator\">></span> <span class=\"token builtin\">int</span><span class=\"token punctuation\">:</span></pre></td></tr><tr><td data-num=\"33\"></td><td><pre>        <span class=\"token keyword\">def</span> <span class=\"token function\">is_similar</span><span class=\"token punctuation\">(</span>s1<span class=\"token punctuation\">,</span> s2<span class=\"token punctuation\">)</span><span class=\"token punctuation\">:</span></pre></td></tr><tr><td data-num=\"34\"></td><td><pre>            <span class=\"token keyword\">if</span> s1 <span class=\"token operator\">==</span> s2<span class=\"token punctuation\">:</span></pre></td></tr><tr><td data-num=\"35\"></td><td><pre>                <span class=\"token keyword\">return</span> <span class=\"token boolean\">True</span></pre></td></tr><tr><td data-num=\"36\"></td><td><pre></pre></td></tr><tr><td data-num=\"37\"></td><td><pre>            diff <span class=\"token operator\">=</span> <span class=\"token number\">0</span></pre></td></tr><tr><td data-num=\"38\"></td><td><pre>            <span class=\"token keyword\">for</span> c1<span class=\"token punctuation\">,</span> c2 <span class=\"token keyword\">in</span> <span class=\"token builtin\">zip</span><span class=\"token punctuation\">(</span>s1<span class=\"token punctuation\">,</span> s2<span class=\"token punctuation\">)</span><span class=\"token punctuation\">:</span></pre></td></tr><tr><td data-num=\"39\"></td><td><pre>                <span class=\"token keyword\">if</span> c1 <span class=\"token operator\">!=</span> c2<span class=\"token punctuation\">:</span></pre></td></tr><tr><td data-num=\"40\"></td><td><pre>                    diff <span class=\"token operator\">+=</span> <span class=\"token number\">1</span></pre></td></tr><tr><td data-num=\"41\"></td><td><pre>                    <span class=\"token keyword\">if</span> diff <span class=\"token operator\">></span> <span class=\"token number\">2</span><span class=\"token punctuation\">:</span></pre></td></tr><tr><td data-num=\"42\"></td><td><pre>                        <span class=\"token keyword\">return</span> <span class=\"token boolean\">False</span></pre></td></tr><tr><td data-num=\"43\"></td><td><pre></pre></td></tr><tr><td data-num=\"44\"></td><td><pre>            <span class=\"token keyword\">return</span> diff <span class=\"token operator\">==</span> <span class=\"token number\">2</span></pre></td></tr><tr><td data-num=\"45\"></td><td><pre></pre></td></tr><tr><td data-num=\"46\"></td><td><pre>        n <span class=\"token operator\">=</span> <span class=\"token builtin\">len</span><span class=\"token punctuation\">(</span>strs<span class=\"token punctuation\">)</span></pre></td></tr><tr><td data-num=\"47\"></td><td><pre>        uf <span class=\"token operator\">=</span> UnionFind<span class=\"token punctuation\">(</span>n<span class=\"token punctuation\">)</span></pre></td></tr><tr><td data-num=\"48\"></td><td><pre></pre></td></tr><tr><td data-num=\"49\"></td><td><pre>        <span class=\"token keyword\">for</span> i <span class=\"token keyword\">in</span> <span class=\"token builtin\">range</span><span class=\"token punctuation\">(</span>n<span class=\"token punctuation\">)</span><span class=\"token punctuation\">:</span></pre></td></tr><tr><td data-num=\"50\"></td><td><pre>            <span class=\"token keyword\">for</span> j <span class=\"token keyword\">in</span> <span class=\"token builtin\">range</span><span class=\"token punctuation\">(</span>i <span class=\"token operator\">+</span> <span class=\"token number\">1</span><span class=\"token punctuation\">,</span> n<span class=\"token punctuation\">)</span><span class=\"token punctuation\">:</span></pre></td></tr><tr><td data-num=\"51\"></td><td><pre>                <span class=\"token keyword\">if</span> is_similar<span class=\"token punctuation\">(</span>strs<span class=\"token punctuation\">[</span>i<span class=\"token punctuation\">]</span><span class=\"token punctuation\">,</span> strs<span class=\"token punctuation\">[</span>j<span class=\"token punctuation\">]</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">:</span></pre></td></tr><tr><td data-num=\"52\"></td><td><pre>                    uf<span class=\"token punctuation\">.</span>union<span class=\"token punctuation\">(</span>i<span class=\"token punctuation\">,</span> j<span class=\"token punctuation\">)</span></pre></td></tr><tr><td data-num=\"53\"></td><td><pre></pre></td></tr><tr><td data-num=\"54\"></td><td><pre>        <span class=\"token keyword\">return</span> uf<span class=\"token punctuation\">.</span>count</pre></td></tr></table></figure></div>\n",
            "tags": [
                "Coding",
                "Leetcode",
                "Hard",
                "Union Find",
                "String",
                "Leetcode",
                "Array",
                "Hard",
                "Depth-First Search",
                "Breadth-First Search"
            ]
        },
        {
            "id": "https://chienikao.github.io/2023/04/27/Coding/leetcode/Medium/319%20Bulb%20Switcher/",
            "url": "https://chienikao.github.io/2023/04/27/Coding/leetcode/Medium/319%20Bulb%20Switcher/",
            "title": "319. Bulb Switcher",
            "date_published": "2023-04-27T07:16:09.000Z",
            "content_html": "<p>⭐️⭐️</p>\n<h2 id=\"題目敘述\"><a class=\"anchor\" href=\"#題目敘述\">#</a> <span class=\"exturl\" data-url=\"aHR0cHM6Ly9sZWV0Y29kZS5jb20vcHJvYmxlbXMvYnVsYi1zd2l0Y2hlci8=\">題目敘述</span></h2>\n<p>There are  <code>n</code>  bulbs that are initially off. You first turn on all the bulbs, then you turn off every second bulb.</p>\n<p>On the third round, you toggle every third bulb (turning on if it’s off or turning off if it’s on). For the  <code>ith</code>  round, you toggle every  <code>i</code>  bulb. For the  <code>nth</code>  round, you only toggle the last bulb.</p>\n<p>Return <em>the number of bulbs that are on after  <code>n</code>  rounds</em>.</p>\n<h3 id=\"example-1\"><a class=\"anchor\" href=\"#example-1\">#</a> Example 1</h3>\n<p><img data-src=\"https://i.imgur.com/JSh0QO5.png\" alt=\"\"></p>\n<blockquote>\n<p><strong>Input:</strong> n = 3<br>\n<strong>Output:</strong> 1<br>\n<strong>Explanation:</strong> At first, the three bulbs are [off, off, off].<br>\nAfter the first round, the three bulbs are [on, on, on].<br>\nAfter the second round, the three bulbs are [on, off, on].<br>\nAfter the third round, the three bulbs are [on, off, off].<br>\nSo you should return 1 because there is only one bulb is on.</p>\n</blockquote>\n<h3 id=\"example-2\"><a class=\"anchor\" href=\"#example-2\">#</a> Example 2</h3>\n<blockquote>\n<p><strong>Input:</strong> n = 0<br>\n<strong>Output:</strong> 0</p>\n</blockquote>\n<h3 id=\"example-3\"><a class=\"anchor\" href=\"#example-3\">#</a> Example 3</h3>\n<blockquote>\n<p><strong>Input:</strong> n = 1<br>\n<strong>Output:</strong> 1</p>\n</blockquote>\n<h2 id=\"solution\"><a class=\"anchor\" href=\"#solution\">#</a> Solution</h2>\n<div class=\"tab\" data-id=\"code\" data-title=\"C++\">\n<figure class=\"highlight cpp\"><figcaption data-lang=\"C++\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre><span class=\"token keyword\">class</span> <span class=\"token class-name\">Solution</span> <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"2\"></td><td><pre><span class=\"token keyword\">public</span><span class=\"token operator\">:</span></pre></td></tr><tr><td data-num=\"3\"></td><td><pre>    <span class=\"token keyword\">int</span> <span class=\"token function\">bulbSwitch</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">int</span> n<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"4\"></td><td><pre>        <span class=\"token keyword\">return</span> <span class=\"token punctuation\">(</span><span class=\"token keyword\">int</span><span class=\"token punctuation\">)</span> <span class=\"token function\">sqrt</span><span class=\"token punctuation\">(</span>n<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"5\"></td><td><pre>    <span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"6\"></td><td><pre><span class=\"token punctuation\">&#125;</span><span class=\"token punctuation\">;</span></pre></td></tr></table></figure></div>\n<div class=\"tab\" data-id=\"code\" data-title=\"Java\">\n<figure class=\"highlight java\"><figcaption data-lang=\"java\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre><span class=\"token keyword\">class</span> <span class=\"token class-name\">Solution</span> <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"2\"></td><td><pre>    <span class=\"token keyword\">public</span> <span class=\"token keyword\">int</span> <span class=\"token function\">bulbSwitch</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">int</span> n<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"3\"></td><td><pre>        <span class=\"token keyword\">return</span> <span class=\"token punctuation\">(</span><span class=\"token keyword\">int</span><span class=\"token punctuation\">)</span><span class=\"token class-name\">Math</span><span class=\"token punctuation\">.</span><span class=\"token function\">sqrt</span><span class=\"token punctuation\">(</span>n<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"4\"></td><td><pre>    <span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"5\"></td><td><pre><span class=\"token punctuation\">&#125;</span></pre></td></tr></table></figure></div>\n<div class=\"tab\" data-id=\"code\" data-title=\"Python\">\n<figure class=\"highlight python\"><figcaption data-lang=\"python\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre><span class=\"token keyword\">class</span> <span class=\"token class-name\">Solution</span><span class=\"token punctuation\">:</span></pre></td></tr><tr><td data-num=\"2\"></td><td><pre>    <span class=\"token keyword\">def</span> <span class=\"token function\">bulbSwitch</span><span class=\"token punctuation\">(</span>self<span class=\"token punctuation\">,</span> n<span class=\"token punctuation\">:</span> <span class=\"token builtin\">int</span><span class=\"token punctuation\">)</span> <span class=\"token operator\">-</span><span class=\"token operator\">></span> <span class=\"token builtin\">int</span><span class=\"token punctuation\">:</span> <span class=\"token keyword\">return</span> <span class=\"token builtin\">int</span><span class=\"token punctuation\">(</span>sqrt<span class=\"token punctuation\">(</span>n<span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span></pre></td></tr></table></figure></div>\n",
            "tags": [
                "Coding",
                "Leetcode",
                "Leetcode",
                "Math",
                "Medium",
                "Brainteaser"
            ]
        },
        {
            "id": "https://chienikao.github.io/2023/04/26/Coding/uva/Star1/uva%20706/",
            "url": "https://chienikao.github.io/2023/04/26/Coding/uva/Star1/uva%20706/",
            "title": "uva 706 - LC-Display",
            "date_published": "2023-04-26T02:42:29.000Z",
            "content_html": "<p>⭐️</p>\n<h2 id=\"題目連結\"><a class=\"anchor\" href=\"#題目連結\">#</a> 題目連結</h2>\n<ul>\n<li><span class=\"exturl\" data-url=\"aHR0cHM6Ly96ZXJvanVkZ2UudHcvU2hvd1Byb2JsZW0/cHJvYmxlbWlkPWMxMzU=\">ZeroJudge</span></li>\n<li><span class=\"exturl\" data-url=\"aHR0cHM6Ly9vbmxpbmVqdWRnZS5vcmcvZXh0ZXJuYWwvNy9wNzA2LnBkZg==\">題目連結</span></li>\n<li><span class=\"exturl\" data-url=\"aHR0cHM6Ly9vbmxpbmVqdWRnZS5vcmcvaW5kZXgucGhwP29wdGlvbj1jb21fb25saW5lanVkZ2UmYW1wO0l0ZW1pZD04JmFtcDtjYXRlZ29yeT05JmFtcDtwYWdlPXNob3dfcHJvYmxlbSZhbXA7cHJvYmxlbT02NDc=\">Online Judge</span></li>\n<li><span class=\"exturl\" data-url=\"aHR0cHM6Ly93d3cudWRlYnVnLmNvbS9VVmEvNzA2\">uDebug</span></li>\n</ul>\n<h2 id=\"題目敘述\"><a class=\"anchor\" href=\"#題目敘述\">#</a> 題目敘述</h2>\n<p>A friend of you has just bought a new computer. Until now, the most powerful computer he ever used has been a pocket calculator. Now, looking at his new computer, he is a bit disappointed, because he liked the LC-display of his calculator so much. So you decide to write a program that displays numbers in an LC-display-like style on his computer.</p>\n<h2 id=\"input\"><a class=\"anchor\" href=\"#input\">#</a> Input</h2>\n<p>The input file contains several lines, one for each number to be displayed. Each line contains two integers  <code>s</code> ,  <code>n</code>  ( <code>1 ≤ s ≤ 10</code> ,  <code>0 ≤ n ≤ 99 999 999</code> ), where  <code>n</code>  is the number to be displayed and  <code>s</code>  is the size in which it shall be displayed.</p>\n<p>The input file will be terminated by a line containing two zeros. This line should not be processed.</p>\n<h2 id=\"output\"><a class=\"anchor\" href=\"#output\">#</a> Output</h2>\n<p>Output the numbers given in the input file in an LC-display-style using  <code>s</code>  ‘-’ signs for the horizontal segments and  <code>s</code>  ‘|’ signs for the vertical ones. Each digit occupies exactly  <code>s + 2</code>  columns and  <code>2s + 3</code>  rows. (Be sure to fill all the white space occupied by the digits with blanks, also for the last digit.) <em>There has to be exactly one column of blanks between two digits</em>.</p>\n<p><em>Output a blank line after each number</em>. (You will find a sample of each digit in the sample output.)</p>\n<h2 id=\"sample-input\"><a class=\"anchor\" href=\"#sample-input\">#</a> Sample Input</h2>\n<blockquote>\n<p>2 12345<br>\n3 67890<br>\n0 0</p>\n</blockquote>\n<h2 id=\"sample-output\"><a class=\"anchor\" href=\"#sample-output\">#</a> Sample Output</h2>\n<p><img data-src=\"https://i.imgur.com/1yA2BuX.png\" alt=\"\"></p>\n<h2 id=\"solution\"><a class=\"anchor\" href=\"#solution\">#</a> Solution</h2>\n<figure class=\"highlight c\"><figcaption data-lang=\"c\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre><span class=\"token macro property\"><span class=\"token directive-hash\">#</span><span class=\"token directive keyword\">include</span> <span class=\"token string\">&lt;bits/stdc++.h></span></span></pre></td></tr><tr><td data-num=\"2\"></td><td><pre></pre></td></tr><tr><td data-num=\"3\"></td><td><pre>using namespace std<span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"4\"></td><td><pre></pre></td></tr><tr><td data-num=\"5\"></td><td><pre><span class=\"token keyword\">int</span> <span class=\"token function\">main</span> <span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"6\"></td><td><pre>    <span class=\"token keyword\">int</span> s<span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"7\"></td><td><pre>    string str<span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"8\"></td><td><pre>    map<span class=\"token operator\">&lt;</span><span class=\"token keyword\">char</span><span class=\"token punctuation\">,</span> vector<span class=\"token operator\">&lt;</span>bool<span class=\"token operator\">>></span> mp<span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"9\"></td><td><pre>    mp<span class=\"token punctuation\">[</span><span class=\"token char\">'0'</span><span class=\"token punctuation\">]</span> <span class=\"token operator\">=</span> <span class=\"token punctuation\">&#123;</span>true<span class=\"token punctuation\">,</span> true<span class=\"token punctuation\">,</span> true<span class=\"token punctuation\">,</span> false<span class=\"token punctuation\">,</span> true<span class=\"token punctuation\">,</span> true<span class=\"token punctuation\">,</span> true<span class=\"token punctuation\">&#125;</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"10\"></td><td><pre>    mp<span class=\"token punctuation\">[</span><span class=\"token char\">'1'</span><span class=\"token punctuation\">]</span> <span class=\"token operator\">=</span> <span class=\"token punctuation\">&#123;</span>false<span class=\"token punctuation\">,</span> false<span class=\"token punctuation\">,</span> true<span class=\"token punctuation\">,</span> false<span class=\"token punctuation\">,</span> false<span class=\"token punctuation\">,</span> true<span class=\"token punctuation\">,</span> false<span class=\"token punctuation\">&#125;</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"11\"></td><td><pre>    mp<span class=\"token punctuation\">[</span><span class=\"token char\">'2'</span><span class=\"token punctuation\">]</span> <span class=\"token operator\">=</span> <span class=\"token punctuation\">&#123;</span>true<span class=\"token punctuation\">,</span> false<span class=\"token punctuation\">,</span> true<span class=\"token punctuation\">,</span> true<span class=\"token punctuation\">,</span> true<span class=\"token punctuation\">,</span> false<span class=\"token punctuation\">,</span> true<span class=\"token punctuation\">&#125;</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"12\"></td><td><pre>    mp<span class=\"token punctuation\">[</span><span class=\"token char\">'3'</span><span class=\"token punctuation\">]</span> <span class=\"token operator\">=</span> <span class=\"token punctuation\">&#123;</span>true<span class=\"token punctuation\">,</span> false<span class=\"token punctuation\">,</span> true<span class=\"token punctuation\">,</span> true<span class=\"token punctuation\">,</span> false<span class=\"token punctuation\">,</span> true<span class=\"token punctuation\">,</span> true<span class=\"token punctuation\">&#125;</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"13\"></td><td><pre>    mp<span class=\"token punctuation\">[</span><span class=\"token char\">'4'</span><span class=\"token punctuation\">]</span> <span class=\"token operator\">=</span> <span class=\"token punctuation\">&#123;</span>false<span class=\"token punctuation\">,</span> true<span class=\"token punctuation\">,</span> true<span class=\"token punctuation\">,</span> true<span class=\"token punctuation\">,</span> false<span class=\"token punctuation\">,</span> true<span class=\"token punctuation\">,</span> false<span class=\"token punctuation\">&#125;</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"14\"></td><td><pre>    mp<span class=\"token punctuation\">[</span><span class=\"token char\">'5'</span><span class=\"token punctuation\">]</span> <span class=\"token operator\">=</span> <span class=\"token punctuation\">&#123;</span>true<span class=\"token punctuation\">,</span> true<span class=\"token punctuation\">,</span> false<span class=\"token punctuation\">,</span> true<span class=\"token punctuation\">,</span> false<span class=\"token punctuation\">,</span> true<span class=\"token punctuation\">,</span> true<span class=\"token punctuation\">&#125;</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"15\"></td><td><pre>    mp<span class=\"token punctuation\">[</span><span class=\"token char\">'6'</span><span class=\"token punctuation\">]</span> <span class=\"token operator\">=</span> <span class=\"token punctuation\">&#123;</span>true<span class=\"token punctuation\">,</span> true<span class=\"token punctuation\">,</span> false<span class=\"token punctuation\">,</span> true<span class=\"token punctuation\">,</span> true<span class=\"token punctuation\">,</span> true<span class=\"token punctuation\">,</span> true<span class=\"token punctuation\">&#125;</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"16\"></td><td><pre>    mp<span class=\"token punctuation\">[</span><span class=\"token char\">'7'</span><span class=\"token punctuation\">]</span> <span class=\"token operator\">=</span> <span class=\"token punctuation\">&#123;</span>true<span class=\"token punctuation\">,</span> false<span class=\"token punctuation\">,</span> true<span class=\"token punctuation\">,</span> false<span class=\"token punctuation\">,</span> false<span class=\"token punctuation\">,</span> true<span class=\"token punctuation\">,</span> false<span class=\"token punctuation\">&#125;</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"17\"></td><td><pre>    mp<span class=\"token punctuation\">[</span><span class=\"token char\">'8'</span><span class=\"token punctuation\">]</span> <span class=\"token operator\">=</span> <span class=\"token punctuation\">&#123;</span>true<span class=\"token punctuation\">,</span> true<span class=\"token punctuation\">,</span> true<span class=\"token punctuation\">,</span> true<span class=\"token punctuation\">,</span> true<span class=\"token punctuation\">,</span> true<span class=\"token punctuation\">,</span> true<span class=\"token punctuation\">&#125;</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"18\"></td><td><pre>    mp<span class=\"token punctuation\">[</span><span class=\"token char\">'9'</span><span class=\"token punctuation\">]</span> <span class=\"token operator\">=</span> <span class=\"token punctuation\">&#123;</span>true<span class=\"token punctuation\">,</span> true<span class=\"token punctuation\">,</span> true<span class=\"token punctuation\">,</span> true<span class=\"token punctuation\">,</span> false<span class=\"token punctuation\">,</span> true<span class=\"token punctuation\">,</span> true<span class=\"token punctuation\">&#125;</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"19\"></td><td><pre>    <span class=\"token keyword\">while</span> <span class=\"token punctuation\">(</span>cin <span class=\"token operator\">>></span> s <span class=\"token operator\">>></span> str<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"20\"></td><td><pre>        <span class=\"token keyword\">if</span> <span class=\"token punctuation\">(</span>s <span class=\"token operator\">==</span> <span class=\"token number\">0</span> <span class=\"token operator\">&amp;&amp;</span> str <span class=\"token operator\">==</span> <span class=\"token string\">\"0\"</span><span class=\"token punctuation\">)</span> <span class=\"token keyword\">break</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"21\"></td><td><pre>        string l1 <span class=\"token operator\">=</span> <span class=\"token string\">\"\"</span><span class=\"token punctuation\">,</span> l2 <span class=\"token operator\">=</span> <span class=\"token string\">\"\"</span><span class=\"token punctuation\">,</span> l3 <span class=\"token operator\">=</span> <span class=\"token string\">\"\"</span><span class=\"token punctuation\">,</span> l4 <span class=\"token operator\">=</span> <span class=\"token string\">\"\"</span><span class=\"token punctuation\">,</span> l5 <span class=\"token operator\">=</span> <span class=\"token string\">\"\"</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"22\"></td><td><pre>        <span class=\"token keyword\">for</span> <span class=\"token punctuation\">(</span><span class=\"token keyword\">int</span> j<span class=\"token operator\">=</span><span class=\"token number\">0</span><span class=\"token punctuation\">;</span> j<span class=\"token operator\">&lt;</span>str<span class=\"token punctuation\">.</span><span class=\"token function\">size</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span> j<span class=\"token operator\">++</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"23\"></td><td><pre>            <span class=\"token keyword\">char</span> c <span class=\"token operator\">=</span> str<span class=\"token punctuation\">[</span>j<span class=\"token punctuation\">]</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"24\"></td><td><pre>            vector<span class=\"token operator\">&lt;</span>bool<span class=\"token operator\">></span> tmp <span class=\"token operator\">=</span> mp<span class=\"token punctuation\">[</span>c<span class=\"token punctuation\">]</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"25\"></td><td><pre>            l1 <span class=\"token operator\">+=</span> <span class=\"token string\">\" \"</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"26\"></td><td><pre>            <span class=\"token keyword\">if</span> <span class=\"token punctuation\">(</span>tmp<span class=\"token punctuation\">[</span><span class=\"token number\">0</span><span class=\"token punctuation\">]</span> <span class=\"token operator\">==</span> true<span class=\"token punctuation\">)</span> <span class=\"token keyword\">for</span> <span class=\"token punctuation\">(</span><span class=\"token keyword\">int</span> i<span class=\"token operator\">=</span><span class=\"token number\">1</span><span class=\"token punctuation\">;</span> i<span class=\"token operator\">&lt;=</span>s<span class=\"token punctuation\">;</span> i<span class=\"token operator\">++</span><span class=\"token punctuation\">)</span> l1 <span class=\"token operator\">+=</span> <span class=\"token string\">\"-\"</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"27\"></td><td><pre>            <span class=\"token keyword\">else</span> <span class=\"token keyword\">for</span> <span class=\"token punctuation\">(</span><span class=\"token keyword\">int</span> i<span class=\"token operator\">=</span><span class=\"token number\">1</span><span class=\"token punctuation\">;</span> i<span class=\"token operator\">&lt;=</span>s<span class=\"token punctuation\">;</span> i<span class=\"token operator\">++</span><span class=\"token punctuation\">)</span> l1 <span class=\"token operator\">+=</span> <span class=\"token string\">\" \"</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"28\"></td><td><pre>            l1 <span class=\"token operator\">+=</span> <span class=\"token string\">\" \"</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"29\"></td><td><pre></pre></td></tr><tr><td data-num=\"30\"></td><td><pre>            <span class=\"token keyword\">if</span> <span class=\"token punctuation\">(</span>tmp<span class=\"token punctuation\">[</span><span class=\"token number\">1</span><span class=\"token punctuation\">]</span> <span class=\"token operator\">==</span> true<span class=\"token punctuation\">)</span> l2 <span class=\"token operator\">+=</span> <span class=\"token string\">\"|\"</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"31\"></td><td><pre>            <span class=\"token keyword\">else</span> l2 <span class=\"token operator\">+=</span> <span class=\"token string\">\" \"</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"32\"></td><td><pre>            <span class=\"token keyword\">for</span> <span class=\"token punctuation\">(</span><span class=\"token keyword\">int</span> i<span class=\"token operator\">=</span><span class=\"token number\">1</span><span class=\"token punctuation\">;</span> i<span class=\"token operator\">&lt;=</span>s<span class=\"token punctuation\">;</span> i<span class=\"token operator\">++</span><span class=\"token punctuation\">)</span> l2 <span class=\"token operator\">+=</span> <span class=\"token string\">\" \"</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"33\"></td><td><pre>            <span class=\"token keyword\">if</span> <span class=\"token punctuation\">(</span>tmp<span class=\"token punctuation\">[</span><span class=\"token number\">2</span><span class=\"token punctuation\">]</span> <span class=\"token operator\">==</span> true<span class=\"token punctuation\">)</span> l2 <span class=\"token operator\">+=</span> <span class=\"token string\">\"|\"</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"34\"></td><td><pre>            <span class=\"token keyword\">else</span> l2 <span class=\"token operator\">+=</span> <span class=\"token string\">\" \"</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"35\"></td><td><pre></pre></td></tr><tr><td data-num=\"36\"></td><td><pre>            l3 <span class=\"token operator\">+=</span> <span class=\"token string\">\" \"</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"37\"></td><td><pre>            <span class=\"token keyword\">if</span> <span class=\"token punctuation\">(</span>tmp<span class=\"token punctuation\">[</span><span class=\"token number\">3</span><span class=\"token punctuation\">]</span> <span class=\"token operator\">==</span> true<span class=\"token punctuation\">)</span> <span class=\"token keyword\">for</span> <span class=\"token punctuation\">(</span><span class=\"token keyword\">int</span> i<span class=\"token operator\">=</span><span class=\"token number\">1</span><span class=\"token punctuation\">;</span> i<span class=\"token operator\">&lt;=</span>s<span class=\"token punctuation\">;</span> i<span class=\"token operator\">++</span><span class=\"token punctuation\">)</span> l3 <span class=\"token operator\">+=</span> <span class=\"token string\">\"-\"</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"38\"></td><td><pre>            <span class=\"token keyword\">else</span> <span class=\"token keyword\">for</span> <span class=\"token punctuation\">(</span><span class=\"token keyword\">int</span> i<span class=\"token operator\">=</span><span class=\"token number\">1</span><span class=\"token punctuation\">;</span> i<span class=\"token operator\">&lt;=</span>s<span class=\"token punctuation\">;</span> i<span class=\"token operator\">++</span><span class=\"token punctuation\">)</span> l3 <span class=\"token operator\">+=</span> <span class=\"token string\">\" \"</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"39\"></td><td><pre>            l3 <span class=\"token operator\">+=</span> <span class=\"token string\">\" \"</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"40\"></td><td><pre></pre></td></tr><tr><td data-num=\"41\"></td><td><pre>            <span class=\"token keyword\">if</span> <span class=\"token punctuation\">(</span>tmp<span class=\"token punctuation\">[</span><span class=\"token number\">4</span><span class=\"token punctuation\">]</span> <span class=\"token operator\">==</span> true<span class=\"token punctuation\">)</span> l4 <span class=\"token operator\">+=</span> <span class=\"token string\">\"|\"</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"42\"></td><td><pre>            <span class=\"token keyword\">else</span> l4 <span class=\"token operator\">+=</span> <span class=\"token string\">\" \"</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"43\"></td><td><pre>            <span class=\"token keyword\">for</span> <span class=\"token punctuation\">(</span><span class=\"token keyword\">int</span> i<span class=\"token operator\">=</span><span class=\"token number\">1</span><span class=\"token punctuation\">;</span> i<span class=\"token operator\">&lt;=</span>s<span class=\"token punctuation\">;</span> i<span class=\"token operator\">++</span><span class=\"token punctuation\">)</span> l4 <span class=\"token operator\">+=</span> <span class=\"token string\">\" \"</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"44\"></td><td><pre>            <span class=\"token keyword\">if</span> <span class=\"token punctuation\">(</span>tmp<span class=\"token punctuation\">[</span><span class=\"token number\">5</span><span class=\"token punctuation\">]</span> <span class=\"token operator\">==</span> true<span class=\"token punctuation\">)</span> l4 <span class=\"token operator\">+=</span> <span class=\"token string\">\"|\"</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"45\"></td><td><pre>            <span class=\"token keyword\">else</span> l4 <span class=\"token operator\">+=</span> <span class=\"token string\">\" \"</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"46\"></td><td><pre></pre></td></tr><tr><td data-num=\"47\"></td><td><pre>            l5 <span class=\"token operator\">+=</span> <span class=\"token string\">\" \"</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"48\"></td><td><pre>            <span class=\"token keyword\">if</span> <span class=\"token punctuation\">(</span>tmp<span class=\"token punctuation\">[</span><span class=\"token number\">6</span><span class=\"token punctuation\">]</span> <span class=\"token operator\">==</span> true<span class=\"token punctuation\">)</span> <span class=\"token keyword\">for</span> <span class=\"token punctuation\">(</span><span class=\"token keyword\">int</span> i<span class=\"token operator\">=</span><span class=\"token number\">1</span><span class=\"token punctuation\">;</span> i<span class=\"token operator\">&lt;=</span>s<span class=\"token punctuation\">;</span> i<span class=\"token operator\">++</span><span class=\"token punctuation\">)</span> l5 <span class=\"token operator\">+=</span> <span class=\"token string\">\"-\"</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"49\"></td><td><pre>            <span class=\"token keyword\">else</span> <span class=\"token keyword\">for</span> <span class=\"token punctuation\">(</span><span class=\"token keyword\">int</span> i<span class=\"token operator\">=</span><span class=\"token number\">1</span><span class=\"token punctuation\">;</span> i<span class=\"token operator\">&lt;=</span>s<span class=\"token punctuation\">;</span> i<span class=\"token operator\">++</span><span class=\"token punctuation\">)</span> l5 <span class=\"token operator\">+=</span> <span class=\"token string\">\" \"</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"50\"></td><td><pre>            l5 <span class=\"token operator\">+=</span> <span class=\"token string\">\" \"</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"51\"></td><td><pre></pre></td></tr><tr><td data-num=\"52\"></td><td><pre>            <span class=\"token keyword\">if</span> <span class=\"token punctuation\">(</span>j <span class=\"token operator\">!=</span> str<span class=\"token punctuation\">.</span><span class=\"token function\">size</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token operator\">-</span> <span class=\"token number\">1</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"53\"></td><td><pre>                l1 <span class=\"token operator\">+=</span> <span class=\"token string\">\" \"</span><span class=\"token punctuation\">;</span> l2 <span class=\"token operator\">+=</span> <span class=\"token string\">\" \"</span><span class=\"token punctuation\">;</span> l3 <span class=\"token operator\">+=</span> <span class=\"token string\">\" \"</span><span class=\"token punctuation\">;</span> l4 <span class=\"token operator\">+=</span> <span class=\"token string\">\" \"</span><span class=\"token punctuation\">;</span> l5 <span class=\"token operator\">+=</span> <span class=\"token string\">\" \"</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"54\"></td><td><pre>            <span class=\"token punctuation\">&#125;</span> </pre></td></tr><tr><td data-num=\"55\"></td><td><pre>                </pre></td></tr><tr><td data-num=\"56\"></td><td><pre>        <span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"57\"></td><td><pre></pre></td></tr><tr><td data-num=\"58\"></td><td><pre>        cout <span class=\"token operator\">&lt;&lt;</span> l1 <span class=\"token operator\">&lt;&lt;</span> endl<span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"59\"></td><td><pre>        <span class=\"token keyword\">for</span> <span class=\"token punctuation\">(</span><span class=\"token keyword\">int</span> i<span class=\"token operator\">=</span><span class=\"token number\">1</span><span class=\"token punctuation\">;</span> i<span class=\"token operator\">&lt;=</span>s<span class=\"token punctuation\">;</span> i<span class=\"token operator\">++</span><span class=\"token punctuation\">)</span> cout <span class=\"token operator\">&lt;&lt;</span> l2 <span class=\"token operator\">&lt;&lt;</span> endl<span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"60\"></td><td><pre>        cout <span class=\"token operator\">&lt;&lt;</span> l3 <span class=\"token operator\">&lt;&lt;</span> endl<span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"61\"></td><td><pre>        <span class=\"token keyword\">for</span> <span class=\"token punctuation\">(</span><span class=\"token keyword\">int</span> i<span class=\"token operator\">=</span><span class=\"token number\">1</span><span class=\"token punctuation\">;</span> i<span class=\"token operator\">&lt;=</span>s<span class=\"token punctuation\">;</span> i<span class=\"token operator\">++</span><span class=\"token punctuation\">)</span> cout <span class=\"token operator\">&lt;&lt;</span> l4 <span class=\"token operator\">&lt;&lt;</span> endl<span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"62\"></td><td><pre>        cout <span class=\"token operator\">&lt;&lt;</span> l5 <span class=\"token operator\">&lt;&lt;</span> endl <span class=\"token operator\">&lt;&lt;</span> endl<span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"63\"></td><td><pre>    <span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"64\"></td><td><pre>    <span class=\"token keyword\">return</span> <span class=\"token number\">0</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"65\"></td><td><pre><span class=\"token punctuation\">&#125;</span></pre></td></tr></table></figure>",
            "tags": [
                "Coding",
                "UVA",
                "Star1",
                "Star1",
                "CPE",
                "UVA"
            ]
        },
        {
            "id": "https://chienikao.github.io/2023/04/26/System%20Software/Ch01/Appendix_A/",
            "url": "https://chienikao.github.io/2023/04/26/System%20Software/Ch01/Appendix_A/",
            "title": "Appendix A",
            "date_published": "2023-04-26T01:33:29.000Z",
            "content_html": "<h1 id=\"appendix-a\"><a class=\"anchor\" href=\"#appendix-a\">#</a> Appendix A</h1>\n<p><img data-src=\"https://i.imgur.com/Jg7aXIF.png\" alt=\"\"><br>\n<img data-src=\"https://i.imgur.com/tgx79gp.png\" alt=\"\"><br>\n<img data-src=\"https://i.imgur.com/FvmdzSQ.png\" alt=\"\"><br>\n<img data-src=\"https://i.imgur.com/CVWEW1r.png\" alt=\"\"></p>\n",
            "tags": [
                "System Software",
                "Ch01",
                "System Software"
            ]
        },
        {
            "id": "https://chienikao.github.io/2023/04/26/System%20Software/Ch01/Ch01_example/",
            "url": "https://chienikao.github.io/2023/04/26/System%20Software/Ch01/Ch01_example/",
            "title": "Ch01 - Example",
            "date_published": "2023-04-26T01:33:29.000Z",
            "content_html": "<style>\n    font {\n        color: red;\n        font-weight: bold;\n    }\n</style>\n<h1 id=\"ch01-範例程式分析\"><a class=\"anchor\" href=\"#ch01-範例程式分析\">#</a> Ch01 - 範例程式分析</h1>\n<ul>\n<li><a href=\"./Appendix%20A.md\">Appendix A</a></li>\n<li>High Level Language 的部分是 pseudo-code\n<ul>\n<li>僅能代表大概相同的邏輯</li>\n<li>不保證這段 code 編譯成組合語言會和範例完全一樣</li>\n</ul>\n</li>\n</ul>\n<div class=\"note info\">\n<p><strong>判斷 format 的方法</strong></p>\n<ul>\n<li><strong>Relative Addressing</strong>: 必為 format 3</li>\n<li><strong>Immediate Addressing</strong>: 看常數大小\n<ul>\n<li>因為 format 3 的 disp 欄位有 12 bits，僅能表示 <span class=\"katex\"><span class=\"katex-mathml\"><math xmlns=\"http://www.w3.org/1998/Math/MathML\"><semantics><mrow><mo>−</mo><msup><mn>2</mn><mn>12</mn></msup></mrow><annotation encoding=\"application/x-tex\">-2^{12}</annotation></semantics></math></span><span class=\"katex-html\" aria-hidden=\"true\"><span class=\"base\"><span class=\"strut\" style=\"height:0.897438em;vertical-align:-0.08333em;\"></span><span class=\"mord\">−</span><span class=\"mord\"><span class=\"mord\">2</span><span class=\"msupsub\"><span class=\"vlist-t\"><span class=\"vlist-r\"><span class=\"vlist\" style=\"height:0.8141079999999999em;\"><span style=\"top:-3.063em;margin-right:0.05em;\"><span class=\"pstrut\" style=\"height:2.7em;\"></span><span class=\"sizing reset-size6 size3 mtight\"><span class=\"mord mtight\"><span class=\"mord mtight\">1</span><span class=\"mord mtight\">2</span></span></span></span></span></span></span></span></span></span></span></span> ~ <span class=\"katex\"><span class=\"katex-mathml\"><math xmlns=\"http://www.w3.org/1998/Math/MathML\"><semantics><mrow><msup><mn>2</mn><mn>12</mn></msup><mo>−</mo><mn>1</mn></mrow><annotation encoding=\"application/x-tex\">2^{12}-1</annotation></semantics></math></span><span class=\"katex-html\" aria-hidden=\"true\"><span class=\"base\"><span class=\"strut\" style=\"height:0.897438em;vertical-align:-0.08333em;\"></span><span class=\"mord\"><span class=\"mord\">2</span><span class=\"msupsub\"><span class=\"vlist-t\"><span class=\"vlist-r\"><span class=\"vlist\" style=\"height:0.8141079999999999em;\"><span style=\"top:-3.063em;margin-right:0.05em;\"><span class=\"pstrut\" style=\"height:2.7em;\"></span><span class=\"sizing reset-size6 size3 mtight\"><span class=\"mord mtight\"><span class=\"mord mtight\">1</span><span class=\"mord mtight\">2</span></span></span></span></span></span></span></span></span><span class=\"mspace\" style=\"margin-right:0.2222222222222222em;\"></span><span class=\"mbin\">−</span><span class=\"mspace\" style=\"margin-right:0.2222222222222222em;\"></span></span><span class=\"base\"><span class=\"strut\" style=\"height:0.64444em;vertical-align:0em;\"></span><span class=\"mord\">1</span></span></span></span></li>\n</ul>\n</li>\n<li><strong>Memory Access</strong>:  通常是 format 3</li>\n<li><strong>Operation 前有加號</strong>：通常是 format 4</li>\n</ul>\n</div>\n<div class=\"note info\">\n<p><strong>判斷是否存取記憶體的方法</strong></p>\n<ul>\n<li>在語法描述中， <code>m</code>  表記憶體位置， <code>(m)</code>  是此位置的資料\n<ul>\n<li>所以如果描述中有  <code>(m)</code>  表示有 memory access</li>\n</ul>\n</li>\n</ul>\n</div>\n<h2 id=\"12-simple-data-movement\"><a class=\"anchor\" href=\"#12-simple-data-movement\">#</a> 1.2 Simple Data Movement</h2>\n<ul>\n<li>There are <strong>no memory-to-memory move instructions</strong></li>\n<li>All data movement must be <strong>done using registers</strong>.\n<ul>\n<li>先用 Load 指令把資料從某段記憶體寫入 register</li>\n<li>再用 Store 指令把資料從 register 寫入目標記憶體位置</li>\n</ul>\n</li>\n<li>There are four different ways of defining storage for data items in the SIC assembler language:  <code>WORD</code> ,  <code>RESW</code> ,  <code>BYTE</code> ,  <code>RESB</code></li>\n</ul>\n<h3 id=\"sic\"><a class=\"anchor\" href=\"#sic\">#</a> SIC</h3>\n<pre><code class=\"language-=\">\tLDA \tFIVE\n\tSTA \tALPHA\n\tLDCH\tCHARZ\n\tSTCH\tC1\n\t .\n\t .\n\t .\nALPHA\tRESW\t1\t//宣告變數，長度沒有限制\nFIVE\tWORD\t5\t//宣告常數\nCHARZ\tBYTE\tC'Z'\t//宣告byte\nC1\tRESB\t1\n</code></pre>\n<ul>\n<li><strong>Memory usage</strong>: // 記憶體使用多少 byte (空間)\n<ul>\n<li><strong>Data</strong>: 2 words + 2 bytes = 6 + 2 bytes = 8 bytes</li>\n<li><strong>Instruction</strong>: 4 * 3(24 bits) = 12 bytes</li>\n<li><strong>Total</strong>: 8 + 12 bytes = 20 bytes</li>\n</ul>\n</li>\n<li><strong># of memory access</strong>: // 記憶體存取幾次 (速度)\n<ul>\n<li><strong>Data Access</strong>: 4</li>\n<li><strong>Instruction Fetch</strong>: 4</li>\n<li><strong>Total</strong>: 8</li>\n</ul>\n</li>\n</ul>\n<h3 id=\"sicxe\"><a class=\"anchor\" href=\"#sicxe\">#</a> SIC/XE</h3>\n<pre><code class=\"language-=\">\tLDA\t #5\n\tSTA\t ALPHA\n\tLDA\t #90\n\tSTCH\t C1\n\t .\n\t .\n\t .\nALPHA\tRESW\t1\nC1\tRESB\t1\n</code></pre>\n<ul>\n<li><strong>Memory usage</strong>:\n<ul>\n<li><strong>Data</strong>: 1 word + 1 bytes = 3 + 1 bytes = 4 bytes</li>\n<li><strong>Instruction</strong>: 3 + 3 + 3 + 3 = 12 bytes</li>\n<li><strong>Total</strong>: 16 bytes</li>\n</ul>\n</li>\n<li><strong># of memory access</strong>:\n<ul>\n<li><strong>Data Access</strong>: 2</li>\n<li><strong>Instruction Fetch</strong>: 4</li>\n<li><strong>Total</strong>: 6</li>\n</ul>\n</li>\n</ul>\n<h3 id=\"high-level-language\"><a class=\"anchor\" href=\"#high-level-language\">#</a> High Level Language</h3>\n<figure class=\"highlight c\"><figcaption data-lang=\"c\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre><span class=\"token keyword\">int</span> ALPHA<span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"2\"></td><td><pre><span class=\"token keyword\">char</span> C1<span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"3\"></td><td><pre></pre></td></tr><tr><td data-num=\"4\"></td><td><pre>ALPHA <span class=\"token operator\">=</span> <span class=\"token number\">5</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"5\"></td><td><pre>C1 <span class=\"token operator\">=</span> <span class=\"token char\">'Z'</span><span class=\"token punctuation\">;</span></pre></td></tr></table></figure><h2 id=\"13-simple-arithmetic-operation\"><a class=\"anchor\" href=\"#13-simple-arithmetic-operation\">#</a> 1.3 Simple Arithmetic Operation</h2>\n<h3 id=\"sic-2\"><a class=\"anchor\" href=\"#sic-2\">#</a> SIC</h3>\n<pre><code class=\"language-=\">\tLDA\tALPHA\n\tADD\tINCR\n\tSUB \tONE\n\tSTA\tBETA\n\tLDA\tGAMMA\n\tADD \tINCR\n\tSUB\tONE\n\tSTA\tDELTA\n\t .\n\t .\n\t .\nONE\tWORD\t1\n         .\nALPHA\tRESW\t1\nBETA\tRESW\t1\nGAMMA\tRESW\t1\nDELTA\tRESW\t1\nINCR\tRESW\t1 \n</code></pre>\n<ul>\n<li><strong>Memory usage</strong>:\n<ul>\n<li><strong>Data</strong>: 6 words(3 bytes) = 18 bytes</li>\n<li><strong>Instruction</strong>: 8 * 3 = 24 bytes</li>\n<li><strong>Total</strong>: 42 bytes</li>\n</ul>\n</li>\n<li><strong># of memory access</strong>:\n<ul>\n<li><strong>Data Access</strong>: 8</li>\n<li><strong>Instruction Fetch</strong>: 8</li>\n<li><strong>Total</strong>: 16</li>\n</ul>\n</li>\n</ul>\n<h3 id=\"sicxe-2\"><a class=\"anchor\" href=\"#sicxe-2\">#</a> SIC/XE</h3>\n<ul>\n<li><font> <code>ADDR</code> </font> is used to <strong>avoid having to fetch</strong>  <code>INCR</code>  from memory each time it is used in a calculation, which may make the program more efficient.</li>\n</ul>\n<pre><code class=\"language-=\">\tLDS\t INCR\n\tLDA\t ALPHA\n\tADDR\t S,A\n\tSUB\t #1\n\tSTA \t BETA\n\tLDA\t GAMMA\n\tADDR\t S,A\n\tSUB\t #1\n\tSTA\t DELTA\n\t .\n\t .\n\t .\n\t .\nALPHA\tRESW\t1\nBETA\tRESW\t1\nGAMMA\tRESW\t1\nDELTA\tRESW\t1\nINCR\tRESW\t1 \n</code></pre>\n<div class=\"note success\">\n<p><strong>Q:</strong>  <code>LDS</code>  和  <code>LDA</code>  load 兩個變數存進 register 有沒有好處？</p>\n<p><strong>A:</strong> 是有的，因為  <code>INCR</code>  在整個程式中使用超過一次，所以先 load 到 register 裡面可以減少 memory access 的次數</p>\n</div>\n<ul>\n<li><strong>Memory usage</strong>:\n<ul>\n<li><strong>Data</strong>: 5 words = 15 bytes</li>\n<li><strong>Instruction</strong>: 2 byte( <code>ADDR</code> ) * 2 + 3 * 7 = 25 bytes</li>\n<li><strong>Total</strong>: 40 bytes</li>\n</ul>\n</li>\n<li><strong># of memory access</strong>:\n<ul>\n<li><strong>Data Access</strong>: 5</li>\n<li><strong>Instruction Fetch</strong>: 9</li>\n<li><strong>Total</strong>: 14</li>\n</ul>\n</li>\n</ul>\n<h3 id=\"high-level-language-2\"><a class=\"anchor\" href=\"#high-level-language-2\">#</a> High Level Language</h3>\n<figure class=\"highlight c\"><figcaption data-lang=\"c\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre><span class=\"token keyword\">int</span> BETA <span class=\"token operator\">=</span> ALPHA <span class=\"token operator\">+</span> INCR <span class=\"token operator\">-</span> <span class=\"token number\">1</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"2\"></td><td><pre><span class=\"token keyword\">int</span> DELTA <span class=\"token operator\">=</span> GAMMA <span class=\"token operator\">+</span> INCR <span class=\"token operator\">-</span> <span class=\"token number\">1</span><span class=\"token punctuation\">;</span></pre></td></tr></table></figure><h2 id=\"14-simple-looping-and-indexing-operations\"><a class=\"anchor\" href=\"#14-simple-looping-and-indexing-operations\">#</a> 1.4 Simple Looping and Indexing Operations</h2>\n<h3 id=\"sic-3\"><a class=\"anchor\" href=\"#sic-3\">#</a> SIC</h3>\n<pre><code class=\"language-=\">\tLDX\tZERO\nMOVECH\tLDCH\tSTR1,X\n\tSTCH\tSTR2,X\n\tTIX\tELEVEN\n\tJLT\tMOVECH\n\t .\n\t .\n\t .\nSTR1\tBYTE\tC'TEST STRING'\nSTR2 \tRESB\t11\n.\nZERO\tWORD\t0\nELEVEN\tWORD\t11\n</code></pre>\n<ul>\n<li><strong>Memory usage</strong>:\n<ul>\n<li><strong>Data</strong>: 2 words + 11 * 2 bytes = 6 + 22 bytes = 28 bytes</li>\n<li><strong>Instruction</strong>: 3 * 5 = 15 bytes</li>\n<li><strong>Total</strong>: 43 bytes</li>\n</ul>\n</li>\n<li><strong># of memory access</strong>:\n<ul>\n<li><strong>Data Access</strong>: 1 + 3 * 11 = 34</li>\n<li><strong>Instruction Fetch</strong>: 1 + 4 * 11 = 45</li>\n<li><strong>Total</strong>: 79</li>\n</ul>\n</li>\n</ul>\n<h3 id=\"sicxe-3\"><a class=\"anchor\" href=\"#sicxe-3\">#</a> SIC/XE</h3>\n<ul>\n<li><code>TIXR</code>  makes the loop <strong>more efficient</strong></li>\n<li>Because the value does not have to be fetched from memory each time the loop is executed.</li>\n</ul>\n<pre><code class=\"language-=\">\tLDT\t#11\n\tLDX\t#0\nMOVECH\tLDCH\tSTR1,X\n\tSTCH\tSTR2,X\n\tTIXR\tT\n\tJLT\tMOVECH\n\t .\n\t .\n\t .\nSTR1\tBYTE\tC'TEST STRING'\nSTR2 \tRESB\t11\n</code></pre>\n<ul>\n<li><strong>Memory usage</strong>:\n<ul>\n<li><strong>Data</strong>: 11 * 2 bytes = 22 bytes</li>\n<li><strong>Instruction</strong>: <mark>2 ( <code>TIXR</code> )</mark> + 5 * 3 bytes= 17 bytes</li>\n<li><strong>Total</strong>: 39 bytes</li>\n</ul>\n</li>\n<li><strong># of memory access</strong>:\n<ul>\n<li><strong>Data Access</strong>: 2 * 11 = 2 + 22 = 24</li>\n<li><strong>Instruction Fetch</strong>: 4 * 11 = 44</li>\n<li><strong>Total</strong>: 68</li>\n</ul>\n</li>\n</ul>\n<h3 id=\"high-level-language-3\"><a class=\"anchor\" href=\"#high-level-language-3\">#</a> High Level Language</h3>\n<figure class=\"highlight c\"><figcaption data-lang=\"c\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre><span class=\"token keyword\">char</span> STR1 <span class=\"token operator\">=</span> <span class=\"token string\">\"TEST STRING\"</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"2\"></td><td><pre><span class=\"token keyword\">char</span> STR2<span class=\"token punctuation\">[</span><span class=\"token number\">11</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"3\"></td><td><pre><span class=\"token keyword\">int</span> X <span class=\"token operator\">=</span> <span class=\"token number\">0</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"4\"></td><td><pre></pre></td></tr><tr><td data-num=\"5\"></td><td><pre><span class=\"token keyword\">do</span><span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"6\"></td><td><pre>    STR2<span class=\"token punctuation\">[</span>X<span class=\"token punctuation\">]</span> <span class=\"token operator\">=</span> STR1<span class=\"token punctuation\">[</span>X<span class=\"token punctuation\">]</span><span class=\"token punctuation\">;</span> </pre></td></tr><tr><td data-num=\"7\"></td><td><pre>    X<span class=\"token operator\">++</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"8\"></td><td><pre><span class=\"token punctuation\">&#125;</span><span class=\"token keyword\">while</span><span class=\"token punctuation\">(</span>X <span class=\"token operator\">&lt;</span> <span class=\"token number\">11</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr></table></figure><h2 id=\"15-sample-indexing-and-looping-operations\"><a class=\"anchor\" href=\"#15-sample-indexing-and-looping-operations\">#</a> 1.5 Sample Indexing and Looping Operations</h2>\n<ul>\n<li>The value in the index register must be <strong>incremented by 3</strong> for each iteration of this loop\n<ul>\n<li>Because each iteration <strong>processes a 3-byte element</strong> of the arrays</li>\n</ul>\n</li>\n</ul>\n<h3 id=\"sic-4\"><a class=\"anchor\" href=\"#sic-4\">#</a> SIC</h3>\n<ul>\n<li>\n<p>The  <code>TIX</code>  instruction always <strong>adds 1 to register X</strong>, so it is <font>not suitable</font> for this program fragment.</p>\n</li>\n<li>\n<p>因為一個 word 占用 3bytes，所以 X 每次要跳三個位置 (X 每次加 3)，才能正確的讀取每一個 word</p>\n</li>\n</ul>\n<pre><code class=\"language-=\">\tLDA\tZERO\n\tSTA\tINDEX\nADDLP\tLDX\tINDEX\n\tLDA\tALPHA,X\n\tADD\tBETA,X\n\tSTA\tGAMMA,X\n\tLDA\tINDEX\n\tADD\tTHREE\n\tSTA\tINDEX\n\tCOMP\tK300\n\tJLT\tADDLP\n\t .\n\t .\n\t .\nINDEX\tRESW\t1\n\t .\nALPHA\tRESW\t100\nBETA\tRESW\t100\nGAMMA\tRESW\t100\n\t .\nZERO\tWORD\t0\nK300\tWORD\t300\nTHREE\tWORD\t3\n</code></pre>\n<div class=\"note danger\">\n<p><strong>Q:</strong> 為什麼程式碼 7 ~ 10 不用  <code>TIX</code>  ?</p>\n<p><strong>A:</strong> 因為這裡的變數宣告是 word，而不是 byte，要找到下一個資料位置，要加 3 bytes (one word)，而  <code>TIX</code>  裡面的內容是，加 1 並比較。</p>\n</div>\n<ul>\n<li><strong>Memory usage</strong>:\n<ul>\n<li><strong>Data</strong>: 1 + 100*3 + 3 words = 304 words = 912 bytes</li>\n<li><strong>Instruction</strong>: 11 * 3 = 33 bytes</li>\n<li><strong>Total</strong>: 945 bytes</li>\n</ul>\n</li>\n<li><strong># of memory access</strong>:\n<ul>\n<li><strong>Data Access</strong>: 2 + 8 * 100 = 802</li>\n<li><strong>Instruction Fetch</strong>: 2 + 9 * 100 = 902</li>\n<li><strong>Total</strong>: 1704</li>\n</ul>\n</li>\n</ul>\n<h3 id=\"sicxe-4\"><a class=\"anchor\" href=\"#sicxe-4\">#</a> SIC/XE</h3>\n<pre><code class=\"language-=\">\tLDS\t#3\n\tLDT\t#300\n\tLDX\t#0\nADDLP\tLDA\tALPHA,X\n\tADD\tBETA,X\n\tSTA\tGAMMA,X\n\tADDR\tS,X\n\tCOMPR \tX,T\n\tJLT\tADDLP\n\t .\n\t .\n\t .\n\t .\nALPHA\tRESW\t100\nBETA\tRESW\t100\nGAMMA\tRESW\t100\n</code></pre>\n<ul>\n<li><strong>Memory usage</strong>:\n<ul>\n<li><strong>Data</strong>: 3 * 100 words = 300 words = 900 bytes</li>\n<li><strong>Instruction</strong>: <mark>2( <code>ADDR</code> )</mark> + <mark>2( <code>COMPR</code> )</mark> + 7 * 3 = 25</li>\n<li><strong>Total</strong>: 925 bytes</li>\n</ul>\n</li>\n<li><strong># of memory access</strong>:\n<ul>\n<li><strong>Data Access</strong>: 3 * 100 = 300</li>\n<li><strong>Instruction Fetch</strong>: 3 + 6 * 100 = 603</li>\n<li><strong>Total</strong>: 903</li>\n</ul>\n</li>\n</ul>\n<h3 id=\"high-level-language-4\"><a class=\"anchor\" href=\"#high-level-language-4\">#</a> High Level Language</h3>\n<figure class=\"highlight c\"><figcaption data-lang=\"c\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre><span class=\"token keyword\">int</span> ALPHA<span class=\"token punctuation\">[</span><span class=\"token number\">100</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"2\"></td><td><pre><span class=\"token keyword\">int</span> BETA<span class=\"token punctuation\">[</span><span class=\"token number\">100</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"3\"></td><td><pre><span class=\"token keyword\">int</span> GAMMA<span class=\"token punctuation\">[</span><span class=\"token number\">100</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"4\"></td><td><pre></pre></td></tr><tr><td data-num=\"5\"></td><td><pre><span class=\"token keyword\">for</span> <span class=\"token punctuation\">(</span>X <span class=\"token operator\">=</span> <span class=\"token number\">0</span><span class=\"token punctuation\">;</span> X <span class=\"token operator\">&lt;</span> <span class=\"token number\">100</span><span class=\"token punctuation\">;</span> X<span class=\"token operator\">++</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"6\"></td><td><pre>    GAMMA<span class=\"token punctuation\">[</span>X<span class=\"token punctuation\">]</span> <span class=\"token operator\">=</span> ALPHA<span class=\"token punctuation\">[</span>X<span class=\"token punctuation\">]</span> <span class=\"token operator\">+</span> BETA<span class=\"token punctuation\">[</span>X<span class=\"token punctuation\">]</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"7\"></td><td><pre><span class=\"token punctuation\">&#125;</span></pre></td></tr></table></figure><h2 id=\"16-simple-io-operations\"><a class=\"anchor\" href=\"#16-simple-io-operations\">#</a> 1.6 Simple I/O Operations</h2>\n<h3 id=\"sic-5\"><a class=\"anchor\" href=\"#sic-5\">#</a> SIC</h3>\n<pre><code class=\"language-=\">INLOOP\t TD \tINDEV\n\t JEQ\tINLOOP\n\t RD\tINDEV\n\t STCH\tDATA\n\t  .\n\t  .\n\t  .\nOUTLP\t TD\tOUTDEV\n\t JEQ\tOUTLP\n\t LDCH\tDATA\n\t WD\tOUTDEV\n\t  .\n\t  .\n\t  .\nINDEV\t BYTE\tX'F1'\t// X 代表使用16進位, 'F1' 是給此裝置的編號\nOUTDEV\t BYTE\tX'05'\nDATA\t RESB\t1\n</code></pre>\n<ul>\n<li><strong>Memory usage</strong>:\n<ul>\n<li><strong>Data</strong>: 3 bytes</li>\n<li><strong>Instruction</strong>: (4 + 4) * 3 = 24 bytes</li>\n<li><strong>Total</strong>: 27 bytes</li>\n</ul>\n</li>\n</ul>\n<br>\n<blockquote>\n<p>國展表示這邊 access 不用算 //TD RD WD</p>\n</blockquote>\n<ul>\n<li><strong># of memory access</strong>:\n<ul>\n<li><strong>Data Access</strong>: 2</li>\n<li><strong>Instruction Fetch</strong>: 2n + 2m + 4 (n, m: 測試 device 的次數)</li>\n<li><strong>Total</strong>: 2n + 2m + 6</li>\n</ul>\n</li>\n</ul>\n<h3 id=\"high-level-language-5\"><a class=\"anchor\" href=\"#high-level-language-5\">#</a> High Level Language</h3>\n<figure class=\"highlight cpp\"><figcaption data-lang=\"C++\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre>Device INDEV <span class=\"token operator\">=</span> <span class=\"token function\">Device</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"F1\"</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"2\"></td><td><pre>Device OUTDEV <span class=\"token operator\">=</span> <span class=\"token function\">Device</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"05\"</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"3\"></td><td><pre></pre></td></tr><tr><td data-num=\"4\"></td><td><pre><span class=\"token keyword\">char</span> DATA<span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"5\"></td><td><pre></pre></td></tr><tr><td data-num=\"6\"></td><td><pre><span class=\"token comment\">// 不能使用就繼續測試</span></pre></td></tr><tr><td data-num=\"7\"></td><td><pre><span class=\"token keyword\">while</span> <span class=\"token punctuation\">(</span><span class=\"token operator\">!</span> INDEV<span class=\"token punctuation\">.</span><span class=\"token function\">isReady</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"8\"></td><td><pre><span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"9\"></td><td><pre>DATA <span class=\"token operator\">=</span> INDEV<span class=\"token punctuation\">.</span><span class=\"token function\">read</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"10\"></td><td><pre></pre></td></tr><tr><td data-num=\"11\"></td><td><pre>    <span class=\"token punctuation\">.</span></pre></td></tr><tr><td data-num=\"12\"></td><td><pre>    <span class=\"token punctuation\">.</span></pre></td></tr><tr><td data-num=\"13\"></td><td><pre>    <span class=\"token punctuation\">.</span></pre></td></tr><tr><td data-num=\"14\"></td><td><pre></pre></td></tr><tr><td data-num=\"15\"></td><td><pre><span class=\"token keyword\">while</span> <span class=\"token punctuation\">(</span><span class=\"token operator\">!</span> OUTDEV<span class=\"token punctuation\">.</span><span class=\"token function\">isReady</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"16\"></td><td><pre><span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"17\"></td><td><pre>OUTDEV<span class=\"token punctuation\">.</span><span class=\"token function\">write</span><span class=\"token punctuation\">(</span>DATA<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr></table></figure><h2 id=\"17-sample-subroutine-call-and-record-input-operations\"><a class=\"anchor\" href=\"#17-sample-subroutine-call-and-record-input-operations\">#</a> 1.7 Sample Subroutine Call and Record Input Operations</h2>\n<h3 id=\"sic-6\"><a class=\"anchor\" href=\"#sic-6\">#</a> SIC</h3>\n<pre><code class=\"language-=\">\tJSUB\tREAD\n\t .\n\t .\n\t .\nREAD\tLDX\tZERO\nRLOOP\tTD\tINDEV\n\tJEQ\tRLOOP\n\tRD\tINDEV\n\tSTCH\tRECORD,X\n\tTIX\tK100\n\tJLT\tRLOOP\n\tRSUB\n\t .\n\t .\t\n\t .\nINDEV\tBYTE\tX'F1'\nRECORD\tRESB\t100\n\t .\t\nZERO\tWORD\t0\nK100\tWORD\t100\n</code></pre>\n<ul>\n<li><strong>Memory usage</strong>:\n<ul>\n<li><strong>Data</strong>: (1 + 100) bytes + 2 words = 107 bytes</li>\n<li><strong>Instruction</strong>: 9 * 3 = 27 bytes</li>\n<li><strong>Total</strong>: 134 bytes</li>\n</ul>\n</li>\n</ul>\n<blockquote>\n<p>國展表示這邊 access 不用算 //TD RD WD</p>\n</blockquote>\n<ul>\n<li><strong># of memory access</strong>:\n<ul>\n<li><strong>Data Access</strong>: 1 + 2 * 100 = 201</li>\n<li><strong>Instruction Fetch</strong>: 1 + 1 + 2n + 5 * 100 + 1 (n: 測試 device 的次數)</li>\n<li><strong>Total</strong>: 2n + 704</li>\n</ul>\n</li>\n</ul>\n<h3 id=\"sicxe-5\"><a class=\"anchor\" href=\"#sicxe-5\">#</a> SIC/XE</h3>\n<pre><code class=\"language-=\">\tJSUB\tREAD\n\t .\n\t .\n\t .\nREAD\tLDX\t#0\n\tLDT\t#100\nRLOOP\tTD\t INDEV\n\tJEQ\t RLOOP\n\tRD\t INDEV\n\tSTCH\t RECORD,X\n\tTIXR\t T\n\tJLT\t RLOOP\n\tRSUB\n\t .\n\t .\n\t .\nINDEV\tBYTE\tX'F1'\nRECORD\tRESB\t100\n</code></pre>\n<ul>\n<li><strong>Memory usage</strong>:\n<ul>\n<li><strong>Data</strong>: (1 + 100) bytes = 101 bytes</li>\n<li><strong>Instruction</strong>: <mark>2( <code>TIXR</code> )</mark> + 3 * 9 = 29 bytes</li>\n<li><strong>Total</strong>: 130 bytes</li>\n</ul>\n</li>\n</ul>\n<blockquote>\n<p>國展表示這邊 access 不用算 //TD RD WD</p>\n</blockquote>\n<ul>\n<li><strong>Memory Access</strong></li>\n</ul>\n<h3 id=\"high-level-language-6\"><a class=\"anchor\" href=\"#high-level-language-6\">#</a> High Level Language</h3>\n<figure class=\"highlight cpp\"><figcaption data-lang=\"C++\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre>Device INDEV <span class=\"token operator\">=</span> <span class=\"token function\">Device</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"F1\"</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"2\"></td><td><pre><span class=\"token keyword\">char</span> RECORD<span class=\"token punctuation\">[</span><span class=\"token number\">100</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"3\"></td><td><pre></pre></td></tr><tr><td data-num=\"4\"></td><td><pre><span class=\"token function\">READ</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"5\"></td><td><pre></pre></td></tr><tr><td data-num=\"6\"></td><td><pre><span class=\"token keyword\">void</span> <span class=\"token function\">READ</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"7\"></td><td><pre>    <span class=\"token keyword\">for</span><span class=\"token punctuation\">(</span>X <span class=\"token operator\">=</span> <span class=\"token number\">0</span><span class=\"token punctuation\">;</span> X <span class=\"token operator\">&lt;</span> <span class=\"token number\">100</span><span class=\"token punctuation\">;</span> X<span class=\"token operator\">++</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"8\"></td><td><pre>        <span class=\"token keyword\">while</span> <span class=\"token punctuation\">(</span><span class=\"token operator\">!</span> INDEV<span class=\"token punctuation\">.</span><span class=\"token function\">isReady</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"9\"></td><td><pre>        <span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"10\"></td><td><pre>        RECORD<span class=\"token punctuation\">[</span>X<span class=\"token punctuation\">]</span> <span class=\"token operator\">=</span> INDEV<span class=\"token punctuation\">.</span><span class=\"token function\">read</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"11\"></td><td><pre>    <span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"12\"></td><td><pre><span class=\"token punctuation\">&#125;</span></pre></td></tr></table></figure>",
            "tags": [
                "System Software",
                "Ch01",
                "System Software"
            ]
        }
    ]
}