<?xml version="1.0" encoding="utf-8"?>
<search> 
  
  
    
    <entry>
      <title>1491. Average Salary Excluding the Minimum and Maximum Salary</title>
      <link href="/2023/05/01/Coding/leetcode/Easy/1491%20Average%20Salary%20Excluding%20the%20Minimum%20and%20Maximum%20Salary/"/>
      <url>/2023/05/01/Coding/leetcode/Easy/1491%20Average%20Salary%20Excluding%20the%20Minimum%20and%20Maximum%20Salary/</url>
      
        <content type="html"><![CDATA[<p>⭐️</p><h2 id="題目敘述"><a class="anchor" href="#題目敘述">#</a> <span class="exturl" data-url="aHR0cHM6Ly9sZWV0Y29kZS5jb20vcHJvYmxlbXMvYXZlcmFnZS1zYWxhcnktZXhjbHVkaW5nLXRoZS1taW5pbXVtLWFuZC1tYXhpbXVtLXNhbGFyeS8=">題目敘述</span></h2><p>You are given an array of <strong>unique</strong> integers  <code>salary</code>  where  <code>salary[i]</code>  is the salary of the  <code>ith</code>  employee.</p><p>Return <em>the average salary of employees excluding the minimum and maximum salary</em>. Answers within  <code>10-5</code>  of the actual answer will be accepted.</p><h3 id="example-1"><a class="anchor" href="#example-1">#</a> Example 1</h3><blockquote><p><strong>Input:</strong> salary = [4000,3000,1000,2000]<br><strong>Output:</strong> 2500.00000<br><strong>Explanation:</strong> Minimum salary and maximum salary are 1000 and 4000 respectively.<br>Average salary excluding minimum and maximum salary is (2000+3000) / 2 = 2500</p></blockquote><h3 id="example-2"><a class="anchor" href="#example-2">#</a> Example 2</h3><blockquote><p><strong>Input:</strong> salary = [1000,2000,3000]<br><strong>Output:</strong> 2000.00000<br><strong>Explanation:</strong> Minimum salary and maximum salary are 1000 and 3000 respectively.<br>Average salary excluding minimum and maximum salary is (2000) / 1 = 2000</p></blockquote><h2 id="solution"><a class="anchor" href="#solution">#</a> Solution</h2><div class="tab" data-id="code" data-title="C++"><figure class="highlight cpp"><figcaption data-lang="C++"></figcaption><table><tr><td data-num="1"></td><td><pre><span class="token keyword">class</span> <span class="token class-name">Solution</span> <span class="token punctuation">&#123;</span></pre></td></tr><tr><td data-num="2"></td><td><pre><span class="token keyword">public</span><span class="token operator">:</span></pre></td></tr><tr><td data-num="3"></td><td><pre>    <span class="token keyword">double</span> <span class="token function">average</span><span class="token punctuation">(</span>vector<span class="token operator">&lt;</span><span class="token keyword">int</span><span class="token operator">></span><span class="token operator">&amp;</span> salary<span class="token punctuation">)</span> <span class="token punctuation">&#123;</span></pre></td></tr><tr><td data-num="4"></td><td><pre>        <span class="token keyword">int</span> mn <span class="token operator">=</span> salary<span class="token punctuation">[</span><span class="token number">0</span><span class="token punctuation">]</span><span class="token punctuation">,</span> mx <span class="token operator">=</span> salary<span class="token punctuation">[</span><span class="token number">0</span><span class="token punctuation">]</span><span class="token punctuation">;</span></pre></td></tr><tr><td data-num="5"></td><td><pre>        <span class="token keyword">double</span> res <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span></pre></td></tr><tr><td data-num="6"></td><td><pre>        <span class="token keyword">for</span> <span class="token punctuation">(</span><span class="token keyword">int</span> s <span class="token operator">:</span> salary<span class="token punctuation">)</span> <span class="token punctuation">&#123;</span></pre></td></tr><tr><td data-num="7"></td><td><pre>            res <span class="token operator">+=</span> s<span class="token punctuation">;</span></pre></td></tr><tr><td data-num="8"></td><td><pre>            mn <span class="token operator">=</span> <span class="token function">min</span><span class="token punctuation">(</span>mn<span class="token punctuation">,</span> s<span class="token punctuation">)</span><span class="token punctuation">;</span></pre></td></tr><tr><td data-num="9"></td><td><pre>            mx <span class="token operator">=</span> <span class="token function">max</span><span class="token punctuation">(</span>mx<span class="token punctuation">,</span> s<span class="token punctuation">)</span><span class="token punctuation">;</span></pre></td></tr><tr><td data-num="10"></td><td><pre>        <span class="token punctuation">&#125;</span></pre></td></tr><tr><td data-num="11"></td><td><pre>        res <span class="token operator">-=</span> <span class="token punctuation">(</span>mn <span class="token operator">+</span> mx<span class="token punctuation">)</span><span class="token punctuation">;</span></pre></td></tr><tr><td data-num="12"></td><td><pre>        <span class="token keyword">return</span> res <span class="token operator">/</span> <span class="token punctuation">(</span>salary<span class="token punctuation">.</span><span class="token function">size</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token operator">-</span><span class="token number">2</span><span class="token punctuation">)</span><span class="token punctuation">;</span></pre></td></tr><tr><td data-num="13"></td><td><pre>    <span class="token punctuation">&#125;</span></pre></td></tr><tr><td data-num="14"></td><td><pre><span class="token punctuation">&#125;</span><span class="token punctuation">;</span></pre></td></tr></table></figure></div><div class="tab" data-id="code" data-title="Java"><figure class="highlight java"><figcaption data-lang="java"></figcaption><table><tr><td data-num="1"></td><td><pre><span class="token keyword">import</span> <span class="token import"><span class="token namespace">java<span class="token punctuation">.</span>util<span class="token punctuation">.</span></span><span class="token class-name">Arrays</span></span><span class="token punctuation">;</span></pre></td></tr><tr><td data-num="2"></td><td><pre></pre></td></tr><tr><td data-num="3"></td><td><pre><span class="token keyword">class</span> <span class="token class-name">Solution</span> <span class="token punctuation">&#123;</span></pre></td></tr><tr><td data-num="4"></td><td><pre>    <span class="token keyword">public</span> <span class="token keyword">double</span> <span class="token function">average</span><span class="token punctuation">(</span><span class="token keyword">int</span><span class="token punctuation">[</span><span class="token punctuation">]</span> salary<span class="token punctuation">)</span> <span class="token punctuation">&#123;</span></pre></td></tr><tr><td data-num="5"></td><td><pre>        <span class="token class-name">Arrays</span><span class="token punctuation">.</span><span class="token function">sort</span><span class="token punctuation">(</span>salary<span class="token punctuation">)</span><span class="token punctuation">;</span></pre></td></tr><tr><td data-num="6"></td><td><pre>        <span class="token keyword">long</span> sum <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span></pre></td></tr><tr><td data-num="7"></td><td><pre>        <span class="token keyword">for</span><span class="token punctuation">(</span><span class="token keyword">int</span> i <span class="token operator">=</span> <span class="token number">1</span><span class="token punctuation">;</span> i <span class="token operator">&lt;</span> salary<span class="token punctuation">.</span>length <span class="token operator">-</span> <span class="token number">1</span><span class="token punctuation">;</span> i<span class="token operator">++</span><span class="token punctuation">)</span><span class="token punctuation">&#123;</span></pre></td></tr><tr><td data-num="8"></td><td><pre>            sum <span class="token operator">+=</span> salary<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">;</span></pre></td></tr><tr><td data-num="9"></td><td><pre>        <span class="token punctuation">&#125;</span></pre></td></tr><tr><td data-num="10"></td><td><pre>        </pre></td></tr><tr><td data-num="11"></td><td><pre>        <span class="token keyword">return</span> sum <span class="token operator">/</span> <span class="token punctuation">(</span>salary<span class="token punctuation">.</span>length <span class="token operator">-</span> <span class="token number">2</span> <span class="token operator">*</span> <span class="token number">1.0</span><span class="token punctuation">)</span><span class="token punctuation">;</span></pre></td></tr><tr><td data-num="12"></td><td><pre>    <span class="token punctuation">&#125;</span></pre></td></tr><tr><td data-num="13"></td><td><pre><span class="token punctuation">&#125;</span></pre></td></tr></table></figure></div><div class="tab" data-id="code" data-title="Python"><figure class="highlight python"><figcaption data-lang="python"></figcaption><table><tr><td data-num="1"></td><td><pre><span class="token keyword">class</span> <span class="token class-name">Solution</span><span class="token punctuation">:</span></pre></td></tr><tr><td data-num="2"></td><td><pre>    <span class="token keyword">def</span> <span class="token function">average</span><span class="token punctuation">(</span>self<span class="token punctuation">,</span> salary<span class="token punctuation">:</span> List<span class="token punctuation">[</span><span class="token builtin">int</span><span class="token punctuation">]</span><span class="token punctuation">)</span> <span class="token operator">-</span><span class="token operator">></span> <span class="token builtin">float</span><span class="token punctuation">:</span></pre></td></tr><tr><td data-num="3"></td><td><pre>        min_salary <span class="token operator">=</span> <span class="token builtin">min</span><span class="token punctuation">(</span>salary<span class="token punctuation">)</span></pre></td></tr><tr><td data-num="4"></td><td><pre>        max_salary <span class="token operator">=</span> <span class="token builtin">max</span><span class="token punctuation">(</span>salary<span class="token punctuation">)</span></pre></td></tr><tr><td data-num="5"></td><td><pre>        total_salary <span class="token operator">=</span> <span class="token builtin">sum</span><span class="token punctuation">(</span>salary<span class="token punctuation">)</span> <span class="token operator">-</span> min_salary <span class="token operator">-</span> max_salary</pre></td></tr><tr><td data-num="6"></td><td><pre>        num_employees <span class="token operator">=</span> <span class="token builtin">len</span><span class="token punctuation">(</span>salary<span class="token punctuation">)</span> <span class="token operator">-</span> <span class="token number">2</span></pre></td></tr><tr><td data-num="7"></td><td><pre>        <span class="token keyword">return</span> total_salary <span class="token operator">/</span> num_employees</pre></td></tr></table></figure></div>]]></content>
      
      
      <categories>
          
          <category> Coding </category>
          
          <category> Leetcode </category>
          
          <category> Easy </category>
          
      </categories>
      
      
        <tags>
            
            <tag> Leetcode </tag>
            
            <tag> Easy </tag>
            
            <tag> Array </tag>
            
            <tag> Sorting </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>1579. Remove Max Number of Edges to Keep Graph Fully Traversable</title>
      <link href="/2023/04/30/Coding/leetcode/Hard/1579%20Remove%20Max%20Number%20of%20Edges%20to%20Keep%20Graph%20Fully%20Traversable/"/>
      <url>/2023/04/30/Coding/leetcode/Hard/1579%20Remove%20Max%20Number%20of%20Edges%20to%20Keep%20Graph%20Fully%20Traversable/</url>
      
        <content type="html"><![CDATA[<p>⭐️⭐️⭐️</p><h2 id="題目敘述"><a class="anchor" href="#題目敘述">#</a> <span class="exturl" data-url="aHR0cHM6Ly9sZWV0Y29kZS5jb20vcHJvYmxlbXMvcmVtb3ZlLW1heC1udW1iZXItb2YtZWRnZXMtdG8ta2VlcC1ncmFwaC1mdWxseS10cmF2ZXJzYWJsZS8=">題目敘述</span></h2><p>Alice and Bob have an undirected graph of  <code>n</code>  nodes and three types of edges:</p><ul><li>Type 1: Can be traversed by Alice only.</li><li>Type 2: Can be traversed by Bob only.</li><li>Type 3: Can be traversed by both Alice and Bob.</li></ul><p>Given an array  <code>edges</code>  where  <code>edges[i] = [typei, ui, vi]</code>  represents a bidirectional edge of type  <code>typei</code>  between nodes  <code>ui</code>  and  <code>vi</code> , find the maximum number of edges you can remove so that after removing the edges, the graph can still be fully traversed by both Alice and Bob. The graph is fully traversed by Alice and Bob if starting from any node, they can reach all other nodes.</p><p>Return <em>the maximum number of edges you can remove, or return  <code>-1</code>  if Alice and Bob cannot fully traverse the graph</em>.</p><h3 id="example-1"><a class="anchor" href="#example-1">#</a> Example 1</h3><p><img data-src="https://i.imgur.com/2SsBc9T.png" alt=""></p><blockquote><p><strong>Input</strong>: n = 4, edges = [[3,1,2],[3,2,3],[1,1,3],[1,2,4],[1,1,2],[2,3,4]]<br><strong>Output</strong>: 2<br><strong>Explanation</strong>: If we remove the 2 edges [1,1,2] and [1,1,3]. The graph will still be fully traversable by Alice and Bob. Removing any additional edge will not make it so. So the maximum number of edges we can remove is 2.</p></blockquote><h3 id="example-2"><a class="anchor" href="#example-2">#</a> Example 2</h3><p><img data-src="https://i.imgur.com/sNylQd6.png" alt=""></p><blockquote><p><strong>Input</strong>: n = 4, edges = [[3,1,2],[3,2,3],[1,1,4],[2,1,4]]<br><strong>Output</strong>: 0<br><strong>Explanation</strong>: Notice that removing any edge will not make the graph fully traversable by Alice and Bob.</p></blockquote><h3 id="example-3"><a class="anchor" href="#example-3">#</a> Example 3</h3><p><img data-src="https://i.imgur.com/jYOpe7F.png" alt=""></p><blockquote><p><strong>Input</strong>: n = 4, edges = [[3,2,3],[1,1,2],[2,3,4]]<br><strong>Output</strong>: -1<br><strong>Explanation</strong>: In the current graph, Alice cannot reach node 4 from the other nodes. Likewise, Bob cannot reach 1. Therefore it’s impossible to make the graph fully traversable.</p></blockquote><h2 id="solution"><a class="anchor" href="#solution">#</a> Solution</h2><div class="tab" data-id="code" data-title="C++"><figure class="highlight cpp"><figcaption data-lang="C++"></figcaption><table><tr><td data-num="1"></td><td><pre><span class="token keyword">class</span> <span class="token class-name">UnionFind</span> <span class="token punctuation">&#123;</span></pre></td></tr><tr><td data-num="2"></td><td><pre><span class="token keyword">public</span><span class="token operator">:</span></pre></td></tr><tr><td data-num="3"></td><td><pre>    vector<span class="token operator">&lt;</span><span class="token keyword">int</span><span class="token operator">></span> parent<span class="token punctuation">,</span> rank<span class="token punctuation">;</span></pre></td></tr><tr><td data-num="4"></td><td><pre>    <span class="token keyword">int</span> nodes<span class="token punctuation">;</span></pre></td></tr><tr><td data-num="5"></td><td><pre>    <span class="token function">UnionFind</span><span class="token punctuation">(</span><span class="token keyword">int</span> n<span class="token punctuation">)</span><span class="token operator">:</span> <span class="token function">parent</span><span class="token punctuation">(</span>n<span class="token operator">+</span><span class="token number">1</span><span class="token punctuation">)</span><span class="token punctuation">,</span> <span class="token function">rank</span><span class="token punctuation">(</span>n<span class="token operator">+</span><span class="token number">1</span><span class="token punctuation">)</span><span class="token punctuation">,</span> <span class="token function">nodes</span><span class="token punctuation">(</span><span class="token number">1</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span></pre></td></tr><tr><td data-num="6"></td><td><pre>        <span class="token keyword">for</span> <span class="token punctuation">(</span><span class="token keyword">int</span> i<span class="token operator">=</span><span class="token number">1</span><span class="token punctuation">;</span> i<span class="token operator">&lt;=</span>n<span class="token punctuation">;</span> i<span class="token operator">++</span><span class="token punctuation">)</span> parent<span class="token punctuation">[</span>i<span class="token punctuation">]</span> <span class="token operator">=</span> i<span class="token punctuation">;</span></pre></td></tr><tr><td data-num="7"></td><td><pre>    <span class="token punctuation">&#125;</span></pre></td></tr><tr><td data-num="8"></td><td><pre></pre></td></tr><tr><td data-num="9"></td><td><pre>    <span class="token keyword">int</span> <span class="token function">find</span> <span class="token punctuation">(</span><span class="token keyword">int</span> x<span class="token punctuation">)</span> <span class="token punctuation">&#123;</span></pre></td></tr><tr><td data-num="10"></td><td><pre>        <span class="token keyword">if</span> <span class="token punctuation">(</span>x <span class="token operator">==</span> parent<span class="token punctuation">[</span>x<span class="token punctuation">]</span><span class="token punctuation">)</span> <span class="token keyword">return</span> x<span class="token punctuation">;</span></pre></td></tr><tr><td data-num="11"></td><td><pre>        <span class="token keyword">return</span> parent<span class="token punctuation">[</span>x<span class="token punctuation">]</span> <span class="token operator">=</span> <span class="token function">find</span><span class="token punctuation">(</span>parent<span class="token punctuation">[</span>x<span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token punctuation">;</span></pre></td></tr><tr><td data-num="12"></td><td><pre>    <span class="token punctuation">&#125;</span></pre></td></tr><tr><td data-num="13"></td><td><pre></pre></td></tr><tr><td data-num="14"></td><td><pre>    <span class="token keyword">bool</span> <span class="token function">union_</span><span class="token punctuation">(</span><span class="token keyword">int</span> x<span class="token punctuation">,</span> <span class="token keyword">int</span> y<span class="token punctuation">)</span> <span class="token punctuation">&#123;</span></pre></td></tr><tr><td data-num="15"></td><td><pre>        <span class="token keyword">int</span> px <span class="token operator">=</span> <span class="token function">find</span><span class="token punctuation">(</span>x<span class="token punctuation">)</span><span class="token punctuation">;</span></pre></td></tr><tr><td data-num="16"></td><td><pre>        <span class="token keyword">int</span> py <span class="token operator">=</span> <span class="token function">find</span><span class="token punctuation">(</span>y<span class="token punctuation">)</span><span class="token punctuation">;</span></pre></td></tr><tr><td data-num="17"></td><td><pre>        <span class="token keyword">if</span> <span class="token punctuation">(</span>px <span class="token operator">==</span> py<span class="token punctuation">)</span> <span class="token keyword">return</span> <span class="token boolean">false</span><span class="token punctuation">;</span></pre></td></tr><tr><td data-num="18"></td><td><pre>        <span class="token keyword">if</span> <span class="token punctuation">(</span>rank<span class="token punctuation">[</span>px<span class="token punctuation">]</span> <span class="token operator">></span> rank<span class="token punctuation">[</span>py<span class="token punctuation">]</span><span class="token punctuation">)</span> parent<span class="token punctuation">[</span>py<span class="token punctuation">]</span> <span class="token operator">=</span> px<span class="token punctuation">;</span></pre></td></tr><tr><td data-num="19"></td><td><pre>        <span class="token keyword">else</span> <span class="token keyword">if</span> <span class="token punctuation">(</span>rank<span class="token punctuation">[</span>px<span class="token punctuation">]</span> <span class="token operator">&lt;</span> rank<span class="token punctuation">[</span>py<span class="token punctuation">]</span><span class="token punctuation">)</span> parent<span class="token punctuation">[</span>px<span class="token punctuation">]</span> <span class="token operator">=</span> py<span class="token punctuation">;</span></pre></td></tr><tr><td data-num="20"></td><td><pre>        <span class="token keyword">else</span> <span class="token punctuation">&#123;</span></pre></td></tr><tr><td data-num="21"></td><td><pre>            parent<span class="token punctuation">[</span>py<span class="token punctuation">]</span> <span class="token operator">=</span> px<span class="token punctuation">;</span></pre></td></tr><tr><td data-num="22"></td><td><pre>            rank<span class="token punctuation">[</span>px<span class="token punctuation">]</span><span class="token operator">++</span><span class="token punctuation">;</span></pre></td></tr><tr><td data-num="23"></td><td><pre>        <span class="token punctuation">&#125;</span></pre></td></tr><tr><td data-num="24"></td><td><pre>        <span class="token keyword">return</span> <span class="token boolean">true</span><span class="token punctuation">;</span></pre></td></tr><tr><td data-num="25"></td><td><pre>    <span class="token punctuation">&#125;</span></pre></td></tr><tr><td data-num="26"></td><td><pre><span class="token punctuation">&#125;</span><span class="token punctuation">;</span></pre></td></tr><tr><td data-num="27"></td><td><pre></pre></td></tr><tr><td data-num="28"></td><td><pre><span class="token keyword">class</span> <span class="token class-name">Solution</span> <span class="token punctuation">&#123;</span></pre></td></tr><tr><td data-num="29"></td><td><pre><span class="token keyword">public</span><span class="token operator">:</span></pre></td></tr><tr><td data-num="30"></td><td><pre>    <span class="token keyword">int</span> <span class="token function">maxNumEdgesToRemove</span><span class="token punctuation">(</span><span class="token keyword">int</span> n<span class="token punctuation">,</span> vector<span class="token operator">&lt;</span>vector<span class="token operator">&lt;</span><span class="token keyword">int</span><span class="token operator">>></span><span class="token operator">&amp;</span> edges<span class="token punctuation">)</span> <span class="token punctuation">&#123;</span></pre></td></tr><tr><td data-num="31"></td><td><pre>        UnionFind <span class="token function">Alice</span><span class="token punctuation">(</span>n<span class="token punctuation">)</span><span class="token punctuation">;</span></pre></td></tr><tr><td data-num="32"></td><td><pre>        UnionFind <span class="token function">Bob</span><span class="token punctuation">(</span>n<span class="token punctuation">)</span><span class="token punctuation">;</span></pre></td></tr><tr><td data-num="33"></td><td><pre></pre></td></tr><tr><td data-num="34"></td><td><pre>        <span class="token keyword">int</span> res <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span></pre></td></tr><tr><td data-num="35"></td><td><pre>        <span class="token keyword">for</span> <span class="token punctuation">(</span>vector<span class="token operator">&lt;</span><span class="token keyword">int</span><span class="token operator">></span><span class="token operator">&amp;</span> edge <span class="token operator">:</span> edges<span class="token punctuation">)</span> <span class="token punctuation">&#123;</span></pre></td></tr><tr><td data-num="36"></td><td><pre>            <span class="token keyword">if</span> <span class="token punctuation">(</span>edge<span class="token punctuation">[</span><span class="token number">0</span><span class="token punctuation">]</span> <span class="token operator">==</span> <span class="token number">3</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span></pre></td></tr><tr><td data-num="37"></td><td><pre>                <span class="token keyword">if</span> <span class="token punctuation">(</span>Alice<span class="token punctuation">.</span><span class="token function">union_</span><span class="token punctuation">(</span>edge<span class="token punctuation">[</span><span class="token number">1</span><span class="token punctuation">]</span><span class="token punctuation">,</span> edge<span class="token punctuation">[</span><span class="token number">2</span><span class="token punctuation">]</span><span class="token punctuation">)</span> <span class="token operator">&amp;&amp;</span> Bob<span class="token punctuation">.</span><span class="token function">union_</span><span class="token punctuation">(</span>edge<span class="token punctuation">[</span><span class="token number">1</span><span class="token punctuation">]</span><span class="token punctuation">,</span> edge<span class="token punctuation">[</span><span class="token number">2</span><span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span></pre></td></tr><tr><td data-num="38"></td><td><pre>                    Alice<span class="token punctuation">.</span>nodes <span class="token operator">+=</span> <span class="token number">1</span><span class="token punctuation">;</span></pre></td></tr><tr><td data-num="39"></td><td><pre>                    Bob<span class="token punctuation">.</span>nodes <span class="token operator">+=</span> <span class="token number">1</span><span class="token punctuation">;</span></pre></td></tr><tr><td data-num="40"></td><td><pre>                <span class="token punctuation">&#125;</span> <span class="token keyword">else</span> <span class="token punctuation">&#123;</span></pre></td></tr><tr><td data-num="41"></td><td><pre>                    res <span class="token operator">+=</span> <span class="token number">1</span><span class="token punctuation">;</span></pre></td></tr><tr><td data-num="42"></td><td><pre>                <span class="token punctuation">&#125;</span></pre></td></tr><tr><td data-num="43"></td><td><pre>            <span class="token punctuation">&#125;</span></pre></td></tr><tr><td data-num="44"></td><td><pre>        <span class="token punctuation">&#125;</span></pre></td></tr><tr><td data-num="45"></td><td><pre></pre></td></tr><tr><td data-num="46"></td><td><pre>        <span class="token keyword">for</span> <span class="token punctuation">(</span><span class="token keyword">auto</span><span class="token operator">&amp;</span> edge <span class="token operator">:</span> edges<span class="token punctuation">)</span> <span class="token punctuation">&#123;</span></pre></td></tr><tr><td data-num="47"></td><td><pre>            <span class="token keyword">if</span> <span class="token punctuation">(</span>edge<span class="token punctuation">[</span><span class="token number">0</span><span class="token punctuation">]</span> <span class="token operator">==</span> <span class="token number">1</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span></pre></td></tr><tr><td data-num="48"></td><td><pre>                <span class="token keyword">if</span> <span class="token punctuation">(</span>Alice<span class="token punctuation">.</span><span class="token function">union_</span><span class="token punctuation">(</span>edge<span class="token punctuation">[</span><span class="token number">1</span><span class="token punctuation">]</span><span class="token punctuation">,</span> edge<span class="token punctuation">[</span><span class="token number">2</span><span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token punctuation">)</span> Alice<span class="token punctuation">.</span>nodes <span class="token operator">+=</span> <span class="token number">1</span><span class="token punctuation">;</span></pre></td></tr><tr><td data-num="49"></td><td><pre>                <span class="token keyword">else</span> res <span class="token operator">+=</span> <span class="token number">1</span><span class="token punctuation">;</span></pre></td></tr><tr><td data-num="50"></td><td><pre>            <span class="token punctuation">&#125;</span></pre></td></tr><tr><td data-num="51"></td><td><pre></pre></td></tr><tr><td data-num="52"></td><td><pre>            <span class="token keyword">if</span> <span class="token punctuation">(</span>edge<span class="token punctuation">[</span><span class="token number">0</span><span class="token punctuation">]</span> <span class="token operator">==</span> <span class="token number">2</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span></pre></td></tr><tr><td data-num="53"></td><td><pre>                <span class="token keyword">if</span> <span class="token punctuation">(</span>Bob<span class="token punctuation">.</span><span class="token function">union_</span><span class="token punctuation">(</span>edge<span class="token punctuation">[</span><span class="token number">1</span><span class="token punctuation">]</span><span class="token punctuation">,</span> edge<span class="token punctuation">[</span><span class="token number">2</span><span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token punctuation">)</span> Bob<span class="token punctuation">.</span>nodes <span class="token operator">+=</span> <span class="token number">1</span><span class="token punctuation">;</span></pre></td></tr><tr><td data-num="54"></td><td><pre>                <span class="token keyword">else</span> res <span class="token operator">+=</span> <span class="token number">1</span><span class="token punctuation">;</span></pre></td></tr><tr><td data-num="55"></td><td><pre>            <span class="token punctuation">&#125;</span></pre></td></tr><tr><td data-num="56"></td><td><pre>        <span class="token punctuation">&#125;</span></pre></td></tr><tr><td data-num="57"></td><td><pre>        <span class="token keyword">return</span> <span class="token punctuation">(</span>Alice<span class="token punctuation">.</span>nodes <span class="token operator">==</span> Bob<span class="token punctuation">.</span>nodes <span class="token operator">&amp;&amp;</span> Alice<span class="token punctuation">.</span>nodes <span class="token operator">==</span> n<span class="token punctuation">)</span> <span class="token operator">?</span> res <span class="token operator">:</span> <span class="token operator">-</span><span class="token number">1</span><span class="token punctuation">;</span></pre></td></tr><tr><td data-num="58"></td><td><pre>    <span class="token punctuation">&#125;</span></pre></td></tr><tr><td data-num="59"></td><td><pre><span class="token punctuation">&#125;</span><span class="token punctuation">;</span></pre></td></tr></table></figure></div><div class="tab" data-id="code" data-title="Java"><figure class="highlight java"><figcaption data-lang="java"></figcaption><table><tr><td data-num="1"></td><td><pre><span class="token keyword">class</span> <span class="token class-name">Solution</span> <span class="token punctuation">&#123;</span></pre></td></tr><tr><td data-num="2"></td><td><pre>    <span class="token keyword">class</span> <span class="token class-name">UnionFind</span> <span class="token punctuation">&#123;</span></pre></td></tr><tr><td data-num="3"></td><td><pre>        <span class="token keyword">int</span><span class="token punctuation">[</span><span class="token punctuation">]</span> parent<span class="token punctuation">,</span> rank<span class="token punctuation">;</span></pre></td></tr><tr><td data-num="4"></td><td><pre>        <span class="token keyword">int</span> nodes<span class="token punctuation">;</span></pre></td></tr><tr><td data-num="5"></td><td><pre></pre></td></tr><tr><td data-num="6"></td><td><pre>        <span class="token keyword">public</span> <span class="token class-name">UnionFind</span><span class="token punctuation">(</span><span class="token keyword">int</span> n<span class="token punctuation">)</span> <span class="token punctuation">&#123;</span></pre></td></tr><tr><td data-num="7"></td><td><pre>            parent <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token keyword">int</span><span class="token punctuation">[</span>n<span class="token operator">+</span><span class="token number">1</span><span class="token punctuation">]</span><span class="token punctuation">;</span></pre></td></tr><tr><td data-num="8"></td><td><pre>            rank <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token keyword">int</span><span class="token punctuation">[</span>n<span class="token operator">+</span><span class="token number">1</span><span class="token punctuation">]</span><span class="token punctuation">;</span></pre></td></tr><tr><td data-num="9"></td><td><pre>            nodes <span class="token operator">=</span> <span class="token number">1</span><span class="token punctuation">;</span></pre></td></tr><tr><td data-num="10"></td><td><pre>            <span class="token keyword">for</span> <span class="token punctuation">(</span><span class="token keyword">int</span> i<span class="token operator">=</span><span class="token number">1</span><span class="token punctuation">;</span> i<span class="token operator">&lt;=</span>n<span class="token punctuation">;</span> i<span class="token operator">++</span><span class="token punctuation">)</span> parent<span class="token punctuation">[</span>i<span class="token punctuation">]</span> <span class="token operator">=</span> i<span class="token punctuation">;</span></pre></td></tr><tr><td data-num="11"></td><td><pre>        <span class="token punctuation">&#125;</span></pre></td></tr><tr><td data-num="12"></td><td><pre></pre></td></tr><tr><td data-num="13"></td><td><pre>        <span class="token keyword">public</span> <span class="token keyword">int</span> <span class="token function">find</span><span class="token punctuation">(</span><span class="token keyword">int</span> x<span class="token punctuation">)</span> <span class="token punctuation">&#123;</span></pre></td></tr><tr><td data-num="14"></td><td><pre>            <span class="token keyword">if</span> <span class="token punctuation">(</span>parent<span class="token punctuation">[</span>x<span class="token punctuation">]</span> <span class="token operator">!=</span> x<span class="token punctuation">)</span> parent<span class="token punctuation">[</span>x<span class="token punctuation">]</span> <span class="token operator">=</span> <span class="token function">find</span><span class="token punctuation">(</span>parent<span class="token punctuation">[</span>x<span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token punctuation">;</span></pre></td></tr><tr><td data-num="15"></td><td><pre>            <span class="token keyword">return</span> parent<span class="token punctuation">[</span>x<span class="token punctuation">]</span><span class="token punctuation">;</span></pre></td></tr><tr><td data-num="16"></td><td><pre>        <span class="token punctuation">&#125;</span></pre></td></tr><tr><td data-num="17"></td><td><pre></pre></td></tr><tr><td data-num="18"></td><td><pre>        <span class="token keyword">public</span> <span class="token keyword">boolean</span> <span class="token function">union_</span><span class="token punctuation">(</span><span class="token keyword">int</span> x<span class="token punctuation">,</span> <span class="token keyword">int</span> y<span class="token punctuation">)</span> <span class="token punctuation">&#123;</span></pre></td></tr><tr><td data-num="19"></td><td><pre>            <span class="token keyword">int</span> px <span class="token operator">=</span> <span class="token function">find</span><span class="token punctuation">(</span>x<span class="token punctuation">)</span><span class="token punctuation">;</span></pre></td></tr><tr><td data-num="20"></td><td><pre>            <span class="token keyword">int</span> py <span class="token operator">=</span> <span class="token function">find</span><span class="token punctuation">(</span>y<span class="token punctuation">)</span><span class="token punctuation">;</span></pre></td></tr><tr><td data-num="21"></td><td><pre>            <span class="token keyword">if</span> <span class="token punctuation">(</span>px <span class="token operator">==</span> py<span class="token punctuation">)</span> <span class="token keyword">return</span> <span class="token boolean">false</span><span class="token punctuation">;</span></pre></td></tr><tr><td data-num="22"></td><td><pre>            <span class="token keyword">if</span> <span class="token punctuation">(</span>rank<span class="token punctuation">[</span>px<span class="token punctuation">]</span> <span class="token operator">></span> rank<span class="token punctuation">[</span>py<span class="token punctuation">]</span><span class="token punctuation">)</span> parent<span class="token punctuation">[</span>py<span class="token punctuation">]</span> <span class="token operator">=</span> px<span class="token punctuation">;</span></pre></td></tr><tr><td data-num="23"></td><td><pre>            <span class="token keyword">else</span> <span class="token keyword">if</span> <span class="token punctuation">(</span>rank<span class="token punctuation">[</span>px<span class="token punctuation">]</span> <span class="token operator">&lt;</span> rank<span class="token punctuation">[</span>py<span class="token punctuation">]</span><span class="token punctuation">)</span> parent<span class="token punctuation">[</span>px<span class="token punctuation">]</span> <span class="token operator">=</span> py<span class="token punctuation">;</span></pre></td></tr><tr><td data-num="24"></td><td><pre>            <span class="token keyword">else</span> <span class="token punctuation">&#123;</span></pre></td></tr><tr><td data-num="25"></td><td><pre>                parent<span class="token punctuation">[</span>py<span class="token punctuation">]</span> <span class="token operator">=</span> px<span class="token punctuation">;</span></pre></td></tr><tr><td data-num="26"></td><td><pre>                rank<span class="token punctuation">[</span>px<span class="token punctuation">]</span> <span class="token operator">+=</span> <span class="token number">1</span><span class="token punctuation">;</span></pre></td></tr><tr><td data-num="27"></td><td><pre>            <span class="token punctuation">&#125;</span></pre></td></tr><tr><td data-num="28"></td><td><pre>            <span class="token keyword">return</span> <span class="token boolean">true</span><span class="token punctuation">;</span></pre></td></tr><tr><td data-num="29"></td><td><pre>        <span class="token punctuation">&#125;</span></pre></td></tr><tr><td data-num="30"></td><td><pre>    <span class="token punctuation">&#125;</span></pre></td></tr><tr><td data-num="31"></td><td><pre></pre></td></tr><tr><td data-num="32"></td><td><pre>    <span class="token keyword">public</span> <span class="token keyword">int</span> <span class="token function">maxNumEdgesToRemove</span><span class="token punctuation">(</span><span class="token keyword">int</span> n<span class="token punctuation">,</span> <span class="token keyword">int</span><span class="token punctuation">[</span><span class="token punctuation">]</span><span class="token punctuation">[</span><span class="token punctuation">]</span> edges<span class="token punctuation">)</span> <span class="token punctuation">&#123;</span></pre></td></tr><tr><td data-num="33"></td><td><pre>        <span class="token class-name">UnionFind</span> <span class="token class-name">Alice</span> <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">UnionFind</span><span class="token punctuation">(</span>n<span class="token punctuation">)</span><span class="token punctuation">;</span></pre></td></tr><tr><td data-num="34"></td><td><pre>        <span class="token class-name">UnionFind</span> <span class="token class-name">Bob</span> <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">UnionFind</span><span class="token punctuation">(</span>n<span class="token punctuation">)</span><span class="token punctuation">;</span></pre></td></tr><tr><td data-num="35"></td><td><pre>        <span class="token keyword">int</span> res <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span></pre></td></tr><tr><td data-num="36"></td><td><pre>        <span class="token keyword">for</span> <span class="token punctuation">(</span><span class="token keyword">int</span><span class="token punctuation">[</span><span class="token punctuation">]</span> edge <span class="token operator">:</span> edges<span class="token punctuation">)</span> <span class="token punctuation">&#123;</span></pre></td></tr><tr><td data-num="37"></td><td><pre>            <span class="token keyword">if</span> <span class="token punctuation">(</span>edge<span class="token punctuation">[</span><span class="token number">0</span><span class="token punctuation">]</span> <span class="token operator">==</span> <span class="token number">3</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span></pre></td></tr><tr><td data-num="38"></td><td><pre>                <span class="token keyword">if</span> <span class="token punctuation">(</span><span class="token class-name">Alice</span><span class="token punctuation">.</span><span class="token function">union_</span><span class="token punctuation">(</span>edge<span class="token punctuation">[</span><span class="token number">1</span><span class="token punctuation">]</span><span class="token punctuation">,</span> edge<span class="token punctuation">[</span><span class="token number">2</span><span class="token punctuation">]</span><span class="token punctuation">)</span> <span class="token operator">&amp;&amp;</span> <span class="token class-name">Bob</span><span class="token punctuation">.</span><span class="token function">union_</span><span class="token punctuation">(</span>edge<span class="token punctuation">[</span><span class="token number">1</span><span class="token punctuation">]</span><span class="token punctuation">,</span> edge<span class="token punctuation">[</span><span class="token number">2</span><span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span></pre></td></tr><tr><td data-num="39"></td><td><pre>                    <span class="token class-name">Alice</span><span class="token punctuation">.</span>nodes <span class="token operator">+=</span> <span class="token number">1</span><span class="token punctuation">;</span></pre></td></tr><tr><td data-num="40"></td><td><pre>                    <span class="token class-name">Bob</span><span class="token punctuation">.</span>nodes <span class="token operator">+=</span> <span class="token number">1</span><span class="token punctuation">;</span></pre></td></tr><tr><td data-num="41"></td><td><pre>                <span class="token punctuation">&#125;</span> <span class="token keyword">else</span> res <span class="token operator">+=</span> <span class="token number">1</span><span class="token punctuation">;</span></pre></td></tr><tr><td data-num="42"></td><td><pre>            <span class="token punctuation">&#125;</span> </pre></td></tr><tr><td data-num="43"></td><td><pre>        <span class="token punctuation">&#125;</span></pre></td></tr><tr><td data-num="44"></td><td><pre></pre></td></tr><tr><td data-num="45"></td><td><pre>        <span class="token keyword">for</span> <span class="token punctuation">(</span><span class="token keyword">int</span><span class="token punctuation">[</span><span class="token punctuation">]</span> edge <span class="token operator">:</span> edges<span class="token punctuation">)</span> <span class="token punctuation">&#123;</span></pre></td></tr><tr><td data-num="46"></td><td><pre>            <span class="token keyword">if</span> <span class="token punctuation">(</span>edge<span class="token punctuation">[</span><span class="token number">0</span><span class="token punctuation">]</span> <span class="token operator">==</span> <span class="token number">1</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span></pre></td></tr><tr><td data-num="47"></td><td><pre>                <span class="token keyword">if</span> <span class="token punctuation">(</span><span class="token class-name">Alice</span><span class="token punctuation">.</span><span class="token function">union_</span><span class="token punctuation">(</span>edge<span class="token punctuation">[</span><span class="token number">1</span><span class="token punctuation">]</span><span class="token punctuation">,</span> edge<span class="token punctuation">[</span><span class="token number">2</span><span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token class-name">Alice</span><span class="token punctuation">.</span>nodes <span class="token operator">+=</span> <span class="token number">1</span><span class="token punctuation">;</span></pre></td></tr><tr><td data-num="48"></td><td><pre>                <span class="token keyword">else</span> res <span class="token operator">+=</span> <span class="token number">1</span><span class="token punctuation">;</span></pre></td></tr><tr><td data-num="49"></td><td><pre>            <span class="token punctuation">&#125;</span></pre></td></tr><tr><td data-num="50"></td><td><pre>            <span class="token keyword">if</span> <span class="token punctuation">(</span>edge<span class="token punctuation">[</span><span class="token number">0</span><span class="token punctuation">]</span> <span class="token operator">==</span> <span class="token number">2</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span></pre></td></tr><tr><td data-num="51"></td><td><pre>                <span class="token keyword">if</span> <span class="token punctuation">(</span><span class="token class-name">Bob</span><span class="token punctuation">.</span><span class="token function">union_</span><span class="token punctuation">(</span>edge<span class="token punctuation">[</span><span class="token number">1</span><span class="token punctuation">]</span><span class="token punctuation">,</span> edge<span class="token punctuation">[</span><span class="token number">2</span><span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token class-name">Bob</span><span class="token punctuation">.</span>nodes <span class="token operator">+=</span> <span class="token number">1</span><span class="token punctuation">;</span></pre></td></tr><tr><td data-num="52"></td><td><pre>                <span class="token keyword">else</span> res <span class="token operator">+=</span> <span class="token number">1</span><span class="token punctuation">;</span></pre></td></tr><tr><td data-num="53"></td><td><pre>            <span class="token punctuation">&#125;</span></pre></td></tr><tr><td data-num="54"></td><td><pre>        <span class="token punctuation">&#125;</span></pre></td></tr><tr><td data-num="55"></td><td><pre>        <span class="token keyword">return</span> <span class="token class-name">Alice</span><span class="token punctuation">.</span>nodes <span class="token operator">==</span> <span class="token class-name">Bob</span><span class="token punctuation">.</span>nodes <span class="token operator">&amp;&amp;</span> <span class="token class-name">Alice</span><span class="token punctuation">.</span>nodes <span class="token operator">==</span> n <span class="token operator">?</span> res <span class="token operator">:</span> <span class="token operator">-</span><span class="token number">1</span><span class="token punctuation">;</span></pre></td></tr><tr><td data-num="56"></td><td><pre>    <span class="token punctuation">&#125;</span></pre></td></tr><tr><td data-num="57"></td><td><pre><span class="token punctuation">&#125;</span></pre></td></tr></table></figure></div><div class="tab" data-id="code" data-title="Python"><figure class="highlight python"><figcaption data-lang="python"></figcaption><table><tr><td data-num="1"></td><td><pre><span class="token keyword">class</span> <span class="token class-name">UnionFind</span><span class="token punctuation">:</span></pre></td></tr><tr><td data-num="2"></td><td><pre>    <span class="token keyword">def</span> <span class="token function">__init__</span><span class="token punctuation">(</span>self<span class="token punctuation">,</span> n<span class="token punctuation">)</span><span class="token punctuation">:</span></pre></td></tr><tr><td data-num="3"></td><td><pre>        self<span class="token punctuation">.</span>parent <span class="token operator">=</span> <span class="token builtin">list</span><span class="token punctuation">(</span><span class="token builtin">range</span><span class="token punctuation">(</span>n<span class="token operator">+</span><span class="token number">1</span><span class="token punctuation">)</span><span class="token punctuation">)</span></pre></td></tr><tr><td data-num="4"></td><td><pre>        self<span class="token punctuation">.</span>rank <span class="token operator">=</span> <span class="token punctuation">[</span><span class="token number">0</span><span class="token punctuation">]</span> <span class="token operator">*</span> <span class="token punctuation">(</span>n<span class="token operator">+</span><span class="token number">1</span><span class="token punctuation">)</span></pre></td></tr><tr><td data-num="5"></td><td><pre>        self<span class="token punctuation">.</span>nodes <span class="token operator">=</span> <span class="token number">1</span></pre></td></tr><tr><td data-num="6"></td><td><pre></pre></td></tr><tr><td data-num="7"></td><td><pre>    <span class="token keyword">def</span> <span class="token function">find</span><span class="token punctuation">(</span>self<span class="token punctuation">,</span> x<span class="token punctuation">)</span><span class="token punctuation">:</span></pre></td></tr><tr><td data-num="8"></td><td><pre>        <span class="token keyword">if</span> self<span class="token punctuation">.</span>parent<span class="token punctuation">[</span>x<span class="token punctuation">]</span> <span class="token operator">!=</span> x<span class="token punctuation">:</span></pre></td></tr><tr><td data-num="9"></td><td><pre>            self<span class="token punctuation">.</span>parent<span class="token punctuation">[</span>x<span class="token punctuation">]</span> <span class="token operator">=</span> self<span class="token punctuation">.</span>find<span class="token punctuation">(</span>self<span class="token punctuation">.</span>parent<span class="token punctuation">[</span>x<span class="token punctuation">]</span><span class="token punctuation">)</span></pre></td></tr><tr><td data-num="10"></td><td><pre>        <span class="token keyword">return</span> self<span class="token punctuation">.</span>parent<span class="token punctuation">[</span>x<span class="token punctuation">]</span></pre></td></tr><tr><td data-num="11"></td><td><pre></pre></td></tr><tr><td data-num="12"></td><td><pre>    <span class="token keyword">def</span> <span class="token function">union_</span><span class="token punctuation">(</span>self<span class="token punctuation">,</span> x<span class="token punctuation">,</span> y<span class="token punctuation">)</span><span class="token punctuation">:</span></pre></td></tr><tr><td data-num="13"></td><td><pre>        px <span class="token operator">=</span> self<span class="token punctuation">.</span>find<span class="token punctuation">(</span>x<span class="token punctuation">)</span></pre></td></tr><tr><td data-num="14"></td><td><pre>        py <span class="token operator">=</span> self<span class="token punctuation">.</span>find<span class="token punctuation">(</span>y<span class="token punctuation">)</span></pre></td></tr><tr><td data-num="15"></td><td><pre>        <span class="token keyword">if</span> px <span class="token operator">==</span> py<span class="token punctuation">:</span> <span class="token keyword">return</span> <span class="token boolean">False</span></pre></td></tr><tr><td data-num="16"></td><td><pre>        <span class="token keyword">if</span> self<span class="token punctuation">.</span>rank<span class="token punctuation">[</span>px<span class="token punctuation">]</span> <span class="token operator">></span> self<span class="token punctuation">.</span>rank<span class="token punctuation">[</span>py<span class="token punctuation">]</span><span class="token punctuation">:</span> self<span class="token punctuation">.</span>parent<span class="token punctuation">[</span>py<span class="token punctuation">]</span> <span class="token operator">=</span> px</pre></td></tr><tr><td data-num="17"></td><td><pre>        <span class="token keyword">elif</span> self<span class="token punctuation">.</span>rank<span class="token punctuation">[</span>px<span class="token punctuation">]</span> <span class="token operator">&lt;</span> self<span class="token punctuation">.</span>rank<span class="token punctuation">[</span>py<span class="token punctuation">]</span><span class="token punctuation">:</span> self<span class="token punctuation">.</span>parent<span class="token punctuation">[</span>px<span class="token punctuation">]</span> <span class="token operator">=</span> py</pre></td></tr><tr><td data-num="18"></td><td><pre>        <span class="token keyword">else</span><span class="token punctuation">:</span></pre></td></tr><tr><td data-num="19"></td><td><pre>            self<span class="token punctuation">.</span>parent<span class="token punctuation">[</span>py<span class="token punctuation">]</span> <span class="token operator">=</span> px</pre></td></tr><tr><td data-num="20"></td><td><pre>            self<span class="token punctuation">.</span>rank<span class="token punctuation">[</span>px<span class="token punctuation">]</span> <span class="token operator">+=</span> <span class="token number">1</span></pre></td></tr><tr><td data-num="21"></td><td><pre>        <span class="token keyword">return</span> <span class="token boolean">True</span></pre></td></tr><tr><td data-num="22"></td><td><pre></pre></td></tr><tr><td data-num="23"></td><td><pre><span class="token keyword">class</span> <span class="token class-name">Solution</span><span class="token punctuation">:</span></pre></td></tr><tr><td data-num="24"></td><td><pre>    <span class="token keyword">def</span> <span class="token function">maxNumEdgesToRemove</span><span class="token punctuation">(</span>self<span class="token punctuation">,</span> n<span class="token punctuation">:</span> <span class="token builtin">int</span><span class="token punctuation">,</span> edges<span class="token punctuation">:</span> List<span class="token punctuation">[</span>List<span class="token punctuation">[</span><span class="token builtin">int</span><span class="token punctuation">]</span><span class="token punctuation">]</span><span class="token punctuation">)</span> <span class="token operator">-</span><span class="token operator">></span> <span class="token builtin">int</span><span class="token punctuation">:</span></pre></td></tr><tr><td data-num="25"></td><td><pre>        Alice <span class="token operator">=</span> UnionFind<span class="token punctuation">(</span>n<span class="token punctuation">)</span></pre></td></tr><tr><td data-num="26"></td><td><pre>        Bob <span class="token operator">=</span> UnionFind<span class="token punctuation">(</span>n<span class="token punctuation">)</span></pre></td></tr><tr><td data-num="27"></td><td><pre></pre></td></tr><tr><td data-num="28"></td><td><pre>        res <span class="token operator">=</span> <span class="token number">0</span></pre></td></tr><tr><td data-num="29"></td><td><pre>        <span class="token keyword">for</span> t<span class="token punctuation">,</span> i<span class="token punctuation">,</span> j <span class="token keyword">in</span> edges<span class="token punctuation">:</span></pre></td></tr><tr><td data-num="30"></td><td><pre>            <span class="token keyword">if</span> t <span class="token operator">==</span> <span class="token number">3</span><span class="token punctuation">:</span></pre></td></tr><tr><td data-num="31"></td><td><pre>                <span class="token keyword">if</span> Alice<span class="token punctuation">.</span>union_<span class="token punctuation">(</span>i<span class="token punctuation">,</span> j<span class="token punctuation">)</span> <span class="token keyword">and</span> Bob<span class="token punctuation">.</span>union_<span class="token punctuation">(</span>i<span class="token punctuation">,</span> j<span class="token punctuation">)</span><span class="token punctuation">:</span></pre></td></tr><tr><td data-num="32"></td><td><pre>                    Alice<span class="token punctuation">.</span>nodes <span class="token operator">+=</span> <span class="token number">1</span></pre></td></tr><tr><td data-num="33"></td><td><pre>                    Bob<span class="token punctuation">.</span>nodes <span class="token operator">+=</span> <span class="token number">1</span></pre></td></tr><tr><td data-num="34"></td><td><pre>                <span class="token keyword">else</span><span class="token punctuation">:</span> res <span class="token operator">+=</span> <span class="token number">1</span></pre></td></tr><tr><td data-num="35"></td><td><pre>        </pre></td></tr><tr><td data-num="36"></td><td><pre>        <span class="token keyword">for</span> t<span class="token punctuation">,</span> i<span class="token punctuation">,</span> j <span class="token keyword">in</span> edges<span class="token punctuation">:</span></pre></td></tr><tr><td data-num="37"></td><td><pre>            <span class="token keyword">if</span> t <span class="token operator">==</span> <span class="token number">1</span><span class="token punctuation">:</span></pre></td></tr><tr><td data-num="38"></td><td><pre>                <span class="token keyword">if</span> Alice<span class="token punctuation">.</span>union_<span class="token punctuation">(</span>i<span class="token punctuation">,</span> j<span class="token punctuation">)</span><span class="token punctuation">:</span> Alice<span class="token punctuation">.</span>nodes <span class="token operator">+=</span> <span class="token number">1</span></pre></td></tr><tr><td data-num="39"></td><td><pre>                <span class="token keyword">else</span><span class="token punctuation">:</span> res <span class="token operator">+=</span> <span class="token number">1</span></pre></td></tr><tr><td data-num="40"></td><td><pre>            <span class="token keyword">if</span> t <span class="token operator">==</span> <span class="token number">2</span><span class="token punctuation">:</span></pre></td></tr><tr><td data-num="41"></td><td><pre>                <span class="token keyword">if</span> Bob<span class="token punctuation">.</span>union_<span class="token punctuation">(</span>i<span class="token punctuation">,</span> j<span class="token punctuation">)</span><span class="token punctuation">:</span> Bob<span class="token punctuation">.</span>nodes <span class="token operator">+=</span> <span class="token number">1</span></pre></td></tr><tr><td data-num="42"></td><td><pre>                <span class="token keyword">else</span><span class="token punctuation">:</span> res <span class="token operator">+=</span> <span class="token number">1</span></pre></td></tr><tr><td data-num="43"></td><td><pre>        </pre></td></tr><tr><td data-num="44"></td><td><pre>        <span class="token keyword">return</span> res <span class="token keyword">if</span> Alice<span class="token punctuation">.</span>nodes <span class="token operator">==</span> Bob<span class="token punctuation">.</span>nodes <span class="token operator">==</span> n <span class="token keyword">else</span> <span class="token operator">-</span><span class="token number">1</span></pre></td></tr></table></figure></div>]]></content>
      
      
      <categories>
          
          <category> Coding </category>
          
          <category> Leetcode </category>
          
          <category> Hard </category>
          
      </categories>
      
      
        <tags>
            
            <tag> Union Find </tag>
            
            <tag> Leetcode </tag>
            
            <tag> Hard </tag>
            
            <tag> Graph </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>Union Find</title>
      <link href="/2023/04/28/Algorithm/Union%20Find/"/>
      <url>/2023/04/28/Algorithm/Union%20Find/</url>
      
        <content type="html"><![CDATA[<p><strong>Union-Find data structure</strong> 又稱 <strong>Disjoint-set data structure</strong>，用於<strong>處理不相交集合 (disjoint set) 的合併 (Union) 與查詢 (Find) 問題。</strong></p><h2 id="disjoint-set"><a class="anchor" href="#disjoint-set">#</a> Disjoint Set</h2><p><em><strong>Disjoint set</strong></em> 表示數個 set 之間，擁有的元素都不相同，彼此<strong>互斥 (disjoint)</strong>。</p><p>可以去看看這篇文章 - <span class="exturl" data-url="aHR0cHM6Ly9oYWNrbWQuaW8vQENMS08vcmtSVlNfby00P3R5cGU9dmlldw==">disjoint set</span></p><h2 id="union-find-algorithm"><a class="anchor" href="#union-find-algorithm">#</a> Union Find Algorithm</h2><!-- 補forest資料結構 --><p>Union-Find Data Structure 是一種 <a href=""><strong>forest</strong></a> 結構，forest 是一種 N-way Tree 結構，互相連通的節點放在同一個 set，任意選擇其中一個節點作為 root。</p><p><img data-src="https://i.imgur.com/606kd33.png" alt=""></p><p>Union Find 提供以下兩種操作:</p><ul><li><p><strong>Find:</strong> 找到 input 節點的 root，可以藉此確定 input 節點屬於哪個子集。</p><ul><li>Find 函數能夠找到節點的 root。</li><li>如果要確認兩個節點是否為同一子集，只要分別找兩個節點的 root ，如果一樣，即屬於同一子集 (為 connected component)。</li><li>Find 的時間複雜度最差就是遍歷整棵樹，時間複雜度為 O (n)。</li></ul></li><li><p><strong>Union:</strong> 將兩個子集合併為同一子集。</p><ul><li>Union 能夠將兩個所屬的子集進行合併。</li><li>最簡單的方法就是將一個子集的 root 直接作為另一子集 root 的子節點即可</li></ul><p><img data-src="https://i.imgur.com/Z3V1vnw.png" alt=""></p><ul><li>Union 的實踐需要依靠 find，因此時間複雜度最差為 O (n)。</li></ul></li></ul><p>以上圖的兩個樹來說，以 0 為 root 的樹大於以 2 為 root 的樹，如果將後者合併到前者下，合併過後的樹高度會比較小，根據這個觀察可以歸納出，如果兩個子集要合併，應該讓<strong>高度較小的子集合併到高度比較大的子集下</strong>，可以避免樹的不平衡。</p><h2 id="find-with-path-compression"><a class="anchor" href="#find-with-path-compression">#</a> Find with Path Compression</h2><p>Path compression 是一個優化技巧，也有人稱為 set collapsing, <strong>讓每個節點直接連到它的 root 節點</strong>，這樣 Find 跟 Union 操作的時間複雜度可以降到 O (1)。</p><p><img data-src="https://i.imgur.com/0Nl0hMt.png" alt=""></p><p>但要如何有效地讓所有節點 parent node 都指向 root 呢？<br> 答案就是透過<strong>遞迴</strong>，透過遞迴找到 root， 再依序回傳更新為每個走訪過的 parent。</p><figure class="highlight cpp"><figcaption data-lang="C++"></figcaption><table><tr><td data-num="1"></td><td><pre><span class="token keyword">int</span> <span class="token function">find</span><span class="token punctuation">(</span><span class="token keyword">int</span> x<span class="token punctuation">)</span> <span class="token punctuation">&#123;</span></pre></td></tr><tr><td data-num="2"></td><td><pre>    <span class="token keyword">if</span> <span class="token punctuation">(</span>x <span class="token operator">==</span> root<span class="token punctuation">[</span>x<span class="token punctuation">]</span><span class="token punctuation">)</span> <span class="token keyword">return</span> x<span class="token punctuation">;</span></pre></td></tr><tr><td data-num="3"></td><td><pre>    <span class="token keyword">return</span> root<span class="token punctuation">[</span>x<span class="token punctuation">]</span> <span class="token operator">=</span> <span class="token function">find</span><span class="token punctuation">(</span>root<span class="token punctuation">[</span>x<span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token punctuation">;</span></pre></td></tr><tr><td data-num="4"></td><td><pre><span class="token punctuation">&#125;</span></pre></td></tr></table></figure><h2 id="union-by-sizerank"><a class="anchor" href="#union-by-sizerank">#</a> Union by Size/Rank</h2><p>應用 <em><strong>path compression</strong></em> 後的樹可以盡可能縮減樹的高度 ，若要再 Union 兩個壓縮後的子集，可以採取 <em><strong>union by size</strong></em> 技巧，<strong>將子節點比較少的 root 加入比較大的子集。</strong></p><p>依照 rank 來排序，起初每個點的 rank 均為 0 ，依據 rank 大小來決定如何合併，<strong>rank 大的子集合併小的，合併別人的子集其 rank 往上增加。</strong></p><figure class="highlight cpp"><figcaption data-lang="C++"></figcaption><table><tr><td data-num="1"></td><td><pre><span class="token keyword">void</span> <span class="token function">unionSet</span><span class="token punctuation">(</span><span class="token keyword">int</span> x<span class="token punctuation">,</span> <span class="token keyword">int</span> y<span class="token punctuation">)</span> <span class="token punctuation">&#123;</span></pre></td></tr><tr><td data-num="2"></td><td><pre>    <span class="token keyword">int</span> root_x <span class="token operator">=</span> <span class="token function">find</span><span class="token punctuation">(</span>x<span class="token punctuation">)</span><span class="token punctuation">;</span></pre></td></tr><tr><td data-num="3"></td><td><pre>    <span class="token keyword">int</span> root_y <span class="token operator">=</span> <span class="token function">find</span><span class="token punctuation">(</span>y<span class="token punctuation">)</span><span class="token punctuation">;</span></pre></td></tr><tr><td data-num="4"></td><td><pre>    <span class="token keyword">if</span> <span class="token punctuation">(</span>root_x <span class="token operator">==</span> root_y<span class="token punctuation">)</span> <span class="token keyword">return</span> <span class="token punctuation">;</span></pre></td></tr><tr><td data-num="5"></td><td><pre>    <span class="token keyword">if</span> <span class="token punctuation">(</span>rank<span class="token punctuation">[</span>root_x<span class="token punctuation">]</span> <span class="token operator">></span> rank<span class="token punctuation">[</span>root_y<span class="token punctuation">]</span><span class="token punctuation">)</span> root<span class="token punctuation">[</span>root_y<span class="token punctuation">]</span> <span class="token operator">=</span> root_x<span class="token punctuation">;</span></pre></td></tr><tr><td data-num="6"></td><td><pre>    <span class="token keyword">else</span> <span class="token keyword">if</span> <span class="token punctuation">(</span>rank<span class="token punctuation">[</span>root_x<span class="token punctuation">]</span> <span class="token operator">&lt;</span> rank<span class="token punctuation">[</span>root_y<span class="token punctuation">]</span><span class="token punctuation">)</span> root<span class="token punctuation">[</span>root_x<span class="token punctuation">]</span> <span class="token operator">=</span> root_y<span class="token punctuation">;</span></pre></td></tr><tr><td data-num="7"></td><td><pre>    <span class="token keyword">else</span> <span class="token punctuation">&#123;</span></pre></td></tr><tr><td data-num="8"></td><td><pre>        root<span class="token punctuation">[</span>root_y<span class="token punctuation">]</span> <span class="token operator">=</span> root_x<span class="token punctuation">;</span></pre></td></tr><tr><td data-num="9"></td><td><pre>        rank<span class="token punctuation">[</span>root_x<span class="token punctuation">]</span><span class="token operator">++</span><span class="token punctuation">;</span></pre></td></tr><tr><td data-num="10"></td><td><pre>    <span class="token punctuation">&#125;</span>  </pre></td></tr><tr><td data-num="11"></td><td><pre><span class="token punctuation">&#125;</span></pre></td></tr></table></figure><p>一開始每個點的  <code>rank</code>  都為 0 ，有一點特別容易寫出 bug ，在比較彼此  <code>rank</code>  或是更新  <code>rank</code>  時候，需要以  <code>find()</code>  所找出的  <code>root</code>  來比，不是各個節點本身的  <code>rank</code>  。</p>]]></content>
      
      
      <categories>
          
          <category> Algorithm </category>
          
      </categories>
      
      
        <tags>
            
            <tag> Algorithm </tag>
            
            <tag> Union Find </tag>
            
            <tag> Data Structure </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>839. Similar String Groups</title>
      <link href="/2023/04/28/Coding/leetcode/Hard/839%20Similar%20String%20Groups/"/>
      <url>/2023/04/28/Coding/leetcode/Hard/839%20Similar%20String%20Groups/</url>
      
        <content type="html"><![CDATA[<p>⭐️⭐️⭐️</p><h2 id="題目敘述"><a class="anchor" href="#題目敘述">#</a> <span class="exturl" data-url="aHR0cHM6Ly9sZWV0Y29kZS5jb20vcHJvYmxlbXMvc2ltaWxhci1zdHJpbmctZ3JvdXBzL2Rlc2NyaXB0aW9uLw==">題目敘述</span></h2><p>Two strings  <code>X</code>  and  <code>Y</code>  are similar if we can swap two letters (in different positions) of  <code>X</code> , so that it equals  <code>Y</code> . Also two strings  <code>X</code>  and  <code>Y</code>  are similar if they are equal.</p><p>For example,  <code>&quot;tars&quot;</code>  and  <code>&quot;rats&quot;</code>  are similar (swapping at positions 0 and 2), and  <code>&quot;rats&quot;</code>  and  <code>&quot;arts&quot;</code>  are similar, but  <code>&quot;star&quot;</code>  is not similar to  <code>&quot;tars&quot;</code> ,  <code>&quot;rats&quot;</code> , or  <code>&quot;arts&quot;</code> .</p><p>Together, these form two connected groups by similarity:  <code>&#123;&quot;tars&quot;, &quot;rats&quot;, &quot;arts&quot;&#125;</code>  and  <code>&#123;&quot;star&quot;&#125;</code> .  Notice that  <code>&quot;tars&quot;</code>  and  <code>&quot;arts&quot;</code>  are in the same group even though they are not similar.  Formally, each group is such that a word is in the group if and only if it is similar to at least one other word in the group.</p><p>We are given a list  <code>strs</code>  of strings where every string in  <code>strs</code>  is an anagram of every other string in  <code>strs</code> . How many groups are there?</p><h3 id="example-1"><a class="anchor" href="#example-1">#</a> Example 1</h3><blockquote><p><strong>Input</strong>: strs = [“tars”,“rats”,“arts”,“star”]<br><strong>Output</strong>: 2</p></blockquote><h3 id="example-2"><a class="anchor" href="#example-2">#</a> Example 2</h3><blockquote><p><strong>Input</strong>: strs = [“omv”,“ovm”]<br><strong>Output</strong>: 1</p></blockquote><h2 id="解題思路"><a class="anchor" href="#解題思路">#</a> 解題思路</h2><p>遍歷整個陣列將相似的字串組合為群組，最後輸出群組的數量。</p><p>比對字串相似的方法，如果差異的字元數量大於 2，則兩字串不相似。</p><p>Union Find 的部分可以參考這個文章 <a href="https://chienikao.github.io/2023/04/28/Algorithm/Union%20Find/">連結</a></p><h2 id="solution"><a class="anchor" href="#solution">#</a> Solution</h2><div class="tab" data-id="code" data-title="C++"><figure class="highlight cpp"><figcaption data-lang="C++"></figcaption><table><tr><td data-num="1"></td><td><pre><span class="token keyword">class</span> <span class="token class-name">Solution</span> <span class="token punctuation">&#123;</span></pre></td></tr><tr><td data-num="2"></td><td><pre><span class="token keyword">public</span><span class="token operator">:</span></pre></td></tr><tr><td data-num="3"></td><td><pre>    vector<span class="token operator">&lt;</span><span class="token keyword">int</span><span class="token operator">></span> parent<span class="token punctuation">,</span> rank<span class="token punctuation">;</span></pre></td></tr><tr><td data-num="4"></td><td><pre>    <span class="token keyword">int</span> res<span class="token punctuation">;</span></pre></td></tr><tr><td data-num="5"></td><td><pre>    <span class="token keyword">bool</span> <span class="token function">similar</span><span class="token punctuation">(</span>string<span class="token operator">&amp;</span> s1<span class="token punctuation">,</span> string<span class="token operator">&amp;</span> s2<span class="token punctuation">)</span> <span class="token punctuation">&#123;</span></pre></td></tr><tr><td data-num="6"></td><td><pre>        <span class="token keyword">if</span> <span class="token punctuation">(</span>s1 <span class="token operator">==</span> s2<span class="token punctuation">)</span> <span class="token keyword">return</span> <span class="token boolean">true</span><span class="token punctuation">;</span></pre></td></tr><tr><td data-num="7"></td><td><pre>        <span class="token keyword">int</span> diff <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span></pre></td></tr><tr><td data-num="8"></td><td><pre>        <span class="token keyword">for</span> <span class="token punctuation">(</span><span class="token keyword">int</span> i<span class="token operator">=</span><span class="token number">0</span><span class="token punctuation">;</span> i<span class="token operator">&lt;</span>s1<span class="token punctuation">.</span><span class="token function">size</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span> i<span class="token operator">++</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span></pre></td></tr><tr><td data-num="9"></td><td><pre>            <span class="token keyword">if</span> <span class="token punctuation">(</span>s1<span class="token punctuation">[</span>i<span class="token punctuation">]</span> <span class="token operator">!=</span> s2<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span></pre></td></tr><tr><td data-num="10"></td><td><pre>                diff<span class="token operator">++</span><span class="token punctuation">;</span></pre></td></tr><tr><td data-num="11"></td><td><pre>                <span class="token keyword">if</span> <span class="token punctuation">(</span>diff <span class="token operator">></span> <span class="token number">2</span><span class="token punctuation">)</span> <span class="token keyword">return</span> <span class="token boolean">false</span><span class="token punctuation">;</span></pre></td></tr><tr><td data-num="12"></td><td><pre>            <span class="token punctuation">&#125;</span></pre></td></tr><tr><td data-num="13"></td><td><pre>        <span class="token punctuation">&#125;</span></pre></td></tr><tr><td data-num="14"></td><td><pre>        <span class="token keyword">return</span> diff <span class="token operator">==</span> <span class="token number">2</span><span class="token punctuation">;</span></pre></td></tr><tr><td data-num="15"></td><td><pre>    <span class="token punctuation">&#125;</span></pre></td></tr><tr><td data-num="16"></td><td><pre></pre></td></tr><tr><td data-num="17"></td><td><pre>    <span class="token keyword">int</span> <span class="token function">find</span><span class="token punctuation">(</span><span class="token keyword">int</span> x<span class="token punctuation">)</span> <span class="token punctuation">&#123;</span></pre></td></tr><tr><td data-num="18"></td><td><pre>        <span class="token keyword">if</span> <span class="token punctuation">(</span>x <span class="token operator">==</span> parent<span class="token punctuation">[</span>x<span class="token punctuation">]</span><span class="token punctuation">)</span> <span class="token keyword">return</span> x<span class="token punctuation">;</span></pre></td></tr><tr><td data-num="19"></td><td><pre>        <span class="token keyword">return</span> parent<span class="token punctuation">[</span>x<span class="token punctuation">]</span> <span class="token operator">=</span> <span class="token function">find</span><span class="token punctuation">(</span>parent<span class="token punctuation">[</span>x<span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token punctuation">;</span></pre></td></tr><tr><td data-num="20"></td><td><pre>    <span class="token punctuation">&#125;</span></pre></td></tr><tr><td data-num="21"></td><td><pre></pre></td></tr><tr><td data-num="22"></td><td><pre>    <span class="token keyword">void</span> <span class="token function">unionSet</span><span class="token punctuation">(</span><span class="token keyword">int</span> x<span class="token punctuation">,</span> <span class="token keyword">int</span> y<span class="token punctuation">)</span> <span class="token punctuation">&#123;</span></pre></td></tr><tr><td data-num="23"></td><td><pre>        <span class="token keyword">int</span> px <span class="token operator">=</span> <span class="token function">find</span><span class="token punctuation">(</span>x<span class="token punctuation">)</span><span class="token punctuation">,</span> py <span class="token operator">=</span> <span class="token function">find</span><span class="token punctuation">(</span>y<span class="token punctuation">)</span><span class="token punctuation">;</span></pre></td></tr><tr><td data-num="24"></td><td><pre>        <span class="token keyword">if</span> <span class="token punctuation">(</span>px <span class="token operator">==</span> py<span class="token punctuation">)</span> <span class="token keyword">return</span><span class="token punctuation">;</span></pre></td></tr><tr><td data-num="25"></td><td><pre>        <span class="token keyword">if</span> <span class="token punctuation">(</span>rank<span class="token punctuation">[</span>px<span class="token punctuation">]</span> <span class="token operator">></span> rank<span class="token punctuation">[</span>py<span class="token punctuation">]</span><span class="token punctuation">)</span> parent<span class="token punctuation">[</span>py<span class="token punctuation">]</span> <span class="token operator">=</span> px<span class="token punctuation">;</span></pre></td></tr><tr><td data-num="26"></td><td><pre>        <span class="token keyword">else</span> <span class="token keyword">if</span> <span class="token punctuation">(</span>rank<span class="token punctuation">[</span>px<span class="token punctuation">]</span> <span class="token operator">&lt;</span> rank<span class="token punctuation">[</span>py<span class="token punctuation">]</span><span class="token punctuation">)</span> parent<span class="token punctuation">[</span>px<span class="token punctuation">]</span> <span class="token operator">=</span> py<span class="token punctuation">;</span></pre></td></tr><tr><td data-num="27"></td><td><pre>        <span class="token keyword">else</span> <span class="token punctuation">&#123;</span></pre></td></tr><tr><td data-num="28"></td><td><pre>            parent<span class="token punctuation">[</span>py<span class="token punctuation">]</span> <span class="token operator">=</span> px<span class="token punctuation">;</span></pre></td></tr><tr><td data-num="29"></td><td><pre>            rank<span class="token punctuation">[</span>px<span class="token punctuation">]</span> <span class="token operator">++</span><span class="token punctuation">;</span></pre></td></tr><tr><td data-num="30"></td><td><pre>        <span class="token punctuation">&#125;</span></pre></td></tr><tr><td data-num="31"></td><td><pre>        res<span class="token operator">--</span><span class="token punctuation">;</span></pre></td></tr><tr><td data-num="32"></td><td><pre>    <span class="token punctuation">&#125;</span></pre></td></tr><tr><td data-num="33"></td><td><pre></pre></td></tr><tr><td data-num="34"></td><td><pre>    <span class="token keyword">int</span> <span class="token function">numSimilarGroups</span><span class="token punctuation">(</span>vector<span class="token operator">&lt;</span>string<span class="token operator">></span><span class="token operator">&amp;</span> strs<span class="token punctuation">)</span> <span class="token punctuation">&#123;</span></pre></td></tr><tr><td data-num="35"></td><td><pre>        <span class="token keyword">int</span> n <span class="token operator">=</span> strs<span class="token punctuation">.</span><span class="token function">size</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span></pre></td></tr><tr><td data-num="36"></td><td><pre>        res <span class="token operator">=</span> n<span class="token punctuation">;</span></pre></td></tr><tr><td data-num="37"></td><td><pre>        parent<span class="token punctuation">.</span><span class="token function">resize</span><span class="token punctuation">(</span>n<span class="token punctuation">)</span><span class="token punctuation">;</span></pre></td></tr><tr><td data-num="38"></td><td><pre>        rank<span class="token punctuation">.</span><span class="token function">resize</span><span class="token punctuation">(</span>n<span class="token punctuation">)</span><span class="token punctuation">;</span></pre></td></tr><tr><td data-num="39"></td><td><pre>        <span class="token keyword">for</span> <span class="token punctuation">(</span><span class="token keyword">int</span> i<span class="token operator">=</span><span class="token number">0</span><span class="token punctuation">;</span> i<span class="token operator">&lt;</span>n<span class="token punctuation">;</span> i<span class="token operator">++</span><span class="token punctuation">)</span> parent<span class="token punctuation">[</span>i<span class="token punctuation">]</span> <span class="token operator">=</span> i<span class="token punctuation">;</span></pre></td></tr><tr><td data-num="40"></td><td><pre>        <span class="token keyword">for</span> <span class="token punctuation">(</span><span class="token keyword">int</span> i<span class="token operator">=</span><span class="token number">0</span><span class="token punctuation">;</span> i<span class="token operator">&lt;</span>n<span class="token punctuation">;</span> i<span class="token operator">++</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span></pre></td></tr><tr><td data-num="41"></td><td><pre>            <span class="token keyword">for</span> <span class="token punctuation">(</span><span class="token keyword">int</span> j<span class="token operator">=</span>i<span class="token operator">+</span><span class="token number">1</span><span class="token punctuation">;</span> j<span class="token operator">&lt;</span>n<span class="token punctuation">;</span> j<span class="token operator">++</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span></pre></td></tr><tr><td data-num="42"></td><td><pre>                <span class="token keyword">if</span> <span class="token punctuation">(</span><span class="token function">similar</span><span class="token punctuation">(</span>strs<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">,</span> strs<span class="token punctuation">[</span>j<span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token function">unionSet</span><span class="token punctuation">(</span>i<span class="token punctuation">,</span> j<span class="token punctuation">)</span><span class="token punctuation">;</span></pre></td></tr><tr><td data-num="43"></td><td><pre>            <span class="token punctuation">&#125;</span></pre></td></tr><tr><td data-num="44"></td><td><pre>        <span class="token punctuation">&#125;</span></pre></td></tr><tr><td data-num="45"></td><td><pre>        <span class="token keyword">return</span> res<span class="token punctuation">;</span></pre></td></tr><tr><td data-num="46"></td><td><pre>    <span class="token punctuation">&#125;</span></pre></td></tr><tr><td data-num="47"></td><td><pre><span class="token punctuation">&#125;</span><span class="token punctuation">;</span></pre></td></tr></table></figure></div><div class="tab" data-id="code" data-title="Java"><figure class="highlight java"><figcaption data-lang="java"></figcaption><table><tr><td data-num="1"></td><td><pre><span class="token keyword">class</span> <span class="token class-name">Solution</span> <span class="token punctuation">&#123;</span></pre></td></tr><tr><td data-num="2"></td><td><pre>    <span class="token keyword">class</span> <span class="token class-name">UnionFind</span> <span class="token punctuation">&#123;</span></pre></td></tr><tr><td data-num="3"></td><td><pre>        <span class="token keyword">int</span><span class="token punctuation">[</span><span class="token punctuation">]</span> parent<span class="token punctuation">,</span> rank<span class="token punctuation">;</span></pre></td></tr><tr><td data-num="4"></td><td><pre>        <span class="token keyword">int</span> count<span class="token punctuation">;</span></pre></td></tr><tr><td data-num="5"></td><td><pre></pre></td></tr><tr><td data-num="6"></td><td><pre>        <span class="token keyword">public</span> <span class="token class-name">UnionFind</span><span class="token punctuation">(</span><span class="token keyword">int</span> n<span class="token punctuation">)</span> <span class="token punctuation">&#123;</span></pre></td></tr><tr><td data-num="7"></td><td><pre>            parent <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token keyword">int</span><span class="token punctuation">[</span>n<span class="token punctuation">]</span><span class="token punctuation">;</span></pre></td></tr><tr><td data-num="8"></td><td><pre>            rank <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token keyword">int</span><span class="token punctuation">[</span>n<span class="token punctuation">]</span><span class="token punctuation">;</span></pre></td></tr><tr><td data-num="9"></td><td><pre>            count <span class="token operator">=</span> n<span class="token punctuation">;</span></pre></td></tr><tr><td data-num="10"></td><td><pre></pre></td></tr><tr><td data-num="11"></td><td><pre>            <span class="token keyword">for</span> <span class="token punctuation">(</span><span class="token keyword">int</span> i <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span> i <span class="token operator">&lt;</span> n<span class="token punctuation">;</span> i<span class="token operator">++</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span></pre></td></tr><tr><td data-num="12"></td><td><pre>                parent<span class="token punctuation">[</span>i<span class="token punctuation">]</span> <span class="token operator">=</span> i<span class="token punctuation">;</span></pre></td></tr><tr><td data-num="13"></td><td><pre>            <span class="token punctuation">&#125;</span></pre></td></tr><tr><td data-num="14"></td><td><pre>        <span class="token punctuation">&#125;</span></pre></td></tr><tr><td data-num="15"></td><td><pre></pre></td></tr><tr><td data-num="16"></td><td><pre>        <span class="token keyword">public</span> <span class="token keyword">int</span> <span class="token function">find</span><span class="token punctuation">(</span><span class="token keyword">int</span> x<span class="token punctuation">)</span> <span class="token punctuation">&#123;</span></pre></td></tr><tr><td data-num="17"></td><td><pre>            <span class="token keyword">if</span> <span class="token punctuation">(</span>parent<span class="token punctuation">[</span>x<span class="token punctuation">]</span> <span class="token operator">!=</span> x<span class="token punctuation">)</span> <span class="token punctuation">&#123;</span></pre></td></tr><tr><td data-num="18"></td><td><pre>                parent<span class="token punctuation">[</span>x<span class="token punctuation">]</span> <span class="token operator">=</span> <span class="token function">find</span><span class="token punctuation">(</span>parent<span class="token punctuation">[</span>x<span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token punctuation">;</span></pre></td></tr><tr><td data-num="19"></td><td><pre>            <span class="token punctuation">&#125;</span></pre></td></tr><tr><td data-num="20"></td><td><pre>            <span class="token keyword">return</span> parent<span class="token punctuation">[</span>x<span class="token punctuation">]</span><span class="token punctuation">;</span></pre></td></tr><tr><td data-num="21"></td><td><pre>        <span class="token punctuation">&#125;</span></pre></td></tr><tr><td data-num="22"></td><td><pre></pre></td></tr><tr><td data-num="23"></td><td><pre>        <span class="token keyword">public</span> <span class="token keyword">boolean</span> <span class="token function">union</span><span class="token punctuation">(</span><span class="token keyword">int</span> x<span class="token punctuation">,</span> <span class="token keyword">int</span> y<span class="token punctuation">)</span> <span class="token punctuation">&#123;</span></pre></td></tr><tr><td data-num="24"></td><td><pre>            <span class="token keyword">int</span> rootX <span class="token operator">=</span> <span class="token function">find</span><span class="token punctuation">(</span>x<span class="token punctuation">)</span><span class="token punctuation">;</span></pre></td></tr><tr><td data-num="25"></td><td><pre>            <span class="token keyword">int</span> rootY <span class="token operator">=</span> <span class="token function">find</span><span class="token punctuation">(</span>y<span class="token punctuation">)</span><span class="token punctuation">;</span></pre></td></tr><tr><td data-num="26"></td><td><pre></pre></td></tr><tr><td data-num="27"></td><td><pre>            <span class="token keyword">if</span> <span class="token punctuation">(</span>rootX <span class="token operator">==</span> rootY<span class="token punctuation">)</span> <span class="token punctuation">&#123;</span></pre></td></tr><tr><td data-num="28"></td><td><pre>                <span class="token keyword">return</span> <span class="token boolean">false</span><span class="token punctuation">;</span></pre></td></tr><tr><td data-num="29"></td><td><pre>            <span class="token punctuation">&#125;</span></pre></td></tr><tr><td data-num="30"></td><td><pre></pre></td></tr><tr><td data-num="31"></td><td><pre>            <span class="token keyword">if</span> <span class="token punctuation">(</span>rank<span class="token punctuation">[</span>rootX<span class="token punctuation">]</span> <span class="token operator">&lt;</span> rank<span class="token punctuation">[</span>rootY<span class="token punctuation">]</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span></pre></td></tr><tr><td data-num="32"></td><td><pre>                <span class="token keyword">int</span> temp <span class="token operator">=</span> rootX<span class="token punctuation">;</span></pre></td></tr><tr><td data-num="33"></td><td><pre>                rootX <span class="token operator">=</span> rootY<span class="token punctuation">;</span></pre></td></tr><tr><td data-num="34"></td><td><pre>                rootY <span class="token operator">=</span> temp<span class="token punctuation">;</span></pre></td></tr><tr><td data-num="35"></td><td><pre>            <span class="token punctuation">&#125;</span></pre></td></tr><tr><td data-num="36"></td><td><pre></pre></td></tr><tr><td data-num="37"></td><td><pre>            parent<span class="token punctuation">[</span>rootY<span class="token punctuation">]</span> <span class="token operator">=</span> rootX<span class="token punctuation">;</span></pre></td></tr><tr><td data-num="38"></td><td><pre></pre></td></tr><tr><td data-num="39"></td><td><pre>            <span class="token keyword">if</span> <span class="token punctuation">(</span>rank<span class="token punctuation">[</span>rootX<span class="token punctuation">]</span> <span class="token operator">==</span> rank<span class="token punctuation">[</span>rootY<span class="token punctuation">]</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span></pre></td></tr><tr><td data-num="40"></td><td><pre>                rank<span class="token punctuation">[</span>rootX<span class="token punctuation">]</span><span class="token operator">++</span><span class="token punctuation">;</span></pre></td></tr><tr><td data-num="41"></td><td><pre>            <span class="token punctuation">&#125;</span></pre></td></tr><tr><td data-num="42"></td><td><pre></pre></td></tr><tr><td data-num="43"></td><td><pre>            count<span class="token operator">--</span><span class="token punctuation">;</span></pre></td></tr><tr><td data-num="44"></td><td><pre></pre></td></tr><tr><td data-num="45"></td><td><pre>            <span class="token keyword">return</span> <span class="token boolean">true</span><span class="token punctuation">;</span></pre></td></tr><tr><td data-num="46"></td><td><pre>        <span class="token punctuation">&#125;</span></pre></td></tr><tr><td data-num="47"></td><td><pre></pre></td></tr><tr><td data-num="48"></td><td><pre>        <span class="token keyword">public</span> <span class="token keyword">int</span> <span class="token function">getCount</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span></pre></td></tr><tr><td data-num="49"></td><td><pre>            <span class="token keyword">return</span> count<span class="token punctuation">;</span></pre></td></tr><tr><td data-num="50"></td><td><pre>        <span class="token punctuation">&#125;</span></pre></td></tr><tr><td data-num="51"></td><td><pre>    <span class="token punctuation">&#125;</span></pre></td></tr><tr><td data-num="52"></td><td><pre></pre></td></tr><tr><td data-num="53"></td><td><pre>    <span class="token keyword">public</span> <span class="token keyword">int</span> <span class="token function">numSimilarGroups</span><span class="token punctuation">(</span><span class="token class-name">String</span><span class="token punctuation">[</span><span class="token punctuation">]</span> strs<span class="token punctuation">)</span> <span class="token punctuation">&#123;</span></pre></td></tr><tr><td data-num="54"></td><td><pre>        <span class="token keyword">int</span> n <span class="token operator">=</span> strs<span class="token punctuation">.</span>length<span class="token punctuation">;</span></pre></td></tr><tr><td data-num="55"></td><td><pre>        <span class="token class-name">UnionFind</span> uf <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">UnionFind</span><span class="token punctuation">(</span>n<span class="token punctuation">)</span><span class="token punctuation">;</span></pre></td></tr><tr><td data-num="56"></td><td><pre></pre></td></tr><tr><td data-num="57"></td><td><pre>        <span class="token keyword">for</span> <span class="token punctuation">(</span><span class="token keyword">int</span> i <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span> i <span class="token operator">&lt;</span> n<span class="token punctuation">;</span> i<span class="token operator">++</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span></pre></td></tr><tr><td data-num="58"></td><td><pre>            <span class="token keyword">for</span> <span class="token punctuation">(</span><span class="token keyword">int</span> j <span class="token operator">=</span> i <span class="token operator">+</span> <span class="token number">1</span><span class="token punctuation">;</span> j <span class="token operator">&lt;</span> n<span class="token punctuation">;</span> j<span class="token operator">++</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span></pre></td></tr><tr><td data-num="59"></td><td><pre>                <span class="token keyword">if</span> <span class="token punctuation">(</span><span class="token function">isSimilar</span><span class="token punctuation">(</span>strs<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">,</span> strs<span class="token punctuation">[</span>j<span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span></pre></td></tr><tr><td data-num="60"></td><td><pre>                    uf<span class="token punctuation">.</span><span class="token function">union</span><span class="token punctuation">(</span>i<span class="token punctuation">,</span> j<span class="token punctuation">)</span><span class="token punctuation">;</span></pre></td></tr><tr><td data-num="61"></td><td><pre>                <span class="token punctuation">&#125;</span></pre></td></tr><tr><td data-num="62"></td><td><pre>            <span class="token punctuation">&#125;</span></pre></td></tr><tr><td data-num="63"></td><td><pre>        <span class="token punctuation">&#125;</span></pre></td></tr><tr><td data-num="64"></td><td><pre></pre></td></tr><tr><td data-num="65"></td><td><pre>        <span class="token keyword">return</span> uf<span class="token punctuation">.</span><span class="token function">getCount</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span></pre></td></tr><tr><td data-num="66"></td><td><pre>    <span class="token punctuation">&#125;</span></pre></td></tr><tr><td data-num="67"></td><td><pre></pre></td></tr><tr><td data-num="68"></td><td><pre>    <span class="token keyword">private</span> <span class="token keyword">boolean</span> <span class="token function">isSimilar</span><span class="token punctuation">(</span><span class="token class-name">String</span> s1<span class="token punctuation">,</span> <span class="token class-name">String</span> s2<span class="token punctuation">)</span> <span class="token punctuation">&#123;</span></pre></td></tr><tr><td data-num="69"></td><td><pre>        <span class="token keyword">if</span> <span class="token punctuation">(</span>s1<span class="token punctuation">.</span><span class="token function">equals</span><span class="token punctuation">(</span>s2<span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span></pre></td></tr><tr><td data-num="70"></td><td><pre>            <span class="token keyword">return</span> <span class="token boolean">true</span><span class="token punctuation">;</span></pre></td></tr><tr><td data-num="71"></td><td><pre>        <span class="token punctuation">&#125;</span></pre></td></tr><tr><td data-num="72"></td><td><pre></pre></td></tr><tr><td data-num="73"></td><td><pre>        <span class="token keyword">int</span> diff <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span></pre></td></tr><tr><td data-num="74"></td><td><pre>        <span class="token keyword">for</span> <span class="token punctuation">(</span><span class="token keyword">int</span> i <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span> i <span class="token operator">&lt;</span> s1<span class="token punctuation">.</span><span class="token function">length</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span> i<span class="token operator">++</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span></pre></td></tr><tr><td data-num="75"></td><td><pre>            <span class="token keyword">if</span> <span class="token punctuation">(</span>s1<span class="token punctuation">.</span><span class="token function">charAt</span><span class="token punctuation">(</span>i<span class="token punctuation">)</span> <span class="token operator">!=</span> s2<span class="token punctuation">.</span><span class="token function">charAt</span><span class="token punctuation">(</span>i<span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span></pre></td></tr><tr><td data-num="76"></td><td><pre>                diff<span class="token operator">++</span><span class="token punctuation">;</span></pre></td></tr><tr><td data-num="77"></td><td><pre>                <span class="token keyword">if</span> <span class="token punctuation">(</span>diff <span class="token operator">></span> <span class="token number">2</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span></pre></td></tr><tr><td data-num="78"></td><td><pre>                    <span class="token keyword">return</span> <span class="token boolean">false</span><span class="token punctuation">;</span></pre></td></tr><tr><td data-num="79"></td><td><pre>                <span class="token punctuation">&#125;</span></pre></td></tr><tr><td data-num="80"></td><td><pre>            <span class="token punctuation">&#125;</span></pre></td></tr><tr><td data-num="81"></td><td><pre>        <span class="token punctuation">&#125;</span></pre></td></tr><tr><td data-num="82"></td><td><pre></pre></td></tr><tr><td data-num="83"></td><td><pre>        <span class="token keyword">return</span> diff <span class="token operator">==</span> <span class="token number">2</span><span class="token punctuation">;</span></pre></td></tr><tr><td data-num="84"></td><td><pre>    <span class="token punctuation">&#125;</span></pre></td></tr><tr><td data-num="85"></td><td><pre><span class="token punctuation">&#125;</span></pre></td></tr></table></figure></div><div class="tab" data-id="code" data-title="Python"><figure class="highlight python"><figcaption data-lang="python"></figcaption><table><tr><td data-num="1"></td><td><pre><span class="token keyword">class</span> <span class="token class-name">UnionFind</span><span class="token punctuation">:</span></pre></td></tr><tr><td data-num="2"></td><td><pre>    <span class="token keyword">def</span> <span class="token function">__init__</span><span class="token punctuation">(</span>self<span class="token punctuation">,</span> n<span class="token punctuation">)</span><span class="token punctuation">:</span></pre></td></tr><tr><td data-num="3"></td><td><pre>        self<span class="token punctuation">.</span>parent <span class="token operator">=</span> <span class="token builtin">list</span><span class="token punctuation">(</span><span class="token builtin">range</span><span class="token punctuation">(</span>n<span class="token punctuation">)</span><span class="token punctuation">)</span></pre></td></tr><tr><td data-num="4"></td><td><pre>        self<span class="token punctuation">.</span>rank <span class="token operator">=</span> <span class="token punctuation">[</span><span class="token number">0</span><span class="token punctuation">]</span> <span class="token operator">*</span> n</pre></td></tr><tr><td data-num="5"></td><td><pre>        self<span class="token punctuation">.</span>count <span class="token operator">=</span> n</pre></td></tr><tr><td data-num="6"></td><td><pre></pre></td></tr><tr><td data-num="7"></td><td><pre>    <span class="token keyword">def</span> <span class="token function">find</span><span class="token punctuation">(</span>self<span class="token punctuation">,</span> x<span class="token punctuation">)</span><span class="token punctuation">:</span></pre></td></tr><tr><td data-num="8"></td><td><pre>        <span class="token keyword">if</span> self<span class="token punctuation">.</span>parent<span class="token punctuation">[</span>x<span class="token punctuation">]</span> <span class="token operator">!=</span> x<span class="token punctuation">:</span></pre></td></tr><tr><td data-num="9"></td><td><pre>            self<span class="token punctuation">.</span>parent<span class="token punctuation">[</span>x<span class="token punctuation">]</span> <span class="token operator">=</span> self<span class="token punctuation">.</span>find<span class="token punctuation">(</span>self<span class="token punctuation">.</span>parent<span class="token punctuation">[</span>x<span class="token punctuation">]</span><span class="token punctuation">)</span></pre></td></tr><tr><td data-num="10"></td><td><pre>        <span class="token keyword">return</span> self<span class="token punctuation">.</span>parent<span class="token punctuation">[</span>x<span class="token punctuation">]</span></pre></td></tr><tr><td data-num="11"></td><td><pre></pre></td></tr><tr><td data-num="12"></td><td><pre>    <span class="token keyword">def</span> <span class="token function">union</span><span class="token punctuation">(</span>self<span class="token punctuation">,</span> x<span class="token punctuation">,</span> y<span class="token punctuation">)</span><span class="token punctuation">:</span></pre></td></tr><tr><td data-num="13"></td><td><pre>        root_x <span class="token operator">=</span> self<span class="token punctuation">.</span>find<span class="token punctuation">(</span>x<span class="token punctuation">)</span></pre></td></tr><tr><td data-num="14"></td><td><pre>        root_y <span class="token operator">=</span> self<span class="token punctuation">.</span>find<span class="token punctuation">(</span>y<span class="token punctuation">)</span></pre></td></tr><tr><td data-num="15"></td><td><pre></pre></td></tr><tr><td data-num="16"></td><td><pre>        <span class="token keyword">if</span> root_x <span class="token operator">==</span> root_y<span class="token punctuation">:</span></pre></td></tr><tr><td data-num="17"></td><td><pre>            <span class="token keyword">return</span> <span class="token boolean">False</span></pre></td></tr><tr><td data-num="18"></td><td><pre></pre></td></tr><tr><td data-num="19"></td><td><pre>        <span class="token keyword">if</span> self<span class="token punctuation">.</span>rank<span class="token punctuation">[</span>root_x<span class="token punctuation">]</span> <span class="token operator">&lt;</span> self<span class="token punctuation">.</span>rank<span class="token punctuation">[</span>root_y<span class="token punctuation">]</span><span class="token punctuation">:</span></pre></td></tr><tr><td data-num="20"></td><td><pre>            root_x<span class="token punctuation">,</span> root_y <span class="token operator">=</span> root_y<span class="token punctuation">,</span> root_x</pre></td></tr><tr><td data-num="21"></td><td><pre></pre></td></tr><tr><td data-num="22"></td><td><pre>        self<span class="token punctuation">.</span>parent<span class="token punctuation">[</span>root_y<span class="token punctuation">]</span> <span class="token operator">=</span> root_x</pre></td></tr><tr><td data-num="23"></td><td><pre></pre></td></tr><tr><td data-num="24"></td><td><pre>        <span class="token keyword">if</span> self<span class="token punctuation">.</span>rank<span class="token punctuation">[</span>root_x<span class="token punctuation">]</span> <span class="token operator">==</span> self<span class="token punctuation">.</span>rank<span class="token punctuation">[</span>root_y<span class="token punctuation">]</span><span class="token punctuation">:</span></pre></td></tr><tr><td data-num="25"></td><td><pre>            self<span class="token punctuation">.</span>rank<span class="token punctuation">[</span>root_x<span class="token punctuation">]</span> <span class="token operator">+=</span> <span class="token number">1</span></pre></td></tr><tr><td data-num="26"></td><td><pre></pre></td></tr><tr><td data-num="27"></td><td><pre>        self<span class="token punctuation">.</span>count <span class="token operator">-=</span> <span class="token number">1</span></pre></td></tr><tr><td data-num="28"></td><td><pre></pre></td></tr><tr><td data-num="29"></td><td><pre>        <span class="token keyword">return</span> <span class="token boolean">True</span></pre></td></tr><tr><td data-num="30"></td><td><pre></pre></td></tr><tr><td data-num="31"></td><td><pre><span class="token keyword">class</span> <span class="token class-name">Solution</span><span class="token punctuation">:</span></pre></td></tr><tr><td data-num="32"></td><td><pre>    <span class="token keyword">def</span> <span class="token function">numSimilarGroups</span><span class="token punctuation">(</span>self<span class="token punctuation">,</span> strs<span class="token punctuation">:</span> List<span class="token punctuation">[</span><span class="token builtin">str</span><span class="token punctuation">]</span><span class="token punctuation">)</span> <span class="token operator">-</span><span class="token operator">></span> <span class="token builtin">int</span><span class="token punctuation">:</span></pre></td></tr><tr><td data-num="33"></td><td><pre>        <span class="token keyword">def</span> <span class="token function">is_similar</span><span class="token punctuation">(</span>s1<span class="token punctuation">,</span> s2<span class="token punctuation">)</span><span class="token punctuation">:</span></pre></td></tr><tr><td data-num="34"></td><td><pre>            <span class="token keyword">if</span> s1 <span class="token operator">==</span> s2<span class="token punctuation">:</span></pre></td></tr><tr><td data-num="35"></td><td><pre>                <span class="token keyword">return</span> <span class="token boolean">True</span></pre></td></tr><tr><td data-num="36"></td><td><pre></pre></td></tr><tr><td data-num="37"></td><td><pre>            diff <span class="token operator">=</span> <span class="token number">0</span></pre></td></tr><tr><td data-num="38"></td><td><pre>            <span class="token keyword">for</span> c1<span class="token punctuation">,</span> c2 <span class="token keyword">in</span> <span class="token builtin">zip</span><span class="token punctuation">(</span>s1<span class="token punctuation">,</span> s2<span class="token punctuation">)</span><span class="token punctuation">:</span></pre></td></tr><tr><td data-num="39"></td><td><pre>                <span class="token keyword">if</span> c1 <span class="token operator">!=</span> c2<span class="token punctuation">:</span></pre></td></tr><tr><td data-num="40"></td><td><pre>                    diff <span class="token operator">+=</span> <span class="token number">1</span></pre></td></tr><tr><td data-num="41"></td><td><pre>                    <span class="token keyword">if</span> diff <span class="token operator">></span> <span class="token number">2</span><span class="token punctuation">:</span></pre></td></tr><tr><td data-num="42"></td><td><pre>                        <span class="token keyword">return</span> <span class="token boolean">False</span></pre></td></tr><tr><td data-num="43"></td><td><pre></pre></td></tr><tr><td data-num="44"></td><td><pre>            <span class="token keyword">return</span> diff <span class="token operator">==</span> <span class="token number">2</span></pre></td></tr><tr><td data-num="45"></td><td><pre></pre></td></tr><tr><td data-num="46"></td><td><pre>        n <span class="token operator">=</span> <span class="token builtin">len</span><span class="token punctuation">(</span>strs<span class="token punctuation">)</span></pre></td></tr><tr><td data-num="47"></td><td><pre>        uf <span class="token operator">=</span> UnionFind<span class="token punctuation">(</span>n<span class="token punctuation">)</span></pre></td></tr><tr><td data-num="48"></td><td><pre></pre></td></tr><tr><td data-num="49"></td><td><pre>        <span class="token keyword">for</span> i <span class="token keyword">in</span> <span class="token builtin">range</span><span class="token punctuation">(</span>n<span class="token punctuation">)</span><span class="token punctuation">:</span></pre></td></tr><tr><td data-num="50"></td><td><pre>            <span class="token keyword">for</span> j <span class="token keyword">in</span> <span class="token builtin">range</span><span class="token punctuation">(</span>i <span class="token operator">+</span> <span class="token number">1</span><span class="token punctuation">,</span> n<span class="token punctuation">)</span><span class="token punctuation">:</span></pre></td></tr><tr><td data-num="51"></td><td><pre>                <span class="token keyword">if</span> is_similar<span class="token punctuation">(</span>strs<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">,</span> strs<span class="token punctuation">[</span>j<span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token punctuation">:</span></pre></td></tr><tr><td data-num="52"></td><td><pre>                    uf<span class="token punctuation">.</span>union<span class="token punctuation">(</span>i<span class="token punctuation">,</span> j<span class="token punctuation">)</span></pre></td></tr><tr><td data-num="53"></td><td><pre></pre></td></tr><tr><td data-num="54"></td><td><pre>        <span class="token keyword">return</span> uf<span class="token punctuation">.</span>count</pre></td></tr></table></figure></div>]]></content>
      
      
      <categories>
          
          <category> Coding </category>
          
          <category> Leetcode </category>
          
          <category> Hard </category>
          
      </categories>
      
      
        <tags>
            
            <tag> Union Find </tag>
            
            <tag> String </tag>
            
            <tag> Leetcode </tag>
            
            <tag> Array </tag>
            
            <tag> Depth-First Search </tag>
            
            <tag> Breadth-First Search </tag>
            
            <tag> Hard </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>319. Bulb Switcher</title>
      <link href="/2023/04/27/Coding/leetcode/Medium/319%20Bulb%20Switcher/"/>
      <url>/2023/04/27/Coding/leetcode/Medium/319%20Bulb%20Switcher/</url>
      
        <content type="html"><![CDATA[<p>⭐️⭐️</p><h2 id="題目敘述"><a class="anchor" href="#題目敘述">#</a> <span class="exturl" data-url="aHR0cHM6Ly9sZWV0Y29kZS5jb20vcHJvYmxlbXMvYnVsYi1zd2l0Y2hlci8=">題目敘述</span></h2><p>There are  <code>n</code>  bulbs that are initially off. You first turn on all the bulbs, then you turn off every second bulb.</p><p>On the third round, you toggle every third bulb (turning on if it’s off or turning off if it’s on). For the  <code>ith</code>  round, you toggle every  <code>i</code>  bulb. For the  <code>nth</code>  round, you only toggle the last bulb.</p><p>Return <em>the number of bulbs that are on after  <code>n</code>  rounds</em>.</p><h3 id="example-1"><a class="anchor" href="#example-1">#</a> Example 1</h3><p><img data-src="https://i.imgur.com/JSh0QO5.png" alt=""></p><blockquote><p><strong>Input:</strong> n = 3<br><strong>Output:</strong> 1<br><strong>Explanation:</strong> At first, the three bulbs are [off, off, off].<br>After the first round, the three bulbs are [on, on, on].<br>After the second round, the three bulbs are [on, off, on].<br>After the third round, the three bulbs are [on, off, off].<br>So you should return 1 because there is only one bulb is on.</p></blockquote><h3 id="example-2"><a class="anchor" href="#example-2">#</a> Example 2</h3><blockquote><p><strong>Input:</strong> n = 0<br><strong>Output:</strong> 0</p></blockquote><h3 id="example-3"><a class="anchor" href="#example-3">#</a> Example 3</h3><blockquote><p><strong>Input:</strong> n = 1<br><strong>Output:</strong> 1</p></blockquote><h2 id="solution"><a class="anchor" href="#solution">#</a> Solution</h2><div class="tab" data-id="code" data-title="C++"><figure class="highlight cpp"><figcaption data-lang="C++"></figcaption><table><tr><td data-num="1"></td><td><pre><span class="token keyword">class</span> <span class="token class-name">Solution</span> <span class="token punctuation">&#123;</span></pre></td></tr><tr><td data-num="2"></td><td><pre><span class="token keyword">public</span><span class="token operator">:</span></pre></td></tr><tr><td data-num="3"></td><td><pre>    <span class="token keyword">int</span> <span class="token function">bulbSwitch</span><span class="token punctuation">(</span><span class="token keyword">int</span> n<span class="token punctuation">)</span> <span class="token punctuation">&#123;</span></pre></td></tr><tr><td data-num="4"></td><td><pre>        <span class="token keyword">return</span> <span class="token punctuation">(</span><span class="token keyword">int</span><span class="token punctuation">)</span> <span class="token function">sqrt</span><span class="token punctuation">(</span>n<span class="token punctuation">)</span><span class="token punctuation">;</span></pre></td></tr><tr><td data-num="5"></td><td><pre>    <span class="token punctuation">&#125;</span></pre></td></tr><tr><td data-num="6"></td><td><pre><span class="token punctuation">&#125;</span><span class="token punctuation">;</span></pre></td></tr></table></figure></div><div class="tab" data-id="code" data-title="Java"><figure class="highlight java"><figcaption data-lang="java"></figcaption><table><tr><td data-num="1"></td><td><pre><span class="token keyword">class</span> <span class="token class-name">Solution</span> <span class="token punctuation">&#123;</span></pre></td></tr><tr><td data-num="2"></td><td><pre>    <span class="token keyword">public</span> <span class="token keyword">int</span> <span class="token function">bulbSwitch</span><span class="token punctuation">(</span><span class="token keyword">int</span> n<span class="token punctuation">)</span> <span class="token punctuation">&#123;</span></pre></td></tr><tr><td data-num="3"></td><td><pre>        <span class="token keyword">return</span> <span class="token punctuation">(</span><span class="token keyword">int</span><span class="token punctuation">)</span><span class="token class-name">Math</span><span class="token punctuation">.</span><span class="token function">sqrt</span><span class="token punctuation">(</span>n<span class="token punctuation">)</span><span class="token punctuation">;</span></pre></td></tr><tr><td data-num="4"></td><td><pre>    <span class="token punctuation">&#125;</span></pre></td></tr><tr><td data-num="5"></td><td><pre><span class="token punctuation">&#125;</span></pre></td></tr></table></figure></div><div class="tab" data-id="code" data-title="Python"><figure class="highlight python"><figcaption data-lang="python"></figcaption><table><tr><td data-num="1"></td><td><pre><span class="token keyword">class</span> <span class="token class-name">Solution</span><span class="token punctuation">:</span></pre></td></tr><tr><td data-num="2"></td><td><pre>    <span class="token keyword">def</span> <span class="token function">bulbSwitch</span><span class="token punctuation">(</span>self<span class="token punctuation">,</span> n<span class="token punctuation">:</span> <span class="token builtin">int</span><span class="token punctuation">)</span> <span class="token operator">-</span><span class="token operator">></span> <span class="token builtin">int</span><span class="token punctuation">:</span> <span class="token keyword">return</span> <span class="token builtin">int</span><span class="token punctuation">(</span>sqrt<span class="token punctuation">(</span>n<span class="token punctuation">)</span><span class="token punctuation">)</span></pre></td></tr></table></figure></div>]]></content>
      
      
      <categories>
          
          <category> Coding </category>
          
          <category> Leetcode </category>
          
      </categories>
      
      
        <tags>
            
            <tag> Leetcode </tag>
            
            <tag> Math </tag>
            
            <tag> Medium </tag>
            
            <tag> Brainteaser </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>uva 706 - LC-Display</title>
      <link href="/2023/04/26/Coding/uva/Star1/uva%20706/"/>
      <url>/2023/04/26/Coding/uva/Star1/uva%20706/</url>
      
        <content type="html"><![CDATA[<p>⭐️</p><h2 id="題目連結"><a class="anchor" href="#題目連結">#</a> 題目連結</h2><ul><li><span class="exturl" data-url="aHR0cHM6Ly96ZXJvanVkZ2UudHcvU2hvd1Byb2JsZW0/cHJvYmxlbWlkPWMxMzU=">ZeroJudge</span></li><li><span class="exturl" data-url="aHR0cHM6Ly9vbmxpbmVqdWRnZS5vcmcvZXh0ZXJuYWwvNy9wNzA2LnBkZg==">題目連結</span></li><li><span class="exturl" data-url="aHR0cHM6Ly9vbmxpbmVqdWRnZS5vcmcvaW5kZXgucGhwP29wdGlvbj1jb21fb25saW5lanVkZ2UmYW1wO0l0ZW1pZD04JmFtcDtjYXRlZ29yeT05JmFtcDtwYWdlPXNob3dfcHJvYmxlbSZhbXA7cHJvYmxlbT02NDc=">Online Judge</span></li><li><span class="exturl" data-url="aHR0cHM6Ly93d3cudWRlYnVnLmNvbS9VVmEvNzA2">uDebug</span></li></ul><h2 id="題目敘述"><a class="anchor" href="#題目敘述">#</a> 題目敘述</h2><p>A friend of you has just bought a new computer. Until now, the most powerful computer he ever used has been a pocket calculator. Now, looking at his new computer, he is a bit disappointed, because he liked the LC-display of his calculator so much. So you decide to write a program that displays numbers in an LC-display-like style on his computer.</p><h2 id="input"><a class="anchor" href="#input">#</a> Input</h2><p>The input file contains several lines, one for each number to be displayed. Each line contains two integers  <code>s</code> ,  <code>n</code>  ( <code>1 ≤ s ≤ 10</code> ,  <code>0 ≤ n ≤ 99 999 999</code> ), where  <code>n</code>  is the number to be displayed and  <code>s</code>  is the size in which it shall be displayed.</p><p>The input file will be terminated by a line containing two zeros. This line should not be processed.</p><h2 id="output"><a class="anchor" href="#output">#</a> Output</h2><p>Output the numbers given in the input file in an LC-display-style using  <code>s</code>  ‘-’ signs for the horizontal segments and  <code>s</code>  ‘|’ signs for the vertical ones. Each digit occupies exactly  <code>s + 2</code>  columns and  <code>2s + 3</code>  rows. (Be sure to fill all the white space occupied by the digits with blanks, also for the last digit.) <em>There has to be exactly one column of blanks between two digits</em>.</p><p><em>Output a blank line after each number</em>. (You will find a sample of each digit in the sample output.)</p><h2 id="sample-input"><a class="anchor" href="#sample-input">#</a> Sample Input</h2><blockquote><p>2 12345<br>3 67890<br>0 0</p></blockquote><h2 id="sample-output"><a class="anchor" href="#sample-output">#</a> Sample Output</h2><p><img data-src="https://i.imgur.com/1yA2BuX.png" alt=""></p><h2 id="solution"><a class="anchor" href="#solution">#</a> Solution</h2><figure class="highlight c"><figcaption data-lang="c"></figcaption><table><tr><td data-num="1"></td><td><pre><span class="token macro property"><span class="token directive-hash">#</span><span class="token directive keyword">include</span> <span class="token string">&lt;bits/stdc++.h></span></span></pre></td></tr><tr><td data-num="2"></td><td><pre></pre></td></tr><tr><td data-num="3"></td><td><pre>using namespace std<span class="token punctuation">;</span></pre></td></tr><tr><td data-num="4"></td><td><pre></pre></td></tr><tr><td data-num="5"></td><td><pre><span class="token keyword">int</span> <span class="token function">main</span> <span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span></pre></td></tr><tr><td data-num="6"></td><td><pre>    <span class="token keyword">int</span> s<span class="token punctuation">;</span></pre></td></tr><tr><td data-num="7"></td><td><pre>    string str<span class="token punctuation">;</span></pre></td></tr><tr><td data-num="8"></td><td><pre>    map<span class="token operator">&lt;</span><span class="token keyword">char</span><span class="token punctuation">,</span> vector<span class="token operator">&lt;</span>bool<span class="token operator">>></span> mp<span class="token punctuation">;</span></pre></td></tr><tr><td data-num="9"></td><td><pre>    mp<span class="token punctuation">[</span><span class="token char">'0'</span><span class="token punctuation">]</span> <span class="token operator">=</span> <span class="token punctuation">&#123;</span>true<span class="token punctuation">,</span> true<span class="token punctuation">,</span> true<span class="token punctuation">,</span> false<span class="token punctuation">,</span> true<span class="token punctuation">,</span> true<span class="token punctuation">,</span> true<span class="token punctuation">&#125;</span><span class="token punctuation">;</span></pre></td></tr><tr><td data-num="10"></td><td><pre>    mp<span class="token punctuation">[</span><span class="token char">'1'</span><span class="token punctuation">]</span> <span class="token operator">=</span> <span class="token punctuation">&#123;</span>false<span class="token punctuation">,</span> false<span class="token punctuation">,</span> true<span class="token punctuation">,</span> false<span class="token punctuation">,</span> false<span class="token punctuation">,</span> true<span class="token punctuation">,</span> false<span class="token punctuation">&#125;</span><span class="token punctuation">;</span></pre></td></tr><tr><td data-num="11"></td><td><pre>    mp<span class="token punctuation">[</span><span class="token char">'2'</span><span class="token punctuation">]</span> <span class="token operator">=</span> <span class="token punctuation">&#123;</span>true<span class="token punctuation">,</span> false<span class="token punctuation">,</span> true<span class="token punctuation">,</span> true<span class="token punctuation">,</span> true<span class="token punctuation">,</span> false<span class="token punctuation">,</span> true<span class="token punctuation">&#125;</span><span class="token punctuation">;</span></pre></td></tr><tr><td data-num="12"></td><td><pre>    mp<span class="token punctuation">[</span><span class="token char">'3'</span><span class="token punctuation">]</span> <span class="token operator">=</span> <span class="token punctuation">&#123;</span>true<span class="token punctuation">,</span> false<span class="token punctuation">,</span> true<span class="token punctuation">,</span> true<span class="token punctuation">,</span> false<span class="token punctuation">,</span> true<span class="token punctuation">,</span> true<span class="token punctuation">&#125;</span><span class="token punctuation">;</span></pre></td></tr><tr><td data-num="13"></td><td><pre>    mp<span class="token punctuation">[</span><span class="token char">'4'</span><span class="token punctuation">]</span> <span class="token operator">=</span> <span class="token punctuation">&#123;</span>false<span class="token punctuation">,</span> true<span class="token punctuation">,</span> true<span class="token punctuation">,</span> true<span class="token punctuation">,</span> false<span class="token punctuation">,</span> true<span class="token punctuation">,</span> false<span class="token punctuation">&#125;</span><span class="token punctuation">;</span></pre></td></tr><tr><td data-num="14"></td><td><pre>    mp<span class="token punctuation">[</span><span class="token char">'5'</span><span class="token punctuation">]</span> <span class="token operator">=</span> <span class="token punctuation">&#123;</span>true<span class="token punctuation">,</span> true<span class="token punctuation">,</span> false<span class="token punctuation">,</span> true<span class="token punctuation">,</span> false<span class="token punctuation">,</span> true<span class="token punctuation">,</span> true<span class="token punctuation">&#125;</span><span class="token punctuation">;</span></pre></td></tr><tr><td data-num="15"></td><td><pre>    mp<span class="token punctuation">[</span><span class="token char">'6'</span><span class="token punctuation">]</span> <span class="token operator">=</span> <span class="token punctuation">&#123;</span>true<span class="token punctuation">,</span> true<span class="token punctuation">,</span> false<span class="token punctuation">,</span> true<span class="token punctuation">,</span> true<span class="token punctuation">,</span> true<span class="token punctuation">,</span> true<span class="token punctuation">&#125;</span><span class="token punctuation">;</span></pre></td></tr><tr><td data-num="16"></td><td><pre>    mp<span class="token punctuation">[</span><span class="token char">'7'</span><span class="token punctuation">]</span> <span class="token operator">=</span> <span class="token punctuation">&#123;</span>true<span class="token punctuation">,</span> false<span class="token punctuation">,</span> true<span class="token punctuation">,</span> false<span class="token punctuation">,</span> false<span class="token punctuation">,</span> true<span class="token punctuation">,</span> false<span class="token punctuation">&#125;</span><span class="token punctuation">;</span></pre></td></tr><tr><td data-num="17"></td><td><pre>    mp<span class="token punctuation">[</span><span class="token char">'8'</span><span class="token punctuation">]</span> <span class="token operator">=</span> <span class="token punctuation">&#123;</span>true<span class="token punctuation">,</span> true<span class="token punctuation">,</span> true<span class="token punctuation">,</span> true<span class="token punctuation">,</span> true<span class="token punctuation">,</span> true<span class="token punctuation">,</span> true<span class="token punctuation">&#125;</span><span class="token punctuation">;</span></pre></td></tr><tr><td data-num="18"></td><td><pre>    mp<span class="token punctuation">[</span><span class="token char">'9'</span><span class="token punctuation">]</span> <span class="token operator">=</span> <span class="token punctuation">&#123;</span>true<span class="token punctuation">,</span> true<span class="token punctuation">,</span> true<span class="token punctuation">,</span> true<span class="token punctuation">,</span> false<span class="token punctuation">,</span> true<span class="token punctuation">,</span> true<span class="token punctuation">&#125;</span><span class="token punctuation">;</span></pre></td></tr><tr><td data-num="19"></td><td><pre>    <span class="token keyword">while</span> <span class="token punctuation">(</span>cin <span class="token operator">>></span> s <span class="token operator">>></span> str<span class="token punctuation">)</span> <span class="token punctuation">&#123;</span></pre></td></tr><tr><td data-num="20"></td><td><pre>        <span class="token keyword">if</span> <span class="token punctuation">(</span>s <span class="token operator">==</span> <span class="token number">0</span> <span class="token operator">&amp;&amp;</span> str <span class="token operator">==</span> <span class="token string">"0"</span><span class="token punctuation">)</span> <span class="token keyword">break</span><span class="token punctuation">;</span></pre></td></tr><tr><td data-num="21"></td><td><pre>        string l1 <span class="token operator">=</span> <span class="token string">""</span><span class="token punctuation">,</span> l2 <span class="token operator">=</span> <span class="token string">""</span><span class="token punctuation">,</span> l3 <span class="token operator">=</span> <span class="token string">""</span><span class="token punctuation">,</span> l4 <span class="token operator">=</span> <span class="token string">""</span><span class="token punctuation">,</span> l5 <span class="token operator">=</span> <span class="token string">""</span><span class="token punctuation">;</span></pre></td></tr><tr><td data-num="22"></td><td><pre>        <span class="token keyword">for</span> <span class="token punctuation">(</span><span class="token keyword">int</span> j<span class="token operator">=</span><span class="token number">0</span><span class="token punctuation">;</span> j<span class="token operator">&lt;</span>str<span class="token punctuation">.</span><span class="token function">size</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span> j<span class="token operator">++</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span></pre></td></tr><tr><td data-num="23"></td><td><pre>            <span class="token keyword">char</span> c <span class="token operator">=</span> str<span class="token punctuation">[</span>j<span class="token punctuation">]</span><span class="token punctuation">;</span></pre></td></tr><tr><td data-num="24"></td><td><pre>            vector<span class="token operator">&lt;</span>bool<span class="token operator">></span> tmp <span class="token operator">=</span> mp<span class="token punctuation">[</span>c<span class="token punctuation">]</span><span class="token punctuation">;</span></pre></td></tr><tr><td data-num="25"></td><td><pre>            l1 <span class="token operator">+=</span> <span class="token string">" "</span><span class="token punctuation">;</span></pre></td></tr><tr><td data-num="26"></td><td><pre>            <span class="token keyword">if</span> <span class="token punctuation">(</span>tmp<span class="token punctuation">[</span><span class="token number">0</span><span class="token punctuation">]</span> <span class="token operator">==</span> true<span class="token punctuation">)</span> <span class="token keyword">for</span> <span class="token punctuation">(</span><span class="token keyword">int</span> i<span class="token operator">=</span><span class="token number">1</span><span class="token punctuation">;</span> i<span class="token operator">&lt;=</span>s<span class="token punctuation">;</span> i<span class="token operator">++</span><span class="token punctuation">)</span> l1 <span class="token operator">+=</span> <span class="token string">"-"</span><span class="token punctuation">;</span></pre></td></tr><tr><td data-num="27"></td><td><pre>            <span class="token keyword">else</span> <span class="token keyword">for</span> <span class="token punctuation">(</span><span class="token keyword">int</span> i<span class="token operator">=</span><span class="token number">1</span><span class="token punctuation">;</span> i<span class="token operator">&lt;=</span>s<span class="token punctuation">;</span> i<span class="token operator">++</span><span class="token punctuation">)</span> l1 <span class="token operator">+=</span> <span class="token string">" "</span><span class="token punctuation">;</span></pre></td></tr><tr><td data-num="28"></td><td><pre>            l1 <span class="token operator">+=</span> <span class="token string">" "</span><span class="token punctuation">;</span></pre></td></tr><tr><td data-num="29"></td><td><pre></pre></td></tr><tr><td data-num="30"></td><td><pre>            <span class="token keyword">if</span> <span class="token punctuation">(</span>tmp<span class="token punctuation">[</span><span class="token number">1</span><span class="token punctuation">]</span> <span class="token operator">==</span> true<span class="token punctuation">)</span> l2 <span class="token operator">+=</span> <span class="token string">"|"</span><span class="token punctuation">;</span></pre></td></tr><tr><td data-num="31"></td><td><pre>            <span class="token keyword">else</span> l2 <span class="token operator">+=</span> <span class="token string">" "</span><span class="token punctuation">;</span></pre></td></tr><tr><td data-num="32"></td><td><pre>            <span class="token keyword">for</span> <span class="token punctuation">(</span><span class="token keyword">int</span> i<span class="token operator">=</span><span class="token number">1</span><span class="token punctuation">;</span> i<span class="token operator">&lt;=</span>s<span class="token punctuation">;</span> i<span class="token operator">++</span><span class="token punctuation">)</span> l2 <span class="token operator">+=</span> <span class="token string">" "</span><span class="token punctuation">;</span></pre></td></tr><tr><td data-num="33"></td><td><pre>            <span class="token keyword">if</span> <span class="token punctuation">(</span>tmp<span class="token punctuation">[</span><span class="token number">2</span><span class="token punctuation">]</span> <span class="token operator">==</span> true<span class="token punctuation">)</span> l2 <span class="token operator">+=</span> <span class="token string">"|"</span><span class="token punctuation">;</span></pre></td></tr><tr><td data-num="34"></td><td><pre>            <span class="token keyword">else</span> l2 <span class="token operator">+=</span> <span class="token string">" "</span><span class="token punctuation">;</span></pre></td></tr><tr><td data-num="35"></td><td><pre></pre></td></tr><tr><td data-num="36"></td><td><pre>            l3 <span class="token operator">+=</span> <span class="token string">" "</span><span class="token punctuation">;</span></pre></td></tr><tr><td data-num="37"></td><td><pre>            <span class="token keyword">if</span> <span class="token punctuation">(</span>tmp<span class="token punctuation">[</span><span class="token number">3</span><span class="token punctuation">]</span> <span class="token operator">==</span> true<span class="token punctuation">)</span> <span class="token keyword">for</span> <span class="token punctuation">(</span><span class="token keyword">int</span> i<span class="token operator">=</span><span class="token number">1</span><span class="token punctuation">;</span> i<span class="token operator">&lt;=</span>s<span class="token punctuation">;</span> i<span class="token operator">++</span><span class="token punctuation">)</span> l3 <span class="token operator">+=</span> <span class="token string">"-"</span><span class="token punctuation">;</span></pre></td></tr><tr><td data-num="38"></td><td><pre>            <span class="token keyword">else</span> <span class="token keyword">for</span> <span class="token punctuation">(</span><span class="token keyword">int</span> i<span class="token operator">=</span><span class="token number">1</span><span class="token punctuation">;</span> i<span class="token operator">&lt;=</span>s<span class="token punctuation">;</span> i<span class="token operator">++</span><span class="token punctuation">)</span> l3 <span class="token operator">+=</span> <span class="token string">" "</span><span class="token punctuation">;</span></pre></td></tr><tr><td data-num="39"></td><td><pre>            l3 <span class="token operator">+=</span> <span class="token string">" "</span><span class="token punctuation">;</span></pre></td></tr><tr><td data-num="40"></td><td><pre></pre></td></tr><tr><td data-num="41"></td><td><pre>            <span class="token keyword">if</span> <span class="token punctuation">(</span>tmp<span class="token punctuation">[</span><span class="token number">4</span><span class="token punctuation">]</span> <span class="token operator">==</span> true<span class="token punctuation">)</span> l4 <span class="token operator">+=</span> <span class="token string">"|"</span><span class="token punctuation">;</span></pre></td></tr><tr><td data-num="42"></td><td><pre>            <span class="token keyword">else</span> l4 <span class="token operator">+=</span> <span class="token string">" "</span><span class="token punctuation">;</span></pre></td></tr><tr><td data-num="43"></td><td><pre>            <span class="token keyword">for</span> <span class="token punctuation">(</span><span class="token keyword">int</span> i<span class="token operator">=</span><span class="token number">1</span><span class="token punctuation">;</span> i<span class="token operator">&lt;=</span>s<span class="token punctuation">;</span> i<span class="token operator">++</span><span class="token punctuation">)</span> l4 <span class="token operator">+=</span> <span class="token string">" "</span><span class="token punctuation">;</span></pre></td></tr><tr><td data-num="44"></td><td><pre>            <span class="token keyword">if</span> <span class="token punctuation">(</span>tmp<span class="token punctuation">[</span><span class="token number">5</span><span class="token punctuation">]</span> <span class="token operator">==</span> true<span class="token punctuation">)</span> l4 <span class="token operator">+=</span> <span class="token string">"|"</span><span class="token punctuation">;</span></pre></td></tr><tr><td data-num="45"></td><td><pre>            <span class="token keyword">else</span> l4 <span class="token operator">+=</span> <span class="token string">" "</span><span class="token punctuation">;</span></pre></td></tr><tr><td data-num="46"></td><td><pre></pre></td></tr><tr><td data-num="47"></td><td><pre>            l5 <span class="token operator">+=</span> <span class="token string">" "</span><span class="token punctuation">;</span></pre></td></tr><tr><td data-num="48"></td><td><pre>            <span class="token keyword">if</span> <span class="token punctuation">(</span>tmp<span class="token punctuation">[</span><span class="token number">6</span><span class="token punctuation">]</span> <span class="token operator">==</span> true<span class="token punctuation">)</span> <span class="token keyword">for</span> <span class="token punctuation">(</span><span class="token keyword">int</span> i<span class="token operator">=</span><span class="token number">1</span><span class="token punctuation">;</span> i<span class="token operator">&lt;=</span>s<span class="token punctuation">;</span> i<span class="token operator">++</span><span class="token punctuation">)</span> l5 <span class="token operator">+=</span> <span class="token string">"-"</span><span class="token punctuation">;</span></pre></td></tr><tr><td data-num="49"></td><td><pre>            <span class="token keyword">else</span> <span class="token keyword">for</span> <span class="token punctuation">(</span><span class="token keyword">int</span> i<span class="token operator">=</span><span class="token number">1</span><span class="token punctuation">;</span> i<span class="token operator">&lt;=</span>s<span class="token punctuation">;</span> i<span class="token operator">++</span><span class="token punctuation">)</span> l5 <span class="token operator">+=</span> <span class="token string">" "</span><span class="token punctuation">;</span></pre></td></tr><tr><td data-num="50"></td><td><pre>            l5 <span class="token operator">+=</span> <span class="token string">" "</span><span class="token punctuation">;</span></pre></td></tr><tr><td data-num="51"></td><td><pre></pre></td></tr><tr><td data-num="52"></td><td><pre>            <span class="token keyword">if</span> <span class="token punctuation">(</span>j <span class="token operator">!=</span> str<span class="token punctuation">.</span><span class="token function">size</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">-</span> <span class="token number">1</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span></pre></td></tr><tr><td data-num="53"></td><td><pre>                l1 <span class="token operator">+=</span> <span class="token string">" "</span><span class="token punctuation">;</span> l2 <span class="token operator">+=</span> <span class="token string">" "</span><span class="token punctuation">;</span> l3 <span class="token operator">+=</span> <span class="token string">" "</span><span class="token punctuation">;</span> l4 <span class="token operator">+=</span> <span class="token string">" "</span><span class="token punctuation">;</span> l5 <span class="token operator">+=</span> <span class="token string">" "</span><span class="token punctuation">;</span></pre></td></tr><tr><td data-num="54"></td><td><pre>            <span class="token punctuation">&#125;</span> </pre></td></tr><tr><td data-num="55"></td><td><pre>                </pre></td></tr><tr><td data-num="56"></td><td><pre>        <span class="token punctuation">&#125;</span></pre></td></tr><tr><td data-num="57"></td><td><pre></pre></td></tr><tr><td data-num="58"></td><td><pre>        cout <span class="token operator">&lt;&lt;</span> l1 <span class="token operator">&lt;&lt;</span> endl<span class="token punctuation">;</span></pre></td></tr><tr><td data-num="59"></td><td><pre>        <span class="token keyword">for</span> <span class="token punctuation">(</span><span class="token keyword">int</span> i<span class="token operator">=</span><span class="token number">1</span><span class="token punctuation">;</span> i<span class="token operator">&lt;=</span>s<span class="token punctuation">;</span> i<span class="token operator">++</span><span class="token punctuation">)</span> cout <span class="token operator">&lt;&lt;</span> l2 <span class="token operator">&lt;&lt;</span> endl<span class="token punctuation">;</span></pre></td></tr><tr><td data-num="60"></td><td><pre>        cout <span class="token operator">&lt;&lt;</span> l3 <span class="token operator">&lt;&lt;</span> endl<span class="token punctuation">;</span></pre></td></tr><tr><td data-num="61"></td><td><pre>        <span class="token keyword">for</span> <span class="token punctuation">(</span><span class="token keyword">int</span> i<span class="token operator">=</span><span class="token number">1</span><span class="token punctuation">;</span> i<span class="token operator">&lt;=</span>s<span class="token punctuation">;</span> i<span class="token operator">++</span><span class="token punctuation">)</span> cout <span class="token operator">&lt;&lt;</span> l4 <span class="token operator">&lt;&lt;</span> endl<span class="token punctuation">;</span></pre></td></tr><tr><td data-num="62"></td><td><pre>        cout <span class="token operator">&lt;&lt;</span> l5 <span class="token operator">&lt;&lt;</span> endl <span class="token operator">&lt;&lt;</span> endl<span class="token punctuation">;</span></pre></td></tr><tr><td data-num="63"></td><td><pre>    <span class="token punctuation">&#125;</span></pre></td></tr><tr><td data-num="64"></td><td><pre>    <span class="token keyword">return</span> <span class="token number">0</span><span class="token punctuation">;</span></pre></td></tr><tr><td data-num="65"></td><td><pre><span class="token punctuation">&#125;</span></pre></td></tr></table></figure>]]></content>
      
      
      <categories>
          
          <category> Coding </category>
          
          <category> UVA </category>
          
          <category> Star1 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> Star1 </tag>
            
            <tag> CPE </tag>
            
            <tag> UVA </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>Assemblers</title>
      <link href="/2023/04/26/System%20Software/ch02%20Assembler/"/>
      <url>/2023/04/26/System%20Software/ch02%20Assembler/</url>
      
        <content type="html"><![CDATA[<p><img data-src="https://i.imgur.com/hSiRp3g.png" alt=""></p><h2 id="introduction"><a class="anchor" href="#introduction">#</a> Introduction</h2><p>Design and implementation of assemblers</p><ul><li>Some <strong>common fundamental functions</strong> such as:<ul><li>translating <strong>mnemonic operation codes</strong> to their <strong>machine language</strong> equivalents</li><li>assigning machine <strong>addresses</strong> to <strong>symbolic labels</strong> used by the programmer.</li></ul></li><li>The features and design of an assembler depend heavily upon the source language it translates and the machine language it produces.</li><li><strong>Machine dependent/independent features</strong></li></ul><h2 id="basic-assembler-functions"><a class="anchor" href="#basic-assembler-functions">#</a> Basic Assembler Functions</h2><ul><li><p><a href="/bi01pjLMRFKh0euMhhuPGQ?view#Example-of-SIC-Assembly-Program"><strong>Example of SIC assembler language program</strong></a></p></li><li><p><strong>Assembler Directive</strong>: 在組語程式中，用來告訴 Assembler 某些資訊或是該做哪些動作，不屬於 CPU 的指令</p><ul><li><code>START</code> : specify <strong>name</strong> and <strong>starting address</strong> for the program.</li><li><code>END</code> : indicate the <strong>end of the source program</strong> and (optionally) specify the first executable instruction in the program.</li><li><strong>Variable/Constant Declaration</strong><ul><li><code>BYTE</code></li><li><code>WORD</code></li><li><code>RESB</code></li><li><code>RESW</code></li></ul></li></ul></li><li><p>The line numbers are for reference only and are not part of the program</p></li></ul><h3 id="a-simple-sic-assembler"><a class="anchor" href="#a-simple-sic-assembler">#</a> A Simple SIC Assembler</h3><ul><li>The translation of source program to object code requires us to accomplish the following functions<br>(not necessarily in the order given)<ol><li>Convert <strong>mnemonic operation codes</strong> to their machine <strong>language equivalents</strong><ul><li>translate STL to 14 (line 10)</li></ul></li><li>Convert <strong>symbolic operands</strong> to their equivalent <strong>machine addresses</strong><ul><li>translate RETADR to 1033 (line 10)</li></ul></li><li>Build the <strong>machine instruction</strong> in the <strong>proper format</strong>.</li><li>Convert the <strong>data constants</strong> specified in the source program into their <strong>internal machine representations</strong><ul><li>translate EOF to 454F46 (line 80)</li></ul></li><li><strong>Write the object program</strong> and the <strong>assembly listing</strong>.</li></ol></li></ul><h3 id="forward-reference-two-passes"><a class="anchor" href="#forward-reference-two-passes">#</a> Forward Reference &amp; Two Passes</h3><ul><li>The instruction at line 10 contains a <font>forward reference</font>.<ul><li>Line 10 存取  <code>RETADR</code> ，但  <code>RETADR</code>  在 line 95 才定義</li></ul></li><li>Because of forward reference, most assemblers make <strong>two passes</strong> over the source program.<ul><li><strong>The first pass</strong>:<ul><li>does little more than scan the source program for <strong>label definitions</strong> and <strong>assign addresses</strong>.</li></ul></li><li><strong>The second pass</strong>:<ul><li>performs most of the <strong>actual translation</strong> previously described.</li></ul></li></ul></li><li>In addition, the assembler must <strong>process statements</strong> called <font>assembler directives</font> (or <font>pseudo-instructions</font>).</li></ul><h3 id="simple-object-program"><a class="anchor" href="#simple-object-program">#</a> Simple Object Program</h3><ul><li>The simple object program format we use contains <strong>three types of records</strong>.<ul><li><strong>Header</strong><ul><li>program name</li><li>starting address</li><li>length</li></ul></li><li><strong>Text</strong><ul><li>translated instructions</li><li>data</li><li>indication of the addresses where these are to be loaded</li></ul></li><li><strong>End</strong><ul><li>marks the end of the object program</li><li>specifies the address in the program where execution is to begin</li></ul></li></ul></li></ul><p><strong>Header record</strong>:</p><ul><li>Col. 1: H</li><li>Col. 2-7: Program name</li><li>Col. 8-13: starting address of object program</li><li>Col. 14-19: length of object program in bytes</li></ul><p><strong>Text record</strong>:</p><ul><li>Col. 1: T</li><li>Col. 2-7: starting address for object code in this record</li><li>Col. 8-9: length of object code in this record in bytes</li><li>Col. 10-69: object code, represented in <strong>hexadecimal</strong></li></ul><div class="note info"><ul><li>Object code 的部分可以容納 60 個 <strong>symbol</strong>（每個 4 bit），若以 byte 計算就是 30 bytes。</li><li>一個 instruction 長 3 bytes，所以可以放 10 個 instructions</li><li>在指令不連續時（通常是中間有宣告變數），會在沒填滿的情況下使用新的 text record。</li></ul></div><p><strong>End record</strong>:</p><ul><li>Col.1: E</li><li>Col. 2-7: address of first executable instruction in object program</li></ul><p><img data-src="https://i.imgur.com/K3uyzDu.jpg" alt=""></p><ul><li>There is no object code corresponding to addresses 1033-2038.</li><li>This storage is simply reserved by the loader for use by the program during execution.</li></ul><h3 id="two-passes"><a class="anchor" href="#two-passes">#</a> Two Passes</h3><p><strong>Pass 1</strong> (define symbols):</p><ul><li><strong>Assign addresses</strong> to all <strong>statements</strong> in the program.</li><li>Save the values (addresses) assigned to all <strong>labels</strong> for use in Pass 2.</li><li>Perform some <strong>processing of assembler directives</strong>.<ul><li>e.g., <strong>determining the length of data areas</strong> defined by BYTE, RESW, etc.)</li></ul></li></ul><p><strong>Pass 2</strong> (assemble instructions and generate object program):</p><ul><li>Assemble <strong>instructions</strong> (translating operation codes and looking up addresses)</li><li>Generate <strong>data values</strong> defined by BYTE, WORD, etc.</li><li>Perform processing of assembler directives not done during Pass 1.</li><li>Write the object program and the assembly listing.</li></ul><h2 id="assembler-algorithm-and-data-structures"><a class="anchor" href="#assembler-algorithm-and-data-structures">#</a> Assembler Algorithm and Data Structures</h2><p>Major internal data structures of simple assembler:</p><ul><li><strong>Operation code table</strong> (OPTAB)</li><li>Symbol table (SYMTAB)</li><li>Location Counter (LOCCTR)<ul><li><strong>Initialized to the beginning address</strong> specified in the START statement.</li></ul></li></ul><h3 id="operation-code-table-optab"><a class="anchor" href="#operation-code-table-optab">#</a> Operation Code Table (OPTAB)</h3><ul><li>Contains (at least) the <strong>mnemonic operation code</strong> and its <strong>machine language equivalents</strong><ul><li>In more complex assemblers, this table also contains information about instruction format and length.</li></ul></li><li>OPTAB is usually organized as a <strong>hash table</strong>, with <strong>mnemonic operation code as the <font>key</font></strong>.<ul><li>The information in OPTAB is <strong>predefined</strong> when the assembler itself is written.</li></ul></li></ul><p><strong>Example of OPTAB</strong></p><table><thead><tr><th style="text-align:left">Mnemonic</th><th style="text-align:left">Machine Language</th></tr></thead><tbody><tr><td style="text-align:left"><code>ADD</code></td><td style="text-align:left">18</td></tr><tr><td style="text-align:left"><code>ADDF</code></td><td style="text-align:left">58</td></tr><tr><td style="text-align:left"><code>ADDR</code></td><td style="text-align:left">90</td></tr><tr><td style="text-align:left">…</td><td style="text-align:left">…</td></tr></tbody></table><div class="note info"><ul><li>Operation code table 的內容不太會變動</li><li>使用目的是用來加快 mnemonic <span class="katex"><span class="katex-mathml"><math xmlns="http://www.w3.org/1998/Math/MathML"><semantics><mrow><mo>⇒</mo></mrow><annotation encoding="application/x-tex">\Rightarrow</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:0.36687em;vertical-align:0em;"></span><span class="mrel">⇒</span></span></span></span> machine language 的速度<ul><li>需要使用<strong>查詢</strong>速度很快的資料結構</li></ul></li><li>所以會使用 Hash Table 來實作 OPTAB<ul><li>查詢的平均複雜度是 <span class="katex"><span class="katex-mathml"><math xmlns="http://www.w3.org/1998/Math/MathML"><semantics><mrow><mi>O</mi><mo stretchy="false">(</mo><mn>1</mn><mo stretchy="false">)</mo></mrow><annotation encoding="application/x-tex">O(1)</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:1em;vertical-align:-0.25em;"></span><span class="mord mathnormal" style="margin-right:0.02778em;">O</span><span class="mopen">(</span><span class="mord">1</span><span class="mclose">)</span></span></span></span></li></ul></li></ul></div><h3 id="symbol-table-symtab"><a class="anchor" href="#symbol-table-symtab">#</a> Symbol Table (SYMTAB)</h3><ul><li>Includes the <strong>name</strong> and <strong>value (address)</strong> for each <strong>label</strong> in the source program<ul><li>together with <strong>flags</strong> to indicate <font>error conditions</font><ul><li>e.g., a symbol defined in two different places</li></ul></li></ul></li><li>It may also contain other information about the data area or instruction labeled<ul><li>for example, its <strong>type</strong> or <strong>length</strong>.</li></ul></li><li>During <font>Pass 1</font><ul><li><strong>labels</strong> are entered into SYMTAB as they are encountered in the source program</li><li>along with their <strong>assigned addresses</strong>.</li></ul></li><li>During <font>Pass 2</font><ul><li>symbols used as <strong>operands</strong> are <strong>looked up in SYMTAB</strong><br><span class="katex"><span class="katex-mathml"><math xmlns="http://www.w3.org/1998/Math/MathML"><semantics><mrow><mo>⇒</mo></mrow><annotation encoding="application/x-tex">\Rightarrow</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:0.36687em;vertical-align:0em;"></span><span class="mrel">⇒</span></span></span></span> <strong>the addresses</strong> to be inserted in the assembled instructions.</li></ul></li><li>SYMTAB is usually organized as a <strong>hash table</strong><ul><li>for <strong>efficiency</strong> of <font>insertion</font> and <font>retrieval</font>.</li></ul></li><li>Since entries are rarely deleted from this table, efficiency of deletion is not an important consideration.</li></ul><p><strong>Example: SYMTAB of <a href="/bi01pjLMRFKh0euMhhuPGQ#Example-of-SIC-Program">SIC Program</a></strong></p><table><thead><tr><th style="text-align:left">Label</th><th style="text-align:left">Location</th></tr></thead><tbody><tr><td style="text-align:left"><code>COPY</code></td><td style="text-align:left">1000</td></tr><tr><td style="text-align:left"><code>FIRST</code></td><td style="text-align:left">1000</td></tr><tr><td style="text-align:left"><code>CLOOP</code></td><td style="text-align:left">1003</td></tr><tr><td style="text-align:left"><code>ENDFIL</code></td><td style="text-align:left">1015</td></tr><tr><td style="text-align:left"><code>EOF</code></td><td style="text-align:left">102A</td></tr><tr><td style="text-align:left"><code>THREE</code></td><td style="text-align:left">102D</td></tr><tr><td style="text-align:left">…</td><td style="text-align:left">…</td></tr></tbody></table><div class="note info"><p>對 hash table 來說，<strong>insertion</strong> (插入) 和 <strong>retrieval</strong> (查詢)，平均複雜度都是 <span class="katex"><span class="katex-mathml"><math xmlns="http://www.w3.org/1998/Math/MathML"><semantics><mrow><mi>O</mi><mo stretchy="false">(</mo><mn>1</mn><mo stretchy="false">)</mo></mrow><annotation encoding="application/x-tex">O(1)</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:1em;vertical-align:-0.25em;"></span><span class="mord mathnormal" style="margin-right:0.02778em;">O</span><span class="mopen">(</span><span class="mord">1</span><span class="mclose">)</span></span></span></span></p></div><h3 id="hash-table"><a class="anchor" href="#hash-table">#</a> Hash Table</h3><ul><li>Care should be taken in the selection of a hashing function.<ul><li>Programmers often select many <strong>labels</strong> that have <strong>similar characteristics</strong><ul><li>for example, labels that start or end with the same characters (like LOOP1, LOOP2, LOOPA).</li></ul></li><li>It is important that the hashing function used perform well with such non-random keys.<ul><li>對於任意的 key，hash 的結果越不容易重複越好</li></ul></li><li>Division of the entire key by a <strong>prime table length</strong> often gives good results.</li></ul></li></ul><h3 id="algorithms-of-passes"><a class="anchor" href="#algorithms-of-passes">#</a> Algorithms of Passes</h3><p>Pass 1 usually writes an <font>intermediate file</font></p><ul><li>contains each <strong>source statement</strong> together with its <strong>assigned addresses</strong>, <strong>error indicators</strong>, etc.</li><li>This file is used <strong>as the input to Pass 2</strong>.</li></ul><p><strong>Pseudo Code of Pass1</strong></p><pre><code class="language-vhdl=">begin    read first input line    if OPCODE = 'START' then        begin            save #[OPERAND] as starting address            initialize LOCCTR to starting address            write line to intermediate file            read next input line        end &#123;if START&#125;    else        initialize LOCCTR to 0    while OPCODE != 'END' do        begin            if this is not a comment line then                begin                    if there is a symbol in the LABEL field then                        begin                            search SYMTAB for LABEL                            if found then                                set error flag (duplicate symbol)                            else                                insert (LABEL, LOCCTR) into SYMTAB                        end &#123;if symbol&#125;                    search OPTAB for OPCODE                    if found then                        add 3 &#123;instruction length&#125; to LOCCTR                    else if OPCODE = 'WORD ' then                        add 3 to LOCCTR                    else if OPCODE = 'RESW' then                        add 3 * #[OPERAND] to LOCCTR                    else if OPCODE = 'RESB' then                        add #[OPERAND] to LOCCTR                    else if OPCODE = 'BYTE' then                        begin                            find length of constant in bytes                            add length to LOCCTR                        end &#123;if BYTE&#125;                    else                        set error flag (invalid operation code)                end &#123;if not a comment&#125;            write line to intermediate file            read next input line        end &#123;while not END&#125;    write last line to intermediate file    save (LOCCTR - starting address) as program lengthend &#123;Pass 1&#125;</code></pre><p><strong>Presudo Code of Pass2</strong></p><pre><code class="language-vhdl=">begin    read first input line &#123;from intermediate file&#125;    if OPCODE = 'START' then        begin            Write listing line            read next input line        end &#123;if START&#125;    write Header record to object program    initialize first Text record    while OPCODE != 'END' do        begin            if this is not a comment line then                begin                    search OPTAB for OPCODE                    if found then                        begin                            if there is a symbol in OPERAND field then                                begin                                    search SYMTAB for OPERAND                                    if found then                                        store symbol value as operand address                                    else                                        begin                                            store 0 as operand address                                            set error flag (undefined symbol)                                        end                                end &#123;if symbol&#125;                            else                                store 0 as operand address                            assemble the object code instruction                        end &#123;if opcode found&#125;                    else if OPCODE = 'BYTE' or 'WORD' then                        convert constant to object code                    if object code will not fit into the current Text record then                        begin                            write Text record to object program                            initialize new Text record                        end                    add object code to Text record                end &#123;if not comment &#125;            write listing line            read next input line        end &#123;while not END&#125;    write last Text record to object program    write End record to object program    write last listing lineend &#123;Pass 2&#125;</code></pre><h2 id="machine-dependent-assembler-features"><a class="anchor" href="#machine-dependent-assembler-features">#</a> Machine-Dependent Assembler Features</h2><ul><li><p><a href="/bi01pjLMRFKh0euMhhuPGQ?view#Example-of-SICXE-Program"><strong>Example of SIC/XE Program</strong></a></p></li><li><p>The <strong>assembler directive</strong>  <code>BASE</code>  is used in conjunction with <strong>base relative addressing</strong>.</p><ul><li>用  <code>BASE</code>  讓 assembler 知道 base register 的值</li><li>Assembler 必須知道 base 的值，才能計算指令中的 displacement</li></ul></li><li><p>If the <strong>displacements</strong> required for relative addressing are <strong>too large</strong> to fit into a <strong>3-byte instruction</strong><br><span class="katex"><span class="katex-mathml"><math xmlns="http://www.w3.org/1998/Math/MathML"><semantics><mrow><mo>⇒</mo></mrow><annotation encoding="application/x-tex">\Rightarrow</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:0.36687em;vertical-align:0em;"></span><span class="mrel">⇒</span></span></span></span> the <strong>4-byte extended format</strong> (Format 4) must be used.</p><ul><li>The <strong>bit e is set to 1</strong> to indicate extended instruction format.</li><li>The extended instruction format is <strong>specified with the prefix +</strong> added to the <strong>operation code</strong> in the <font>source statement</font>.</li><li>It is the <strong>programmer’s responsibility to specify</strong> this form of addressing when it is required.</li></ul></li><li><p>Advantages of the more advanced SIC/XE architecture to improve the execution speed of the program</p><ul><li><strong>Register-to-register instructions</strong> are faster than register-to-memory operations.</li><li>When using <strong>immediate addressing</strong>, the operand is already present as part of the instruction and <strong>need not be fetched from anywhere</strong>.</li><li>The use of <strong>indirect addressing</strong> often <strong>avoids the need for another instruction</strong>.</li></ul></li></ul><h3 id="instruction-formats-and-addressing-modes"><a class="anchor" href="#instruction-formats-and-addressing-modes">#</a> Instruction Formats and Addressing Modes</h3><ul><li><p>The conversion of <strong>register mnemonics</strong> to numbers can be done with a separate table</p><ul><li>however, it is often convenient to use the <strong>symbol table</strong> for this purpose.</li><li>To do this, SYMTAB would <strong>be preloaded with the register names</strong> and their values.</li></ul></li><li><p>If extended format is not specified, the assembler <strong>first</strong> attempts to translate the instruction using <strong>program-counter relative addressing</strong>.</p><ul><li>If this is not possible (because the required displacement is out of range), the assembler then attempts to use <strong>base relative addressing</strong>.</li><li>If neither form of relative addressing is applicable and extended format is not specified, then the instruction cannot be properly assembled.<ul><li>In this case, the assembler must generate an <font>error message</font>.</li></ul></li></ul></li></ul><h3 id="displacement-calculation"><a class="anchor" href="#displacement-calculation">#</a> Displacement Calculation</h3><ul><li>The computation that the assembler needs to perform is essentially the target address calculation in reverse.<ul><li><span class="katex"><span class="katex-mathml"><math xmlns="http://www.w3.org/1998/Math/MathML"><semantics><mrow><mi>d</mi><mi>i</mi><mi>s</mi><mi>p</mi><mo>=</mo><mi>T</mi><mi>A</mi><mo>−</mo><mo stretchy="false">(</mo><mi>B</mi><mo stretchy="false">)</mo></mrow><annotation encoding="application/x-tex">disp = TA - (B)</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:0.8888799999999999em;vertical-align:-0.19444em;"></span><span class="mord mathnormal">d</span><span class="mord mathnormal">i</span><span class="mord mathnormal">s</span><span class="mord mathnormal">p</span><span class="mspace" style="margin-right:0.2777777777777778em;"></span><span class="mrel">=</span><span class="mspace" style="margin-right:0.2777777777777778em;"></span></span><span class="base"><span class="strut" style="height:0.76666em;vertical-align:-0.08333em;"></span><span class="mord mathnormal" style="margin-right:0.13889em;">T</span><span class="mord mathnormal">A</span><span class="mspace" style="margin-right:0.2222222222222222em;"></span><span class="mbin">−</span><span class="mspace" style="margin-right:0.2222222222222222em;"></span></span><span class="base"><span class="strut" style="height:1em;vertical-align:-0.25em;"></span><span class="mopen">(</span><span class="mord mathnormal" style="margin-right:0.05017em;">B</span><span class="mclose">)</span></span></span></span></li><li><span class="katex"><span class="katex-mathml"><math xmlns="http://www.w3.org/1998/Math/MathML"><semantics><mrow><mi>d</mi><mi>i</mi><mi>s</mi><mi>p</mi><mo>=</mo><mi>T</mi><mi>A</mi><mo>−</mo><mo stretchy="false">(</mo><mi>P</mi><mi>C</mi><mo stretchy="false">)</mo></mrow><annotation encoding="application/x-tex">disp = TA - (PC)</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:0.8888799999999999em;vertical-align:-0.19444em;"></span><span class="mord mathnormal">d</span><span class="mord mathnormal">i</span><span class="mord mathnormal">s</span><span class="mord mathnormal">p</span><span class="mspace" style="margin-right:0.2777777777777778em;"></span><span class="mrel">=</span><span class="mspace" style="margin-right:0.2777777777777778em;"></span></span><span class="base"><span class="strut" style="height:0.76666em;vertical-align:-0.08333em;"></span><span class="mord mathnormal" style="margin-right:0.13889em;">T</span><span class="mord mathnormal">A</span><span class="mspace" style="margin-right:0.2222222222222222em;"></span><span class="mbin">−</span><span class="mspace" style="margin-right:0.2222222222222222em;"></span></span><span class="base"><span class="strut" style="height:1em;vertical-align:-0.25em;"></span><span class="mopen">(</span><span class="mord mathnormal" style="margin-right:0.13889em;">P</span><span class="mord mathnormal" style="margin-right:0.07153em;">C</span><span class="mclose">)</span></span></span></span></li></ul></li></ul><p><strong>PC Relative</strong></p><ul><li>The program counter is advanced after each instruction is fetched and before it is executed.<ul><li>Thus during the execution of an instruction, program counter will contain <strong>the address of the next instruction</strong>.</li></ul></li><li>The assembler knows what the contents of the program counter will be at execution time.</li></ul><p><strong>Base Relative</strong></p><ul><li>The base register is under control of the programmer.</li><li>The programmer must tell the assembler what the base register will contain during execution<br><span class="katex"><span class="katex-mathml"><math xmlns="http://www.w3.org/1998/Math/MathML"><semantics><mrow><mo>⇒</mo></mrow><annotation encoding="application/x-tex">\Rightarrow</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:0.36687em;vertical-align:0em;"></span><span class="mrel">⇒</span></span></span></span> so that the assembler can compute displacements.<ul><li>This is done with the <strong>assembler directive  <code>BASE</code> </strong>.</li><li><code>NOBASE</code></li><li>These assembler directives produce no executable code.</li><li>The programmer must provide instructions that load the proper value into the base register during execution.</li></ul></li></ul><h2 id="machine-independent-assembler-features"><a class="anchor" href="#machine-independent-assembler-features">#</a> Machine-Independent Assembler Features</h2><h3 id="literal"><a class="anchor" href="#literal">#</a> Literal</h3><!--https://hackmd.io/@NTNUCSIE112/SP110-1_2#23-Machine-Independent-Assembler-Features-->]]></content>
      
      
      <categories>
          
          <category> System Software </category>
          
      </categories>
      
      
        <tags>
            
            <tag> System Software </tag>
            
            <tag> Assembler </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>258. Add Digits</title>
      <link href="/2023/04/26/Coding/leetcode/Easy/258%20Add%20Digits/"/>
      <url>/2023/04/26/Coding/leetcode/Easy/258%20Add%20Digits/</url>
      
        <content type="html"><![CDATA[<h2 id="題目敘述"><a class="anchor" href="#題目敘述">#</a> <span class="exturl" data-url="aHR0cHM6Ly9sZWV0Y29kZS5jb20vcHJvYmxlbXMvYWRkLWRpZ2l0cy9kZXNjcmlwdGlvbi8=">題目敘述</span></h2><p>Given an integer  <code>num</code> , repeatedly add all its digits until the result has only one digit, and return it.</p><h3 id="example-1"><a class="anchor" href="#example-1">#</a> Example 1</h3><blockquote><p><strong>Input</strong>: num = 38<br><strong>Output</strong>: 2<br><strong>Explanation</strong>: The process is<br>38 --&gt; 3 + 8 --&gt; 11<br>11 --&gt; 1 + 1 --&gt; 2<br>Since 2 has only one digit, return it.</p></blockquote><h3 id="example-2"><a class="anchor" href="#example-2">#</a> Example 2</h3><blockquote><p><strong>Input</strong>: num = 0<br><strong>Output</strong>: 0</p></blockquote><h2 id="solution"><a class="anchor" href="#solution">#</a> Solution</h2><div class="tab" data-id="code" data-title="C++"><figure class="highlight cpp"><figcaption data-lang="C++"></figcaption><table><tr><td data-num="1"></td><td><pre><span class="token keyword">class</span> <span class="token class-name">Solution</span> <span class="token punctuation">&#123;</span></pre></td></tr><tr><td data-num="2"></td><td><pre><span class="token keyword">public</span><span class="token operator">:</span></pre></td></tr><tr><td data-num="3"></td><td><pre>    <span class="token keyword">int</span> <span class="token function">addDigits</span><span class="token punctuation">(</span><span class="token keyword">int</span> num<span class="token punctuation">)</span> <span class="token punctuation">&#123;</span></pre></td></tr><tr><td data-num="4"></td><td><pre>        <span class="token keyword">int</span> res <span class="token operator">=</span> num<span class="token punctuation">;</span></pre></td></tr><tr><td data-num="5"></td><td><pre>        <span class="token keyword">while</span> <span class="token punctuation">(</span>num <span class="token operator">></span> <span class="token number">9</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span></pre></td></tr><tr><td data-num="6"></td><td><pre>            res <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span></pre></td></tr><tr><td data-num="7"></td><td><pre>            <span class="token keyword">while</span> <span class="token punctuation">(</span>num <span class="token operator">!=</span> <span class="token number">0</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span></pre></td></tr><tr><td data-num="8"></td><td><pre>                res <span class="token operator">+=</span> num <span class="token operator">%</span> <span class="token number">10</span><span class="token punctuation">;</span></pre></td></tr><tr><td data-num="9"></td><td><pre>                num <span class="token operator">/=</span> <span class="token number">10</span><span class="token punctuation">;</span></pre></td></tr><tr><td data-num="10"></td><td><pre>            <span class="token punctuation">&#125;</span></pre></td></tr><tr><td data-num="11"></td><td><pre>            num <span class="token operator">=</span> res<span class="token punctuation">;</span></pre></td></tr><tr><td data-num="12"></td><td><pre>        <span class="token punctuation">&#125;</span></pre></td></tr><tr><td data-num="13"></td><td><pre>        <span class="token keyword">return</span> res<span class="token punctuation">;</span></pre></td></tr><tr><td data-num="14"></td><td><pre>    <span class="token punctuation">&#125;</span></pre></td></tr><tr><td data-num="15"></td><td><pre><span class="token punctuation">&#125;</span><span class="token punctuation">;</span></pre></td></tr></table></figure></div><div class="tab" data-id="code" data-title="Java"><figure class="highlight java"><figcaption data-lang="java"></figcaption><table><tr><td data-num="1"></td><td><pre><span class="token keyword">class</span> <span class="token class-name">Solution</span> <span class="token punctuation">&#123;</span></pre></td></tr><tr><td data-num="2"></td><td><pre>    <span class="token keyword">public</span> <span class="token keyword">int</span> <span class="token function">addDigits</span><span class="token punctuation">(</span><span class="token keyword">int</span> num<span class="token punctuation">)</span> <span class="token punctuation">&#123;</span></pre></td></tr><tr><td data-num="3"></td><td><pre>        <span class="token keyword">int</span> res <span class="token operator">=</span> num<span class="token punctuation">;</span></pre></td></tr><tr><td data-num="4"></td><td><pre>        <span class="token keyword">while</span> <span class="token punctuation">(</span>num <span class="token operator">></span> <span class="token number">9</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span></pre></td></tr><tr><td data-num="5"></td><td><pre>            res <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span></pre></td></tr><tr><td data-num="6"></td><td><pre>            <span class="token keyword">while</span> <span class="token punctuation">(</span>num <span class="token operator">!=</span> <span class="token number">0</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span></pre></td></tr><tr><td data-num="7"></td><td><pre>                res <span class="token operator">+=</span> num <span class="token operator">%</span> <span class="token number">10</span><span class="token punctuation">;</span></pre></td></tr><tr><td data-num="8"></td><td><pre>                num <span class="token operator">/=</span> <span class="token number">10</span><span class="token punctuation">;</span></pre></td></tr><tr><td data-num="9"></td><td><pre>            <span class="token punctuation">&#125;</span></pre></td></tr><tr><td data-num="10"></td><td><pre>            num <span class="token operator">=</span> res<span class="token punctuation">;</span></pre></td></tr><tr><td data-num="11"></td><td><pre>        <span class="token punctuation">&#125;</span></pre></td></tr><tr><td data-num="12"></td><td><pre>        <span class="token keyword">return</span> res<span class="token punctuation">;</span></pre></td></tr><tr><td data-num="13"></td><td><pre>    <span class="token punctuation">&#125;</span></pre></td></tr><tr><td data-num="14"></td><td><pre><span class="token punctuation">&#125;</span></pre></td></tr></table></figure></div><div class="tab" data-id="code" data-title="Python"><figure class="highlight python"><figcaption data-lang="python"></figcaption><table><tr><td data-num="1"></td><td><pre><span class="token keyword">class</span> <span class="token class-name">Solution</span><span class="token punctuation">:</span></pre></td></tr><tr><td data-num="2"></td><td><pre>    <span class="token keyword">def</span> <span class="token function">addDigits</span><span class="token punctuation">(</span>self<span class="token punctuation">,</span> num<span class="token punctuation">:</span> <span class="token builtin">int</span><span class="token punctuation">)</span> <span class="token operator">-</span><span class="token operator">></span> <span class="token builtin">int</span><span class="token punctuation">:</span></pre></td></tr><tr><td data-num="3"></td><td><pre>        res <span class="token operator">=</span> num</pre></td></tr><tr><td data-num="4"></td><td><pre>        <span class="token keyword">while</span> num <span class="token operator">></span> <span class="token number">9</span><span class="token punctuation">:</span></pre></td></tr><tr><td data-num="5"></td><td><pre>            res <span class="token operator">=</span> <span class="token number">0</span></pre></td></tr><tr><td data-num="6"></td><td><pre>            <span class="token keyword">while</span> num <span class="token operator">!=</span> <span class="token number">0</span><span class="token punctuation">:</span></pre></td></tr><tr><td data-num="7"></td><td><pre>                res <span class="token operator">+=</span> num <span class="token operator">%</span> <span class="token number">10</span></pre></td></tr><tr><td data-num="8"></td><td><pre>                num <span class="token operator">//=</span> <span class="token number">10</span></pre></td></tr><tr><td data-num="9"></td><td><pre>            num <span class="token operator">=</span> res</pre></td></tr><tr><td data-num="10"></td><td><pre>        <span class="token keyword">return</span> res</pre></td></tr></table></figure></div>]]></content>
      
      
      <categories>
          
          <category> Coding </category>
          
          <category> Leetcode </category>
          
          <category> Easy </category>
          
      </categories>
      
      
        <tags>
            
            <tag> Leetcode </tag>
            
            <tag> Easy </tag>
            
            <tag> Math </tag>
            
            <tag> Simulation </tag>
            
            <tag> Number Theory </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>Backtracking</title>
      <link href="/2023/04/25/Algorithm/Backtracking/"/>
      <url>/2023/04/25/Algorithm/Backtracking/</url>
      
        <content type="html"><![CDATA[<h2 id="backtracking"><a class="anchor" href="#backtracking">#</a> Backtracking</h2><p>Backtracking，枚舉多維度數值的方法。<br>運用遞迴依序窮舉各個維度的數值，製作所有可能的多維度數值，並且在遞迴途中避免枚舉不正確的多維度數值。<br>Backtracking is a <span class="red">modified depth-first search of a tree (DFS)</span>.</p><h3 id="promising"><a class="anchor" href="#promising">#</a> <a href="#%E8%A8%BB%E8%A7%A3">Promising<sub>1</sub></a> &amp; Nonpromising</h3><ul><li>A node is <span class="red"><strong>Nonpromising</strong></span> if it cannot possibly lead to a solution.</li><li>Otherwise, <span class="red"><strong>Promising</strong></span>.</li></ul><h3 id="pruning"><a class="anchor" href="#pruning">#</a> <a href="#%E8%A8%BB%E8%A7%A3">Pruning<sub>2</sub></a></h3><ul><li>Backtracking consists of<ul><li>doing a <strong>DFS</strong> of a State Space Tree</li><li>checking whether each node is promising</li><li>if it is nonpromising, backtracking to the node’s parent.</li></ul></li><li><em>Pruned State Space Tree</em>: the subtree consisting of the visited nodes (after pruning).</li></ul><h2 id="n-queens-problem-n-皇后問題"><a class="anchor" href="#n-queens-problem-n-皇后問題">#</a> n-Queens Problem (n 皇后問題)</h2><p>n 皇后問題的目標在於，在一個 n*n 大小的棋盤上擺放 n 個皇后，要讓他們恰好無法互相攻擊對方 (no two queens threaten each other)。也就是說，<strong>任何一個皇后都要在不同行 (row)、不同列 (column) 且不同斜線 (diagonal) 上</strong>。</p><h3 id="想法"><a class="anchor" href="#想法">#</a> 想法</h3><ul><li>以 4*4 的棋盤為例:</li></ul><p>我們可以很直覺地想到，任何一個皇后不會在同一個列上 (row)。<br>因此，這個問題可以簡化成，什麼樣的行 (column) 組合能符合題目的要求。<br>因為每個皇后都有 4 個選擇，所以我們總共有 <span class="katex"><span class="katex-mathml"><math xmlns="http://www.w3.org/1998/Math/MathML"><semantics><mrow><mn>4</mn><mo>×</mo><mn>4</mn><mo>×</mo><mn>4</mn><mo>×</mo><mn>4</mn><mo>=</mo><mn>256</mn></mrow><annotation encoding="application/x-tex">4 \times 4 \times 4 \times 4 = 256</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:0.72777em;vertical-align:-0.08333em;"></span><span class="mord">4</span><span class="mspace" style="margin-right:0.2222222222222222em;"></span><span class="mbin">×</span><span class="mspace" style="margin-right:0.2222222222222222em;"></span></span><span class="base"><span class="strut" style="height:0.72777em;vertical-align:-0.08333em;"></span><span class="mord">4</span><span class="mspace" style="margin-right:0.2222222222222222em;"></span><span class="mbin">×</span><span class="mspace" style="margin-right:0.2222222222222222em;"></span></span><span class="base"><span class="strut" style="height:0.72777em;vertical-align:-0.08333em;"></span><span class="mord">4</span><span class="mspace" style="margin-right:0.2222222222222222em;"></span><span class="mbin">×</span><span class="mspace" style="margin-right:0.2222222222222222em;"></span></span><span class="base"><span class="strut" style="height:0.64444em;vertical-align:0em;"></span><span class="mord">4</span><span class="mspace" style="margin-right:0.2777777777777778em;"></span><span class="mrel">=</span><span class="mspace" style="margin-right:0.2777777777777778em;"></span></span><span class="base"><span class="strut" style="height:0.64444em;vertical-align:0em;"></span><span class="mord">2</span><span class="mord">5</span><span class="mord">6</span></span></span></span> 種可能的組合。我們可以建立一個樹來表達所有的組合。</p><div class="note info"><p>The column choices for the first queen (the queen in row 1) are stored in level-1 nodes in the tree (recall that the root is at level 0), the column choices for the second queen (the queen in row 2) are stored in level-2 nodes, and so on.</p><p><img data-src="https://i.imgur.com/rKk7YPL.png" alt=""></p><p>A <span class="red">path</span> from the <span class="red">root to leaf</span> is a <span class="red">candidate solution</span>. This tree is called a <strong><a href="#%E8%A8%BB%E8%A7%A3">state space tree<sub>2</sub></a></strong>.<br>The entire tree has 256 leaves, one for each candidate solution.</p></div><p>為了更有效率的搜尋解答，我們可以設置一些條件來篩選掉那些不可能的路徑。<br>同上例子:</p><ul><li>我們知道，<em>沒有兩個皇后可以在同一行上</em>。假設我們已將  <code>皇后1</code>  放在第一行上 (<em>&lt;1, 1&gt;</em>)，之後就不可再有人可以放在第一行上，因此當我們遇到 <em>&lt;2, 1&gt;</em> 時就可以直接跳過。</li><li>同樣的，<em>沒有兩個皇后可以在同一個對角線上</em>。所以遇到 <em>&lt;2, 2&gt;</em> 時，我們就可以不用再去管它後面的路徑了。</li></ul><div class="note success"><p>An ordered pair  <code>&lt;i, j&gt;</code>  is stored at each node.<br>This ordered pair means that the queen in the  <code>ith</code>  row is placed in the  <code>jth</code>  column.</p></div><div class="note danger"><p><strong>NOTE:</strong> The nodes are visited according to a <strong>depth-first search (DFS)</strong> in which the children of a node are visited <strong>from left to right</strong>.</p></div><p><img data-src="https://i.imgur.com/QOH492o.png" alt=""></p><h3 id="pruning-2"><a class="anchor" href="#pruning-2">#</a> Pruning</h3><blockquote><ol><li because="" queen="" 1="" is="" the="" first="" queen="" positioned=""><em>&lt;1, 1&gt;</em> is promising.</li><li><em>&lt;2, 1&gt;</em> is nonpromising. {because queen 1 is in column 1}<br><em>&lt;2, 2&gt;</em> is  nonpromising. {because queen 1 is on left diagonal}<br><em>&lt;2, 3&gt;</em> is promising.</li><li because="" queen="" 2="" is="" on="" left="" diagonal=""><em>&lt; 3, 1&gt;</em> is nonpromising {because queen 1 is in column 1}<br><em>&lt; 3, 2&gt;</em> is nonpromising {because queen 2 is on right diagonal}<br><em>&lt; 3, 3&gt;</em> is nonpromising {because queen 2 is in column 3}<br><em>&lt; 3, 4&gt;</em> is nonpromising</li><li>Backtrack to <em>&lt;1, 1&gt;</em><br><em>&lt;2, 4&gt;</em> is promising</li><li><em>&lt; 3, 1&gt;</em> is nonpromising {because queen 1 is in column 1}<br><em>&lt; 3, 2&gt;</em> is promising {this is the second time we’ve tried <em>&lt; 3, 2&gt;</em>}</li></ol></blockquote><p><img data-src="https://i.imgur.com/29SDBun.png" alt=""></p><p>這裡顯示經過 backtracking 後部分的 pruned state space tree<br><img data-src="https://i.imgur.com/hqvoyOD.png" alt=""></p><h3 id="promising-function"><a class="anchor" href="#promising-function">#</a> Promising Function</h3><p>Check whether two queens are in the same column or diagonal.</p><ul><li>let  <code>col(i)</code>  be the column where the queen in the <em>i</em>th row is located, then to check whether the queen in the <em>k</em>th row is in the same column.</li></ul><div class="note danger no-icon"><p>we need to check  <code>col(i) = col(k)</code></p></div><ul><li>to check the diagonal, suppose  <code>n=8</code> . In the following figure, the queen in row 6 is being threatened in its left diagonal by the queen in row 3, and in its right diagonal by the queen in row 2.</li></ul><div class="note danger no-icon"><p>Notice that:</p><ul><li>left:  <code>col(6) - col(3) = 4 - 1 = 3 = 6 - 3</code></li><li>right:  <code>col(6) - col(2) = 4 - 8 = -4 = -(6 - 2)</code></li></ul><p><strong>The difference in the columns is the same as the difference in the rows</strong>.</p></div><p><img data-src="https://i.imgur.com/VO0CIbM.png" alt=""></p><h2 id="sum-of-subset-problem"><a class="anchor" href="#sum-of-subset-problem">#</a> Sum-of-Subset Problem</h2><p>There are  <code>n</code>  positive integers (weights)  <code>wi</code>  and a positive integer  <code>W</code> .<br>The goal is to <em>find all subsets of the integers that sum to  <code>W</code> </em>.</p><h3 id="promising-function-2"><a class="anchor" href="#promising-function-2">#</a> Promising Function</h3><p>If we sort the weights in ascending order before doing the search, then w<sub>i+1</sub> is the lightest weight remaining when we are at the <em>i</em>th level.</p><p>Let <strong><em>weight</em> be the sum of the weights that have been included up to a node at level <em>i</em></strong>.<br>If w<sub>i+1</sub> would bring the value of <em>weight</em> above <em>W</em>, then so would any other weight following it.</p><div class="note danger no-icon"><p>Therefore, unless <em>weight</em> <strong>equals</strong> <em>W</em> (one of a solution), a node at the <em>i</em>th level is nonpromising if</p><ul><li><code>weight + w_(i+1) &gt; W</code></li></ul></div><p>There is another, if, at a given node, adding all the weights of the remaining items to <em>weight</em> does not make <em>weight</em> at least equal to <em>W</em>, then <em>weight</em> could never become equal to <em>W</em> by expanding beyond the node.</p><div class="note danger no-icon"><p>This means that if <strong><em>total</em> is the total weight of the remaining weights</strong>, a node is nonpromising if</p><ul><li><code>weight + total &lt; W</code></li></ul></div><h3 id="pruned-state-space-tree"><a class="anchor" href="#pruned-state-space-tree">#</a> Pruned State Space Tree</h3><p>Supppose that  <code>n = 4</code> ,  <code>W = 13</code> , and  <code>w1 = 3</code> ,  <code>w2 = 4</code> ,  <code>w3 = 5</code> ,  <code>w4 = 6</code> .<br><img data-src="https://i.imgur.com/1lk7Qdy.png" alt=""></p><blockquote><ul><li><code>weight + w_(i+1) &gt; W</code> : The nodes containing 12, 8, and 9 are nonpromising because adding the next weight (6) would make the value of <em>weight</em> exceed <em>W</em>.</li><li><code>weight + total &lt; W</code> : The nodes containing 7, 3, 4 and 0 are nonpromising because there is not enough total weight remaining to bring the value of <em>weight</em> up to <em>W</em>.</li></ul></blockquote><h2 id="graph-coloring"><a class="anchor" href="#graph-coloring">#</a> Graph Coloring</h2><p>Find <strong>all</strong> ways to color an undireccted graph using <em>at most  <code>m</code> </em> different colors so that <strong>no two adjacent vertices are the same color</strong>.</p><h3 id="example"><a class="anchor" href="#example">#</a> Example</h3><p><img data-src="https://i.imgur.com/qjcuChb.png" alt=""></p><h2 id="註解"><a class="anchor" href="#註解">#</a> 註解</h2><ol><li><a href="#backtracking">promising <em>有希望的；有出息的；有前途的</em></a></li></ol><blockquote><p>Something that is promising shows signs that it is going to be successful or enjoyable.<br><strong>ex.</strong> <em>They won the award for the most promising new band of the year.</em></p></blockquote><ol start="2"><li><a href="#pruning2">prune <em>v.</em></a></li></ol><blockquote><ul><li><em>修剪（樹枝）</em><br>To cut off branches from a tree, bush, or plant, especially so that it will grow better in the future.<br><strong>ex.</strong> <em>She spent the afternoon pruning roses.</em></li><li><em>刪除，刪節</em><br> To reduce something by removing things that are not necessary.<br><strong>ex.</strong> <em>I felt his essay needed a little pruning.</em></li></ul></blockquote><ol start="3"><li><a href="#%E6%83%B3%E6%B3%95">state space tree <em>狀態空間樹</em></a></li></ol><blockquote><p>選定一個狀態，衍生各式各樣的狀態，形成一棵樹。狀態空間樹無窮無盡。狀態可能重複出現、四處散布。</p></blockquote>]]></content>
      
      
      <categories>
          
          <category> Algorithm </category>
          
      </categories>
      
      
        <tags>
            
            <tag> Algorithm </tag>
            
            <tag> Backtracking </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>01 - 環境設定</title>
      <link href="/2023/04/25/%E7%B6%B2%E8%B7%AF%E7%88%AC%E8%9F%B2%E8%88%87%E8%B3%87%E6%96%99%E5%88%86%E6%9E%90/Ch01%20%E7%92%B0%E5%A2%83%E8%A8%AD%E5%AE%9A/"/>
      <url>/2023/04/25/%E7%B6%B2%E8%B7%AF%E7%88%AC%E8%9F%B2%E8%88%87%E8%B3%87%E6%96%99%E5%88%86%E6%9E%90/Ch01%20%E7%92%B0%E5%A2%83%E8%A8%AD%E5%AE%9A/</url>
      
        <content type="html"><![CDATA[<h2 id="環境設定及套件安裝-anaconda"><a class="anchor" href="#環境設定及套件安裝-anaconda">#</a> 環境設定及套件安裝 : Anaconda</h2><p>Anaconda 是適合資料科學工作者的開發套件管理系統，針對 Python 使用者提供簡單的安裝與豐富的套件。</p><p>Anaconda 包含了 Python 的實作環境，以及與網路爬蟲、資料分析、資料視覺化、機器學習相關的多種套件，如網路爬蟲最常使用到的套件 <em><strong>Requests</strong></em> 與 <em><strong>BeautifulSoup</strong></em> ，資料分析與視覺化套件 <em><strong>Pandas</strong></em> 與 <em><strong>Matplotlib</strong></em> ，自然語言處理套件 <em><strong>nltk</strong></em> 與 <em><strong>spaCy</strong></em> ，機器學習與深度學習套件 <em><strong>scikit-learn</strong></em> 與 <em><strong>TensorFlow</strong></em> 等，都可以透過 Anaconda 的圖形環境來安裝。</p><p>其自帶的 IDE 如 <em><strong>Jupyter Notebook</strong></em> 與 <em><strong>Sypder</strong></em> 等也提供了整合開發環境，讓開發者可以更簡便地逐行執行或分享程式碼內容。</p><h3 id="下載-anaconda"><a class="anchor" href="#下載-anaconda">#</a> 下載 Anaconda</h3><p>首先到以下網址下載 Anaconda:<br><span class="exturl" data-url="aHR0cHM6Ly93d3cuYW5hY29uZGEuY29tL2Rvd25sb2FkLw==">https://www.anaconda.com/download/</span></p><p><img data-src="https://i.imgur.com/3zbvesT.png" alt=""></p>]]></content>
      
      
      <categories>
          
          <category> Programming </category>
          
          <category> Python </category>
          
          <category> 網路爬蟲與資料分析 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> Python </tag>
            
            <tag> Web Scraping </tag>
            
            <tag> Data Analysis </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>2336. Smallest Number in Infinite Set</title>
      <link href="/2023/04/25/Coding/leetcode/Medium/2336%20Smallest%20Number%20in%20Infinite%20Set/"/>
      <url>/2023/04/25/Coding/leetcode/Medium/2336%20Smallest%20Number%20in%20Infinite%20Set/</url>
      
        <content type="html"><![CDATA[<p>⭐️⭐️</p><h2 id="題目敘述"><a class="anchor" href="#題目敘述">#</a> <span class="exturl" data-url="aHR0cHM6Ly9sZWV0Y29kZS5jb20vcHJvYmxlbXMvc21hbGxlc3QtbnVtYmVyLWluLWluZmluaXRlLXNldC8=">題目敘述</span></h2><p>You have a set which contains all positive integers  <code>[1, 2, 3, 4, 5, ...]</code> .</p><p>Implement the  <code>SmallestInfiniteSet</code>  class:</p><ul><li><code>SmallestInfiniteSet()</code>  Initializes the <strong>SmallestInfiniteSet</strong> object to contain <strong>all</strong> positive integers.</li><li><code>int popSmallest()</code>  <strong>Removes</strong> and returns the smallest integer contained in the infinite set.</li><li><code>void addBack(int num)</code>  <strong>Adds</strong> a positive integer  <code>num</code>  back into the infinite set, if it is <strong>not</strong> already in the infinite set.</li></ul><h3 id="example-1"><a class="anchor" href="#example-1">#</a> Example 1</h3><blockquote><p><strong>Input</strong><br>[“SmallestInfiniteSet”, “addBack”, “popSmallest”, “popSmallest”, “popSmallest”, “addBack”, “popSmallest”, “popSmallest”, “popSmallest”]<br>[[], [2], [], [], [], [1], [], [], []]<br><strong>Output</strong><br>[null, null, 1, 2, 3, null, 1, 4, 5]</p><p><strong>Explanation</strong><br>SmallestInfiniteSet smallestInfiniteSet = new SmallestInfiniteSet();<br>smallestInfiniteSet.addBack(2);    // 2 is already in the set, so no change is made.<br>smallestInfiniteSet.popSmallest(); // return 1, since 1 is the smallest number, and remove it from the set.<br>smallestInfiniteSet.popSmallest(); // return 2, and remove it from the set.<br>smallestInfiniteSet.popSmallest(); // return 3, and remove it from the set.<br>smallestInfiniteSet.addBack(1);    // 1 is added back to the set.<br>smallestInfiniteSet.popSmallest(); // return 1, since 1 was added back to the set and<br>// is the smallest number, and remove it from the set.<br>smallestInfiniteSet.popSmallest(); // return 4, and remove it from the set.<br>smallestInfiniteSet.popSmallest(); // return 5, and remove it from the set.</p></blockquote><h2 id="solution"><a class="anchor" href="#solution">#</a> Solution</h2><div class="tab" data-id="code" data-title="C++"><figure class="highlight cpp"><figcaption data-lang="C++"></figcaption><table><tr><td data-num="1"></td><td><pre><span class="token keyword">class</span> <span class="token class-name">SmallestInfiniteSet</span> <span class="token punctuation">&#123;</span></pre></td></tr><tr><td data-num="2"></td><td><pre><span class="token keyword">private</span><span class="token operator">:</span></pre></td></tr><tr><td data-num="3"></td><td><pre>    <span class="token keyword">int</span> min_num <span class="token operator">=</span> <span class="token number">1</span><span class="token punctuation">;</span></pre></td></tr><tr><td data-num="4"></td><td><pre>    priority_queue<span class="token operator">&lt;</span><span class="token keyword">int</span><span class="token punctuation">,</span> vector<span class="token operator">&lt;</span><span class="token keyword">int</span><span class="token operator">></span><span class="token punctuation">,</span> greater<span class="token operator">&lt;</span><span class="token keyword">int</span><span class="token operator">>></span> pq<span class="token punctuation">;</span></pre></td></tr><tr><td data-num="5"></td><td><pre>    unordered_set<span class="token operator">&lt;</span><span class="token keyword">int</span><span class="token operator">></span> nums<span class="token punctuation">;</span></pre></td></tr><tr><td data-num="6"></td><td><pre><span class="token keyword">public</span><span class="token operator">:</span></pre></td></tr><tr><td data-num="7"></td><td><pre>    <span class="token function">SmallestInfiniteSet</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span></pre></td></tr><tr><td data-num="8"></td><td><pre>        pq <span class="token operator">=</span> <span class="token generic-function"><span class="token function">priority_queue</span><span class="token generic class-name"><span class="token operator">&lt;</span><span class="token keyword">int</span><span class="token punctuation">,</span> vector<span class="token operator">&lt;</span><span class="token keyword">int</span><span class="token operator">></span><span class="token punctuation">,</span> greater<span class="token operator">&lt;</span><span class="token keyword">int</span><span class="token operator">>></span></span></span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span></pre></td></tr><tr><td data-num="9"></td><td><pre>        nums <span class="token operator">=</span> <span class="token generic-function"><span class="token function">unordered_set</span><span class="token generic class-name"><span class="token operator">&lt;</span><span class="token keyword">int</span><span class="token operator">></span></span></span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span></pre></td></tr><tr><td data-num="10"></td><td><pre>    <span class="token punctuation">&#125;</span></pre></td></tr><tr><td data-num="11"></td><td><pre>    </pre></td></tr><tr><td data-num="12"></td><td><pre>    <span class="token keyword">int</span> <span class="token function">popSmallest</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span></pre></td></tr><tr><td data-num="13"></td><td><pre>        <span class="token keyword">if</span> <span class="token punctuation">(</span><span class="token operator">!</span>pq<span class="token punctuation">.</span><span class="token function">empty</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span></pre></td></tr><tr><td data-num="14"></td><td><pre>            <span class="token keyword">int</span> res <span class="token operator">=</span> pq<span class="token punctuation">.</span><span class="token function">top</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span></pre></td></tr><tr><td data-num="15"></td><td><pre>            pq<span class="token punctuation">.</span><span class="token function">pop</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span></pre></td></tr><tr><td data-num="16"></td><td><pre>            nums<span class="token punctuation">.</span><span class="token function">erase</span><span class="token punctuation">(</span>res<span class="token punctuation">)</span><span class="token punctuation">;</span></pre></td></tr><tr><td data-num="17"></td><td><pre>            <span class="token keyword">return</span> res<span class="token punctuation">;</span></pre></td></tr><tr><td data-num="18"></td><td><pre>        <span class="token punctuation">&#125;</span></pre></td></tr><tr><td data-num="19"></td><td><pre>        min_num<span class="token operator">++</span><span class="token punctuation">;</span></pre></td></tr><tr><td data-num="20"></td><td><pre>        <span class="token keyword">return</span> min_num <span class="token operator">-</span> <span class="token number">1</span><span class="token punctuation">;</span></pre></td></tr><tr><td data-num="21"></td><td><pre>    <span class="token punctuation">&#125;</span></pre></td></tr><tr><td data-num="22"></td><td><pre>    </pre></td></tr><tr><td data-num="23"></td><td><pre>    <span class="token keyword">void</span> <span class="token function">addBack</span><span class="token punctuation">(</span><span class="token keyword">int</span> num<span class="token punctuation">)</span> <span class="token punctuation">&#123;</span></pre></td></tr><tr><td data-num="24"></td><td><pre>        <span class="token keyword">if</span> <span class="token punctuation">(</span>min_num <span class="token operator">></span> num <span class="token operator">&amp;&amp;</span> nums<span class="token punctuation">.</span><span class="token function">find</span><span class="token punctuation">(</span>num<span class="token punctuation">)</span> <span class="token operator">==</span> nums<span class="token punctuation">.</span><span class="token function">end</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span></pre></td></tr><tr><td data-num="25"></td><td><pre>            pq<span class="token punctuation">.</span><span class="token function">push</span><span class="token punctuation">(</span>num<span class="token punctuation">)</span><span class="token punctuation">;</span></pre></td></tr><tr><td data-num="26"></td><td><pre>            nums<span class="token punctuation">.</span><span class="token function">insert</span><span class="token punctuation">(</span>num<span class="token punctuation">)</span><span class="token punctuation">;</span></pre></td></tr><tr><td data-num="27"></td><td><pre>        <span class="token punctuation">&#125;</span></pre></td></tr><tr><td data-num="28"></td><td><pre>    <span class="token punctuation">&#125;</span></pre></td></tr><tr><td data-num="29"></td><td><pre><span class="token punctuation">&#125;</span><span class="token punctuation">;</span></pre></td></tr></table></figure></div><div class="tab" data-id="code" data-title="Java"><figure class="highlight java"><figcaption data-lang="java"></figcaption><table><tr><td data-num="1"></td><td><pre><span class="token keyword">import</span> <span class="token import"><span class="token namespace">java<span class="token punctuation">.</span>util<span class="token punctuation">.</span></span><span class="token class-name">PriorityQueue</span></span><span class="token punctuation">;</span></pre></td></tr><tr><td data-num="2"></td><td><pre></pre></td></tr><tr><td data-num="3"></td><td><pre><span class="token keyword">class</span> <span class="token class-name">SmallestInfiniteSet</span> <span class="token punctuation">&#123;</span></pre></td></tr><tr><td data-num="4"></td><td><pre>    <span class="token class-name">PriorityQueue</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token class-name">Integer</span><span class="token punctuation">></span></span> pQ<span class="token punctuation">;</span></pre></td></tr><tr><td data-num="5"></td><td><pre></pre></td></tr><tr><td data-num="6"></td><td><pre>    <span class="token keyword">public</span> <span class="token class-name">SmallestInfiniteSet</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span></pre></td></tr><tr><td data-num="7"></td><td><pre>        pQ <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">PriorityQueue</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token punctuation">></span></span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span></pre></td></tr><tr><td data-num="8"></td><td><pre>        <span class="token keyword">for</span><span class="token punctuation">(</span><span class="token keyword">int</span> i <span class="token operator">=</span> <span class="token number">1</span><span class="token punctuation">;</span> i <span class="token operator">&lt;=</span> <span class="token number">1000</span><span class="token punctuation">;</span> i<span class="token operator">++</span><span class="token punctuation">)</span><span class="token punctuation">&#123;</span></pre></td></tr><tr><td data-num="9"></td><td><pre>            pQ<span class="token punctuation">.</span><span class="token function">add</span><span class="token punctuation">(</span>i<span class="token punctuation">)</span><span class="token punctuation">;</span></pre></td></tr><tr><td data-num="10"></td><td><pre>        <span class="token punctuation">&#125;</span></pre></td></tr><tr><td data-num="11"></td><td><pre>    <span class="token punctuation">&#125;</span></pre></td></tr><tr><td data-num="12"></td><td><pre>    </pre></td></tr><tr><td data-num="13"></td><td><pre>    <span class="token keyword">public</span> <span class="token keyword">int</span> <span class="token function">popSmallest</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span></pre></td></tr><tr><td data-num="14"></td><td><pre>        <span class="token keyword">int</span> num <span class="token operator">=</span> pQ<span class="token punctuation">.</span><span class="token function">poll</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span></pre></td></tr><tr><td data-num="15"></td><td><pre>        <span class="token keyword">return</span> num<span class="token punctuation">;</span></pre></td></tr><tr><td data-num="16"></td><td><pre>    <span class="token punctuation">&#125;</span></pre></td></tr><tr><td data-num="17"></td><td><pre>    </pre></td></tr><tr><td data-num="18"></td><td><pre>    <span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">addBack</span><span class="token punctuation">(</span><span class="token keyword">int</span> num<span class="token punctuation">)</span> <span class="token punctuation">&#123;</span></pre></td></tr><tr><td data-num="19"></td><td><pre>        <span class="token keyword">if</span><span class="token punctuation">(</span><span class="token operator">!</span>pQ<span class="token punctuation">.</span><span class="token function">contains</span><span class="token punctuation">(</span>num<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">&#123;</span></pre></td></tr><tr><td data-num="20"></td><td><pre>            pQ<span class="token punctuation">.</span><span class="token function">add</span><span class="token punctuation">(</span>num<span class="token punctuation">)</span><span class="token punctuation">;</span></pre></td></tr><tr><td data-num="21"></td><td><pre>        <span class="token punctuation">&#125;</span></pre></td></tr><tr><td data-num="22"></td><td><pre>    <span class="token punctuation">&#125;</span></pre></td></tr><tr><td data-num="23"></td><td><pre><span class="token punctuation">&#125;</span></pre></td></tr></table></figure></div><div class="tab" data-id="code" data-title="Python"><figure class="highlight python"><figcaption data-lang="python"></figcaption><table><tr><td data-num="1"></td><td><pre><span class="token keyword">class</span> <span class="token class-name">SmallestInfiniteSet</span><span class="token punctuation">:</span></pre></td></tr><tr><td data-num="2"></td><td><pre></pre></td></tr><tr><td data-num="3"></td><td><pre>    <span class="token keyword">def</span> <span class="token function">__init__</span><span class="token punctuation">(</span>self<span class="token punctuation">)</span><span class="token punctuation">:</span></pre></td></tr><tr><td data-num="4"></td><td><pre>        self<span class="token punctuation">.</span>min_num <span class="token operator">=</span> <span class="token number">1</span></pre></td></tr><tr><td data-num="5"></td><td><pre>        self<span class="token punctuation">.</span>pq <span class="token operator">=</span> <span class="token punctuation">[</span><span class="token punctuation">]</span>        </pre></td></tr><tr><td data-num="6"></td><td><pre></pre></td></tr><tr><td data-num="7"></td><td><pre>    <span class="token keyword">def</span> <span class="token function">popSmallest</span><span class="token punctuation">(</span>self<span class="token punctuation">)</span> <span class="token operator">-</span><span class="token operator">></span> <span class="token builtin">int</span><span class="token punctuation">:</span></pre></td></tr><tr><td data-num="8"></td><td><pre>        <span class="token keyword">if</span> self<span class="token punctuation">.</span>pq<span class="token punctuation">:</span></pre></td></tr><tr><td data-num="9"></td><td><pre>            <span class="token keyword">return</span> heapq<span class="token punctuation">.</span>heappop<span class="token punctuation">(</span>self<span class="token punctuation">.</span>pq<span class="token punctuation">)</span></pre></td></tr><tr><td data-num="10"></td><td><pre>        self<span class="token punctuation">.</span>min_num <span class="token operator">+=</span> <span class="token number">1</span></pre></td></tr><tr><td data-num="11"></td><td><pre>        <span class="token keyword">return</span> self<span class="token punctuation">.</span>min_num <span class="token operator">-</span> <span class="token number">1</span></pre></td></tr><tr><td data-num="12"></td><td><pre></pre></td></tr><tr><td data-num="13"></td><td><pre>    <span class="token keyword">def</span> <span class="token function">addBack</span><span class="token punctuation">(</span>self<span class="token punctuation">,</span> num<span class="token punctuation">:</span> <span class="token builtin">int</span><span class="token punctuation">)</span> <span class="token operator">-</span><span class="token operator">></span> <span class="token boolean">None</span><span class="token punctuation">:</span></pre></td></tr><tr><td data-num="14"></td><td><pre>        <span class="token keyword">if</span> self<span class="token punctuation">.</span>min_num <span class="token operator">></span> num <span class="token keyword">and</span> num <span class="token keyword">not</span> <span class="token keyword">in</span> self<span class="token punctuation">.</span>pq<span class="token punctuation">:</span></pre></td></tr><tr><td data-num="15"></td><td><pre>            heapq<span class="token punctuation">.</span>heappush<span class="token punctuation">(</span>self<span class="token punctuation">.</span>pq<span class="token punctuation">,</span> num<span class="token punctuation">)</span></pre></td></tr></table></figure></div>]]></content>
      
      
      <categories>
          
          <category> Coding </category>
          
          <category> Leetcode </category>
          
          <category> Medium </category>
          
      </categories>
      
      
        <tags>
            
            <tag> Leetcode </tag>
            
            <tag> Heap (Priority Queue) </tag>
            
            <tag> Medium </tag>
            
            <tag> Hash Table </tag>
            
            <tag> Design </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>1416. Restore The Array</title>
      <link href="/2023/04/24/Coding/leetcode/Hard/1416%20Restore%20The%20Array/"/>
      <url>/2023/04/24/Coding/leetcode/Hard/1416%20Restore%20The%20Array/</url>
      
        <content type="html"><![CDATA[<p>⭐️⭐️⭐️</p><h2 id="題目敘述"><a class="anchor" href="#題目敘述">#</a> <span class="exturl" data-url="aHR0cHM6Ly9sZWV0Y29kZS5jb20vcHJvYmxlbXMvcmVzdG9yZS10aGUtYXJyYXkv">題目敘述</span></h2><p>A program was supposed to print an array of integers. The program forgot to print whitespaces and the array is printed as a string of digits  <code>s</code>  and all we know is that all integers in the array were in the range  <code>[1, k]</code>  and there are no leading zeros in the array.</p><p>Given the string  <code>s</code>  and the integer  <code>k</code> , return <em>the number of the possible arrays that can be printed as  <code>s</code>  using the mentioned program</em>. Since the answer may be very large, return it <strong>modulo</strong>  <code>1e9 + 7</code> .</p><h3 id="example-1"><a class="anchor" href="#example-1">#</a> Example 1</h3><blockquote><p><strong>Input</strong>: s = “1000”, k = 10000<br><strong>Output</strong>: 1<br><strong>Explanation</strong>: The only possible array is [1000]</p></blockquote><h3 id="example-2"><a class="anchor" href="#example-2">#</a> Example 2</h3><blockquote><p><strong>Input</strong>: s = “1000”, k = 10<br><strong>Output</strong>: 0<br><strong>Explanation</strong>: There cannot be an array that was printed this way and has all integer &gt;= 1 and &lt;= 10.</p></blockquote><h3 id="example-3"><a class="anchor" href="#example-3">#</a> Example 3</h3><blockquote><p><strong>Input</strong>: s = “1317”, k = 2000<br><strong>Output</strong>: 8<br><strong>Explanation</strong>: Possible arrays are [1317],[131,7],[13,17],[1,317],[13,1,7],[1,31,7],[1,3,17],[1,3,1,7]</p></blockquote><h2 id="解題思路"><a class="anchor" href="#解題思路">#</a> 解題思路</h2><p>Let  <code>dp[i]</code>  denote <strong>the number of ways to partition the substring  <code>s[i:n]</code>  into valid numbers</strong>. The base case is  <code>dp[n] = 1</code> , since there is only one way to partition an empty string.</p><p>To compute  <code>dp[i]</code>  for a given index  <code>i</code> , we consider all possible substrings that can be formed starting from  <code>i</code> , such that the length of the substring is less than or equal to the number of digits in  <code>k</code> . We convert each substring to an integer and check if it is less than or equal to  <code>k</code> . If it is, we add the number of ways to partition the remaining string  <code>s[j+1:n]</code>  to  <code>dp[i]</code> , where  <code>j</code>  is the index of the last character in the substring. We sum up the values of  <code>dp[i]</code>  for all valid substrings to obtain the final value of  <code>dp[i]</code> .</p><h2 id="solution"><a class="anchor" href="#solution">#</a> Solution</h2><div class="tab" data-id="code" data-title="C++"><figure class="highlight cpp"><figcaption data-lang="C++"></figcaption><table><tr><td data-num="1"></td><td><pre><span class="token keyword">class</span> <span class="token class-name">Solution</span> <span class="token punctuation">&#123;</span></pre></td></tr><tr><td data-num="2"></td><td><pre><span class="token keyword">public</span><span class="token operator">:</span></pre></td></tr><tr><td data-num="3"></td><td><pre>    <span class="token keyword">int</span> <span class="token function">numberOfArrays</span><span class="token punctuation">(</span>string s<span class="token punctuation">,</span> <span class="token keyword">int</span> k<span class="token punctuation">)</span> <span class="token punctuation">&#123;</span></pre></td></tr><tr><td data-num="4"></td><td><pre>        <span class="token keyword">int</span> n <span class="token operator">=</span> s<span class="token punctuation">.</span><span class="token function">length</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span></pre></td></tr><tr><td data-num="5"></td><td><pre>        vector<span class="token operator">&lt;</span><span class="token keyword">long</span> <span class="token keyword">long</span><span class="token operator">></span> <span class="token function">dp</span><span class="token punctuation">(</span>n <span class="token operator">+</span> <span class="token number">1</span><span class="token punctuation">,</span> <span class="token number">0</span><span class="token punctuation">)</span><span class="token punctuation">;</span></pre></td></tr><tr><td data-num="6"></td><td><pre>        dp<span class="token punctuation">[</span>n<span class="token punctuation">]</span> <span class="token operator">=</span> <span class="token number">1</span><span class="token punctuation">;</span></pre></td></tr><tr><td data-num="7"></td><td><pre>        </pre></td></tr><tr><td data-num="8"></td><td><pre>        <span class="token keyword">for</span> <span class="token punctuation">(</span><span class="token keyword">int</span> i <span class="token operator">=</span> n <span class="token operator">-</span> <span class="token number">1</span><span class="token punctuation">;</span> i <span class="token operator">>=</span> <span class="token number">0</span><span class="token punctuation">;</span> i<span class="token operator">--</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span></pre></td></tr><tr><td data-num="9"></td><td><pre>            <span class="token keyword">if</span> <span class="token punctuation">(</span>s<span class="token punctuation">[</span>i<span class="token punctuation">]</span> <span class="token operator">==</span> <span class="token char">'0'</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span></pre></td></tr><tr><td data-num="10"></td><td><pre>                <span class="token keyword">continue</span><span class="token punctuation">;</span></pre></td></tr><tr><td data-num="11"></td><td><pre>            <span class="token punctuation">&#125;</span></pre></td></tr><tr><td data-num="12"></td><td><pre>            <span class="token keyword">long</span> <span class="token keyword">long</span> num <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span></pre></td></tr><tr><td data-num="13"></td><td><pre>            <span class="token keyword">int</span> j <span class="token operator">=</span> i<span class="token punctuation">;</span></pre></td></tr><tr><td data-num="14"></td><td><pre>            <span class="token keyword">while</span> <span class="token punctuation">(</span>j <span class="token operator">&lt;</span> n<span class="token punctuation">)</span> <span class="token punctuation">&#123;</span></pre></td></tr><tr><td data-num="15"></td><td><pre>                <span class="token keyword">try</span> <span class="token punctuation">&#123;</span></pre></td></tr><tr><td data-num="16"></td><td><pre>                    <span class="token keyword">int</span> x <span class="token operator">=</span> <span class="token function">stoi</span><span class="token punctuation">(</span>s<span class="token punctuation">.</span><span class="token function">substr</span><span class="token punctuation">(</span>i<span class="token punctuation">,</span> j<span class="token operator">-</span>i<span class="token operator">+</span><span class="token number">1</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span></pre></td></tr><tr><td data-num="17"></td><td><pre>                    <span class="token keyword">if</span> <span class="token punctuation">(</span>x <span class="token operator">></span> k<span class="token punctuation">)</span> <span class="token punctuation">&#123;</span></pre></td></tr><tr><td data-num="18"></td><td><pre>                        <span class="token keyword">break</span><span class="token punctuation">;</span></pre></td></tr><tr><td data-num="19"></td><td><pre>                    <span class="token punctuation">&#125;</span></pre></td></tr><tr><td data-num="20"></td><td><pre>                    num <span class="token operator">+=</span> dp<span class="token punctuation">[</span>j<span class="token operator">+</span><span class="token number">1</span><span class="token punctuation">]</span><span class="token punctuation">;</span></pre></td></tr><tr><td data-num="21"></td><td><pre>                <span class="token punctuation">&#125;</span></pre></td></tr><tr><td data-num="22"></td><td><pre>                <span class="token keyword">catch</span> <span class="token punctuation">(</span>std<span class="token double-colon punctuation">::</span>out_of_range<span class="token operator">&amp;</span> e<span class="token punctuation">)</span> <span class="token punctuation">&#123;</span></pre></td></tr><tr><td data-num="23"></td><td><pre>                    <span class="token keyword">break</span><span class="token punctuation">;</span></pre></td></tr><tr><td data-num="24"></td><td><pre>                <span class="token punctuation">&#125;</span></pre></td></tr><tr><td data-num="25"></td><td><pre>                j<span class="token operator">++</span><span class="token punctuation">;</span></pre></td></tr><tr><td data-num="26"></td><td><pre>            <span class="token punctuation">&#125;</span></pre></td></tr><tr><td data-num="27"></td><td><pre>            dp<span class="token punctuation">[</span>i<span class="token punctuation">]</span> <span class="token operator">=</span> num <span class="token operator">%</span> <span class="token number">1000000007</span><span class="token punctuation">;</span></pre></td></tr><tr><td data-num="28"></td><td><pre>        <span class="token punctuation">&#125;</span></pre></td></tr><tr><td data-num="29"></td><td><pre>        </pre></td></tr><tr><td data-num="30"></td><td><pre>        <span class="token keyword">return</span> dp<span class="token punctuation">[</span><span class="token number">0</span><span class="token punctuation">]</span><span class="token punctuation">;</span></pre></td></tr><tr><td data-num="31"></td><td><pre>    <span class="token punctuation">&#125;</span></pre></td></tr><tr><td data-num="32"></td><td><pre><span class="token punctuation">&#125;</span><span class="token punctuation">;</span></pre></td></tr></table></figure></div><div class="tab" data-id="code" data-title="Java"><pre><code class="language-java"></code></pre></div><div class="tab" data-id="code" data-title="Python"><figure class="highlight python"><figcaption data-lang="python"></figcaption><table><tr><td data-num="1"></td><td><pre><span class="token keyword">class</span> <span class="token class-name">Solution</span><span class="token punctuation">:</span></pre></td></tr><tr><td data-num="2"></td><td><pre>    <span class="token keyword">def</span> <span class="token function">numberOfArrays</span><span class="token punctuation">(</span>self<span class="token punctuation">,</span> s<span class="token punctuation">:</span> <span class="token builtin">str</span><span class="token punctuation">,</span> k<span class="token punctuation">:</span> <span class="token builtin">int</span><span class="token punctuation">)</span> <span class="token operator">-</span><span class="token operator">></span> <span class="token builtin">int</span><span class="token punctuation">:</span></pre></td></tr><tr><td data-num="3"></td><td><pre>        n <span class="token operator">=</span> <span class="token builtin">len</span><span class="token punctuation">(</span>s<span class="token punctuation">)</span></pre></td></tr><tr><td data-num="4"></td><td><pre>        dp <span class="token operator">=</span> <span class="token punctuation">[</span><span class="token number">0</span><span class="token punctuation">]</span> <span class="token operator">*</span> <span class="token punctuation">(</span>n <span class="token operator">+</span> <span class="token number">1</span><span class="token punctuation">)</span></pre></td></tr><tr><td data-num="5"></td><td><pre>        dp<span class="token punctuation">[</span><span class="token operator">-</span><span class="token number">1</span><span class="token punctuation">]</span> <span class="token operator">=</span> <span class="token number">1</span></pre></td></tr><tr><td data-num="6"></td><td><pre>        </pre></td></tr><tr><td data-num="7"></td><td><pre>        <span class="token keyword">for</span> i <span class="token keyword">in</span> <span class="token builtin">range</span><span class="token punctuation">(</span>n <span class="token operator">-</span> <span class="token number">1</span><span class="token punctuation">,</span> <span class="token operator">-</span><span class="token number">1</span><span class="token punctuation">,</span> <span class="token operator">-</span><span class="token number">1</span><span class="token punctuation">)</span><span class="token punctuation">:</span></pre></td></tr><tr><td data-num="8"></td><td><pre>            <span class="token keyword">if</span> s<span class="token punctuation">[</span>i<span class="token punctuation">]</span> <span class="token operator">==</span> <span class="token string">'0'</span><span class="token punctuation">:</span></pre></td></tr><tr><td data-num="9"></td><td><pre>                <span class="token keyword">continue</span></pre></td></tr><tr><td data-num="10"></td><td><pre>            num <span class="token operator">=</span> <span class="token number">0</span></pre></td></tr><tr><td data-num="11"></td><td><pre>            j <span class="token operator">=</span> i</pre></td></tr><tr><td data-num="12"></td><td><pre>            <span class="token keyword">while</span> j <span class="token operator">&lt;</span> n <span class="token keyword">and</span> <span class="token builtin">int</span><span class="token punctuation">(</span>s<span class="token punctuation">[</span>i<span class="token punctuation">:</span>j<span class="token operator">+</span><span class="token number">1</span><span class="token punctuation">]</span><span class="token punctuation">)</span> <span class="token operator">&lt;=</span> k<span class="token punctuation">:</span></pre></td></tr><tr><td data-num="13"></td><td><pre>                num <span class="token operator">+=</span> dp<span class="token punctuation">[</span>j<span class="token operator">+</span><span class="token number">1</span><span class="token punctuation">]</span></pre></td></tr><tr><td data-num="14"></td><td><pre>                j <span class="token operator">+=</span> <span class="token number">1</span></pre></td></tr><tr><td data-num="15"></td><td><pre>            dp<span class="token punctuation">[</span>i<span class="token punctuation">]</span> <span class="token operator">=</span> num <span class="token operator">%</span> <span class="token punctuation">(</span><span class="token number">10</span> <span class="token operator">**</span> <span class="token number">9</span> <span class="token operator">+</span> <span class="token number">7</span><span class="token punctuation">)</span></pre></td></tr><tr><td data-num="16"></td><td><pre>        </pre></td></tr><tr><td data-num="17"></td><td><pre>        <span class="token keyword">return</span> dp<span class="token punctuation">[</span><span class="token number">0</span><span class="token punctuation">]</span></pre></td></tr></table></figure></div>]]></content>
      
      
      <categories>
          
          <category> Coding </category>
          
          <category> Leetcode </category>
          
          <category> Hard </category>
          
      </categories>
      
      
        <tags>
            
            <tag> String </tag>
            
            <tag> Leetcode </tag>
            
            <tag> Dynamic Programming </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>1046. Last Stone Weight</title>
      <link href="/2023/04/24/Coding/leetcode/Easy/1046%20Last%20Stone%20Weight/"/>
      <url>/2023/04/24/Coding/leetcode/Easy/1046%20Last%20Stone%20Weight/</url>
      
        <content type="html"><![CDATA[<p>⭐️</p><h2 id="題目敘述"><a class="anchor" href="#題目敘述">#</a> <span class="exturl" data-url="aHR0cHM6Ly9sZWV0Y29kZS5jb20vcHJvYmxlbXMvbGFzdC1zdG9uZS13ZWlnaHQv">題目敘述</span></h2><p>You are given an array of integers  <code>stones</code>  where  <code>stones[i]</code>  is the weight of the  <code>ith</code>  stone.</p><p>We are playing a game with the stones. On each turn, we choose the heaviest two stones and smash them together. Suppose the heaviest two stones have weights  <code>x</code>  and  <code>y</code>  with  <code>x &lt;= y</code> . The result of this smash is:</p><ul><li>If  <code>x == y</code> , both stones are destroyed, and</li><li>If  <code>x != y</code> , the stone of weight  <code>x</code>  is destroyed, and the stone of weight y has new weight  <code>y - x</code> .</li></ul><p>At the end of the game, there is <strong>at most one</strong> stone left.</p><p>Return <em>the weight of the last remaining stone</em>. If there are no stones left, return  <code>0</code> .</p><h3 id="example-1"><a class="anchor" href="#example-1">#</a> Example 1</h3><blockquote><p><strong>Input:</strong> stones = [2,7,4,1,8,1]<br><strong>Output:</strong> 1<br><strong>Explanation:</strong><br>We combine 7 and 8 to get 1 so the array converts to [2,4,1,1,1] then,<br>we combine 2 and 4 to get 2 so the array converts to [2,1,1,1] then,<br>we combine 2 and 1 to get 1 so the array converts to [1,1,1] then,<br>we combine 1 and 1 to get 0 so the array converts to [1] then that’s the value of the last stone.</p></blockquote><h3 id="example-2"><a class="anchor" href="#example-2">#</a> Example 2</h3><blockquote><p><strong>Input:</strong> stones = [1]<br><strong>Output:</strong> 1</p></blockquote><h2 id="解題思路"><a class="anchor" href="#解題思路">#</a> 解題思路</h2><h2 id="solution"><a class="anchor" href="#solution">#</a> Solution</h2><div class="tab" data-id="code" data-title="C++"><figure class="highlight cpp"><figcaption data-lang="C++"></figcaption><table><tr><td data-num="1"></td><td><pre><span class="token keyword">class</span> <span class="token class-name">Solution</span> <span class="token punctuation">&#123;</span></pre></td></tr><tr><td data-num="2"></td><td><pre><span class="token keyword">public</span><span class="token operator">:</span></pre></td></tr><tr><td data-num="3"></td><td><pre>    <span class="token keyword">int</span> <span class="token function">lastStoneWeight</span><span class="token punctuation">(</span>vector<span class="token operator">&lt;</span><span class="token keyword">int</span><span class="token operator">></span><span class="token operator">&amp;</span> stones<span class="token punctuation">)</span> <span class="token punctuation">&#123;</span></pre></td></tr><tr><td data-num="4"></td><td><pre>        priority_queue<span class="token operator">&lt;</span><span class="token keyword">int</span><span class="token operator">></span> pq<span class="token punctuation">;</span></pre></td></tr><tr><td data-num="5"></td><td><pre>        <span class="token keyword">for</span> <span class="token punctuation">(</span><span class="token keyword">int</span> stone <span class="token operator">:</span> stones<span class="token punctuation">)</span> pq<span class="token punctuation">.</span><span class="token function">push</span><span class="token punctuation">(</span>stone<span class="token punctuation">)</span><span class="token punctuation">;</span></pre></td></tr><tr><td data-num="6"></td><td><pre>        <span class="token keyword">while</span> <span class="token punctuation">(</span>pq<span class="token punctuation">.</span><span class="token function">size</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">!=</span> <span class="token number">1</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span></pre></td></tr><tr><td data-num="7"></td><td><pre>            <span class="token keyword">int</span> x <span class="token operator">=</span> pq<span class="token punctuation">.</span><span class="token function">top</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span></pre></td></tr><tr><td data-num="8"></td><td><pre>            pq<span class="token punctuation">.</span><span class="token function">pop</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span></pre></td></tr><tr><td data-num="9"></td><td><pre>            <span class="token keyword">int</span> y <span class="token operator">=</span> pq<span class="token punctuation">.</span><span class="token function">top</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span></pre></td></tr><tr><td data-num="10"></td><td><pre>            pq<span class="token punctuation">.</span><span class="token function">pop</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span></pre></td></tr><tr><td data-num="11"></td><td><pre>            pq<span class="token punctuation">.</span><span class="token function">push</span><span class="token punctuation">(</span><span class="token function">max</span><span class="token punctuation">(</span>x<span class="token punctuation">,</span> y<span class="token punctuation">)</span> <span class="token operator">-</span> <span class="token function">min</span><span class="token punctuation">(</span>x<span class="token punctuation">,</span> y<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span></pre></td></tr><tr><td data-num="12"></td><td><pre>        <span class="token punctuation">&#125;</span></pre></td></tr><tr><td data-num="13"></td><td><pre>        <span class="token keyword">return</span> pq<span class="token punctuation">.</span><span class="token function">top</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span></pre></td></tr><tr><td data-num="14"></td><td><pre>    <span class="token punctuation">&#125;</span></pre></td></tr><tr><td data-num="15"></td><td><pre><span class="token punctuation">&#125;</span><span class="token punctuation">;</span></pre></td></tr></table></figure></div><div class="tab" data-id="code" data-title="Java"><figure class="highlight java"><figcaption data-lang="java"></figcaption><table><tr><td data-num="1"></td><td><pre><span class="token keyword">import</span> <span class="token import"><span class="token namespace">java<span class="token punctuation">.</span>util<span class="token punctuation">.</span></span><span class="token class-name">Comparator</span></span><span class="token punctuation">;</span></pre></td></tr><tr><td data-num="2"></td><td><pre><span class="token keyword">import</span> <span class="token import"><span class="token namespace">java<span class="token punctuation">.</span>util<span class="token punctuation">.</span></span><span class="token class-name">PriorityQueue</span></span><span class="token punctuation">;</span></pre></td></tr><tr><td data-num="3"></td><td><pre></pre></td></tr><tr><td data-num="4"></td><td><pre><span class="token keyword">class</span> <span class="token class-name">Solution</span> <span class="token punctuation">&#123;</span></pre></td></tr><tr><td data-num="5"></td><td><pre>    <span class="token keyword">public</span> <span class="token keyword">int</span> <span class="token function">lastStoneWeight</span><span class="token punctuation">(</span><span class="token keyword">int</span><span class="token punctuation">[</span><span class="token punctuation">]</span> stones<span class="token punctuation">)</span> <span class="token punctuation">&#123;</span></pre></td></tr><tr><td data-num="6"></td><td><pre>        <span class="token keyword">if</span><span class="token punctuation">(</span>stones<span class="token punctuation">.</span>length <span class="token operator">==</span> <span class="token number">0</span><span class="token punctuation">)</span> <span class="token keyword">return</span> <span class="token number">0</span><span class="token punctuation">;</span></pre></td></tr><tr><td data-num="7"></td><td><pre></pre></td></tr><tr><td data-num="8"></td><td><pre>        <span class="token class-name">PriorityQueue</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token class-name">Integer</span><span class="token punctuation">></span></span> pQ <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">PriorityQueue</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token punctuation">></span></span><span class="token punctuation">(</span><span class="token class-name">Comparator</span><span class="token punctuation">.</span><span class="token function">reverseOrder</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span></pre></td></tr><tr><td data-num="9"></td><td><pre>        <span class="token keyword">for</span><span class="token punctuation">(</span><span class="token keyword">int</span> s <span class="token operator">:</span> stones<span class="token punctuation">)</span><span class="token punctuation">&#123;</span></pre></td></tr><tr><td data-num="10"></td><td><pre>            pQ<span class="token punctuation">.</span><span class="token function">add</span><span class="token punctuation">(</span>s<span class="token punctuation">)</span><span class="token punctuation">;</span></pre></td></tr><tr><td data-num="11"></td><td><pre>        <span class="token punctuation">&#125;</span></pre></td></tr><tr><td data-num="12"></td><td><pre></pre></td></tr><tr><td data-num="13"></td><td><pre>        <span class="token keyword">while</span><span class="token punctuation">(</span>pQ<span class="token punctuation">.</span><span class="token function">size</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">>=</span> <span class="token number">2</span><span class="token punctuation">)</span><span class="token punctuation">&#123;</span></pre></td></tr><tr><td data-num="14"></td><td><pre>            <span class="token keyword">int</span> first <span class="token operator">=</span> pQ<span class="token punctuation">.</span><span class="token function">poll</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span></pre></td></tr><tr><td data-num="15"></td><td><pre>            <span class="token keyword">int</span> second <span class="token operator">=</span> pQ<span class="token punctuation">.</span><span class="token function">poll</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span></pre></td></tr><tr><td data-num="16"></td><td><pre></pre></td></tr><tr><td data-num="17"></td><td><pre>            pQ<span class="token punctuation">.</span><span class="token function">add</span><span class="token punctuation">(</span>first <span class="token operator">-</span> second<span class="token punctuation">)</span><span class="token punctuation">;</span></pre></td></tr><tr><td data-num="18"></td><td><pre>        <span class="token punctuation">&#125;</span></pre></td></tr><tr><td data-num="19"></td><td><pre></pre></td></tr><tr><td data-num="20"></td><td><pre>        <span class="token keyword">return</span> pQ<span class="token punctuation">.</span><span class="token function">peek</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span></pre></td></tr><tr><td data-num="21"></td><td><pre>    <span class="token punctuation">&#125;</span></pre></td></tr><tr><td data-num="22"></td><td><pre><span class="token punctuation">&#125;</span></pre></td></tr></table></figure></div><div class="tab" data-id="code" data-title="Python"><figure class="highlight python"><figcaption data-lang="python"></figcaption><table><tr><td data-num="1"></td><td><pre><span class="token keyword">class</span> <span class="token class-name">Solution</span><span class="token punctuation">:</span></pre></td></tr><tr><td data-num="2"></td><td><pre>    <span class="token keyword">def</span> <span class="token function">lastStoneWeight</span><span class="token punctuation">(</span>self<span class="token punctuation">,</span> stones<span class="token punctuation">:</span> List<span class="token punctuation">[</span><span class="token builtin">int</span><span class="token punctuation">]</span><span class="token punctuation">)</span> <span class="token operator">-</span><span class="token operator">></span> <span class="token builtin">int</span><span class="token punctuation">:</span></pre></td></tr><tr><td data-num="3"></td><td><pre>        max_heap <span class="token operator">=</span> <span class="token punctuation">[</span><span class="token operator">-</span>stone <span class="token keyword">for</span> stone <span class="token keyword">in</span> stones<span class="token punctuation">]</span></pre></td></tr><tr><td data-num="4"></td><td><pre>        heapq<span class="token punctuation">.</span>heapify<span class="token punctuation">(</span>max_heap<span class="token punctuation">)</span></pre></td></tr><tr><td data-num="5"></td><td><pre>        <span class="token keyword">while</span> <span class="token builtin">len</span><span class="token punctuation">(</span>max_heap<span class="token punctuation">)</span> <span class="token operator">></span> <span class="token number">1</span><span class="token punctuation">:</span></pre></td></tr><tr><td data-num="6"></td><td><pre>            x <span class="token operator">=</span> heapq<span class="token punctuation">.</span>heappop<span class="token punctuation">(</span>max_heap<span class="token punctuation">)</span></pre></td></tr><tr><td data-num="7"></td><td><pre>            y <span class="token operator">=</span> heapq<span class="token punctuation">.</span>heappop<span class="token punctuation">(</span>max_heap<span class="token punctuation">)</span></pre></td></tr><tr><td data-num="8"></td><td><pre>            <span class="token keyword">if</span> x <span class="token operator">!=</span> y<span class="token punctuation">:</span> heapq<span class="token punctuation">.</span>heappush<span class="token punctuation">(</span>max_heap<span class="token punctuation">,</span> x <span class="token operator">-</span> y<span class="token punctuation">)</span></pre></td></tr><tr><td data-num="9"></td><td><pre>        <span class="token keyword">if</span> max_heap<span class="token punctuation">:</span> <span class="token keyword">return</span> <span class="token operator">-</span>max_heap<span class="token punctuation">[</span><span class="token number">0</span><span class="token punctuation">]</span></pre></td></tr><tr><td data-num="10"></td><td><pre>        <span class="token keyword">else</span><span class="token punctuation">:</span> <span class="token keyword">return</span> <span class="token number">0</span></pre></td></tr></table></figure></div>]]></content>
      
      
      <categories>
          
          <category> Coding </category>
          
          <category> Leetcode </category>
          
          <category> Easy </category>
          
      </categories>
      
      
        <tags>
            
            <tag> Leetcode </tag>
            
            <tag> Easy </tag>
            
            <tag> Array </tag>
            
            <tag> Heap (Priority Queue) </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>1312. Minimum Insertion Steps to Make a String Palindrome</title>
      <link href="/2023/04/22/Coding/leetcode/Hard/1312%20Minimum%20Insertion%20Steps%20to%20Make%20a%20String%20Palindrome/"/>
      <url>/2023/04/22/Coding/leetcode/Hard/1312%20Minimum%20Insertion%20Steps%20to%20Make%20a%20String%20Palindrome/</url>
      
        <content type="html"><![CDATA[<p>⭐️⭐️⭐️</p><h2 id="題目敘述"><a class="anchor" href="#題目敘述">#</a> <span class="exturl" data-url="aHR0cHM6Ly9sZWV0Y29kZS5jb20vcHJvYmxlbXMvbWluaW11bS1pbnNlcnRpb24tc3RlcHMtdG8tbWFrZS1hLXN0cmluZy1wYWxpbmRyb21lLw==">題目敘述</span></h2><p>Given a string  <code>s</code> . In one step you can insert any character at any index of the string.</p><p>Return <em>the minimum number of steps</em> to make  <code>s</code>  palindrome.</p><p>A <strong>Palindrome String</strong> is one that reads the same backward as well as forward.</p><h3 id="example-1"><a class="anchor" href="#example-1">#</a> Example 1:</h3><blockquote><p><strong>Input</strong>: s = “zzazz”<br><strong>Output</strong>: 0<br><strong>Explanation</strong>: The string “zzazz” is already palindrome we do not need any insertions.</p></blockquote><h3 id="example-2"><a class="anchor" href="#example-2">#</a> Example 2:</h3><blockquote><p><strong>Input</strong>: s = “mbadm”<br><strong>Output</strong>: 2<br><strong>Explanation</strong>: String can be “mbdadbm” or “mdbabdm”.</p></blockquote><h3 id="example-3"><a class="anchor" href="#example-3">#</a> Example 3:</h3><blockquote><p><strong>Input</strong>: s = “leetcode”<br><strong>Output</strong>: 5<br><strong>Explanation</strong>: Inserting 5 characters the string becomes “leetcodocteel”.</p></blockquote><h2 id="解題思路"><a class="anchor" href="#解題思路">#</a> 解題思路</h2><p>We can create a 2D table dp, where <strong> <code>dp[i][j]</code>  represents the minimum number of insertions required to make the substring  <code>s[i:j+1]</code>  a palindrome</strong>.</p><p>The <strong>base case</strong> is when  <code>i=j</code> , where the substring is already a palindrome and no insertions are needed.</p><p>If  <code>s[i] == s[j]</code> , then the substring is already a palindrome and we can use the result of  <code>dp[i+1][j-1]</code> . Otherwise, we need to insert either a character at index  <code>i</code>  or  <code>j</code>  to make them equal, so we take the minimum of  <code>dp[i+1][j]</code>  and  <code>dp[i][j-1]</code>  and add 1 to it.</p><p>The final answer is stored in  <code>dp[0][n-1]</code> , where  <code>n</code>  is the length of the input string  <code>s</code> .</p><h2 id="solution"><a class="anchor" href="#solution">#</a> Solution</h2><div class="tab" data-id="code" data-title="C++"><figure class="highlight cpp"><figcaption data-lang="C++"></figcaption><table><tr><td data-num="1"></td><td><pre><span class="token keyword">class</span> <span class="token class-name">Solution</span> <span class="token punctuation">&#123;</span></pre></td></tr><tr><td data-num="2"></td><td><pre><span class="token keyword">public</span><span class="token operator">:</span></pre></td></tr><tr><td data-num="3"></td><td><pre>    <span class="token keyword">int</span> <span class="token function">minInsertions</span><span class="token punctuation">(</span>string s<span class="token punctuation">)</span> <span class="token punctuation">&#123;</span></pre></td></tr><tr><td data-num="4"></td><td><pre>        <span class="token keyword">int</span> n <span class="token operator">=</span> s<span class="token punctuation">.</span><span class="token function">size</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span></pre></td></tr><tr><td data-num="5"></td><td><pre>        vector<span class="token operator">&lt;</span>vector<span class="token operator">&lt;</span><span class="token keyword">int</span><span class="token operator">>></span> <span class="token function">dp</span><span class="token punctuation">(</span>n<span class="token punctuation">,</span> <span class="token generic-function"><span class="token function">vector</span><span class="token generic class-name"><span class="token operator">&lt;</span><span class="token keyword">int</span><span class="token operator">></span></span></span><span class="token punctuation">(</span>n<span class="token punctuation">,</span> <span class="token number">0</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span></pre></td></tr><tr><td data-num="6"></td><td><pre>        <span class="token keyword">for</span> <span class="token punctuation">(</span><span class="token keyword">int</span> i<span class="token operator">=</span>n<span class="token operator">-</span><span class="token number">2</span><span class="token punctuation">;</span> i<span class="token operator">>=</span><span class="token number">0</span><span class="token punctuation">;</span> i<span class="token operator">--</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span></pre></td></tr><tr><td data-num="7"></td><td><pre>            <span class="token keyword">for</span> <span class="token punctuation">(</span><span class="token keyword">int</span> j<span class="token operator">=</span>i<span class="token operator">+</span><span class="token number">1</span><span class="token punctuation">;</span> j<span class="token operator">&lt;</span>n<span class="token punctuation">;</span> j<span class="token operator">++</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span></pre></td></tr><tr><td data-num="8"></td><td><pre>                <span class="token keyword">if</span> <span class="token punctuation">(</span>s<span class="token punctuation">[</span>i<span class="token punctuation">]</span> <span class="token operator">==</span> s<span class="token punctuation">[</span>j<span class="token punctuation">]</span><span class="token punctuation">)</span> dp<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">[</span>j<span class="token punctuation">]</span> <span class="token operator">=</span> dp<span class="token punctuation">[</span>i<span class="token operator">+</span><span class="token number">1</span><span class="token punctuation">]</span><span class="token punctuation">[</span>j<span class="token operator">-</span><span class="token number">1</span><span class="token punctuation">]</span><span class="token punctuation">;</span></pre></td></tr><tr><td data-num="9"></td><td><pre>                <span class="token keyword">else</span> dp<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">[</span>j<span class="token punctuation">]</span> <span class="token operator">=</span> <span class="token function">min</span><span class="token punctuation">(</span>dp<span class="token punctuation">[</span>i<span class="token operator">+</span><span class="token number">1</span><span class="token punctuation">]</span><span class="token punctuation">[</span>j<span class="token punctuation">]</span><span class="token punctuation">,</span> dp<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">[</span>j<span class="token operator">-</span><span class="token number">1</span><span class="token punctuation">]</span><span class="token punctuation">)</span> <span class="token operator">+</span> <span class="token number">1</span><span class="token punctuation">;</span></pre></td></tr><tr><td data-num="10"></td><td><pre>            <span class="token punctuation">&#125;</span></pre></td></tr><tr><td data-num="11"></td><td><pre>        <span class="token punctuation">&#125;</span></pre></td></tr><tr><td data-num="12"></td><td><pre>        <span class="token keyword">return</span> dp<span class="token punctuation">[</span><span class="token number">0</span><span class="token punctuation">]</span><span class="token punctuation">[</span>n<span class="token operator">-</span><span class="token number">1</span><span class="token punctuation">]</span><span class="token punctuation">;</span></pre></td></tr><tr><td data-num="13"></td><td><pre>    <span class="token punctuation">&#125;</span></pre></td></tr><tr><td data-num="14"></td><td><pre><span class="token punctuation">&#125;</span><span class="token punctuation">;</span></pre></td></tr></table></figure></div><div class="tab" data-id="code" data-title="Java"><figure class="highlight java"><figcaption data-lang="java"></figcaption><table><tr><td data-num="1"></td><td><pre><span class="token keyword">class</span> <span class="token class-name">Solution</span> <span class="token punctuation">&#123;</span></pre></td></tr><tr><td data-num="2"></td><td><pre>    <span class="token keyword">public</span> <span class="token keyword">int</span> <span class="token function">minInsertions</span><span class="token punctuation">(</span><span class="token class-name">String</span> s<span class="token punctuation">)</span> <span class="token punctuation">&#123;</span></pre></td></tr><tr><td data-num="3"></td><td><pre>        <span class="token keyword">int</span> n <span class="token operator">=</span> s<span class="token punctuation">.</span><span class="token function">length</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span></pre></td></tr><tr><td data-num="4"></td><td><pre>        <span class="token keyword">int</span><span class="token punctuation">[</span><span class="token punctuation">]</span><span class="token punctuation">[</span><span class="token punctuation">]</span> dp <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token keyword">int</span><span class="token punctuation">[</span>n<span class="token punctuation">]</span><span class="token punctuation">[</span>n<span class="token punctuation">]</span><span class="token punctuation">;</span></pre></td></tr><tr><td data-num="5"></td><td><pre>        <span class="token keyword">for</span> <span class="token punctuation">(</span><span class="token keyword">int</span> i<span class="token operator">=</span>n<span class="token operator">-</span><span class="token number">1</span><span class="token punctuation">;</span> i<span class="token operator">>=</span><span class="token number">0</span><span class="token punctuation">;</span> i<span class="token operator">--</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span></pre></td></tr><tr><td data-num="6"></td><td><pre>            <span class="token keyword">for</span> <span class="token punctuation">(</span><span class="token keyword">int</span> j<span class="token operator">=</span>i<span class="token operator">+</span><span class="token number">1</span><span class="token punctuation">;</span> j<span class="token operator">&lt;</span>n<span class="token punctuation">;</span> j<span class="token operator">++</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span></pre></td></tr><tr><td data-num="7"></td><td><pre>                <span class="token keyword">if</span> <span class="token punctuation">(</span>s<span class="token punctuation">.</span><span class="token function">charAt</span><span class="token punctuation">(</span>i<span class="token punctuation">)</span> <span class="token operator">==</span> s<span class="token punctuation">.</span><span class="token function">charAt</span><span class="token punctuation">(</span>j<span class="token punctuation">)</span><span class="token punctuation">)</span> dp<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">[</span>j<span class="token punctuation">]</span> <span class="token operator">=</span> dp<span class="token punctuation">[</span>i<span class="token operator">+</span><span class="token number">1</span><span class="token punctuation">]</span><span class="token punctuation">[</span>j<span class="token operator">-</span><span class="token number">1</span><span class="token punctuation">]</span><span class="token punctuation">;</span></pre></td></tr><tr><td data-num="8"></td><td><pre>                <span class="token keyword">else</span> dp<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">[</span>j<span class="token punctuation">]</span> <span class="token operator">=</span> <span class="token class-name">Math</span><span class="token punctuation">.</span><span class="token function">min</span><span class="token punctuation">(</span>dp<span class="token punctuation">[</span>i<span class="token operator">+</span><span class="token number">1</span><span class="token punctuation">]</span><span class="token punctuation">[</span>j<span class="token punctuation">]</span><span class="token punctuation">,</span> dp<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">[</span>j<span class="token operator">-</span><span class="token number">1</span><span class="token punctuation">]</span><span class="token punctuation">)</span> <span class="token operator">+</span> <span class="token number">1</span><span class="token punctuation">;</span></pre></td></tr><tr><td data-num="9"></td><td><pre>            <span class="token punctuation">&#125;</span></pre></td></tr><tr><td data-num="10"></td><td><pre>        <span class="token punctuation">&#125;</span></pre></td></tr><tr><td data-num="11"></td><td><pre>        <span class="token keyword">return</span> dp<span class="token punctuation">[</span><span class="token number">0</span><span class="token punctuation">]</span><span class="token punctuation">[</span>n<span class="token operator">-</span><span class="token number">1</span><span class="token punctuation">]</span><span class="token punctuation">;</span></pre></td></tr><tr><td data-num="12"></td><td><pre>    <span class="token punctuation">&#125;</span></pre></td></tr><tr><td data-num="13"></td><td><pre><span class="token punctuation">&#125;</span></pre></td></tr></table></figure></div><div class="tab" data-id="code" data-title="Python"><figure class="highlight python"><figcaption data-lang="python"></figcaption><table><tr><td data-num="1"></td><td><pre><span class="token keyword">class</span> <span class="token class-name">Solution</span><span class="token punctuation">:</span></pre></td></tr><tr><td data-num="2"></td><td><pre>    <span class="token keyword">def</span> <span class="token function">minInsertions</span><span class="token punctuation">(</span>self<span class="token punctuation">,</span> s<span class="token punctuation">:</span> <span class="token builtin">str</span><span class="token punctuation">)</span> <span class="token operator">-</span><span class="token operator">></span> <span class="token builtin">int</span><span class="token punctuation">:</span></pre></td></tr><tr><td data-num="3"></td><td><pre>        n <span class="token operator">=</span> <span class="token builtin">len</span><span class="token punctuation">(</span>s<span class="token punctuation">)</span></pre></td></tr><tr><td data-num="4"></td><td><pre>        dp <span class="token operator">=</span> <span class="token punctuation">[</span><span class="token punctuation">[</span><span class="token number">0</span><span class="token punctuation">]</span> <span class="token operator">*</span> n <span class="token keyword">for</span> _ <span class="token keyword">in</span> <span class="token builtin">range</span><span class="token punctuation">(</span>n<span class="token punctuation">)</span><span class="token punctuation">]</span></pre></td></tr><tr><td data-num="5"></td><td><pre>        <span class="token keyword">for</span> i <span class="token keyword">in</span> <span class="token builtin">range</span><span class="token punctuation">(</span>n<span class="token operator">-</span><span class="token number">2</span><span class="token punctuation">,</span> <span class="token operator">-</span><span class="token number">1</span><span class="token punctuation">,</span> <span class="token operator">-</span><span class="token number">1</span><span class="token punctuation">)</span><span class="token punctuation">:</span></pre></td></tr><tr><td data-num="6"></td><td><pre>            <span class="token keyword">for</span> j <span class="token keyword">in</span> <span class="token builtin">range</span><span class="token punctuation">(</span>i<span class="token operator">+</span><span class="token number">1</span><span class="token punctuation">,</span> n<span class="token punctuation">)</span><span class="token punctuation">:</span></pre></td></tr><tr><td data-num="7"></td><td><pre>                <span class="token keyword">if</span> s<span class="token punctuation">[</span>i<span class="token punctuation">]</span> <span class="token operator">==</span> s<span class="token punctuation">[</span>j<span class="token punctuation">]</span><span class="token punctuation">:</span> dp<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">[</span>j<span class="token punctuation">]</span> <span class="token operator">=</span> dp<span class="token punctuation">[</span>i<span class="token operator">+</span><span class="token number">1</span><span class="token punctuation">]</span><span class="token punctuation">[</span>j<span class="token operator">-</span><span class="token number">1</span><span class="token punctuation">]</span></pre></td></tr><tr><td data-num="8"></td><td><pre>                <span class="token keyword">else</span><span class="token punctuation">:</span> dp<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">[</span>j<span class="token punctuation">]</span> <span class="token operator">=</span> <span class="token builtin">min</span><span class="token punctuation">(</span>dp<span class="token punctuation">[</span>i<span class="token operator">+</span><span class="token number">1</span><span class="token punctuation">]</span><span class="token punctuation">[</span>j<span class="token punctuation">]</span><span class="token punctuation">,</span> dp<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">[</span>j<span class="token operator">-</span><span class="token number">1</span><span class="token punctuation">]</span><span class="token punctuation">)</span> <span class="token operator">+</span> <span class="token number">1</span></pre></td></tr><tr><td data-num="9"></td><td><pre>        <span class="token keyword">return</span> dp<span class="token punctuation">[</span><span class="token number">0</span><span class="token punctuation">]</span><span class="token punctuation">[</span>n<span class="token operator">-</span><span class="token number">1</span><span class="token punctuation">]</span></pre></td></tr></table></figure></div>]]></content>
      
      
      <categories>
          
          <category> Coding </category>
          
          <category> Leetcode </category>
          
          <category> Hard </category>
          
      </categories>
      
      
        <tags>
            
            <tag> String </tag>
            
            <tag> Leetcode </tag>
            
            <tag> Dynamic Programming </tag>
            
            <tag> Hard </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>uva 630 - Anagrams (II)</title>
      <link href="/2023/04/21/Coding/uva/Star1/uva%20630/"/>
      <url>/2023/04/21/Coding/uva/Star1/uva%20630/</url>
      
        <content type="html"><![CDATA[<p>⭐️</p><h2 id="題目連結"><a class="anchor" href="#題目連結">#</a> 題目連結</h2><ul><li><span class="exturl" data-url="aHR0cHM6Ly96ZXJvanVkZ2UudHcvU2hvd1Byb2JsZW0/cHJvYmxlbWlkPWU2MDg=">ZeroJudge</span></li><li><span class="exturl" data-url="aHR0cHM6Ly9vbmxpbmVqdWRnZS5vcmcvZXh0ZXJuYWwvNi9wNjMwLnBkZg==">題目連結</span></li><li><span class="exturl" data-url="aHR0cHM6Ly9vbmxpbmVqdWRnZS5vcmcvaW5kZXgucGhwP29wdGlvbj1jb21fb25saW5lanVkZ2UmYW1wO0l0ZW1pZD04JmFtcDtjYXRlZ29yeT04JmFtcDtwYWdlPXNob3dfcHJvYmxlbSZhbXA7cHJvYmxlbT01NzE=">Online Judge</span></li><li><span class="exturl" data-url="aHR0cHM6Ly93d3cudWRlYnVnLmNvbS9VVmEvNjMw">uDebug</span></li></ul><h2 id="題目敘述"><a class="anchor" href="#題目敘述">#</a> 題目敘述</h2><p>One of the preferred kinds of entertainment of people living in final stages of XX century is filling in the <a href="#%E8%A8%BB%E8%A7%A3">crosswords<sub>1</sub></a>. Almost every newspaper and magazine has a column dedicated to entertainment but only <a href="#%E8%A8%BB%E8%A7%A3">amateurs<sub>2</sub></a> have enough after solving one crossword. Real professionals require more than one crossword for a week. And it is so dull — just crosswords and crosswords — while so many other <a href="#%E8%A8%BB%E8%A7%A3">riddles<sub>3</sub></a> are waiting out there. For those are special, dedicated magazines. There are also quite a few competitions to take part in, even reaching the level of World Championships. Anyway — a lot.</p><p>You were taken on by such a professional for whom riddle solving competing is just a job. He had a brilliant idea to use a computer in work not just to play games. Somehow anagrams found themselves first in the line. You are to write a program which searches for anagrams of given words, using a given vocabulary, <a href="#%E8%A8%BB%E8%A7%A3">tediously<sub>4</sub></a> filled with new words by yours employer.</p><h2 id="input"><a class="anchor" href="#input">#</a> Input</h2><p>The first line contains  <code>T</code>  the number of test cases. There is a blank line after this. Then,  <code>T</code>  test cases follow — each separated by a blank line. Each test case has the following structure:</p><p><em>&lt; number of words in vocabulary &gt;</em><br><em>&lt; word 1 &gt;</em><br>…<br><em>&lt; word N &gt;</em><br><em>&lt; test word 1 &gt;</em><br>…<br><em>&lt; test word k &gt;</em><br><strong>END</strong></p><p><em>&lt; number of words in vocabulary &gt;</em> is an integer number  <code>N &lt; 1000</code> . <em>&lt; word 1 &gt;</em> up to <em>&lt; word N &gt;</em> are words from the vocabulary. <em>&lt; test word 1 &gt;</em> up to <em>&lt; test word k &gt;</em> are the words to find <a href="#%E8%A8%BB%E8%A7%A3">anagrams<sub>5</sub></a> for. All words are lowercase (word <strong>‘END’</strong> means end of data — it is <strong>NOT</strong> a test word). You can assume all words are not longer than 20 characters.</p><h2 id="output"><a class="anchor" href="#output">#</a> Output</h2><p>For each <em>&lt; test word &gt;</em> — in the order in which it appeared — list the found anagrams in the following way:<br><strong>Anagrams for:</strong> <em>&lt; test word &gt;</em><br><em>&lt; No &gt;</em>) <em>&lt; anagram &gt;</em><br>…<br><em>&lt; No &gt;</em> should be printed on 3 chars.</p><p>In case of failing to find any anagrams your output should look like this:<br><strong>Anagrams for:</strong> <em>&lt; test word &gt;</em><br><strong>No anagrams for: <em><test word></em></strong></p><p>Print a blank line between datasets.</p><h2 id="sample-input"><a class="anchor" href="#sample-input">#</a> Sample Input</h2><blockquote><p>1<br>8<br>atol<br>lato<br>microphotographics<br>rata<br>rola<br>tara<br>tola<br>pies<br>tola<br>kola<br>aatr<br>photomicrographics<br>END</p></blockquote><h2 id="sample-output"><a class="anchor" href="#sample-output">#</a> Sample Output</h2><blockquote><p>Anagrams for: tola<br>1) atol<br>2) lato<br>3) tola<br>Anagrams for: kola<br>No anagrams for: kola<br>Anagrams for: aatr<br>1) rata<br>2) tara<br>Anagrams for: photomicrographics<br>1) microphotographics</p></blockquote><h2 id="solution"><a class="anchor" href="#solution">#</a> Solution</h2><figure class="highlight cpp"><figcaption data-lang="C++"></figcaption><table><tr><td data-num="1"></td><td><pre><span class="token macro property"><span class="token directive-hash">#</span><span class="token directive keyword">include</span> <span class="token string">&lt;bits/stdc++.h></span></span></pre></td></tr><tr><td data-num="2"></td><td><pre></pre></td></tr><tr><td data-num="3"></td><td><pre><span class="token keyword">using</span> <span class="token keyword">namespace</span> std<span class="token punctuation">;</span></pre></td></tr><tr><td data-num="4"></td><td><pre></pre></td></tr><tr><td data-num="5"></td><td><pre><span class="token keyword">int</span> <span class="token function">main</span> <span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span></pre></td></tr><tr><td data-num="6"></td><td><pre>    <span class="token keyword">int</span> T<span class="token punctuation">;</span> cin <span class="token operator">>></span> T<span class="token punctuation">;</span></pre></td></tr><tr><td data-num="7"></td><td><pre>    <span class="token keyword">while</span> <span class="token punctuation">(</span>T<span class="token operator">--</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span></pre></td></tr><tr><td data-num="8"></td><td><pre>        <span class="token keyword">int</span> n<span class="token punctuation">;</span> cin <span class="token operator">>></span> n<span class="token punctuation">;</span></pre></td></tr><tr><td data-num="9"></td><td><pre>        vector<span class="token operator">&lt;</span>pair<span class="token operator">&lt;</span>string<span class="token punctuation">,</span> vector<span class="token operator">&lt;</span><span class="token keyword">char</span><span class="token operator">>></span><span class="token operator">></span> vocab<span class="token punctuation">;</span></pre></td></tr><tr><td data-num="10"></td><td><pre>        string str<span class="token punctuation">;</span></pre></td></tr><tr><td data-num="11"></td><td><pre>        vector<span class="token operator">&lt;</span><span class="token keyword">char</span><span class="token operator">></span> tmp<span class="token punctuation">;</span></pre></td></tr><tr><td data-num="12"></td><td><pre>        <span class="token keyword">for</span> <span class="token punctuation">(</span><span class="token keyword">int</span> i<span class="token operator">=</span><span class="token number">0</span><span class="token punctuation">;</span> i<span class="token operator">&lt;</span>n<span class="token punctuation">;</span> i<span class="token operator">++</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span></pre></td></tr><tr><td data-num="13"></td><td><pre>            cin <span class="token operator">>></span> str<span class="token punctuation">;</span></pre></td></tr><tr><td data-num="14"></td><td><pre>            tmp<span class="token punctuation">.</span><span class="token function">clear</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span></pre></td></tr><tr><td data-num="15"></td><td><pre>            <span class="token keyword">for</span> <span class="token punctuation">(</span><span class="token keyword">char</span> c <span class="token operator">:</span> str<span class="token punctuation">)</span> tmp<span class="token punctuation">.</span><span class="token function">push_back</span><span class="token punctuation">(</span>c<span class="token punctuation">)</span><span class="token punctuation">;</span></pre></td></tr><tr><td data-num="16"></td><td><pre>            <span class="token function">sort</span><span class="token punctuation">(</span>tmp<span class="token punctuation">.</span><span class="token function">begin</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">,</span> tmp<span class="token punctuation">.</span><span class="token function">end</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span></pre></td></tr><tr><td data-num="17"></td><td><pre>            vocab<span class="token punctuation">.</span><span class="token function">push_back</span><span class="token punctuation">(</span><span class="token function">make_pair</span><span class="token punctuation">(</span>str<span class="token punctuation">,</span> tmp<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span></pre></td></tr><tr><td data-num="18"></td><td><pre>        <span class="token punctuation">&#125;</span></pre></td></tr><tr><td data-num="19"></td><td><pre></pre></td></tr><tr><td data-num="20"></td><td><pre>        <span class="token keyword">while</span> <span class="token punctuation">(</span>cin <span class="token operator">>></span> str<span class="token punctuation">)</span> <span class="token punctuation">&#123;</span></pre></td></tr><tr><td data-num="21"></td><td><pre>            <span class="token keyword">if</span> <span class="token punctuation">(</span>str <span class="token operator">==</span> <span class="token string">"END"</span><span class="token punctuation">)</span> <span class="token keyword">break</span><span class="token punctuation">;</span></pre></td></tr><tr><td data-num="22"></td><td><pre>            vector<span class="token operator">&lt;</span><span class="token keyword">char</span><span class="token operator">></span> v<span class="token punctuation">;</span></pre></td></tr><tr><td data-num="23"></td><td><pre>            v<span class="token punctuation">.</span><span class="token function">clear</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>  </pre></td></tr><tr><td data-num="24"></td><td><pre>            <span class="token keyword">for</span> <span class="token punctuation">(</span><span class="token keyword">char</span> c <span class="token operator">:</span> str<span class="token punctuation">)</span> v<span class="token punctuation">.</span><span class="token function">push_back</span><span class="token punctuation">(</span>c<span class="token punctuation">)</span><span class="token punctuation">;</span></pre></td></tr><tr><td data-num="25"></td><td><pre>            <span class="token function">sort</span><span class="token punctuation">(</span>v<span class="token punctuation">.</span><span class="token function">begin</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">,</span> v<span class="token punctuation">.</span><span class="token function">end</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span></pre></td></tr><tr><td data-num="26"></td><td><pre>            <span class="token keyword">bool</span> hasAnagram <span class="token operator">=</span> <span class="token boolean">false</span><span class="token punctuation">;</span></pre></td></tr><tr><td data-num="27"></td><td><pre>            <span class="token keyword">int</span> cnt <span class="token operator">=</span> <span class="token number">1</span><span class="token punctuation">;</span></pre></td></tr><tr><td data-num="28"></td><td><pre>            cout <span class="token operator">&lt;&lt;</span> <span class="token string">"Anagrams for: "</span> <span class="token operator">&lt;&lt;</span> str <span class="token operator">&lt;&lt;</span> <span class="token string">"\n"</span><span class="token punctuation">;</span></pre></td></tr><tr><td data-num="29"></td><td><pre>            <span class="token keyword">for</span> <span class="token punctuation">(</span><span class="token keyword">auto</span> p <span class="token operator">:</span> vocab<span class="token punctuation">)</span> <span class="token punctuation">&#123;</span></pre></td></tr><tr><td data-num="30"></td><td><pre>                <span class="token keyword">if</span> <span class="token punctuation">(</span>p<span class="token punctuation">.</span>second <span class="token operator">==</span> v<span class="token punctuation">)</span> <span class="token punctuation">&#123;</span></pre></td></tr><tr><td data-num="31"></td><td><pre>                    cout <span class="token operator">&lt;&lt;</span> <span class="token string">"  "</span> <span class="token operator">&lt;&lt;</span> cnt<span class="token operator">++</span> <span class="token operator">&lt;&lt;</span><span class="token string">") "</span> <span class="token operator">&lt;&lt;</span> p<span class="token punctuation">.</span>first <span class="token operator">&lt;&lt;</span> <span class="token string">"\n"</span><span class="token punctuation">;</span></pre></td></tr><tr><td data-num="32"></td><td><pre>                    hasAnagram <span class="token operator">=</span> <span class="token boolean">true</span><span class="token punctuation">;</span> </pre></td></tr><tr><td data-num="33"></td><td><pre>                <span class="token punctuation">&#125;</span></pre></td></tr><tr><td data-num="34"></td><td><pre>            <span class="token punctuation">&#125;</span></pre></td></tr><tr><td data-num="35"></td><td><pre>            <span class="token keyword">if</span> <span class="token punctuation">(</span><span class="token operator">!</span>hasAnagram<span class="token punctuation">)</span> cout <span class="token operator">&lt;&lt;</span> <span class="token string">"No anagrams for: "</span> <span class="token operator">&lt;&lt;</span> str <span class="token operator">&lt;&lt;</span> <span class="token string">"\n"</span><span class="token punctuation">;</span></pre></td></tr><tr><td data-num="36"></td><td><pre>        <span class="token punctuation">&#125;</span></pre></td></tr><tr><td data-num="37"></td><td><pre>        <span class="token keyword">if</span> <span class="token punctuation">(</span>T <span class="token operator">!=</span> <span class="token number">0</span><span class="token punctuation">)</span> cout <span class="token operator">&lt;&lt;</span> <span class="token string">"\n"</span><span class="token punctuation">;</span></pre></td></tr><tr><td data-num="38"></td><td><pre>    <span class="token punctuation">&#125;</span></pre></td></tr><tr><td data-num="39"></td><td><pre>    <span class="token keyword">return</span> <span class="token number">0</span><span class="token punctuation">;</span></pre></td></tr><tr><td data-num="40"></td><td><pre><span class="token punctuation">&#125;</span></pre></td></tr></table></figure><h2 id="註解"><a class="anchor" href="#註解">#</a> 註解</h2><ol><li><a href="#%E9%A1%8C%E7%9B%AE%E6%95%98%E8%BF%B0">crossword <em>n. 縱橫填字遊戲</em></a></li></ol><blockquote><p>A game in which you write words that are the answers to questions in a pattern of black and white squares.<br><strong>ex.</strong> <em>I do the Times crossword every morning.</em></p></blockquote><ol start="2"><li><a href="#%E9%A1%8C%E7%9B%AE%E6%95%98%E8%BF%B0">amateurs</a></li></ol><blockquote><ul><li><em>adj. 業餘愛好的，非職業的</em><br> Taking part in an activity for pleasure, not as a job.<br><strong>ex.</strong> <em>He was an amateur singer until the age of 40, when he turned professional.</em></li><li><em>n. 外行；粗通（某一行）的人</em><br> Someone who does not have much skill in what they do.<br><strong>ex.</strong> <em>I won’t be giving them any more work - they’re a bunch of amateurs.</em></li></ul></blockquote><ol start="3"><li><a href="#%E9%A1%8C%E7%9B%AE%E6%95%98%E8%BF%B0">riddle</a></li></ol><blockquote><ul><li><em>n. 謎；謎語</em><br> A type of question that describes something in a difficult and confusing way and has a clever or funny answer, often asked as a game.</li><li><em>n. 奧秘；費解之事</em><br> Something that is confusing, or a problem that is difficult to solve.<br><strong>ex.</strong> <em>Scientists may have solved the riddle of Saturn’s rings.</em></li><li><em>v. 使布滿洞孔</em><br> To make a lot of holes in something.<br><strong>ex.</strong> <em>The anti-aircraft guns riddled the plane’s wings with bullets.</em></li></ul></blockquote><ol start="4"><li><a href="#%E9%A1%8C%E7%9B%AE%E6%95%98%E8%BF%B0">tediously <em>adv. 單調乏味地，無趣地</em></a></li></ol><blockquote><p>In a boring way that continues for a long time.<br><strong>ex.</strong> <em>Many people work tediously at a boring job for many years.</em></p></blockquote><ol start="5"><li><a href="#input">anagram <em>n. 相同字母異序詞</em></a></li></ol><blockquote><p>A word or phrase made by using the letters of another word or phrase in a different order<br><strong>ex.</strong> <em>“Neat” is an anagram of “a net”.</em></p></blockquote>]]></content>
      
      
      <categories>
          
          <category> Coding </category>
          
          <category> UVA </category>
          
          <category> Star1 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> Star1 </tag>
            
            <tag> CPE </tag>
            
            <tag> UVA </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>C++ - vector</title>
      <link href="/2023/04/21/programming/CPP/cpp%20vector/"/>
      <url>/2023/04/21/programming/CPP/cpp%20vector/</url>
      
        <content type="html"><![CDATA[<p>C++ vector 是一個可以改變陣列大小的序列容器。C++ vector 是陣列的升級版，主要因為 vector 能高效地對記憶體進行管理以及動態增長。vector 其實就是將陣列和方法封裝形成的一個類別。</p><p>C++ 要使用 vector 容器的話，<strong>需要引入的標頭檔： <code>&lt;vector&gt;</code> </strong></p><h2 id="vector-初始化"><a class="anchor" href="#vector-初始化">#</a> vector 初始化</h2><p>這樣是宣告一個 int 整數類型的 vector，裡面沒有任何元素 (空)，size 為 0 表示 vector 容器中沒有任何元素，capacity 也是 0。</p><figure class="highlight cpp"><figcaption data-lang="C++"></figcaption><table><tr><td data-num="1"></td><td><pre><span class="token macro property"><span class="token directive-hash">#</span><span class="token directive keyword">include</span> <span class="token string">&lt;vector></span></span></pre></td></tr><tr class="marked"><td data-num="2"></td><td><pre>vector<span class="token operator">&lt;</span><span class="token keyword">int</span><span class="token operator">></span> v<span class="token punctuation">;</span></pre></td></tr></table></figure><h3 id="push_back"><a class="anchor" href="#push_back">#</a> push_back()</h3><p>先宣告一個空的 vector，再透過  <code>push_back()</code>  將資料一直推進去。</p><figure class="highlight cpp"><figcaption data-lang="C++"></figcaption><table><tr><td data-num="1"></td><td><pre>vector<span class="token operator">&lt;</span><span class="token keyword">int</span><span class="token operator">></span> v<span class="token punctuation">;</span></pre></td></tr><tr class="marked"><td data-num="2"></td><td><pre>v<span class="token punctuation">.</span><span class="token function">push_back</span><span class="token punctuation">(</span><span class="token number">1</span><span class="token punctuation">)</span><span class="token punctuation">;</span></pre></td></tr><tr class="marked"><td data-num="3"></td><td><pre>v<span class="token punctuation">.</span><span class="token function">push_back</span><span class="token punctuation">(</span><span class="token number">2</span><span class="token punctuation">)</span><span class="token punctuation">;</span></pre></td></tr></table></figure><p>也可以寫成一行，但這語法需要<strong>編譯器 C++11</strong> 支援。</p><figure class="highlight cpp"><figcaption data-lang="C++"></figcaption><table><tr><td data-num="1"></td><td><pre>vector<span class="token operator">&lt;</span><span class="token keyword">int</span><span class="token operator">></span> v <span class="token operator">=</span> <span class="token punctuation">&#123;</span><span class="token number">1</span><span class="token punctuation">,</span> <span class="token number">2</span><span class="token punctuation">,</span> <span class="token number">3</span><span class="token punctuation">&#125;</span><span class="token punctuation">;</span></pre></td></tr><tr><td data-num="2"></td><td><pre><span class="token comment">// or</span></pre></td></tr><tr><td data-num="3"></td><td><pre>vector<span class="token operator">&lt;</span><span class="token keyword">int</span><span class="token operator">></span> <span class="token function">v</span><span class="token punctuation">(</span><span class="token punctuation">&#123;</span><span class="token number">1</span><span class="token punctuation">,</span> <span class="token number">2</span><span class="token punctuation">,</span> <span class="token number">3</span><span class="token punctuation">&#125;</span><span class="token punctuation">)</span><span class="token punctuation">;</span></pre></td></tr></table></figure><h3 id="複製容器"><a class="anchor" href="#複製容器">#</a> 複製容器</h3><p>假如要從另外一個 vector 容器複製資料過來當作初始值的話可以這樣寫。</p><figure class="highlight cpp"><figcaption data-lang="C++"></figcaption><table><tr><td data-num="1"></td><td><pre>vector<span class="token operator">&lt;</span><span class="token keyword">int</span><span class="token operator">></span> v1 <span class="token operator">=</span> <span class="token punctuation">&#123;</span><span class="token number">1</span><span class="token punctuation">,</span> <span class="token number">2</span><span class="token punctuation">,</span> <span class="token number">3</span><span class="token punctuation">&#125;</span><span class="token punctuation">;</span></pre></td></tr><tr class="marked"><td data-num="2"></td><td><pre>vector<span class="token operator">&lt;</span><span class="token keyword">int</span><span class="token operator">></span> v2 <span class="token operator">=</span> v1<span class="token punctuation">;</span></pre></td></tr><tr><td data-num="3"></td><td><pre><span class="token comment">// or</span></pre></td></tr><tr><td data-num="4"></td><td><pre>vector<span class="token operator">&lt;</span><span class="token keyword">int</span><span class="token operator">></span> v1 <span class="token operator">=</span> <span class="token punctuation">&#123;</span><span class="token number">1</span><span class="token punctuation">,</span> <span class="token number">2</span><span class="token punctuation">,</span> <span class="token number">3</span><span class="token punctuation">&#125;</span><span class="token punctuation">;</span></pre></td></tr><tr class="marked"><td data-num="5"></td><td><pre>vector<span class="token operator">&lt;</span><span class="token keyword">int</span><span class="token operator">></span> <span class="token function">v2</span><span class="token punctuation">(</span>v1<span class="token punctuation">)</span><span class="token punctuation">;</span></pre></td></tr></table></figure><p>也可以從傳統陣列裡複製過來當作初始值。</p><figure class="highlight cpp"><figcaption data-lang="C++"></figcaption><table><tr><td data-num="1"></td><td><pre><span class="token keyword">int</span> n<span class="token punctuation">[</span><span class="token number">3</span><span class="token punctuation">]</span> <span class="token operator">=</span> <span class="token punctuation">&#123;</span><span class="token number">1</span><span class="token punctuation">,</span> <span class="token number">2</span><span class="token punctuation">,</span> <span class="token number">3</span><span class="token punctuation">&#125;</span><span class="token punctuation">;</span></pre></td></tr><tr class="marked"><td data-num="2"></td><td><pre>vector<span class="token operator">&lt;</span><span class="token keyword">int</span><span class="token operator">></span> <span class="token function">v</span><span class="token punctuation">(</span>n<span class="token punctuation">,</span> n<span class="token operator">+</span><span class="token number">3</span><span class="token punctuation">)</span><span class="token punctuation">;</span></pre></td></tr></table></figure><p>不想複製來源 vector 全部的資料，想要指定複製 vector 的範圍的話也可以，例如我要複製 v1 vector 的第三個元素到倒數第二個元素。</p><figure class="highlight cpp"><figcaption data-lang="C++"></figcaption><table><tr><td data-num="1"></td><td><pre>vector<span class="token operator">&lt;</span><span class="token keyword">int</span><span class="token operator">></span> v1 <span class="token operator">=</span> <span class="token punctuation">&#123;</span><span class="token number">1</span><span class="token punctuation">,</span> <span class="token number">2</span><span class="token punctuation">,</span> <span class="token number">3</span><span class="token punctuation">,</span> <span class="token number">4</span><span class="token punctuation">,</span> <span class="token number">5</span><span class="token punctuation">&#125;</span><span class="token punctuation">;</span></pre></td></tr><tr class="marked"><td data-num="2"></td><td><pre>vector<span class="token operator">&lt;</span><span class="token keyword">int</span><span class="token operator">></span> <span class="token function">v2</span><span class="token punctuation">(</span>v1<span class="token punctuation">.</span><span class="token function">begin</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">+</span> <span class="token number">2</span><span class="token punctuation">,</span> v1<span class="token punctuation">.</span><span class="token function">end</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">-</span> <span class="token number">1</span><span class="token punctuation">)</span><span class="token punctuation">;</span></pre></td></tr></table></figure><p>如果是指定複製傳統陣列的範圍的話，可以這樣寫。</p><figure class="highlight cpp"><figcaption data-lang="C++"></figcaption><table><tr><td data-num="1"></td><td><pre><span class="token keyword">int</span> n<span class="token punctuation">[</span><span class="token number">5</span><span class="token punctuation">]</span> <span class="token operator">=</span> <span class="token punctuation">&#123;</span><span class="token number">1</span><span class="token punctuation">,</span> <span class="token number">2</span><span class="token punctuation">,</span> <span class="token number">3</span><span class="token punctuation">,</span> <span class="token number">4</span><span class="token punctuation">,</span> <span class="token number">5</span><span class="token punctuation">&#125;</span><span class="token punctuation">;</span></pre></td></tr><tr class="marked"><td data-num="2"></td><td><pre>vector<span class="token operator">&lt;</span><span class="token keyword">int</span><span class="token operator">></span> <span class="token function">v</span><span class="token punctuation">(</span>n <span class="token operator">+</span> <span class="token number">2</span><span class="token punctuation">,</span> n <span class="token operator">+</span> <span class="token number">4</span><span class="token punctuation">)</span><span class="token punctuation">;</span></pre></td></tr></table></figure><h2 id="存取-vector-元素"><a class="anchor" href="#存取-vector-元素">#</a> 存取 vector 元素</h2><p>vector 用  <code>[]</code>  來隨機存取元素，第一個元素為  <code>v[0]</code> ，索引值是  <code>0</code> ，第二個元素為  <code>v[1]</code> ，索引值是  <code>1</code> ，依此類推， <code>[]</code>  <strong>不只可以讀取元素也可以用來修改元素</strong>。</p><figure class="highlight cpp"><figcaption data-lang="C++"></figcaption><table><tr><td data-num="1"></td><td><pre>vector<span class="token operator">&lt;</span><span class="token keyword">int</span><span class="token operator">></span> v <span class="token operator">=</span> <span class="token punctuation">&#123;</span><span class="token number">1</span><span class="token punctuation">,</span> <span class="token number">2</span><span class="token punctuation">,</span> <span class="token number">3</span><span class="token punctuation">&#125;</span><span class="token punctuation">;</span></pre></td></tr><tr><td data-num="2"></td><td><pre>cout <span class="token operator">&lt;&lt;</span> <span class="token string">"v[0] = "</span> <span class="token operator">&lt;&lt;</span> v<span class="token punctuation">[</span><span class="token number">0</span><span class="token punctuation">]</span> <span class="token operator">&lt;&lt;</span> endl<span class="token punctuation">;</span></pre></td></tr><tr class="marked"><td data-num="3"></td><td><pre>v<span class="token punctuation">[</span><span class="token number">0</span><span class="token punctuation">]</span> <span class="token operator">=</span> <span class="token number">4</span><span class="token punctuation">;</span></pre></td></tr><tr><td data-num="4"></td><td><pre>cout <span class="token operator">&lt;&lt;</span> <span class="token string">"v[0] = "</span> <span class="token operator">&lt;&lt;</span> v<span class="token punctuation">[</span><span class="token number">0</span><span class="token punctuation">]</span> <span class="token operator">&lt;&lt;</span> endl<span class="token punctuation">;</span></pre></td></tr></table></figure><blockquote><p>v[0] = 1<br>v[0] = 4</p></blockquote><h2 id="在-vector-尾巴新增元素"><a class="anchor" href="#在-vector-尾巴新增元素">#</a> 在 vector 尾巴新增元素</h2><p>要在 vector 尾巴新增元素，要使用前面提到的  <code>push_back()</code> ，它會把元素加在 vector 的尾巴。</p><figure class="highlight cpp"><figcaption data-lang="C++"></figcaption><table><tr><td data-num="1"></td><td><pre>vector<span class="token operator">&lt;</span><span class="token keyword">int</span><span class="token operator">></span> v<span class="token punctuation">;</span></pre></td></tr><tr class="marked"><td data-num="2"></td><td><pre>v<span class="token punctuation">.</span><span class="token function">push_back</span><span class="token punctuation">(</span><span class="token number">0</span><span class="token punctuation">)</span><span class="token punctuation">;</span></pre></td></tr></table></figure><h2 id="在-vector-尾巴移除元素"><a class="anchor" href="#在-vector-尾巴移除元素">#</a> 在 vector 尾巴移除元素</h2><p>移除 vector 容器尾巴的元素用  <code>pop_back()</code> ，<strong>一次只能從尾端移除一個元素，不能指定移除的數量</strong>。</p><figure class="highlight cpp"><figcaption data-lang="C++"></figcaption><table><tr><td data-num="1"></td><td><pre>vector<span class="token operator">&lt;</span><span class="token keyword">int</span><span class="token operator">></span> v <span class="token operator">=</span> <span class="token punctuation">&#123;</span><span class="token number">1</span><span class="token punctuation">,</span> <span class="token number">2</span><span class="token punctuation">,</span> <span class="token number">3</span><span class="token punctuation">&#125;</span><span class="token punctuation">;</span></pre></td></tr><tr class="marked"><td data-num="2"></td><td><pre>v<span class="token punctuation">.</span><span class="token function">pop_back</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment">// [1, 2]</span></pre></td></tr></table></figure><h2 id="迴圈遍歷-vector"><a class="anchor" href="#迴圈遍歷-vector">#</a> 迴圈遍歷 vector</h2><p>第一種是常見的用法，</p><figure class="highlight cpp"><figcaption data-lang="C++"></figcaption><table><tr><td data-num="1"></td><td><pre>vector<span class="token operator">&lt;</span><span class="token keyword">int</span><span class="token operator">></span> vec <span class="token operator">=</span> <span class="token punctuation">&#123;</span><span class="token number">1</span><span class="token punctuation">,</span> <span class="token number">2</span><span class="token punctuation">,</span> <span class="token number">3</span><span class="token punctuation">&#125;</span><span class="token punctuation">;</span></pre></td></tr><tr class="marked"><td data-num="2"></td><td><pre><span class="token keyword">for</span> <span class="token punctuation">(</span><span class="token keyword">int</span> i<span class="token operator">=</span><span class="token number">0</span><span class="token punctuation">;</span> i<span class="token operator">&lt;</span>vec<span class="token punctuation">.</span><span class="token function">size</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span> i<span class="token operator">++</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span></pre></td></tr><tr><td data-num="3"></td><td><pre>    cout <span class="token operator">&lt;&lt;</span> vec<span class="token punctuation">[</span>i<span class="token punctuation">]</span> <span class="token operator">&lt;&lt;</span> <span class="token char">' '</span><span class="token punctuation">;</span></pre></td></tr><tr><td data-num="4"></td><td><pre><span class="token punctuation">&#125;</span></pre></td></tr></table></figure><blockquote><p>1 2 3</p></blockquote><p>第二種是使用 <strong>iterator 迭代器</strong>來印出 vector 內所有內容，其中  <code>vector&lt;int&gt;::iterator it</code>  可以簡化寫成  <code>auto it</code>  這樣</p><figure class="highlight cpp"><figcaption data-lang="C++"></figcaption><table><tr><td data-num="1"></td><td><pre>vector<span class="token operator">&lt;</span><span class="token keyword">int</span><span class="token operator">></span> vec <span class="token operator">=</span> <span class="token punctuation">&#123;</span><span class="token number">1</span><span class="token punctuation">,</span> <span class="token number">2</span><span class="token punctuation">,</span> <span class="token number">3</span><span class="token punctuation">&#125;</span><span class="token punctuation">;</span></pre></td></tr><tr><td data-num="2"></td><td><pre>vector<span class="token operator">&lt;</span><span class="token keyword">int</span><span class="token operator">></span><span class="token double-colon punctuation">::</span>iterator it<span class="token punctuation">;</span></pre></td></tr><tr class="marked"><td data-num="3"></td><td><pre><span class="token keyword">for</span> <span class="token punctuation">(</span>it <span class="token operator">=</span> vec<span class="token punctuation">.</span><span class="token function">begin</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span> it <span class="token operator">!=</span> vec<span class="token punctuation">.</span><span class="token function">end</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span> it<span class="token operator">++</span><span class="token punctuation">)</span> cout <span class="token operator">&lt;&lt;</span> <span class="token operator">*</span>it <span class="token operator">&lt;&lt;</span> <span class="token char">' '</span><span class="token punctuation">;</span></pre></td></tr><tr><td data-num="4"></td><td><pre><span class="token comment">// or</span></pre></td></tr><tr class="marked"><td data-num="5"></td><td><pre><span class="token keyword">for</span> <span class="token punctuation">(</span><span class="token keyword">auto</span> it <span class="token operator">=</span> vec<span class="token punctuation">.</span><span class="token function">begin</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span> it <span class="token operator">!=</span> vec<span class="token punctuation">.</span><span class="token function">end</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span> it<span class="token operator">++</span><span class="token punctuation">)</span> cout <span class="token operator">&lt;&lt;</span> <span class="token operator">*</span>it <span class="token operator">&lt;&lt;</span> <span class="token char">' '</span><span class="token punctuation">;</span></pre></td></tr></table></figure><p>第三種是個很方便的寫法，c++11 才有支援，適合追求快速 (懶惰) 的人，相較於第一種的優點是不用多寫陣列索引去存取，直接就當變數使用。</p><figure class="highlight cpp"><figcaption data-lang="C++"></figcaption><table><tr><td data-num="1"></td><td><pre>vector<span class="token operator">&lt;</span><span class="token keyword">int</span><span class="token operator">></span> vec <span class="token operator">=</span> <span class="token punctuation">&#123;</span><span class="token number">1</span><span class="token punctuation">,</span> <span class="token number">2</span><span class="token punctuation">,</span> <span class="token number">3</span><span class="token punctuation">&#125;</span><span class="token punctuation">;</span></pre></td></tr><tr class="marked"><td data-num="2"></td><td><pre><span class="token keyword">for</span> <span class="token punctuation">(</span><span class="token keyword">auto</span> <span class="token operator">&amp;</span>v<span class="token operator">:</span> vec<span class="token punctuation">)</span> cout <span class="token operator">&lt;&lt;</span> v <span class="token operator">&lt;&lt;</span> <span class="token char">' '</span><span class="token punctuation">;</span></pre></td></tr></table></figure><h2 id="vector-使用-operator-與-at-的差異"><a class="anchor" href="#vector-使用-operator-與-at-的差異">#</a> vector 使用 [] operator 與 at () 的差異</h2><p>另外 vector 還提供了  <code>at()</code>  這個方法也是可以取得元素，那這兩種方式到底有什麼差別？</p><p><code>[]</code>  operator 在回傳元素時是<strong>不會作任何的邊界檢查</strong>，而在  <code>at()</code>  取得元素時<strong>會作邊界的處理</strong>，如果你存取越界時 vector 會拋出一個  <code>out_of_range</code>  例外，所以  <code>at()</code>  提供了較為安全的存取方式。</p><h2 id="vector-size-與-capacity-的差異"><a class="anchor" href="#vector-size-與-capacity-的差異">#</a> vector size () 與 capacity () 的差異</h2><p>vector 使用  <code>size()</code>  是<strong>取得目前 vector 裡的元素個數</strong>，vector 使用  <code>capacity()</code>  是<strong>取得目前 vector 裡的預先配置的空間大小</strong>，當容量 (capacity) 空間不夠使用時 vector 就會重新申請空間，容量 (capacity) 會增加為原來的 <strong>2 倍</strong>或 <strong>1.5 倍</strong>，例如：1、2、4、8、16、32 增長下去，各個編譯器可能不同。</p><h2 id="reserve-預先配置容器大小"><a class="anchor" href="#reserve-預先配置容器大小">#</a> reserve () 預先配置容器大小</h2><p>vector 使用  <code>reserve()</code>  是預留空間的意思，如果我們一開始就知道容器的裡要放置多少個元素的話，可以透過  <code>reserve()</code>  來預先配置容器大小，這樣可以減少一直配置記憶體的機會。</p><p>觀察看看 size 與 capacity 的變化。</p><figure class="highlight cpp"><figcaption data-lang="C++"></figcaption><table><tr><td data-num="1"></td><td><pre>vector<span class="token operator">&lt;</span><span class="token keyword">int</span><span class="token operator">></span> v<span class="token punctuation">;</span></pre></td></tr><tr><td data-num="2"></td><td><pre>cout <span class="token operator">&lt;&lt;</span> <span class="token string">"size = "</span> <span class="token operator">&lt;&lt;</span> v<span class="token punctuation">.</span><span class="token function">size</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">&lt;&lt;</span> <span class="token string">", capacity = "</span> <span class="token operator">&lt;&lt;</span> v<span class="token punctuation">.</span><span class="token function">capacity</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">&lt;&lt;</span> <span class="token string">"\n"</span><span class="token punctuation">;</span></pre></td></tr><tr class="marked"><td data-num="3"></td><td><pre>v<span class="token punctuation">.</span><span class="token function">reserve</span><span class="token punctuation">(</span><span class="token number">5</span><span class="token punctuation">)</span><span class="token punctuation">;</span></pre></td></tr><tr><td data-num="4"></td><td><pre>cout <span class="token operator">&lt;&lt;</span> <span class="token string">"size = "</span> <span class="token operator">&lt;&lt;</span> v<span class="token punctuation">.</span><span class="token function">size</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">&lt;&lt;</span> <span class="token string">", capacity = "</span> <span class="token operator">&lt;&lt;</span> v<span class="token punctuation">.</span><span class="token function">capacity</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">&lt;&lt;</span> <span class="token string">"\n"</span><span class="token punctuation">;</span></pre></td></tr><tr><td data-num="5"></td><td><pre>v<span class="token punctuation">.</span><span class="token function">push_back</span><span class="token punctuation">(</span><span class="token number">1</span><span class="token punctuation">)</span><span class="token punctuation">;</span></pre></td></tr><tr><td data-num="6"></td><td><pre>v<span class="token punctuation">.</span><span class="token function">push_back</span><span class="token punctuation">(</span><span class="token number">2</span><span class="token punctuation">)</span><span class="token punctuation">;</span></pre></td></tr><tr><td data-num="7"></td><td><pre>cout <span class="token operator">&lt;&lt;</span> <span class="token string">"size = "</span> <span class="token operator">&lt;&lt;</span> v<span class="token punctuation">.</span><span class="token function">size</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">&lt;&lt;</span> <span class="token string">", capacity = "</span> <span class="token operator">&lt;&lt;</span> v<span class="token punctuation">.</span><span class="token function">capacity</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">&lt;&lt;</span> <span class="token string">"\n"</span><span class="token punctuation">;</span></pre></td></tr></table></figure><blockquote><p>size = 0, capacity = 0<br>size = 0, capacity = 5<br>size = 2, capacity = 5</p></blockquote><h2 id="shrink_to_fit-收縮的用法"><a class="anchor" href="#shrink_to_fit-收縮的用法">#</a> shrink_to_fit () 收縮的用法</h2><p>呈上述 reserve 例子，這時 vector 再使用  <code>shrink_to_fit()</code>  成員函式的話，會<strong>釋放（free）那些尚未使用的空間</strong>，</p><figure class="highlight cpp"><figcaption data-lang="C++"></figcaption><table><tr><td data-num="1"></td><td><pre>vector<span class="token operator">&lt;</span><span class="token keyword">int</span><span class="token operator">></span> v<span class="token punctuation">;</span></pre></td></tr><tr><td data-num="2"></td><td><pre>v<span class="token punctuation">.</span><span class="token function">reserve</span><span class="token punctuation">(</span><span class="token number">5</span><span class="token punctuation">)</span><span class="token punctuation">;</span></pre></td></tr><tr><td data-num="3"></td><td><pre>cout <span class="token operator">&lt;&lt;</span> <span class="token string">"size = "</span> <span class="token operator">&lt;&lt;</span> v<span class="token punctuation">.</span><span class="token function">size</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">&lt;&lt;</span> <span class="token string">", capacity = "</span> <span class="token operator">&lt;&lt;</span> v<span class="token punctuation">.</span><span class="token function">capacity</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">&lt;&lt;</span> <span class="token string">"\n"</span><span class="token punctuation">;</span></pre></td></tr><tr><td data-num="4"></td><td><pre>v<span class="token punctuation">.</span><span class="token function">push_back</span><span class="token punctuation">(</span><span class="token number">1</span><span class="token punctuation">)</span><span class="token punctuation">;</span></pre></td></tr><tr><td data-num="5"></td><td><pre>v<span class="token punctuation">.</span><span class="token function">push_back</span><span class="token punctuation">(</span><span class="token number">2</span><span class="token punctuation">)</span><span class="token punctuation">;</span></pre></td></tr><tr><td data-num="6"></td><td><pre>cout <span class="token operator">&lt;&lt;</span> <span class="token string">"size = "</span> <span class="token operator">&lt;&lt;</span> v<span class="token punctuation">.</span><span class="token function">size</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">&lt;&lt;</span> <span class="token string">", capacity = "</span> <span class="token operator">&lt;&lt;</span> v<span class="token punctuation">.</span><span class="token function">capacity</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">&lt;&lt;</span> <span class="token string">"\n"</span><span class="token punctuation">;</span></pre></td></tr><tr class="marked"><td data-num="7"></td><td><pre>v<span class="token punctuation">.</span><span class="token function">shrink_to_fit</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span></pre></td></tr><tr><td data-num="8"></td><td><pre>cout <span class="token operator">&lt;&lt;</span> <span class="token string">"size = "</span> <span class="token operator">&lt;&lt;</span> v<span class="token punctuation">.</span><span class="token function">size</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">&lt;&lt;</span> <span class="token string">", capacity = "</span> <span class="token operator">&lt;&lt;</span> v<span class="token punctuation">.</span><span class="token function">capacity</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">&lt;&lt;</span> <span class="token string">"\n"</span><span class="token punctuation">;</span></pre></td></tr></table></figure><blockquote><p>size = 0, capacity = 5<br>size = 2, capacity = 5<br>size = 2, capacity = 2</p></blockquote><p>如果  <code>size()</code>  剛好等於  <code>capacity()</code>  的話，那麼使用  <code>shrink_to_fit()</code>  則不會有空間被釋放。</p><h2 id="resize"><a class="anchor" href="#resize">#</a> resize()</h2><p>vector 使用  <code>resize()</code>  跟  <code>reserve()</code>  不太一樣，resize 變大時會把<strong>多的元素補 0</strong>。</p><figure class="highlight cpp"><figcaption data-lang="C++"></figcaption><table><tr><td data-num="1"></td><td><pre>vector<span class="token operator">&lt;</span><span class="token keyword">int</span><span class="token operator">></span> v<span class="token punctuation">;</span></pre></td></tr><tr class="marked"><td data-num="2"></td><td><pre>v<span class="token punctuation">.</span><span class="token function">resize</span><span class="token punctuation">(</span><span class="token number">5</span><span class="token punctuation">)</span><span class="token punctuation">;</span></pre></td></tr><tr><td data-num="3"></td><td><pre>cout <span class="token operator">&lt;&lt;</span> <span class="token string">"size ="</span> <span class="token operator">&lt;&lt;</span> v<span class="token punctuation">.</span><span class="token function">size</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">&lt;&lt;</span> <span class="token string">", capacity ="</span> <span class="token operator">&lt;&lt;</span> v<span class="token punctuation">.</span><span class="token function">capacity</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">&lt;&lt;</span> <span class="token string">"\n"</span><span class="token punctuation">;</span></pre></td></tr><tr><td data-num="4"></td><td><pre><span class="token keyword">for</span> <span class="token punctuation">(</span><span class="token keyword">int</span> i <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span> i <span class="token operator">&lt;</span> v<span class="token punctuation">.</span><span class="token function">size</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span> i<span class="token operator">++</span><span class="token punctuation">)</span> cout <span class="token operator">&lt;&lt;</span> v<span class="token punctuation">[</span>i<span class="token punctuation">]</span> <span class="token operator">&lt;&lt;</span> <span class="token string">" "</span><span class="token punctuation">;</span></pre></td></tr></table></figure><blockquote><p>size = 5, capacity = 5<br>0 0 0 0 0</p></blockquote><p>resize 如果要順便<strong>指定元素初始值</strong>的話，可以將初始值帶入 resize () 的第二個引數。</p><figure class="highlight cpp"><figcaption data-lang="C++"></figcaption><table><tr><td data-num="1"></td><td><pre>vector<span class="token operator">&lt;</span><span class="token keyword">int</span><span class="token operator">></span> v<span class="token punctuation">;</span></pre></td></tr><tr class="marked"><td data-num="2"></td><td><pre>v<span class="token punctuation">.</span><span class="token function">resize</span><span class="token punctuation">(</span><span class="token number">5</span><span class="token punctuation">,</span> <span class="token number">10</span><span class="token punctuation">)</span><span class="token punctuation">;</span></pre></td></tr><tr><td data-num="3"></td><td><pre>cout <span class="token operator">&lt;&lt;</span> <span class="token string">"size ="</span> <span class="token operator">&lt;&lt;</span> v<span class="token punctuation">.</span><span class="token function">size</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">&lt;&lt;</span> <span class="token string">", capacity ="</span> <span class="token operator">&lt;&lt;</span> v<span class="token punctuation">.</span><span class="token function">capacity</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">&lt;&lt;</span> <span class="token string">"\n"</span><span class="token punctuation">;</span></pre></td></tr><tr><td data-num="4"></td><td><pre><span class="token keyword">for</span> <span class="token punctuation">(</span><span class="token keyword">int</span> i <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span> i <span class="token operator">&lt;</span> v<span class="token punctuation">.</span><span class="token function">size</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span> i<span class="token operator">++</span><span class="token punctuation">)</span> cout <span class="token operator">&lt;&lt;</span> v<span class="token punctuation">[</span>i<span class="token punctuation">]</span> <span class="token operator">&lt;&lt;</span> <span class="token string">" "</span><span class="token punctuation">;</span></pre></td></tr></table></figure><blockquote><p>size = 5, capacity = 5<br>10 10 10 10 10</p></blockquote><p>如果 resize 的大小超過 capacity 容量大小會怎麼樣呢？</p><figure class="highlight cpp"><figcaption data-lang="C++"><span>merk:3</span></figcaption><table><tr><td data-num="1"></td><td><pre>vector<span class="token operator">&lt;</span><span class="token keyword">int</span><span class="token operator">></span> v <span class="token operator">=</span> <span class="token punctuation">&#123;</span><span class="token number">1</span><span class="token punctuation">,</span> <span class="token number">2</span><span class="token punctuation">,</span> <span class="token number">3</span><span class="token punctuation">&#125;</span><span class="token punctuation">;</span></pre></td></tr><tr><td data-num="2"></td><td><pre>cout <span class="token operator">&lt;&lt;</span> <span class="token string">"size ="</span> <span class="token operator">&lt;&lt;</span> v<span class="token punctuation">.</span><span class="token function">size</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">&lt;&lt;</span> <span class="token string">", capacity ="</span> <span class="token operator">&lt;&lt;</span> v<span class="token punctuation">.</span><span class="token function">capacity</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">&lt;&lt;</span> <span class="token string">"\n"</span><span class="token punctuation">;</span></pre></td></tr><tr><td data-num="3"></td><td><pre>v<span class="token punctuation">.</span><span class="token function">resize</span><span class="token punctuation">(</span><span class="token number">5</span><span class="token punctuation">)</span><span class="token punctuation">;</span></pre></td></tr><tr><td data-num="4"></td><td><pre>cout <span class="token operator">&lt;&lt;</span> <span class="token string">"size ="</span> <span class="token operator">&lt;&lt;</span> v<span class="token punctuation">.</span><span class="token function">size</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">&lt;&lt;</span> <span class="token string">", capacity ="</span> <span class="token operator">&lt;&lt;</span> v<span class="token punctuation">.</span><span class="token function">capacity</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">&lt;&lt;</span> <span class="token string">"\n"</span><span class="token punctuation">;</span></pre></td></tr><tr><td data-num="5"></td><td><pre><span class="token keyword">for</span> <span class="token punctuation">(</span><span class="token keyword">int</span> i <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span> i <span class="token operator">&lt;</span> v<span class="token punctuation">.</span><span class="token function">size</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span> i<span class="token operator">++</span><span class="token punctuation">)</span> cout <span class="token operator">&lt;&lt;</span> v<span class="token punctuation">[</span>i<span class="token punctuation">]</span> <span class="token operator">&lt;&lt;</span> <span class="token string">" "</span><span class="token punctuation">;</span></pre></td></tr></table></figure><p>輸出如下，原本的  <code>1, 2, 3</code>  元素有保留以外，剩下新增的元素補  <code>0</code> 。</p><blockquote><p>size = 3, capacity = 3<br>size = 5, capacity = 6<br>1 2 3 0 0</p></blockquote><h2 id="vector-的優缺點"><a class="anchor" href="#vector-的優缺點">#</a> vector 的優缺點</h2><h3 id="優點"><a class="anchor" href="#優點">#</a> 優點</h3><ul><li>宣告時可以不用確定大小</li><li>節省空間</li><li>支持隨機訪問  <code>[i]</code></li></ul><h3 id="缺點"><a class="anchor" href="#缺點">#</a> 缺點</h3><ul><li>進行插入刪除時效率低</li><li>只能在末端進行 pop 和 push</li></ul><h2 id="參考資料"><a class="anchor" href="#參考資料">#</a> 參考資料</h2><ul><li><span class="exturl" data-url="aHR0cHM6Ly9zaGVuZ3l1NzY5Ny5naXRodWIuaW8vc3RkLXZlY3Rvci8=">https://shengyu7697.github.io/std-vector/</span></li></ul>]]></content>
      
      
      <categories>
          
          <category> Programming </category>
          
          <category> C/C++ </category>
          
      </categories>
      
      
        <tags>
            
            <tag> C/C++ </tag>
            
            <tag> vector </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>uva 591 - Box of Bricks</title>
      <link href="/2023/04/21/Coding/uva/Star1/uva%20591/"/>
      <url>/2023/04/21/Coding/uva/Star1/uva%20591/</url>
      
        <content type="html"><![CDATA[<p>⭐️</p><h2 id="題目連結"><a class="anchor" href="#題目連結">#</a> 題目連結</h2><ul><li><span class="exturl" data-url="aHR0cHM6Ly96ZXJvanVkZ2UudHcvU2hvd1Byb2JsZW0/cHJvYmxlbWlkPWMwNjc=">ZeroJudge</span></li><li><span class="exturl" data-url="aHR0cHM6Ly9vbmxpbmVqdWRnZS5vcmcvZXh0ZXJuYWwvNS9wNTkxLnBkZg==">題目連結</span></li><li><span class="exturl" data-url="aHR0cHM6Ly9vbmxpbmVqdWRnZS5vcmcvaW5kZXgucGhwP29wdGlvbj1jb21fb25saW5lanVkZ2UmYW1wO0l0ZW1pZD04JmFtcDtjYXRlZ29yeT03JmFtcDtwYWdlPXNob3dfcHJvYmxlbSZhbXA7cHJvYmxlbT01MzI=">Online Judge</span></li><li><span class="exturl" data-url="aHR0cHM6Ly93d3cudWRlYnVnLmNvbS9VVmEvNTkx">uDebug</span></li></ul><h2 id="題目敘述"><a class="anchor" href="#題目敘述">#</a> 題目敘述</h2><p>Little Bob likes playing with his box of bricks. He puts the bricks one upon another and builds stacks of different height. “Look, I’ve built a wall!”, he tells his older sister Alice. “Nah, you should make all stacks the same height. Then you would have a real wall.”, she <a href="#%E8%A8%BB%E8%A7%A3">retorts<sub>1</sub></a>. After a little consideration, Bob sees that she is right. So he sets out to rearrange the bricks, one by one, such that all stacks are the same height afterwards. But since Bob is lazy he wants to do this with the minimum number of bricks moved. Can you help?</p><p><img data-src="https://i.imgur.com/1NIlkjf.png" alt=""></p><h2 id="input"><a class="anchor" href="#input">#</a> Input</h2><p>The input consists of several data sets. Each set begins with a line containing the number  <code>n</code>  of stacks Bob has built. The next line contains  <code>n</code>  numbers, the heights  <code>hi</code>  of the  <code>n</code>  stacks. You may assume  <code>1 ≤ n ≤ 50</code>  and  <code>1 ≤ hi ≤ 100</code> .</p><p>The total number of bricks will be divisible by the number of stacks. Thus, it is always possible torearrange the bricks such that all stacks have the same height.</p><p>The input is terminated by a set starting with  <code>n = 0</code> . This set should not be processed.</p><h2 id="output"><a class="anchor" href="#output">#</a> Output</h2><p>For each set, first print the number of the set, as shown in the sample output. Then print the line ‘The minimum number of moves is  <code>k</code> .’, where  <code>k</code>  is the minimum number of bricks that have to be moved in order to make all the stacks the same height.</p><p><em>Output a blank line after each set</em>.</p><h2 id="sample-input"><a class="anchor" href="#sample-input">#</a> Sample Input</h2><blockquote><p>6<br>5 2 4 1 7 5<br>0</p></blockquote><h2 id="sample-output"><a class="anchor" href="#sample-output">#</a> Sample Output</h2><blockquote><p>Set #1<br>The minimum number of moves is 5.</p></blockquote><h2 id="解題思路"><a class="anchor" href="#解題思路">#</a> 解題思路</h2><p>算出全部的平均，將大於平均的堆分配給其他小於平均的堆。</p><h2 id="solution"><a class="anchor" href="#solution">#</a> Solution</h2><figure class="highlight cpp"><figcaption data-lang="C++"></figcaption><table><tr><td data-num="1"></td><td><pre><span class="token macro property"><span class="token directive-hash">#</span><span class="token directive keyword">include</span> <span class="token string">&lt;bits/stdc++.h></span></span></pre></td></tr><tr><td data-num="2"></td><td><pre><span class="token keyword">using</span> <span class="token keyword">namespace</span> std<span class="token punctuation">;</span></pre></td></tr><tr><td data-num="3"></td><td><pre></pre></td></tr><tr><td data-num="4"></td><td><pre><span class="token keyword">int</span> <span class="token function">main</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span></pre></td></tr><tr><td data-num="5"></td><td><pre>    <span class="token keyword">int</span> n<span class="token punctuation">,</span> set <span class="token operator">=</span> <span class="token number">1</span><span class="token punctuation">;</span></pre></td></tr><tr><td data-num="6"></td><td><pre>    <span class="token keyword">while</span> <span class="token punctuation">(</span>cin <span class="token operator">>></span> n<span class="token punctuation">)</span> <span class="token punctuation">&#123;</span></pre></td></tr><tr><td data-num="7"></td><td><pre>        <span class="token keyword">if</span> <span class="token punctuation">(</span>n <span class="token operator">==</span> <span class="token number">0</span><span class="token punctuation">)</span> <span class="token keyword">break</span><span class="token punctuation">;</span></pre></td></tr><tr><td data-num="8"></td><td><pre>        vector<span class="token operator">&lt;</span><span class="token keyword">int</span><span class="token operator">></span> <span class="token function">stacks</span><span class="token punctuation">(</span>n<span class="token punctuation">,</span> <span class="token number">0</span><span class="token punctuation">)</span><span class="token punctuation">;</span></pre></td></tr><tr><td data-num="9"></td><td><pre>        <span class="token keyword">for</span> <span class="token punctuation">(</span><span class="token keyword">int</span> i<span class="token operator">=</span><span class="token number">0</span><span class="token punctuation">;</span> i<span class="token operator">&lt;</span>n<span class="token punctuation">;</span> i<span class="token operator">++</span><span class="token punctuation">)</span> cin <span class="token operator">>></span> stacks<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">;</span></pre></td></tr><tr><td data-num="10"></td><td><pre></pre></td></tr><tr><td data-num="11"></td><td><pre>        <span class="token keyword">int</span> sum <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">,</span> res <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span></pre></td></tr><tr><td data-num="12"></td><td><pre>        <span class="token keyword">for</span> <span class="token punctuation">(</span><span class="token keyword">int</span> s <span class="token operator">:</span> stacks<span class="token punctuation">)</span> sum <span class="token operator">+=</span> s<span class="token punctuation">;</span></pre></td></tr><tr><td data-num="13"></td><td><pre>        <span class="token keyword">int</span> avg <span class="token operator">=</span> sum <span class="token operator">/</span> n<span class="token punctuation">;</span></pre></td></tr><tr><td data-num="14"></td><td><pre>        <span class="token keyword">for</span> <span class="token punctuation">(</span><span class="token keyword">int</span> s <span class="token operator">:</span> stacks<span class="token punctuation">)</span> <span class="token punctuation">&#123;</span></pre></td></tr><tr><td data-num="15"></td><td><pre>            <span class="token keyword">if</span> <span class="token punctuation">(</span>s <span class="token operator">></span> avg<span class="token punctuation">)</span> res <span class="token operator">+=</span> s <span class="token operator">-</span> avg<span class="token punctuation">;</span></pre></td></tr><tr><td data-num="16"></td><td><pre>        <span class="token punctuation">&#125;</span></pre></td></tr><tr><td data-num="17"></td><td><pre></pre></td></tr><tr><td data-num="18"></td><td><pre>        cout <span class="token operator">&lt;&lt;</span> <span class="token string">"Set #"</span> <span class="token operator">&lt;&lt;</span> set<span class="token operator">++</span> <span class="token operator">&lt;&lt;</span> <span class="token string">"\n"</span><span class="token punctuation">;</span></pre></td></tr><tr><td data-num="19"></td><td><pre>        cout <span class="token operator">&lt;&lt;</span> <span class="token string">"The minimum number of moves is "</span> <span class="token operator">&lt;&lt;</span> res <span class="token operator">&lt;&lt;</span> <span class="token string">".\n"</span><span class="token punctuation">;</span></pre></td></tr><tr><td data-num="20"></td><td><pre>        cout <span class="token operator">&lt;&lt;</span> <span class="token string">"\n"</span><span class="token punctuation">;</span></pre></td></tr><tr><td data-num="21"></td><td><pre>    <span class="token punctuation">&#125;</span></pre></td></tr><tr><td data-num="22"></td><td><pre><span class="token punctuation">&#125;</span></pre></td></tr></table></figure><h2 id="註解"><a class="anchor" href="#註解">#</a> 註解</h2><ol><li><a href="#%E9%A1%8C%E7%9B%AE%E6%95%98%E8%BF%B0">retorts <em>v. 反駁，回嘴</em></a></li></ol><blockquote><p>To answer someone quickly in an angry or funny way.<br><strong>ex.</strong> <em>“That doesn’t concern you!” she <strong>retorted</strong>.</em></p></blockquote>]]></content>
      
      
      <categories>
          
          <category> Coding </category>
          
          <category> UVA </category>
          
          <category> Star1 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> Star1 </tag>
            
            <tag> CPE </tag>
            
            <tag> UVA </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>879. Profitable Schemes</title>
      <link href="/2023/04/21/Coding/leetcode/Hard/879%20Profitable%20Schemes/"/>
      <url>/2023/04/21/Coding/leetcode/Hard/879%20Profitable%20Schemes/</url>
      
        <content type="html"><![CDATA[<p>⭐️⭐️⭐️</p><h2 id="題目敘述"><a class="anchor" href="#題目敘述">#</a> <span class="exturl" data-url="aHR0cHM6Ly9sZWV0Y29kZS5jb20vcHJvYmxlbXMvcHJvZml0YWJsZS1zY2hlbWVzLw==">題目敘述</span></h2><p>There is a group of  <code>n</code>  members, and a list of various crimes they could commit. The  <code>ith</code>  crime generates a  <code>profit[i]</code>  and requires  <code>group[i]</code>  members to participate in it. If a member participates in one crime, that member can’t participate in another crime.</p><p>Let’s call a <strong>profitable scheme</strong> any subset of these crimes that generates at least  <code>minProfit</code>  profit, and the total number of members participating in that subset of crimes is at most  <code>n</code> .</p><p>Return the number of schemes that can be chosen. Since the answer may be very large, <strong>return it modulo</strong>  <code>10^9 + 7</code> .</p><h3 id="example-1"><a class="anchor" href="#example-1">#</a> Example 1:</h3><blockquote><p><strong>Input:</strong> n = 5, minProfit = 3, group = [2,2], profit = [2,3]<br><strong>Output:</strong> 2<br><strong>Explanation:</strong> To make a profit of at least 3, the group could either commit crimes 0 and 1, or just crime 1.<br>In total, there are 2 schemes.</p></blockquote><h3 id="example-2"><a class="anchor" href="#example-2">#</a> Example 2:</h3><blockquote><p><strong>Input:</strong> n = 10, minProfit = 5, group = [2,3,5], profit = [6,7,8]<br><strong>Output:</strong> 7<br><strong>Explanation:</strong> To make a profit of at least 5, the group could commit any crimes, as long as they commit one.<br>There are 7 possible schemes: (0), (1), (2), (0,1), (0,2), (1,2), and (0,1,2).</p></blockquote><h2 id="解題思路"><a class="anchor" href="#解題思路">#</a> 解題思路</h2><p>We define  <code>dp[i][j]</code>  as the number of profitable schemes that can be formed with a <strong><span class="blue">minimum profit of  <code>i</code> </span></strong> and a <strong><span class="green">total group size of  <code>j</code> </span></strong>. We can then update the dp array for each group by considering whether or not to include that group in each possible profitable scheme. <strong>The final answer is the sum of  <code>dp[minProfit][j]</code>  for all  <code>j</code>  from  <code>0</code>  to the group size limit</strong>.</p><h2 id="solution"><a class="anchor" href="#solution">#</a> Solution</h2><div class="tab" data-id="code" data-title="C++"><figure class="highlight cpp"><figcaption data-lang="C++"></figcaption><table><tr><td data-num="1"></td><td><pre><span class="token keyword">class</span> <span class="token class-name">Solution</span> <span class="token punctuation">&#123;</span></pre></td></tr><tr><td data-num="2"></td><td><pre><span class="token keyword">public</span><span class="token operator">:</span></pre></td></tr><tr><td data-num="3"></td><td><pre>    <span class="token keyword">int</span> <span class="token function">profitableSchemes</span><span class="token punctuation">(</span><span class="token keyword">int</span> n<span class="token punctuation">,</span> <span class="token keyword">int</span> minProfit<span class="token punctuation">,</span> vector<span class="token operator">&lt;</span><span class="token keyword">int</span><span class="token operator">></span><span class="token operator">&amp;</span> group<span class="token punctuation">,</span> vector<span class="token operator">&lt;</span><span class="token keyword">int</span><span class="token operator">></span><span class="token operator">&amp;</span> profit<span class="token punctuation">)</span> <span class="token punctuation">&#123;</span></pre></td></tr><tr><td data-num="4"></td><td><pre>        <span class="token keyword">int</span> mod <span class="token operator">=</span> <span class="token number">1e9</span> <span class="token operator">+</span> <span class="token number">7</span><span class="token punctuation">;</span></pre></td></tr><tr><td data-num="5"></td><td><pre>        vector<span class="token operator">&lt;</span>vector<span class="token operator">&lt;</span><span class="token keyword">int</span><span class="token operator">>></span> <span class="token function">dp</span><span class="token punctuation">(</span>minProfit <span class="token operator">+</span> <span class="token number">1</span><span class="token punctuation">,</span> <span class="token generic-function"><span class="token function">vector</span><span class="token generic class-name"><span class="token operator">&lt;</span><span class="token keyword">int</span><span class="token operator">></span></span></span><span class="token punctuation">(</span>n <span class="token operator">+</span> <span class="token number">1</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span></pre></td></tr><tr><td data-num="6"></td><td><pre>        dp<span class="token punctuation">[</span><span class="token number">0</span><span class="token punctuation">]</span><span class="token punctuation">[</span><span class="token number">0</span><span class="token punctuation">]</span> <span class="token operator">=</span> <span class="token number">1</span><span class="token punctuation">;</span></pre></td></tr><tr><td data-num="7"></td><td><pre>        <span class="token keyword">for</span> <span class="token punctuation">(</span><span class="token keyword">int</span> k<span class="token operator">=</span><span class="token number">0</span><span class="token punctuation">;</span> k<span class="token operator">&lt;</span>group<span class="token punctuation">.</span><span class="token function">size</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span> k<span class="token operator">++</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span></pre></td></tr><tr><td data-num="8"></td><td><pre>            <span class="token keyword">int</span> g <span class="token operator">=</span> group<span class="token punctuation">[</span>k<span class="token punctuation">]</span><span class="token punctuation">,</span> p <span class="token operator">=</span> profit<span class="token punctuation">[</span>k<span class="token punctuation">]</span><span class="token punctuation">;</span></pre></td></tr><tr><td data-num="9"></td><td><pre>            <span class="token keyword">for</span> <span class="token punctuation">(</span><span class="token keyword">int</span> i<span class="token operator">=</span>minProfit<span class="token punctuation">;</span> i<span class="token operator">>=</span><span class="token number">0</span><span class="token punctuation">;</span> i<span class="token operator">--</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span></pre></td></tr><tr><td data-num="10"></td><td><pre>                <span class="token keyword">for</span> <span class="token punctuation">(</span><span class="token keyword">int</span> j<span class="token operator">=</span>n<span class="token operator">-</span>g<span class="token punctuation">;</span> j<span class="token operator">>=</span><span class="token number">0</span><span class="token punctuation">;</span> j<span class="token operator">--</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span></pre></td></tr><tr><td data-num="11"></td><td><pre>                    <span class="token keyword">int</span> newProfit <span class="token operator">=</span> <span class="token function">min</span><span class="token punctuation">(</span>minProfit<span class="token punctuation">,</span> p <span class="token operator">+</span> i<span class="token punctuation">)</span><span class="token punctuation">;</span></pre></td></tr><tr><td data-num="12"></td><td><pre>                    dp<span class="token punctuation">[</span>newProfit<span class="token punctuation">]</span><span class="token punctuation">[</span>j <span class="token operator">+</span> g<span class="token punctuation">]</span> <span class="token operator">+=</span> dp<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">[</span>j<span class="token punctuation">]</span><span class="token punctuation">;</span></pre></td></tr><tr><td data-num="13"></td><td><pre>                    dp<span class="token punctuation">[</span>newProfit<span class="token punctuation">]</span><span class="token punctuation">[</span>j <span class="token operator">+</span> g<span class="token punctuation">]</span> <span class="token operator">%=</span> mod<span class="token punctuation">;</span></pre></td></tr><tr><td data-num="14"></td><td><pre>                <span class="token punctuation">&#125;</span></pre></td></tr><tr><td data-num="15"></td><td><pre>            <span class="token punctuation">&#125;</span></pre></td></tr><tr><td data-num="16"></td><td><pre>        <span class="token punctuation">&#125;</span></pre></td></tr><tr><td data-num="17"></td><td><pre>        <span class="token keyword">int</span> res <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span></pre></td></tr><tr><td data-num="18"></td><td><pre>        <span class="token keyword">for</span> <span class="token punctuation">(</span><span class="token keyword">int</span> i<span class="token operator">=</span><span class="token number">0</span><span class="token punctuation">;</span> i<span class="token operator">&lt;=</span>n<span class="token punctuation">;</span> i<span class="token operator">++</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span></pre></td></tr><tr><td data-num="19"></td><td><pre>            res <span class="token operator">+=</span> dp<span class="token punctuation">[</span>minProfit<span class="token punctuation">]</span><span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">;</span></pre></td></tr><tr><td data-num="20"></td><td><pre>            res <span class="token operator">%=</span> mod<span class="token punctuation">;</span></pre></td></tr><tr><td data-num="21"></td><td><pre>        <span class="token punctuation">&#125;</span></pre></td></tr><tr><td data-num="22"></td><td><pre>        <span class="token keyword">return</span> res<span class="token punctuation">;</span></pre></td></tr><tr><td data-num="23"></td><td><pre>    <span class="token punctuation">&#125;</span></pre></td></tr><tr><td data-num="24"></td><td><pre><span class="token punctuation">&#125;</span><span class="token punctuation">;</span></pre></td></tr></table></figure></div><div class="tab" data-id="code" data-title="Java"><pre><code class="language-java"></code></pre></div><div class="tab" data-id="code" data-title="Python"><figure class="highlight python"><figcaption data-lang="python"></figcaption><table><tr><td data-num="1"></td><td><pre><span class="token keyword">class</span> <span class="token class-name">Solution</span><span class="token punctuation">:</span></pre></td></tr><tr><td data-num="2"></td><td><pre>    <span class="token keyword">def</span> <span class="token function">profitableSchemes</span><span class="token punctuation">(</span>self<span class="token punctuation">,</span> n<span class="token punctuation">:</span> <span class="token builtin">int</span><span class="token punctuation">,</span> minProfit<span class="token punctuation">:</span> <span class="token builtin">int</span><span class="token punctuation">,</span> group<span class="token punctuation">:</span> List<span class="token punctuation">[</span><span class="token builtin">int</span><span class="token punctuation">]</span><span class="token punctuation">,</span> profit<span class="token punctuation">:</span> List<span class="token punctuation">[</span><span class="token builtin">int</span><span class="token punctuation">]</span><span class="token punctuation">)</span> <span class="token operator">-</span><span class="token operator">></span> <span class="token builtin">int</span><span class="token punctuation">:</span></pre></td></tr><tr><td data-num="3"></td><td><pre>        mod <span class="token operator">=</span> <span class="token number">10</span><span class="token operator">**</span><span class="token number">9</span> <span class="token operator">+</span> <span class="token number">7</span></pre></td></tr><tr><td data-num="4"></td><td><pre>        dp <span class="token operator">=</span> <span class="token punctuation">[</span><span class="token punctuation">[</span><span class="token number">0</span><span class="token punctuation">]</span> <span class="token operator">*</span> <span class="token punctuation">(</span>n <span class="token operator">+</span> <span class="token number">1</span><span class="token punctuation">)</span> <span class="token keyword">for</span> _ <span class="token keyword">in</span> <span class="token builtin">range</span><span class="token punctuation">(</span>minProfit <span class="token operator">+</span> <span class="token number">1</span><span class="token punctuation">)</span><span class="token punctuation">]</span></pre></td></tr><tr><td data-num="5"></td><td><pre>        dp<span class="token punctuation">[</span><span class="token number">0</span><span class="token punctuation">]</span><span class="token punctuation">[</span><span class="token number">0</span><span class="token punctuation">]</span> <span class="token operator">=</span> <span class="token number">1</span></pre></td></tr><tr><td data-num="6"></td><td><pre>        <span class="token keyword">for</span> g<span class="token punctuation">,</span> p <span class="token keyword">in</span> <span class="token builtin">zip</span><span class="token punctuation">(</span>group<span class="token punctuation">,</span> profit<span class="token punctuation">)</span><span class="token punctuation">:</span></pre></td></tr><tr><td data-num="7"></td><td><pre>            <span class="token keyword">for</span> i <span class="token keyword">in</span> <span class="token builtin">range</span><span class="token punctuation">(</span>minProfit<span class="token punctuation">,</span> <span class="token operator">-</span><span class="token number">1</span><span class="token punctuation">,</span> <span class="token operator">-</span><span class="token number">1</span><span class="token punctuation">)</span><span class="token punctuation">:</span></pre></td></tr><tr><td data-num="8"></td><td><pre>                <span class="token keyword">for</span> j <span class="token keyword">in</span> <span class="token builtin">range</span><span class="token punctuation">(</span>n<span class="token operator">-</span>g<span class="token punctuation">,</span> <span class="token operator">-</span><span class="token number">1</span><span class="token punctuation">,</span> <span class="token operator">-</span><span class="token number">1</span><span class="token punctuation">)</span><span class="token punctuation">:</span>    </pre></td></tr><tr><td data-num="9"></td><td><pre>                    dp<span class="token punctuation">[</span><span class="token builtin">min</span><span class="token punctuation">(</span>minProfit<span class="token punctuation">,</span> p <span class="token operator">+</span> i<span class="token punctuation">)</span><span class="token punctuation">]</span><span class="token punctuation">[</span>j <span class="token operator">+</span> g<span class="token punctuation">]</span> <span class="token operator">+=</span> dp<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">[</span>j<span class="token punctuation">]</span></pre></td></tr><tr><td data-num="10"></td><td><pre>                    dp<span class="token punctuation">[</span><span class="token builtin">min</span><span class="token punctuation">(</span>minProfit<span class="token punctuation">,</span> p <span class="token operator">+</span> i<span class="token punctuation">)</span><span class="token punctuation">]</span><span class="token punctuation">[</span>j <span class="token operator">+</span> g<span class="token punctuation">]</span> <span class="token operator">%=</span> mod</pre></td></tr><tr><td data-num="11"></td><td><pre>        <span class="token keyword">return</span> <span class="token builtin">sum</span><span class="token punctuation">(</span>dp<span class="token punctuation">[</span>minProfit<span class="token punctuation">]</span><span class="token punctuation">)</span> <span class="token operator">%</span> mod</pre></td></tr></table></figure></div>]]></content>
      
      
      <categories>
          
          <category> Coding </category>
          
          <category> Leetcode </category>
          
          <category> Hard </category>
          
      </categories>
      
      
        <tags>
            
            <tag> Leetcode </tag>
            
            <tag> Array </tag>
            
            <tag> Dynamic Programming </tag>
            
            <tag> Hard </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>uva 579 - Clock Hands</title>
      <link href="/2023/04/20/Coding/uva/Star1/uva%20579/"/>
      <url>/2023/04/20/Coding/uva/Star1/uva%20579/</url>
      
        <content type="html"><![CDATA[<p>⭐️</p><h2 id="題目連結"><a class="anchor" href="#題目連結">#</a> 題目連結</h2><ul><li><span class="exturl" data-url="aHR0cHM6Ly96ZXJvanVkZ2UudHcvU2hvd1Byb2JsZW0/cHJvYmxlbWlkPWQwOTU=">ZeroJudge</span></li><li><span class="exturl" data-url="aHR0cHM6Ly9vbmxpbmVqdWRnZS5vcmcvZXh0ZXJuYWwvNS9wNTc5LnBkZg==">題目連結</span></li><li><span class="exturl" data-url="aHR0cHM6Ly9vbmxpbmVqdWRnZS5vcmcvaW5kZXgucGhwP29wdGlvbj1jb21fb25saW5lanVkZ2UmYW1wO0l0ZW1pZD04JmFtcDtjYXRlZ29yeT03JmFtcDtwYWdlPXNob3dfcHJvYmxlbSZhbXA7cHJvYmxlbT01MjA=">Online Judge</span></li><li><span class="exturl" data-url="aHR0cHM6Ly93d3cudWRlYnVnLmNvbS9VVmEvNTc5">uDebug</span></li></ul><h2 id="題目敘述"><a class="anchor" href="#題目敘述">#</a> 題目敘述</h2><p>The <a href="#%E8%A8%BB%E8%A7%A3">medieval<sub>1</sub></a> interest in <a href="#%E8%A8%BB%E8%A7%A3">mechanical contrivances<sub>2</sub></a> is well illustrated by the development of the mechanical<br>clock, the oldest of which is driven by weights and controlled by a verge, an <a href="#%E8%A8%BB%E8%A7%A3">oscillating<sub>3</sub></a> arm engaging<br>with a <a href="#%E8%A8%BB%E8%A7%A3">gear<sub>4</sub></a> wheel. It dates back to 1386.</p><p>Clocks driven by springs had appeared by the mid-15th century, making it possible to con- struct<br>more compact mechanisms and preparing the way for the portable clock.</p><p>English spring-driven pendulum clocks were first commonly kept on a small wall bracket and later<br>on a shelf. Many bracket clocks contained a drawer to hold the winding key. The earliest bracket clocks,<br>made for a period after 1660, were of architectural design, with pillars at the sides and a pediment on<br>top.</p><p>In 17th- and 18th-century France, the table clock became an object of monumental design, the best<br>examples of which are minor works of sculpture.</p><p>The longcase clocks (also called grandfather clocks) are tall pendulum clock enclosed in a wooden<br>case that stands upon the floor and is typically from 6 to 7.5 feet (1.8 to 2.3 m) in height. Later, the<br>name “grandfather clock” became popular after the popular song “My Grandfather’s Clock,” written<br>in 1876 by Henry Clay Work.</p><p>One of the first atomic clocks was an ammonia-controlled clock. It was built in 1949 at the National<br>Bureau of Standards, Washington, D.C.; in this clock the frequency did not vary by more than one<br>part in <span class="katex"><span class="katex-mathml"><math xmlns="http://www.w3.org/1998/Math/MathML"><semantics><mrow><mn>1</mn><msup><mn>0</mn><mn>8</mn></msup></mrow><annotation encoding="application/x-tex">10^8</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:0.8141079999999999em;vertical-align:0em;"></span><span class="mord">1</span><span class="mord"><span class="mord">0</span><span class="msupsub"><span class="vlist-t"><span class="vlist-r"><span class="vlist" style="height:0.8141079999999999em;"><span style="top:-3.063em;margin-right:0.05em;"><span class="pstrut" style="height:2.7em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mtight">8</span></span></span></span></span></span></span></span></span></span></span>.</p><p>Nuclear clocks are built using two clocks. The aggregate of atoms that emit the gamma radiation of<br>precise frequency may be called the emitter clock; the group of atoms that absorb this radiation is the<br>absorber clock. One pair of these nuclear clocks can detect energy changes of one part in 1014, being<br>about 1,000 times more sensitive than the best atomic clock.</p><p>The cesium clock is the most accurate type of clock yet developed. This device makes use of<br>transitions between the spin states of the cesium nucleus and produces a frequency which is so regular<br>that it has been adopted for establishing the time standard.</p><p>The history of clocks is fascinating, but unrelated to this problem. In this problem, you are asked<br>to find the angle between the minute hand and the hour hand on a regular analog clock. Assume that<br>the second hand, if there were one, would be pointing straight up at the 12. Give all angles as the<br>smallest positive angles. For example 9:00 is 90 degrees; not -90 or 270 degrees.</p><h2 id="input"><a class="anchor" href="#input">#</a> Input</h2><p>The input is a list of times in the form ‘H:M’, each on their own line, with  <code>1 ≤ H ≤ 12</code>  and<br> <code>00 ≤ M ≤ 59</code> . The input is terminated with the time ‘0:00’. Note that  <code>H</code>  may be represented with 1<br>or 2 digits (for 1–9 or 10–12, respectively);  <code>M</code>  is always represented with 2 digits (the input times are<br>what you typically see on a digital clock).</p><h2 id="output"><a class="anchor" href="#output">#</a> Output</h2><p>The output <strong>displays the smallest positive angle in degrees between the hands for each time</strong>. The answer<br>should between 0 degrees and 180 degrees for all input times. Display each angle on a line by itself in<br>the same order as the input. The output should be rounded to the nearest 1/1000, i.e., three places<br>after the decimal point should be printed.</p><h2 id="sample-input"><a class="anchor" href="#sample-input">#</a> Sample Input</h2><blockquote><p>12:00<br>9:00<br>8:10<br>0:00</p></blockquote><h2 id="sample-output"><a class="anchor" href="#sample-output">#</a> Sample Output</h2><blockquote><p>0.000<br>90.000<br>175.000</p></blockquote><h2 id="code"><a class="anchor" href="#code">#</a> Code</h2><figure class="highlight cpp"><figcaption data-lang="C++"></figcaption><table><tr><td data-num="1"></td><td><pre><span class="token macro property"><span class="token directive-hash">#</span><span class="token directive keyword">include</span> <span class="token string">&lt;bits/stdc++.h></span></span></pre></td></tr><tr><td data-num="2"></td><td><pre></pre></td></tr><tr><td data-num="3"></td><td><pre><span class="token keyword">using</span> <span class="token keyword">namespace</span> std<span class="token punctuation">;</span></pre></td></tr><tr><td data-num="4"></td><td><pre></pre></td></tr><tr><td data-num="5"></td><td><pre><span class="token keyword">int</span> <span class="token function">main</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span></pre></td></tr><tr><td data-num="6"></td><td><pre>    <span class="token keyword">double</span> deg<span class="token punctuation">[</span><span class="token number">13</span><span class="token punctuation">]</span> <span class="token operator">=</span> <span class="token punctuation">&#123;</span><span class="token number">0</span><span class="token punctuation">,</span> <span class="token number">30</span><span class="token punctuation">,</span> <span class="token number">60</span><span class="token punctuation">,</span> <span class="token number">90</span><span class="token punctuation">,</span> <span class="token number">120</span><span class="token punctuation">,</span> <span class="token number">150</span><span class="token punctuation">,</span> <span class="token number">180</span><span class="token punctuation">,</span> <span class="token number">210</span><span class="token punctuation">,</span> <span class="token number">240</span><span class="token punctuation">,</span> <span class="token number">270</span><span class="token punctuation">,</span> <span class="token number">300</span><span class="token punctuation">,</span> <span class="token number">330</span><span class="token punctuation">,</span> <span class="token number">0</span><span class="token punctuation">&#125;</span><span class="token punctuation">;</span></pre></td></tr><tr><td data-num="7"></td><td><pre>    string str<span class="token punctuation">;</span></pre></td></tr><tr><td data-num="8"></td><td><pre>    <span class="token keyword">int</span> hr<span class="token punctuation">,</span> min<span class="token punctuation">;</span></pre></td></tr><tr><td data-num="9"></td><td><pre>    <span class="token keyword">while</span><span class="token punctuation">(</span><span class="token function">getline</span><span class="token punctuation">(</span>cin<span class="token punctuation">,</span> str<span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span></pre></td></tr><tr><td data-num="10"></td><td><pre>        <span class="token keyword">if</span> <span class="token punctuation">(</span>str <span class="token operator">==</span> <span class="token string">"0:00"</span><span class="token punctuation">)</span> <span class="token keyword">break</span><span class="token punctuation">;</span></pre></td></tr><tr><td data-num="11"></td><td><pre>        stringstream <span class="token function">ss</span><span class="token punctuation">(</span>str<span class="token punctuation">)</span><span class="token punctuation">;</span></pre></td></tr><tr><td data-num="12"></td><td><pre>        string tok<span class="token punctuation">;</span></pre></td></tr><tr><td data-num="13"></td><td><pre>        <span class="token function">getline</span><span class="token punctuation">(</span>ss<span class="token punctuation">,</span> tok<span class="token punctuation">,</span> <span class="token char">':'</span><span class="token punctuation">)</span><span class="token punctuation">;</span></pre></td></tr><tr><td data-num="14"></td><td><pre>        hr <span class="token operator">=</span> <span class="token function">stoi</span><span class="token punctuation">(</span>tok<span class="token punctuation">)</span><span class="token punctuation">;</span></pre></td></tr><tr><td data-num="15"></td><td><pre>        <span class="token function">getline</span><span class="token punctuation">(</span>ss<span class="token punctuation">,</span> tok<span class="token punctuation">)</span><span class="token punctuation">;</span></pre></td></tr><tr><td data-num="16"></td><td><pre>        min <span class="token operator">=</span> <span class="token function">stoi</span><span class="token punctuation">(</span>tok<span class="token punctuation">)</span><span class="token punctuation">;</span></pre></td></tr><tr><td data-num="17"></td><td><pre></pre></td></tr><tr><td data-num="18"></td><td><pre>        <span class="token keyword">double</span> res <span class="token operator">=</span> min <span class="token operator">*</span> <span class="token number">6.0</span> <span class="token operator">-</span> <span class="token punctuation">(</span><span class="token punctuation">(</span>min <span class="token operator">/</span> <span class="token number">12.0</span><span class="token punctuation">)</span> <span class="token operator">*</span> <span class="token number">6</span> <span class="token operator">+</span> deg<span class="token punctuation">[</span>hr<span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token punctuation">;</span></pre></td></tr><tr><td data-num="19"></td><td><pre>        <span class="token keyword">if</span> <span class="token punctuation">(</span>res <span class="token operator">&lt;</span> <span class="token number">0</span><span class="token punctuation">)</span> res <span class="token operator">*=</span> <span class="token operator">-</span><span class="token number">1.0</span><span class="token punctuation">;</span></pre></td></tr><tr><td data-num="20"></td><td><pre>        <span class="token keyword">if</span> <span class="token punctuation">(</span>res <span class="token operator">></span> <span class="token number">180</span><span class="token punctuation">)</span> res <span class="token operator">=</span> <span class="token number">360.0</span> <span class="token operator">-</span> res<span class="token punctuation">;</span></pre></td></tr><tr><td data-num="21"></td><td><pre>        <span class="token function">printf</span><span class="token punctuation">(</span><span class="token string">"%.3f\n"</span><span class="token punctuation">,</span> res<span class="token punctuation">)</span><span class="token punctuation">;</span></pre></td></tr><tr><td data-num="22"></td><td><pre>    <span class="token punctuation">&#125;</span></pre></td></tr><tr><td data-num="23"></td><td><pre><span class="token punctuation">&#125;</span></pre></td></tr></table></figure><h2 id="註解"><a class="anchor" href="#註解">#</a> 註解</h2><ol><li><a href="#%E9%A1%8C%E7%9B%AE%E6%95%98%E8%BF%B0">medieval 中世紀</a></li><li><a href="#%E9%A1%8C%E7%9B%AE%E6%95%98%E8%BF%B0">mechanical contrivances 機械裝置</a></li><li><a href="#%E9%A1%8C%E7%9B%AE%E6%95%98%E8%BF%B0">oscillating 擺動的</a></li><li><a href="#%E9%A1%8C%E7%9B%AE%E6%95%98%E8%BF%B0">gear 齒輪</a></li></ol>]]></content>
      
      
      <categories>
          
          <category> Coding </category>
          
          <category> UVA </category>
          
          <category> Star1 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> Star1 </tag>
            
            <tag> CPE </tag>
            
            <tag> UVA </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>uva 499 - What’s The Frequency, Kenneth?</title>
      <link href="/2023/04/20/Coding/uva/Star1/uva%20499/"/>
      <url>/2023/04/20/Coding/uva/Star1/uva%20499/</url>
      
        <content type="html"><![CDATA[<p>⭐️</p><h2 id="題目連結"><a class="anchor" href="#題目連結">#</a> 題目連結</h2><ul><li><span class="exturl" data-url="aHR0cHM6Ly96ZXJvanVkZ2UudHcvU2hvd1Byb2JsZW0/cHJvYmxlbWlkPWU1MDM=">ZeroJudge</span></li><li><span class="exturl" data-url="aHR0cHM6Ly9vbmxpbmVqdWRnZS5vcmcvZXh0ZXJuYWwvNC9wNDk5LnBkZg==">題目連結</span></li><li><span class="exturl" data-url="aHR0cHM6Ly9vbmxpbmVqdWRnZS5vcmcvaW5kZXgucGhwP29wdGlvbj1jb21fb25saW5lanVkZ2UmYW1wO0l0ZW1pZD04JmFtcDtjYXRlZ29yeT02JmFtcDtwYWdlPXNob3dfcHJvYmxlbSZhbXA7cHJvYmxlbT00NDA=">Online Judge</span></li><li><span class="exturl" data-url="aHR0cHM6Ly93d3cudWRlYnVnLmNvbS9VVmEvNDk5">uDebug</span></li></ul><h2 id="題目敘述"><a class="anchor" href="#題目敘述">#</a> 題目敘述</h2><p>#include &lt;stdio.h&gt;<br>main() {<br>int i;<br>char *suffix[]= { “st”, “nd”, “rd” };<br>char *item[]= { “Unix” , “cat”, “sed”, “awk”, “grep”, “ed”, “vi”};<br>printf(“In the beginning, there was nothing.\n”);<br>for (i= 0; i &lt; 7; i++)<br>printf(“And on the %d%s day, God created %s. And it was good.\n”,<br>i + 1, (i &lt; 3) ? suffix[i] : “th”, item[i]);<br>}</p><p>But then God saw that vi led people into temptation. Instead of choosing the righteous ways of<br>make, dbx, and RCS, people used long command lines, printf(), and tape backups.<br>So God decreed, “I see that Engineers have thus defiled my vi. And so, I shall create emacs, an<br>editor more powerful than words. Further, for each instantiation vi hitherto, the Engineer responsible<br>shalt perform Penance. And lo, the Penance wilt be painful; there will be much wailing and gnushingof<br>teeth. The Engineer will read many lines of text. For each line of text, the Engineer must tell me which<br>letters occur the most frequently.”<br>“I charge you all with My Golden Rule: ’Friends shalt not let friends use vi’.”</p><h2 id="input"><a class="anchor" href="#input">#</a> Input</h2><p>The input file consists of a lot of lines of text.</p><h2 id="output"><a class="anchor" href="#output">#</a> Output</h2><p>A line of output should contain a list of <strong>letters that all occured with the highest frequency</strong> in the<br>corresponding input line, followed by the frequency.<br>The list of letters should be an alphabetical list of upper case letters followed by an alphabetical<br>list of lower case letters.</p><h2 id="sample-input"><a class="anchor" href="#sample-input">#</a> Sample Input</h2><blockquote><p>When riding your bicycle backwards down a one-way street, if the<br>wheel falls of a canoe, how many ball bearings does it take to fill<br>up a water buffalo?<br>Hello Howard.</p></blockquote><h2 id="sample-output"><a class="anchor" href="#sample-output">#</a> Sample Output</h2><blockquote><p>e 6<br>al 7<br>a 3<br>Hlo 2</p></blockquote><h2 id="code"><a class="anchor" href="#code">#</a> Code</h2><figure class="highlight cpp"><figcaption data-lang="C++"></figcaption><table><tr><td data-num="1"></td><td><pre><span class="token macro property"><span class="token directive-hash">#</span><span class="token directive keyword">include</span> <span class="token string">&lt;bits/stdc++.h></span></span></pre></td></tr><tr><td data-num="2"></td><td><pre></pre></td></tr><tr><td data-num="3"></td><td><pre><span class="token keyword">using</span> <span class="token keyword">namespace</span> std<span class="token punctuation">;</span></pre></td></tr><tr><td data-num="4"></td><td><pre></pre></td></tr><tr><td data-num="5"></td><td><pre><span class="token keyword">int</span> <span class="token function">main</span> <span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span></pre></td></tr><tr><td data-num="6"></td><td><pre>    string str<span class="token punctuation">;</span></pre></td></tr><tr><td data-num="7"></td><td><pre>    <span class="token keyword">while</span> <span class="token punctuation">(</span><span class="token function">getline</span><span class="token punctuation">(</span>cin<span class="token punctuation">,</span> str<span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span></pre></td></tr><tr><td data-num="8"></td><td><pre>        map<span class="token operator">&lt;</span><span class="token keyword">char</span><span class="token punctuation">,</span> <span class="token keyword">int</span><span class="token operator">></span> mp<span class="token punctuation">;</span></pre></td></tr><tr><td data-num="9"></td><td><pre>        <span class="token keyword">for</span> <span class="token punctuation">(</span><span class="token keyword">char</span> c <span class="token operator">:</span> str<span class="token punctuation">)</span> <span class="token punctuation">&#123;</span></pre></td></tr><tr><td data-num="10"></td><td><pre>            <span class="token keyword">if</span> <span class="token punctuation">(</span><span class="token operator">!</span><span class="token function">isalpha</span><span class="token punctuation">(</span>c<span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token keyword">continue</span><span class="token punctuation">;</span></pre></td></tr><tr><td data-num="11"></td><td><pre>            mp<span class="token punctuation">[</span>c<span class="token punctuation">]</span> <span class="token operator">++</span><span class="token punctuation">;</span>   </pre></td></tr><tr><td data-num="12"></td><td><pre>        <span class="token punctuation">&#125;</span></pre></td></tr><tr><td data-num="13"></td><td><pre>        map<span class="token operator">&lt;</span><span class="token keyword">int</span><span class="token punctuation">,</span> string<span class="token operator">></span> rc<span class="token punctuation">;</span></pre></td></tr><tr><td data-num="14"></td><td><pre>        <span class="token keyword">int</span> mx <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span></pre></td></tr><tr><td data-num="15"></td><td><pre>        <span class="token keyword">for</span> <span class="token punctuation">(</span><span class="token keyword">auto</span> m <span class="token operator">:</span> mp<span class="token punctuation">)</span> <span class="token punctuation">&#123;</span></pre></td></tr><tr><td data-num="16"></td><td><pre>            mx <span class="token operator">=</span> <span class="token function">max</span><span class="token punctuation">(</span>mx<span class="token punctuation">,</span> m<span class="token punctuation">.</span>second<span class="token punctuation">)</span><span class="token punctuation">;</span></pre></td></tr><tr><td data-num="17"></td><td><pre>            rc<span class="token punctuation">[</span>m<span class="token punctuation">.</span>second<span class="token punctuation">]</span> <span class="token operator">=</span> <span class="token string">""</span> <span class="token operator">+</span> rc<span class="token punctuation">[</span>m<span class="token punctuation">.</span>second<span class="token punctuation">]</span> <span class="token operator">+</span> m<span class="token punctuation">.</span>first<span class="token punctuation">;</span> </pre></td></tr><tr><td data-num="18"></td><td><pre>        <span class="token punctuation">&#125;</span></pre></td></tr><tr><td data-num="19"></td><td><pre>        cout <span class="token operator">&lt;&lt;</span> rc<span class="token punctuation">[</span>mx<span class="token punctuation">]</span> <span class="token operator">&lt;&lt;</span> <span class="token char">' '</span> <span class="token operator">&lt;&lt;</span> mx <span class="token operator">&lt;&lt;</span> <span class="token string">"\n"</span><span class="token punctuation">;</span></pre></td></tr><tr><td data-num="20"></td><td><pre>    <span class="token punctuation">&#125;</span></pre></td></tr><tr><td data-num="21"></td><td><pre><span class="token punctuation">&#125;</span></pre></td></tr></table></figure>]]></content>
      
      
      <categories>
          
          <category> Coding </category>
          
          <category> UVA </category>
          
          <category> Star1 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> Star1 </tag>
            
            <tag> CPE </tag>
            
            <tag> UVA </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>C++ - queue</title>
      <link href="/2023/04/20/programming/CPP/cpp%20queue/"/>
      <url>/2023/04/20/programming/CPP/cpp%20queue/</url>
      
        <content type="html"><![CDATA[<p><code>queue</code>  是具有 <strong>FIFO (First In, First Out)</strong> 特性的容器配接器，應用在有<strong>先進先出</strong>的情形。<br><strong>需要引入的標頭檔： <code>&lt;queue&gt;</code> </strong></p><h2 id="初始化-queue"><a class="anchor" href="#初始化-queue">#</a> 初始化 queue</h2><figure class="highlight cpp"><figcaption data-lang="C++"></figcaption><table><tr><td data-num="1"></td><td><pre><span class="token macro property"><span class="token directive-hash">#</span><span class="token directive keyword">include</span> <span class="token string">&lt;queue></span></span></pre></td></tr><tr class="marked"><td data-num="2"></td><td><pre>queue<span class="token operator">&lt;</span><span class="token keyword">int</span><span class="token operator">></span> q<span class="token punctuation">;</span></pre></td></tr></table></figure><h2 id="加入元素"><a class="anchor" href="#加入元素">#</a> 加入元素</h2><p>把元素加進 queue 的尾部使用  <code>push()</code></p><figure class="highlight cpp"><figcaption data-lang="C++"></figcaption><table><tr><td data-num="1"></td><td><pre>queue<span class="token operator">&lt;</span><span class="token keyword">int</span><span class="token operator">></span> q<span class="token punctuation">;</span></pre></td></tr><tr class="marked"><td data-num="2"></td><td><pre>q<span class="token punctuation">.</span><span class="token function">push</span><span class="token punctuation">(</span><span class="token number">1</span><span class="token punctuation">)</span><span class="token punctuation">;</span></pre></td></tr><tr><td data-num="3"></td><td><pre>q<span class="token punctuation">.</span><span class="token function">push</span><span class="token punctuation">(</span><span class="token number">2</span><span class="token punctuation">)</span><span class="token punctuation">;</span></pre></td></tr><tr><td data-num="4"></td><td><pre>q<span class="token punctuation">.</span><span class="token function">push</span><span class="token punctuation">(</span><span class="token number">3</span><span class="token punctuation">)</span><span class="token punctuation">;</span></pre></td></tr></table></figure><blockquote><p>q = [1, 2, 3]</p></blockquote><h2 id="取出元素"><a class="anchor" href="#取出元素">#</a> 取出元素</h2><p>把元素從 queue 頭部取出用  <code>pop()</code> ，注意<strong>取出會將該元素從 queue 移除</strong>。</p><figure class="highlight cpp"><figcaption data-lang="C++"></figcaption><table><tr><td data-num="1"></td><td><pre>queue<span class="token operator">&lt;</span><span class="token keyword">int</span><span class="token operator">></span> q<span class="token punctuation">;</span></pre></td></tr><tr><td data-num="2"></td><td><pre>q<span class="token punctuation">.</span><span class="token function">push</span><span class="token punctuation">(</span><span class="token number">1</span><span class="token punctuation">)</span><span class="token punctuation">;</span></pre></td></tr><tr><td data-num="3"></td><td><pre>q<span class="token punctuation">.</span><span class="token function">push</span><span class="token punctuation">(</span><span class="token number">2</span><span class="token punctuation">)</span><span class="token punctuation">;</span></pre></td></tr><tr><td data-num="4"></td><td><pre>q<span class="token punctuation">.</span><span class="token function">push</span><span class="token punctuation">(</span><span class="token number">3</span><span class="token punctuation">)</span><span class="token punctuation">;</span></pre></td></tr><tr class="marked"><td data-num="5"></td><td><pre>q<span class="token punctuation">.</span><span class="token function">pop</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span></pre></td></tr></table></figure><blockquote><p>q = [2, 3]</p></blockquote><h2 id="取得元素"><a class="anchor" href="#取得元素">#</a> 取得元素</h2><h3 id="front"><a class="anchor" href="#front">#</a> front()</h3><p>取得 queue 的最頭部的元素使用  <code>front()</code> ，注意<strong>取得並不會將該元素從 queue 移除</strong>。</p><figure class="highlight cpp"><figcaption data-lang="C++"></figcaption><table><tr><td data-num="1"></td><td><pre>queue<span class="token operator">&lt;</span><span class="token keyword">int</span><span class="token operator">></span> q<span class="token punctuation">;</span></pre></td></tr><tr><td data-num="2"></td><td><pre>q<span class="token punctuation">.</span><span class="token function">push</span><span class="token punctuation">(</span><span class="token number">1</span><span class="token punctuation">)</span><span class="token punctuation">;</span></pre></td></tr><tr><td data-num="3"></td><td><pre>q<span class="token punctuation">.</span><span class="token function">push</span><span class="token punctuation">(</span><span class="token number">2</span><span class="token punctuation">)</span><span class="token punctuation">;</span></pre></td></tr><tr><td data-num="4"></td><td><pre>q<span class="token punctuation">.</span><span class="token function">push</span><span class="token punctuation">(</span><span class="token number">3</span><span class="token punctuation">)</span><span class="token punctuation">;</span></pre></td></tr><tr><td data-num="5"></td><td><pre>cout <span class="token operator">&lt;&lt;</span> <span class="token string">"front: "</span> <span class="token operator">&lt;&lt;</span> q<span class="token punctuation">.</span><span class="token function">front</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span></pre></td></tr></table></figure><blockquote><p>front: 1</p></blockquote><h3 id="back"><a class="anchor" href="#back">#</a> back()</h3><p>取得 queue 的最尾巴的元素使用  <code>back()</code> 。</p><figure class="highlight cpp"><figcaption data-lang="C++"></figcaption><table><tr><td data-num="1"></td><td><pre>queue<span class="token operator">&lt;</span><span class="token keyword">int</span><span class="token operator">></span> q<span class="token punctuation">;</span></pre></td></tr><tr><td data-num="2"></td><td><pre>q<span class="token punctuation">.</span><span class="token function">push</span><span class="token punctuation">(</span><span class="token number">1</span><span class="token punctuation">)</span><span class="token punctuation">;</span></pre></td></tr><tr><td data-num="3"></td><td><pre>q<span class="token punctuation">.</span><span class="token function">push</span><span class="token punctuation">(</span><span class="token number">2</span><span class="token punctuation">)</span><span class="token punctuation">;</span></pre></td></tr><tr><td data-num="4"></td><td><pre>q<span class="token punctuation">.</span><span class="token function">push</span><span class="token punctuation">(</span><span class="token number">3</span><span class="token punctuation">)</span><span class="token punctuation">;</span></pre></td></tr><tr><td data-num="5"></td><td><pre>cout <span class="token operator">&lt;&lt;</span> <span class="token string">"back: "</span> <span class="token operator">&lt;&lt;</span> q<span class="token punctuation">.</span><span class="token function">back</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span></pre></td></tr></table></figure><blockquote><p>back: 3</p></blockquote><h2 id="取得-queue-長度"><a class="anchor" href="#取得-queue-長度">#</a> 取得 queue 長度</h2><p>取得 queue 目前裡面有幾個元素使用  <code>size()</code> 。</p><figure class="highlight cpp"><figcaption data-lang="C++"></figcaption><table><tr><td data-num="1"></td><td><pre>queue<span class="token operator">&lt;</span><span class="token keyword">int</span><span class="token operator">></span> q<span class="token punctuation">;</span></pre></td></tr><tr><td data-num="2"></td><td><pre>q<span class="token punctuation">.</span><span class="token function">push</span><span class="token punctuation">(</span><span class="token number">1</span><span class="token punctuation">)</span><span class="token punctuation">;</span></pre></td></tr><tr><td data-num="3"></td><td><pre>q<span class="token punctuation">.</span><span class="token function">push</span><span class="token punctuation">(</span><span class="token number">2</span><span class="token punctuation">)</span><span class="token punctuation">;</span></pre></td></tr><tr><td data-num="4"></td><td><pre>q<span class="token punctuation">.</span><span class="token function">push</span><span class="token punctuation">(</span><span class="token number">3</span><span class="token punctuation">)</span><span class="token punctuation">;</span></pre></td></tr><tr class="marked"><td data-num="5"></td><td><pre>cout <span class="token operator">&lt;&lt;</span> <span class="token string">"size: "</span> <span class="token operator">&lt;&lt;</span> q<span class="token punctuation">.</span><span class="token function">size</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span></pre></td></tr></table></figure><blockquote><p>size: 3</p></blockquote><h2 id="清空-queue"><a class="anchor" href="#清空-queue">#</a> 清空 queue</h2><figure class="highlight cpp"><figcaption data-lang="C++"></figcaption><table><tr><td data-num="1"></td><td><pre>queue<span class="token operator">&lt;</span><span class="token keyword">int</span><span class="token operator">></span> q<span class="token punctuation">;</span></pre></td></tr><tr class="marked"><td data-num="2"></td><td><pre>q<span class="token punctuation">.</span><span class="token function">clear</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span></pre></td></tr></table></figure><h2 id="確認-queue-是否為空"><a class="anchor" href="#確認-queue-是否為空">#</a> 確認 queue 是否為空</h2><p>確認 queue 是否為空使用  <code>empty()</code></p><figure class="highlight cpp"><figcaption data-lang="C++"></figcaption><table><tr><td data-num="1"></td><td><pre>queue<span class="token operator">&lt;</span><span class="token keyword">int</span><span class="token operator">></span> q<span class="token punctuation">;</span></pre></td></tr><tr><td data-num="2"></td><td><pre>q<span class="token punctuation">.</span><span class="token function">clear</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span></pre></td></tr><tr class="marked"><td data-num="3"></td><td><pre><span class="token keyword">if</span> <span class="token punctuation">(</span>q<span class="token punctuation">.</span><span class="token function">empty</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span> cout <span class="token operator">&lt;&lt;</span> <span class="token string">"empty"</span><span class="token punctuation">;</span></pre></td></tr><tr><td data-num="4"></td><td><pre><span class="token keyword">else</span> cout <span class="token operator">&lt;&lt;</span> <span class="token string">"Not empty"</span><span class="token punctuation">;</span></pre></td></tr></table></figure><blockquote><p>empty</p></blockquote><h2 id="參考資料"><a class="anchor" href="#參考資料">#</a> 參考資料</h2><ul><li><span class="exturl" data-url="aHR0cHM6Ly9zaGVuZ3l1NzY5Ny5naXRodWIuaW8vc3RkLXF1ZXVlLw==">https://shengyu7697.github.io/std-queue/</span></li></ul>]]></content>
      
      
      <categories>
          
          <category> Programming </category>
          
          <category> C/C++ </category>
          
      </categories>
      
      
        <tags>
            
            <tag> Data Structure </tag>
            
            <tag> C/C++ </tag>
            
            <tag> queue </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>662. Maximum Width of Binary Tree</title>
      <link href="/2023/04/20/Coding/leetcode/Medium/662%20Maximum%20Width%20of%20Binary%20Tree/"/>
      <url>/2023/04/20/Coding/leetcode/Medium/662%20Maximum%20Width%20of%20Binary%20Tree/</url>
      
        <content type="html"><![CDATA[<p>⭐️⭐️</p><h2 id="題目敘述"><a class="anchor" href="#題目敘述">#</a> <span class="exturl" data-url="aHR0cHM6Ly9sZWV0Y29kZS5jb20vcHJvYmxlbXMvbWF4aW11bS13aWR0aC1vZi1iaW5hcnktdHJlZS8=">題目敘述</span></h2><p>Given the  <code>root</code>  of a binary tree, return <em>the maximum width of the given tree</em>.</p><p>The <strong>maximum width</strong> of a tree is the maximum <strong>width</strong> among all levels.</p><p>The <strong>width</strong> of one level is defined as the length between the end-nodes (the leftmost and rightmost non-null nodes), where the null nodes between the end-nodes that would be present in a complete binary tree extending down to that level are also counted into the length calculation.</p><p>It is <strong>guaranteed</strong> that the answer will in the range of a <strong>32-bit</strong> signed integer.</p><h3 id="example-1"><a class="anchor" href="#example-1">#</a> Example 1:</h3><p><img data-src="https://i.imgur.com/BjIsiaN.png" alt=""></p><blockquote><p><strong>Input:</strong> root = [1,3,2,5,3,null,9]<br><strong>Output:</strong> 4<br><strong>Explanation:</strong> The maximum width exists in the third level with length 4 (5,3,null,9).</p></blockquote><h3 id="example-2"><a class="anchor" href="#example-2">#</a> Example 2:</h3><p><img data-src="https://i.imgur.com/uRAtVHp.png" alt=""></p><blockquote><p><strong>Input:</strong> root = [1,3,2,5,null,null,9,6,null,7]<br><strong>Output:</strong> 7<br><strong>Explanation:</strong> The maximum width exists in the fourth level with length 7 (6,null,null,null,null,null,7).</p></blockquote><h3 id="example-3"><a class="anchor" href="#example-3">#</a> Example 3:</h3><p><img data-src="https://i.imgur.com/ykiXotC.png" alt=""></p><blockquote><p><strong>Input:</strong> root = [1,3,2,5]<br><strong>Output:</strong> 2<br><strong>Explanation:</strong> The maximum width exists in the second level with length 2 (3,2).</p></blockquote><h2 id="解題思路"><a class="anchor" href="#解題思路">#</a> 解題思路</h2><h2 id="code"><a class="anchor" href="#code">#</a> Code</h2><div class="tab" data-id="id" data-title="C++"><figure class="highlight cpp"><figcaption data-lang="C++"></figcaption><table><tr><td data-num="1"></td><td><pre><span class="token keyword">class</span> <span class="token class-name">Solution</span> <span class="token punctuation">&#123;</span></pre></td></tr><tr><td data-num="2"></td><td><pre><span class="token keyword">public</span><span class="token operator">:</span></pre></td></tr><tr><td data-num="3"></td><td><pre>    <span class="token keyword">int</span> <span class="token function">widthOfBinaryTree</span><span class="token punctuation">(</span>TreeNode<span class="token operator">*</span> root<span class="token punctuation">)</span> <span class="token punctuation">&#123;</span></pre></td></tr><tr><td data-num="4"></td><td><pre>        <span class="token keyword">if</span> <span class="token punctuation">(</span><span class="token operator">!</span>root<span class="token punctuation">)</span> <span class="token keyword">return</span> <span class="token number">0</span><span class="token punctuation">;</span></pre></td></tr><tr><td data-num="5"></td><td><pre></pre></td></tr><tr><td data-num="6"></td><td><pre>        <span class="token keyword">int</span> res <span class="token operator">=</span> <span class="token number">1</span><span class="token punctuation">;</span></pre></td></tr><tr><td data-num="7"></td><td><pre>        queue<span class="token operator">&lt;</span>pair<span class="token operator">&lt;</span>TreeNode<span class="token operator">*</span><span class="token punctuation">,</span> <span class="token keyword">int</span><span class="token operator">>></span> q<span class="token punctuation">;</span></pre></td></tr><tr><td data-num="8"></td><td><pre>        q<span class="token punctuation">.</span><span class="token function">push</span><span class="token punctuation">(</span><span class="token punctuation">&#123;</span>root<span class="token punctuation">,</span> <span class="token number">0</span><span class="token punctuation">&#125;</span><span class="token punctuation">)</span><span class="token punctuation">;</span></pre></td></tr><tr><td data-num="9"></td><td><pre></pre></td></tr><tr><td data-num="10"></td><td><pre>        <span class="token keyword">while</span> <span class="token punctuation">(</span><span class="token operator">!</span>q<span class="token punctuation">.</span><span class="token function">empty</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span></pre></td></tr><tr><td data-num="11"></td><td><pre>            <span class="token keyword">int</span> len <span class="token operator">=</span> q<span class="token punctuation">.</span><span class="token function">size</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span></pre></td></tr><tr><td data-num="12"></td><td><pre>            <span class="token keyword">int</span> start <span class="token operator">=</span> q<span class="token punctuation">.</span><span class="token function">front</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span>second<span class="token punctuation">,</span> end <span class="token operator">=</span> q<span class="token punctuation">.</span><span class="token function">back</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span>second<span class="token punctuation">;</span></pre></td></tr><tr><td data-num="13"></td><td><pre>            res <span class="token operator">=</span> <span class="token function">max</span><span class="token punctuation">(</span>res<span class="token punctuation">,</span> end <span class="token operator">-</span> start <span class="token operator">+</span> <span class="token number">1</span><span class="token punctuation">)</span><span class="token punctuation">;</span></pre></td></tr><tr><td data-num="14"></td><td><pre></pre></td></tr><tr><td data-num="15"></td><td><pre>            <span class="token keyword">for</span> <span class="token punctuation">(</span><span class="token keyword">int</span> i<span class="token operator">=</span><span class="token number">0</span><span class="token punctuation">;</span> i<span class="token operator">&lt;</span>len<span class="token punctuation">;</span> i<span class="token operator">++</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span></pre></td></tr><tr><td data-num="16"></td><td><pre>                <span class="token keyword">auto</span> p <span class="token operator">=</span> q<span class="token punctuation">.</span><span class="token function">front</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span></pre></td></tr><tr><td data-num="17"></td><td><pre>                q<span class="token punctuation">.</span><span class="token function">pop</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span></pre></td></tr><tr><td data-num="18"></td><td><pre>                TreeNode<span class="token operator">*</span> tmp <span class="token operator">=</span> p<span class="token punctuation">.</span>first<span class="token punctuation">;</span></pre></td></tr><tr><td data-num="19"></td><td><pre>                <span class="token keyword">int</span> idx <span class="token operator">=</span> p<span class="token punctuation">.</span>second<span class="token punctuation">;</span></pre></td></tr><tr><td data-num="20"></td><td><pre></pre></td></tr><tr><td data-num="21"></td><td><pre>                <span class="token keyword">if</span> <span class="token punctuation">(</span>tmp<span class="token operator">-></span>left<span class="token punctuation">)</span> q<span class="token punctuation">.</span><span class="token function">push</span><span class="token punctuation">(</span><span class="token punctuation">&#123;</span>tmp<span class="token operator">-></span>left<span class="token punctuation">,</span> <span class="token punctuation">(</span><span class="token punctuation">(</span><span class="token keyword">long</span><span class="token punctuation">)</span><span class="token number">2</span> <span class="token operator">*</span> idx <span class="token operator">+</span> <span class="token number">1</span><span class="token punctuation">)</span><span class="token punctuation">&#125;</span><span class="token punctuation">)</span><span class="token punctuation">;</span></pre></td></tr><tr><td data-num="22"></td><td><pre>                <span class="token keyword">if</span> <span class="token punctuation">(</span>tmp<span class="token operator">-></span>right<span class="token punctuation">)</span> q<span class="token punctuation">.</span><span class="token function">push</span><span class="token punctuation">(</span><span class="token punctuation">&#123;</span>tmp<span class="token operator">-></span>right<span class="token punctuation">,</span> <span class="token punctuation">(</span><span class="token punctuation">(</span><span class="token keyword">long</span><span class="token punctuation">)</span><span class="token number">2</span> <span class="token operator">*</span> idx <span class="token operator">+</span> <span class="token number">2</span><span class="token punctuation">)</span><span class="token punctuation">&#125;</span><span class="token punctuation">)</span><span class="token punctuation">;</span></pre></td></tr><tr><td data-num="23"></td><td><pre>            <span class="token punctuation">&#125;</span></pre></td></tr><tr><td data-num="24"></td><td><pre>        <span class="token punctuation">&#125;</span></pre></td></tr><tr><td data-num="25"></td><td><pre>        <span class="token keyword">return</span> res<span class="token punctuation">;</span></pre></td></tr><tr><td data-num="26"></td><td><pre>    <span class="token punctuation">&#125;</span></pre></td></tr><tr><td data-num="27"></td><td><pre><span class="token punctuation">&#125;</span><span class="token punctuation">;</span></pre></td></tr></table></figure></div><div class="tab" data-id="id" data-title="Java"><figure class="highlight java"><figcaption data-lang="java"></figcaption><table><tr><td data-num="1"></td><td><pre><span class="token keyword">import</span> <span class="token import"><span class="token namespace">java<span class="token punctuation">.</span>util<span class="token punctuation">.</span></span><span class="token class-name">LinkedList</span></span><span class="token punctuation">;</span></pre></td></tr><tr><td data-num="2"></td><td><pre><span class="token keyword">import</span> <span class="token import"><span class="token namespace">java<span class="token punctuation">.</span>util<span class="token punctuation">.</span></span><span class="token class-name">Queue</span></span><span class="token punctuation">;</span></pre></td></tr><tr><td data-num="3"></td><td><pre></pre></td></tr><tr><td data-num="4"></td><td><pre><span class="token keyword">class</span> <span class="token class-name">Solution</span> <span class="token punctuation">&#123;</span></pre></td></tr><tr><td data-num="5"></td><td><pre>    <span class="token keyword">public</span> <span class="token keyword">int</span> <span class="token function">widthOfBinaryTree</span><span class="token punctuation">(</span><span class="token class-name">TreeNode</span> root<span class="token punctuation">)</span> <span class="token punctuation">&#123;</span></pre></td></tr><tr><td data-num="6"></td><td><pre>        <span class="token keyword">if</span> <span class="token punctuation">(</span>root <span class="token operator">==</span> <span class="token keyword">null</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span></pre></td></tr><tr><td data-num="7"></td><td><pre>            <span class="token keyword">return</span> <span class="token number">0</span><span class="token punctuation">;</span></pre></td></tr><tr><td data-num="8"></td><td><pre>        <span class="token punctuation">&#125;</span></pre></td></tr><tr><td data-num="9"></td><td><pre>        </pre></td></tr><tr><td data-num="10"></td><td><pre>        <span class="token class-name">Queue</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token class-name">Pair</span><span class="token punctuation">&lt;</span><span class="token class-name">TreeNode</span><span class="token punctuation">,</span> <span class="token class-name">Integer</span><span class="token punctuation">></span><span class="token punctuation">></span></span> queue <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">LinkedList</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token punctuation">></span></span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span></pre></td></tr><tr><td data-num="11"></td><td><pre>        queue<span class="token punctuation">.</span><span class="token function">add</span><span class="token punctuation">(</span><span class="token keyword">new</span> <span class="token class-name">Pair</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token punctuation">></span></span><span class="token punctuation">(</span>root<span class="token punctuation">,</span> <span class="token number">0</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span></pre></td></tr><tr><td data-num="12"></td><td><pre>        <span class="token keyword">int</span> maxWidth <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span></pre></td></tr><tr><td data-num="13"></td><td><pre>        </pre></td></tr><tr><td data-num="14"></td><td><pre>        <span class="token keyword">while</span> <span class="token punctuation">(</span><span class="token operator">!</span>queue<span class="token punctuation">.</span><span class="token function">isEmpty</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span></pre></td></tr><tr><td data-num="15"></td><td><pre>            <span class="token keyword">int</span> levelLength <span class="token operator">=</span> queue<span class="token punctuation">.</span><span class="token function">size</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span></pre></td></tr><tr><td data-num="16"></td><td><pre>            <span class="token keyword">int</span> levelStart <span class="token operator">=</span> queue<span class="token punctuation">.</span><span class="token function">peek</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">getValue</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span></pre></td></tr><tr><td data-num="17"></td><td><pre>            <span class="token keyword">int</span> index <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span></pre></td></tr><tr><td data-num="18"></td><td><pre>            </pre></td></tr><tr><td data-num="19"></td><td><pre>            <span class="token keyword">for</span> <span class="token punctuation">(</span><span class="token keyword">int</span> i <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span> i <span class="token operator">&lt;</span> levelLength<span class="token punctuation">;</span> i<span class="token operator">++</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span></pre></td></tr><tr><td data-num="20"></td><td><pre>                <span class="token class-name">Pair</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token class-name">TreeNode</span><span class="token punctuation">,</span> <span class="token class-name">Integer</span><span class="token punctuation">></span></span> pair <span class="token operator">=</span> queue<span class="token punctuation">.</span><span class="token function">poll</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span></pre></td></tr><tr><td data-num="21"></td><td><pre>                <span class="token class-name">TreeNode</span> node <span class="token operator">=</span> pair<span class="token punctuation">.</span><span class="token function">getKey</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span></pre></td></tr><tr><td data-num="22"></td><td><pre>                index <span class="token operator">=</span> pair<span class="token punctuation">.</span><span class="token function">getValue</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span></pre></td></tr><tr><td data-num="23"></td><td><pre>                </pre></td></tr><tr><td data-num="24"></td><td><pre>                <span class="token keyword">if</span> <span class="token punctuation">(</span>node<span class="token punctuation">.</span>left <span class="token operator">!=</span> <span class="token keyword">null</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span></pre></td></tr><tr><td data-num="25"></td><td><pre>                    queue<span class="token punctuation">.</span><span class="token function">add</span><span class="token punctuation">(</span><span class="token keyword">new</span> <span class="token class-name">Pair</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token punctuation">></span></span><span class="token punctuation">(</span>node<span class="token punctuation">.</span>left<span class="token punctuation">,</span> <span class="token number">2</span><span class="token operator">*</span>index<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span></pre></td></tr><tr><td data-num="26"></td><td><pre>                <span class="token punctuation">&#125;</span></pre></td></tr><tr><td data-num="27"></td><td><pre>                </pre></td></tr><tr><td data-num="28"></td><td><pre>                <span class="token keyword">if</span> <span class="token punctuation">(</span>node<span class="token punctuation">.</span>right <span class="token operator">!=</span> <span class="token keyword">null</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span></pre></td></tr><tr><td data-num="29"></td><td><pre>                    queue<span class="token punctuation">.</span><span class="token function">add</span><span class="token punctuation">(</span><span class="token keyword">new</span> <span class="token class-name">Pair</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token punctuation">></span></span><span class="token punctuation">(</span>node<span class="token punctuation">.</span>right<span class="token punctuation">,</span> <span class="token number">2</span><span class="token operator">*</span>index<span class="token operator">+</span><span class="token number">1</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span></pre></td></tr><tr><td data-num="30"></td><td><pre>                <span class="token punctuation">&#125;</span></pre></td></tr><tr><td data-num="31"></td><td><pre>            <span class="token punctuation">&#125;</span></pre></td></tr><tr><td data-num="32"></td><td><pre>            </pre></td></tr><tr><td data-num="33"></td><td><pre>            maxWidth <span class="token operator">=</span> <span class="token class-name">Math</span><span class="token punctuation">.</span><span class="token function">max</span><span class="token punctuation">(</span>maxWidth<span class="token punctuation">,</span> index <span class="token operator">-</span> levelStart <span class="token operator">+</span> <span class="token number">1</span><span class="token punctuation">)</span><span class="token punctuation">;</span></pre></td></tr><tr><td data-num="34"></td><td><pre>        <span class="token punctuation">&#125;</span></pre></td></tr><tr><td data-num="35"></td><td><pre>        </pre></td></tr><tr><td data-num="36"></td><td><pre>        <span class="token keyword">return</span> maxWidth<span class="token punctuation">;</span></pre></td></tr><tr><td data-num="37"></td><td><pre>    <span class="token punctuation">&#125;</span></pre></td></tr><tr><td data-num="38"></td><td><pre><span class="token punctuation">&#125;</span></pre></td></tr></table></figure></div><div class="tab" data-id="id" data-title="Python"><figure class="highlight python"><figcaption data-lang="python"></figcaption><table><tr><td data-num="1"></td><td><pre><span class="token keyword">class</span> <span class="token class-name">Solution</span><span class="token punctuation">:</span></pre></td></tr><tr><td data-num="2"></td><td><pre>    <span class="token keyword">def</span> <span class="token function">widthOfBinaryTree</span><span class="token punctuation">(</span>self<span class="token punctuation">,</span> root<span class="token punctuation">:</span> Optional<span class="token punctuation">[</span>TreeNode<span class="token punctuation">]</span><span class="token punctuation">)</span> <span class="token operator">-</span><span class="token operator">></span> <span class="token builtin">int</span><span class="token punctuation">:</span></pre></td></tr><tr><td data-num="3"></td><td><pre>        <span class="token keyword">if</span> <span class="token keyword">not</span> root<span class="token punctuation">:</span> <span class="token keyword">return</span> <span class="token number">0</span></pre></td></tr><tr><td data-num="4"></td><td><pre></pre></td></tr><tr><td data-num="5"></td><td><pre>        q <span class="token operator">=</span> deque<span class="token punctuation">(</span><span class="token punctuation">[</span><span class="token punctuation">(</span>root<span class="token punctuation">,</span> <span class="token number">0</span><span class="token punctuation">)</span><span class="token punctuation">]</span><span class="token punctuation">)</span></pre></td></tr><tr><td data-num="6"></td><td><pre>        res <span class="token operator">=</span> <span class="token number">0</span></pre></td></tr><tr><td data-num="7"></td><td><pre></pre></td></tr><tr><td data-num="8"></td><td><pre>        <span class="token keyword">while</span> q<span class="token punctuation">:</span></pre></td></tr><tr><td data-num="9"></td><td><pre>            l <span class="token operator">=</span> <span class="token builtin">len</span><span class="token punctuation">(</span>q<span class="token punctuation">)</span></pre></td></tr><tr><td data-num="10"></td><td><pre>            _<span class="token punctuation">,</span> start <span class="token operator">=</span> q<span class="token punctuation">[</span><span class="token number">0</span><span class="token punctuation">]</span></pre></td></tr><tr><td data-num="11"></td><td><pre></pre></td></tr><tr><td data-num="12"></td><td><pre>            <span class="token keyword">for</span> i <span class="token keyword">in</span> <span class="token builtin">range</span><span class="token punctuation">(</span>l<span class="token punctuation">)</span><span class="token punctuation">:</span></pre></td></tr><tr><td data-num="13"></td><td><pre>                node<span class="token punctuation">,</span> idx <span class="token operator">=</span> q<span class="token punctuation">.</span>popleft<span class="token punctuation">(</span><span class="token punctuation">)</span></pre></td></tr><tr><td data-num="14"></td><td><pre></pre></td></tr><tr><td data-num="15"></td><td><pre>                <span class="token keyword">if</span> node<span class="token punctuation">.</span>left<span class="token punctuation">:</span> q<span class="token punctuation">.</span>append<span class="token punctuation">(</span><span class="token punctuation">(</span>node<span class="token punctuation">.</span>left<span class="token punctuation">,</span> <span class="token number">2</span> <span class="token operator">*</span> idx<span class="token punctuation">)</span><span class="token punctuation">)</span></pre></td></tr><tr><td data-num="16"></td><td><pre>                <span class="token keyword">if</span> node<span class="token punctuation">.</span>right<span class="token punctuation">:</span> q<span class="token punctuation">.</span>append<span class="token punctuation">(</span><span class="token punctuation">(</span>node<span class="token punctuation">.</span>right<span class="token punctuation">,</span> <span class="token number">2</span> <span class="token operator">*</span> idx <span class="token operator">+</span> <span class="token number">1</span><span class="token punctuation">)</span><span class="token punctuation">)</span></pre></td></tr><tr><td data-num="17"></td><td><pre>            res <span class="token operator">=</span> <span class="token builtin">max</span><span class="token punctuation">(</span>res<span class="token punctuation">,</span> idx <span class="token operator">-</span> start <span class="token operator">+</span> <span class="token number">1</span><span class="token punctuation">)</span></pre></td></tr><tr><td data-num="18"></td><td><pre>        <span class="token keyword">return</span> res</pre></td></tr></table></figure></div>]]></content>
      
      
      <categories>
          
          <category> Coding </category>
          
          <category> Leetcode </category>
          
          <category> Medium </category>
          
      </categories>
      
      
        <tags>
            
            <tag> Leetcode </tag>
            
            <tag> Medium </tag>
            
            <tag> Tree </tag>
            
            <tag> Depth-First Search </tag>
            
            <tag> Breadth-First Search </tag>
            
            <tag> Binary Tree </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>C++ - Set</title>
      <link href="/2023/04/19/programming/CPP/cpp%20set/"/>
      <url>/2023/04/19/programming/CPP/cpp%20set/</url>
      
        <content type="html"><![CDATA[<p>C++  <code>set</code>  是一個關聯式容器， <code>set</code>  容器裡面的元素是<strong>唯一</strong>的，具有<strong>不重複</strong>的特性，而且是<strong>有排序</strong>的容器， <code>set</code>  容器裡面元素的值是<strong>不可修改</strong>，但 set 容器<strong>可以插入或刪除</strong>元素， <code>set</code>  的實作方式通常是用紅黑樹 (red-black tree) 實作的。</p><h2 id="set-初始化"><a class="anchor" href="#set-初始化">#</a> set 初始化</h2><p>C++ set 初始化用法如下，<br> 需要引入  <code>include&lt;set&gt;</code>  標頭檔</p><figure class="highlight cpp"><figcaption data-lang="C++"></figcaption><table><tr><td data-num="1"></td><td><pre>set<span class="token operator">&lt;</span><span class="token keyword">int</span><span class="token operator">></span> st<span class="token punctuation">&#123;</span><span class="token number">1</span><span class="token punctuation">,</span> <span class="token number">2</span><span class="token punctuation">,</span> <span class="token number">3</span><span class="token punctuation">,</span> <span class="token number">4</span><span class="token punctuation">,</span> <span class="token number">5</span><span class="token punctuation">&#125;</span><span class="token punctuation">;</span></pre></td></tr></table></figure><p>從 c-style 陣列來初始化</p><figure class="highlight cpp"><figcaption data-lang="C++"></figcaption><table><tr><td data-num="1"></td><td><pre><span class="token keyword">int</span> arr<span class="token punctuation">[</span><span class="token punctuation">]</span> <span class="token operator">=</span> <span class="token punctuation">&#123;</span><span class="token number">1</span><span class="token punctuation">,</span> <span class="token number">2</span><span class="token punctuation">,</span> <span class="token number">3</span><span class="token punctuation">,</span> <span class="token number">4</span><span class="token punctuation">,</span> <span class="token number">5</span><span class="token punctuation">&#125;</span><span class="token punctuation">;</span></pre></td></tr><tr><td data-num="2"></td><td><pre>set<span class="token operator">&lt;</span><span class="token keyword">int</span><span class="token operator">></span> <span class="token function">st</span><span class="token punctuation">(</span>arr<span class="token punctuation">,</span> arr <span class="token operator">+</span> <span class="token number">5</span><span class="token punctuation">)</span><span class="token punctuation">;</span></pre></td></tr></table></figure><h2 id="set-插入元素"><a class="anchor" href="#set-插入元素">#</a> set 插入元素</h2><p>set 使用  <code>insert()</code>  來插入元素。<br>用法如下，</p><figure class="highlight cpp"><figcaption data-lang="C++"></figcaption><table><tr><td data-num="1"></td><td><pre>set<span class="token operator">&lt;</span><span class="token keyword">int</span><span class="token operator">></span> st<span class="token punctuation">;</span></pre></td></tr><tr><td data-num="2"></td><td><pre>st<span class="token punctuation">.</span><span class="token function">insert</span><span class="token punctuation">(</span><span class="token number">1</span><span class="token punctuation">)</span><span class="token punctuation">;</span></pre></td></tr><tr><td data-num="3"></td><td><pre>st<span class="token punctuation">.</span><span class="token function">insert</span><span class="token punctuation">(</span><span class="token number">2</span><span class="token punctuation">)</span><span class="token punctuation">;</span></pre></td></tr><tr><td data-num="4"></td><td><pre>st<span class="token punctuation">.</span><span class="token function">insert</span><span class="token punctuation">(</span><span class="token number">3</span><span class="token punctuation">)</span><span class="token punctuation">;</span></pre></td></tr><tr><td data-num="5"></td><td><pre>st<span class="token punctuation">.</span><span class="token function">insert</span><span class="token punctuation">(</span><span class="token number">4</span><span class="token punctuation">)</span><span class="token punctuation">;</span></pre></td></tr><tr><td data-num="6"></td><td><pre>st<span class="token punctuation">.</span><span class="token function">insert</span><span class="token punctuation">(</span><span class="token number">5</span><span class="token punctuation">)</span><span class="token punctuation">;</span></pre></td></tr></table></figure><h2 id="set-讀取元素"><a class="anchor" href="#set-讀取元素">#</a> set 讀取元素</h2><p>由於 set 容器中沒有  <code>at()</code>  成員函數，也沒有  <code>operator[]</code> ，set 無法單純地隨機讀取某元素，但能透過 iterator 來讀取元素。</p><h3 id="迴圈遍歷-set-容器"><a class="anchor" href="#迴圈遍歷-set-容器">#</a> 迴圈遍歷 set 容器</h3><p>迴圈遍歷 set 容器的方式有幾種，<br>以下先介紹使用 range-based for loop 來遍歷 set 容器並且印出來，這邊故意將元素不按順序初始化以及插入，然後我們再來觀察看看是不是 set 會將其排序，同時看看是不是具有不重複性，</p><figure class="highlight cpp"><figcaption data-lang="C++"></figcaption><table><tr><td data-num="1"></td><td><pre>set<span class="token operator">&lt;</span><span class="token keyword">int</span><span class="token operator">></span> st <span class="token operator">=</span> <span class="token punctuation">&#123;</span><span class="token number">3</span><span class="token punctuation">,</span> <span class="token number">1</span><span class="token punctuation">&#125;</span><span class="token punctuation">;</span></pre></td></tr><tr><td data-num="2"></td><td><pre>st<span class="token punctuation">.</span><span class="token function">insert</span><span class="token punctuation">(</span><span class="token number">2</span><span class="token punctuation">)</span><span class="token punctuation">;</span></pre></td></tr><tr><td data-num="3"></td><td><pre>st<span class="token punctuation">.</span><span class="token function">insert</span><span class="token punctuation">(</span><span class="token number">5</span><span class="token punctuation">)</span><span class="token punctuation">;</span></pre></td></tr><tr><td data-num="4"></td><td><pre>st<span class="token punctuation">.</span><span class="token function">insert</span><span class="token punctuation">(</span><span class="token number">4</span><span class="token punctuation">)</span><span class="token punctuation">;</span></pre></td></tr><tr><td data-num="5"></td><td><pre>st<span class="token punctuation">.</span><span class="token function">insert</span><span class="token punctuation">(</span><span class="token number">5</span><span class="token punctuation">)</span><span class="token punctuation">;</span></pre></td></tr><tr><td data-num="6"></td><td><pre>st<span class="token punctuation">.</span><span class="token function">insert</span><span class="token punctuation">(</span><span class="token number">4</span><span class="token punctuation">)</span><span class="token punctuation">;</span></pre></td></tr><tr><td data-num="7"></td><td><pre></pre></td></tr><tr><td data-num="8"></td><td><pre><span class="token keyword">for</span> <span class="token punctuation">(</span><span class="token keyword">auto</span><span class="token operator">&amp;</span> s<span class="token operator">:</span> st<span class="token punctuation">)</span> cout <span class="token operator">&lt;&lt;</span> s <span class="token operator">&lt;&lt;</span> <span class="token string">" "</span><span class="token punctuation">;</span></pre></td></tr></table></figure><p>輸出內容如下，從這個輸出結果發現是元素是<strong>由小到大排列</strong>，所以 set 容器裡面真的是會幫你排序的，在<strong>插入元素的同時會根據元素來進行排序</strong>，並且沒有元素重複。</p><blockquote><p>1 2 3 4 5</p></blockquote><p>迴圈也可以使用<strong>迭代器</strong>的方式，用法如下，</p><figure class="highlight cpp"><figcaption data-lang="C++"></figcaption><table><tr class="marked"><td data-num="1"></td><td><pre><span class="token keyword">for</span> <span class="token punctuation">(</span>set<span class="token operator">&lt;</span><span class="token keyword">int</span><span class="token operator">></span><span class="token double-colon punctuation">::</span>iterator it <span class="token operator">=</span> st<span class="token punctuation">.</span><span class="token function">begin</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span> it <span class="token operator">!=</span> st<span class="token punctuation">.</span><span class="token function">end</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span> it<span class="token operator">++</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span></pre></td></tr><tr><td data-num="2"></td><td><pre>    cout <span class="token operator">&lt;&lt;</span> <span class="token operator">*</span>it <span class="token operator">&lt;&lt;</span> <span class="token string">" "</span><span class="token punctuation">;</span></pre></td></tr><tr><td data-num="3"></td><td><pre><span class="token punctuation">&#125;</span></pre></td></tr><tr><td data-num="4"></td><td><pre></pre></td></tr><tr><td data-num="5"></td><td><pre><span class="token comment">// or</span></pre></td></tr><tr><td data-num="6"></td><td><pre></pre></td></tr><tr class="marked"><td data-num="7"></td><td><pre><span class="token keyword">for</span> <span class="token punctuation">(</span><span class="token keyword">auto</span> it <span class="token operator">=</span> st<span class="token punctuation">.</span><span class="token function">begin</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span> it <span class="token operator">!=</span> st<span class="token punctuation">.</span><span class="token function">end</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span> it<span class="token operator">++</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span></pre></td></tr><tr><td data-num="8"></td><td><pre>    cout <span class="token operator">&lt;&lt;</span> <span class="token operator">*</span>it <span class="token operator">&lt;&lt;</span> <span class="token string">" "</span><span class="token punctuation">;</span></pre></td></tr><tr><td data-num="9"></td><td><pre><span class="token punctuation">&#125;</span></pre></td></tr></table></figure><p>如果要從後面印到前面的話，可以使用<strong>反向迭代器</strong>，如果嫌 iterator 迭代器名稱太長的話可以善用  <code>auto</code>  關鍵字讓編譯器去推導該變數類型，用法如下</p><figure class="highlight cpp"><figcaption data-lang="C++"></figcaption><table><tr><td data-num="1"></td><td><pre><span class="token keyword">for</span> <span class="token punctuation">(</span><span class="token keyword">auto</span> it <span class="token operator">=</span> st<span class="token punctuation">.</span><span class="token function">rbegin</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span> it <span class="token operator">!=</span> st<span class="token punctuation">.</span><span class="token function">rend</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span> it<span class="token operator">++</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span></pre></td></tr><tr><td data-num="2"></td><td><pre>    cout <span class="token operator">&lt;&lt;</span> <span class="token operator">*</span>it <span class="token operator">&lt;&lt;</span> <span class="token string">" "</span><span class="token punctuation">;</span></pre></td></tr><tr><td data-num="3"></td><td><pre><span class="token punctuation">&#125;</span></pre></td></tr></table></figure><p>使用反向迭代器的輸出結果如下</p><blockquote><p>5 4 3 2 1</p></blockquote><h2 id="set-刪除指定元素"><a class="anchor" href="#set-刪除指定元素">#</a> set 刪除指定元素</h2><p>set 刪除指定元素要使用  <code>erase()</code></p><figure class="highlight cpp"><figcaption data-lang="C++"></figcaption><table><tr><td data-num="1"></td><td><pre>set<span class="token operator">&lt;</span><span class="token keyword">int</span><span class="token operator">></span> st<span class="token punctuation">&#123;</span><span class="token number">2</span><span class="token punctuation">,</span> <span class="token number">4</span><span class="token punctuation">,</span> <span class="token number">6</span><span class="token punctuation">,</span> <span class="token number">8</span><span class="token punctuation">&#125;</span><span class="token punctuation">;</span></pre></td></tr><tr><td data-num="2"></td><td><pre></pre></td></tr><tr class="marked"><td data-num="3"></td><td><pre>st<span class="token punctuation">.</span><span class="token function">erase</span><span class="token punctuation">(</span><span class="token number">2</span><span class="token punctuation">)</span><span class="token punctuation">;</span></pre></td></tr><tr><td data-num="4"></td><td><pre><span class="token keyword">for</span> <span class="token punctuation">(</span><span class="token keyword">auto</span><span class="token operator">&amp;</span> s<span class="token operator">:</span> st<span class="token punctuation">)</span> cout <span class="token operator">&lt;&lt;</span> s <span class="token operator">&lt;&lt;</span> <span class="token string">" "</span><span class="token punctuation">;</span></pre></td></tr></table></figure><p>結果如下，</p><blockquote><p>4 6 8</p></blockquote><p>那 set 刪除不存在的元素呢？</p><figure class="highlight cpp"><figcaption data-lang="C++"></figcaption><table><tr><td data-num="1"></td><td><pre>set<span class="token operator">&lt;</span><span class="token keyword">int</span><span class="token operator">></span> st<span class="token punctuation">&#123;</span><span class="token number">2</span><span class="token punctuation">,</span> <span class="token number">4</span><span class="token punctuation">,</span> <span class="token number">6</span><span class="token punctuation">,</span> <span class="token number">8</span><span class="token punctuation">&#125;</span><span class="token punctuation">;</span></pre></td></tr><tr><td data-num="2"></td><td><pre><span class="token keyword">auto</span> ret <span class="token operator">=</span> st<span class="token punctuation">.</span><span class="token function">erase</span><span class="token punctuation">(</span><span class="token number">2</span><span class="token punctuation">)</span><span class="token punctuation">;</span></pre></td></tr><tr><td data-num="3"></td><td><pre>cout <span class="token operator">&lt;&lt;</span> ret <span class="token operator">&lt;&lt;</span> endl<span class="token punctuation">;</span></pre></td></tr><tr><td data-num="4"></td><td><pre><span class="token keyword">for</span> <span class="token punctuation">(</span><span class="token keyword">auto</span><span class="token operator">&amp;</span> s <span class="token operator">:</span> st<span class="token punctuation">)</span> cout <span class="token operator">&lt;&lt;</span> s <span class="token operator">&lt;&lt;</span> <span class="token char">' '</span><span class="token punctuation">;</span></pre></td></tr><tr><td data-num="5"></td><td><pre></pre></td></tr><tr class="marked"><td data-num="6"></td><td><pre>ret <span class="token operator">=</span> st<span class="token punctuation">.</span><span class="token function">erase</span><span class="token punctuation">(</span><span class="token number">3</span><span class="token punctuation">)</span><span class="token punctuation">;</span></pre></td></tr><tr><td data-num="7"></td><td><pre>cout <span class="token operator">&lt;&lt;</span> endl <span class="token operator">&lt;&lt;</span> ret <span class="token operator">&lt;&lt;</span> endl<span class="token punctuation">;</span></pre></td></tr><tr><td data-num="8"></td><td><pre><span class="token keyword">for</span> <span class="token punctuation">(</span><span class="token keyword">auto</span><span class="token operator">&amp;</span> s <span class="token operator">:</span> st<span class="token punctuation">)</span> cout <span class="token operator">&lt;&lt;</span> s <span class="token operator">&lt;&lt;</span> <span class="token char">' '</span><span class="token punctuation">;</span></pre></td></tr></table></figure><p>結果是可以這麼作的，不會發生什麼事。另外  <code>erase()</code>  <strong>會回傳告訴你刪除了幾個元素</strong>。</p><blockquote><p>1<br>4 6 8<br>0<br>4 6 8</p></blockquote><h2 id="清空-set-元素"><a class="anchor" href="#清空-set-元素">#</a> 清空 set 元素</h2><p>要清空 set 容器的的話，要使用  <code>clear()</code> ，</p><figure class="highlight cpp"><figcaption data-lang="C++"></figcaption><table><tr><td data-num="1"></td><td><pre>set<span class="token operator">&lt;</span><span class="token keyword">int</span><span class="token operator">></span> st<span class="token punctuation">&#123;</span><span class="token number">1</span><span class="token punctuation">,</span> <span class="token number">2</span><span class="token punctuation">,</span> <span class="token number">3</span><span class="token punctuation">&#125;</span><span class="token punctuation">;</span></pre></td></tr><tr class="marked"><td data-num="2"></td><td><pre>st<span class="token punctuation">.</span><span class="token function">clear</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span></pre></td></tr></table></figure><h2 id="set-判斷元素是否存在"><a class="anchor" href="#set-判斷元素是否存在">#</a> set 判斷元素是否存在</h2><p>set 要判斷指定元素是否存在的話有兩種方法，</p><h3 id="count"><a class="anchor" href="#count">#</a> count()</h3><p>第一種方法是使用  <code>count()</code>  成員函式，<strong> <code>count()</code>  存在該元素的話回傳  <code>1</code> ，不存在的話回傳  <code>0</code> </strong>，</p><figure class="highlight cpp"><figcaption data-lang="C++"></figcaption><table><tr><td data-num="1"></td><td><pre>set<span class="token operator">&lt;</span><span class="token keyword">int</span><span class="token operator">></span> st<span class="token punctuation">&#123;</span><span class="token number">2</span><span class="token punctuation">,</span> <span class="token number">4</span><span class="token punctuation">,</span> <span class="token number">6</span><span class="token punctuation">&#125;</span><span class="token punctuation">;</span></pre></td></tr><tr class="marked"><td data-num="2"></td><td><pre>cout <span class="token operator">&lt;&lt;</span> st<span class="token punctuation">.</span><span class="token function">count</span><span class="token punctuation">(</span><span class="token number">4</span><span class="token punctuation">)</span> <span class="token operator">&lt;&lt;</span> <span class="token string">", "</span><span class="token punctuation">;</span></pre></td></tr><tr class="marked"><td data-num="3"></td><td><pre>cout <span class="token operator">&lt;&lt;</span> st<span class="token punctuation">.</span><span class="token function">count</span><span class="token punctuation">(</span><span class="token number">8</span><span class="token punctuation">)</span><span class="token punctuation">;</span></pre></td></tr></table></figure><p>結果如下，</p><blockquote><p>1, 0</p></blockquote><h3 id="find"><a class="anchor" href="#find">#</a> find()</h3><p>第二種方法是使用  <code>find()</code>  成員函式來判斷指定元素是否存在，<br>與  <code>count()</code>  不同的是  <code>find()</code>  <strong>有找到該指定元素的話會回傳指向該特定元素的 iterator，否則回傳 past-the-end (end ()) iterator</strong></p><figure class="highlight cpp"><figcaption data-lang="C++"></figcaption><table><tr><td data-num="1"></td><td><pre>set<span class="token operator">&lt;</span><span class="token keyword">int</span><span class="token operator">></span> st <span class="token operator">=</span> <span class="token punctuation">&#123;</span><span class="token number">2</span><span class="token punctuation">,</span> <span class="token number">4</span><span class="token punctuation">,</span> <span class="token number">6</span><span class="token punctuation">&#125;</span><span class="token punctuation">;</span></pre></td></tr><tr class="marked"><td data-num="2"></td><td><pre><span class="token keyword">auto</span> search <span class="token operator">=</span> st<span class="token punctuation">.</span><span class="token function">find</span><span class="token punctuation">(</span><span class="token number">2</span><span class="token punctuation">)</span><span class="token punctuation">;</span></pre></td></tr><tr><td data-num="3"></td><td><pre><span class="token keyword">if</span> <span class="token punctuation">(</span>search <span class="token operator">!=</span> st<span class="token punctuation">.</span><span class="token function">end</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span> cout <span class="token operator">&lt;&lt;</span> <span class="token string">"Found "</span> <span class="token operator">&lt;&lt;</span> <span class="token operator">*</span>search <span class="token operator">&lt;&lt;</span> endl<span class="token punctuation">;</span></pre></td></tr><tr><td data-num="4"></td><td><pre><span class="token keyword">else</span> cout <span class="token operator">&lt;&lt;</span> <span class="token string">"Not found\n"</span><span class="token punctuation">;</span></pre></td></tr></table></figure><blockquote><p>Found 2</p></blockquote><h2 id="判斷-set-容器是否為空"><a class="anchor" href="#判斷-set-容器是否為空">#</a> 判斷 set 容器是否為空</h2><p>要判斷 set 是否為空或是裡面有沒有元素的話，可以用  <code>empty()</code></p><figure class="highlight cpp"><figcaption data-lang="C++"></figcaption><table><tr><td data-num="1"></td><td><pre>set<span class="token operator">&lt;</span><span class="token keyword">int</span><span class="token operator">></span> st<span class="token punctuation">;</span></pre></td></tr><tr><td data-num="2"></td><td><pre>st<span class="token punctuation">.</span><span class="token function">clear</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span></pre></td></tr><tr><td data-num="3"></td><td><pre></pre></td></tr><tr class="marked"><td data-num="4"></td><td><pre><span class="token keyword">if</span> <span class="token punctuation">(</span>st<span class="token punctuation">.</span><span class="token function">empty</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span> cout <span class="token operator">&lt;&lt;</span> <span class="token string">"Empty\n"</span><span class="token punctuation">;</span></pre></td></tr><tr><td data-num="5"></td><td><pre><span class="token keyword">else</span> cout <span class="token operator">&lt;&lt;</span> <span class="token string">"Not empty"</span><span class="token punctuation">;</span></pre></td></tr></table></figure><blockquote><p>Empty</p></blockquote><h2 id="set-vs-vector"><a class="anchor" href="#set-vs-vector">#</a> set vs. vector</h2><ul><li>唯一性<ul><li>set 跟 vector 不同之處是 <strong>set 容器裡面的元素是唯一的</strong>，具有不重複的特性，vector 則沒有這個限制。</li></ul></li><li>不可修改性<ul><li>vector 可以修改元素的值，但 <strong>set 容器裡面元素的值是不可修改的</strong>。</li></ul></li><li>順序性<ul><li><strong>set 是有序的</strong>，也就是裡面的元素會按照特定順序擺放，跟插入順序無關，vector 則不是。</li></ul></li></ul><h2 id="參考資料"><a class="anchor" href="#參考資料">#</a> 參考資料</h2><ul><li><span class="exturl" data-url="aHR0cHM6Ly9zaGVuZ3l1NzY5Ny5naXRodWIuaW8vc3RkLXNldC8=">https://shengyu7697.github.io/std-set/</span></li></ul>]]></content>
      
      
      <categories>
          
          <category> Programming </category>
          
          <category> C/C++ </category>
          
      </categories>
      
      
        <tags>
            
            <tag> Data Structure </tag>
            
            <tag> C/C++ </tag>
            
            <tag> Set </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>C/C++ - String Split</title>
      <link href="/2023/04/19/programming/CPP/cpp%20string%20split/"/>
      <url>/2023/04/19/programming/CPP/cpp%20string%20split/</url>
      
        <content type="html"><![CDATA[<h2 id="c-語言的-strtok"><a class="anchor" href="#c-語言的-strtok">#</a> C 語言的 strtok</h2><p>C 語言要字串分割通常會使用 strtok，要使用 strtok 的話需要引入的標頭檔  <code>&lt;string.h&gt;</code> ，如果要使用 C++ 的標頭檔則是引入  <code>&lt;cstring&gt;</code> ，</p><p>strtok 函式原型為</p><figure class="highlight c"><figcaption data-lang="c"><span>strtok</span></figcaption><table><tr><td data-num="1"></td><td><pre><span class="token keyword">char</span><span class="token operator">*</span> <span class="token function">strtok</span><span class="token punctuation">(</span><span class="token keyword">char</span><span class="token operator">*</span> str<span class="token punctuation">,</span> <span class="token keyword">const</span> <span class="token keyword">char</span><span class="token operator">*</span> delimiters<span class="token punctuation">)</span><span class="token punctuation">;</span></pre></td></tr></table></figure><p><code>strtok()</code>  會將  <code>str</code>  依據給入的  <code>delimiters</code>  (分割符號 / 分隔符號) 進行字串分割，如果<strong>成功的話會回傳指向分割結果的字串開頭</strong>，<strong>否則會回傳 NULL</strong>。</p><h3 id="example"><a class="anchor" href="#example">#</a> Example</h3><p><code>d</code>  是分割符號 / 分隔符號，這邊示範用<em>空格</em>與<em>逗號</em>進行分割，如果有需要的話還可以在 delimiters 加入更多的分割符號，<br> <code>p</code>  是<strong>指向每次分割的結果</strong>，</p><div class="note danger no-icon"><p>要注意的是<strong>除了第一次是將 str 帶入 strtok 分割以外，第二次以上都是將 NULL 帶入 strtok 繼續作字串分割</strong></p></div><figure class="highlight c"><figcaption data-lang="c"><span>strtok()</span><a href="https://chienikao.github.io">Home</a></figcaption><table><tr><td data-num="1"></td><td><pre><span class="token macro property"><span class="token directive-hash">#</span><span class="token directive keyword">include</span> <span class="token string">&lt;stdio.h></span></span></pre></td></tr><tr><td data-num="2"></td><td><pre><span class="token macro property"><span class="token directive-hash">#</span><span class="token directive keyword">include</span> <span class="token string">&lt;stdlib.h></span></span></pre></td></tr><tr class="marked"><td data-num="3"></td><td><pre><span class="token macro property"><span class="token directive-hash">#</span><span class="token directive keyword">include</span> <span class="token string">&lt;string.h></span></span></pre></td></tr><tr><td data-num="4"></td><td><pre></pre></td></tr><tr><td data-num="5"></td><td><pre>ing <span class="token function">main</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span></pre></td></tr><tr><td data-num="6"></td><td><pre>    <span class="token keyword">char</span> str<span class="token punctuation">[</span><span class="token punctuation">]</span> <span class="token operator">=</span> <span class="token string">"Hello world, nice to meet you"</span><span class="token punctuation">;</span></pre></td></tr><tr><td data-num="7"></td><td><pre>    <span class="token keyword">const</span> <span class="token keyword">char</span><span class="token operator">*</span> d <span class="token operator">=</span> <span class="token string">" ,"</span><span class="token punctuation">;</span></pre></td></tr><tr><td data-num="8"></td><td><pre>    <span class="token keyword">char</span><span class="token operator">*</span> p<span class="token punctuation">;</span></pre></td></tr><tr class="marked"><td data-num="9"></td><td><pre>    p <span class="token operator">=</span> <span class="token function">strtok</span><span class="token punctuation">(</span>str<span class="token punctuation">,</span> d<span class="token punctuation">)</span><span class="token punctuation">;</span></pre></td></tr><tr><td data-num="10"></td><td><pre></pre></td></tr><tr><td data-num="11"></td><td><pre>    <span class="token keyword">while</span> <span class="token punctuation">(</span>p <span class="token operator">!=</span> <span class="token constant">NULL</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span></pre></td></tr><tr><td data-num="12"></td><td><pre>        <span class="token function">printf</span><span class="token punctuation">(</span><span class="token string">"%s\n"</span><span class="token punctuation">,</span> p<span class="token punctuation">)</span><span class="token punctuation">;</span></pre></td></tr><tr class="marked"><td data-num="13"></td><td><pre>        p <span class="token operator">=</span> <span class="token function">strtok</span><span class="token punctuation">(</span><span class="token constant">NULL</span><span class="token punctuation">,</span> d<span class="token punctuation">)</span><span class="token punctuation">;</span></pre></td></tr><tr><td data-num="14"></td><td><pre>    <span class="token punctuation">&#125;</span></pre></td></tr><tr><td data-num="15"></td><td><pre><span class="token punctuation">&#125;</span></pre></td></tr></table></figure><p>結果如下，</p><blockquote><p>Hello<br>world<br>nice<br>to<br>meet<br>you</p></blockquote><div class="note danger no-icon"><p>因為 strtok 的實做原理是發現分割字元時，就把字元改為  <code>\0</code>  字元，意味著使用  <code>strtok()</code>  完後，<strong>原字串會被修改</strong>，<br>修改後的結果是  <code>Hello\nworld\n\nnice\nto\nmeet\nyou</code>  這樣的形式，所以原本的字串如果之後另有用途的話，記得先複製一份。</p></div><h2 id="c-find-substr"><a class="anchor" href="#c-find-substr">#</a> C++ find() &amp; substr()</h2><p><code>std::string::find()</code>  可以用來作<strong>字串搜尋</strong>的功能，再將每次找到的位置搭配  <code>std::string::substr()</code>  取出子字串並放入  <code>std::vector</code>  裡，最後再回傳這個結果  <code>std::vector&lt;std::string&gt; result</code> ，這種方式的好處是原字串不會被修改。</p><figure class="highlight cpp"><figcaption data-lang="C++"><span>find() & substr()</span><a href="https://chienikao.github.io">Home</a></figcaption><table><tr><td data-num="1"></td><td><pre><span class="token macro property"><span class="token directive-hash">#</span><span class="token directive keyword">include</span> <span class="token string">&lt;iostream></span></span></pre></td></tr><tr><td data-num="2"></td><td><pre><span class="token macro property"><span class="token directive-hash">#</span><span class="token directive keyword">include</span> <span class="token string">&lt;vector></span></span></pre></td></tr><tr><td data-num="3"></td><td><pre><span class="token macro property"><span class="token directive-hash">#</span><span class="token directive keyword">include</span> <span class="token string">&lt;cstring></span></span></pre></td></tr><tr><td data-num="4"></td><td><pre></pre></td></tr><tr><td data-num="5"></td><td><pre><span class="token keyword">using</span> <span class="token keyword">namespace</span> std<span class="token punctuation">;</span></pre></td></tr><tr><td data-num="6"></td><td><pre></pre></td></tr><tr class="marked"><td data-num="7"></td><td><pre><span class="token keyword">const</span> vector<span class="token operator">&lt;</span>string<span class="token operator">></span> <span class="token function">split</span><span class="token punctuation">(</span><span class="token keyword">const</span> string<span class="token operator">&amp;</span> str<span class="token punctuation">,</span> <span class="token keyword">const</span> string<span class="token operator">&amp;</span> pattern<span class="token punctuation">)</span> <span class="token punctuation">&#123;</span></pre></td></tr><tr><td data-num="8"></td><td><pre>    vector<span class="token operator">&lt;</span>string<span class="token operator">></span> res<span class="token punctuation">;</span></pre></td></tr><tr><td data-num="9"></td><td><pre>    string<span class="token double-colon punctuation">::</span>size_type begin<span class="token punctuation">,</span> end<span class="token punctuation">;</span></pre></td></tr><tr><td data-num="10"></td><td><pre></pre></td></tr><tr><td data-num="11"></td><td><pre>    end <span class="token operator">=</span> str<span class="token punctuation">.</span><span class="token function">find</span><span class="token punctuation">(</span>pattern<span class="token punctuation">)</span><span class="token punctuation">;</span></pre></td></tr><tr><td data-num="12"></td><td><pre>    begin <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span></pre></td></tr><tr><td data-num="13"></td><td><pre></pre></td></tr><tr><td data-num="14"></td><td><pre>    <span class="token keyword">while</span> <span class="token punctuation">(</span>end <span class="token operator">!=</span> string<span class="token double-colon punctuation">::</span>npos<span class="token punctuation">)</span> <span class="token punctuation">&#123;</span></pre></td></tr><tr><td data-num="15"></td><td><pre>        <span class="token keyword">if</span> <span class="token punctuation">(</span>end <span class="token operator">-</span> begin <span class="token operator">!=</span> <span class="token number">0</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span></pre></td></tr><tr><td data-num="16"></td><td><pre>            res<span class="token punctuation">.</span><span class="token function">push_back</span><span class="token punctuation">(</span>str<span class="token punctuation">.</span><span class="token function">substr</span><span class="token punctuation">(</span>begin<span class="token punctuation">,</span> end <span class="token operator">-</span> begin<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span></pre></td></tr><tr><td data-num="17"></td><td><pre>        <span class="token punctuation">&#125;</span></pre></td></tr><tr><td data-num="18"></td><td><pre>        begin <span class="token operator">=</span> end <span class="token operator">+</span> pattern<span class="token punctuation">.</span><span class="token function">size</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span></pre></td></tr><tr><td data-num="19"></td><td><pre>        end <span class="token operator">=</span> str<span class="token punctuation">.</span><span class="token function">find</span><span class="token punctuation">(</span>pattern<span class="token punctuation">,</span> begin<span class="token punctuation">)</span><span class="token punctuation">;</span></pre></td></tr><tr><td data-num="20"></td><td><pre>    <span class="token punctuation">&#125;</span></pre></td></tr><tr><td data-num="21"></td><td><pre></pre></td></tr><tr><td data-num="22"></td><td><pre>    <span class="token keyword">if</span> <span class="token punctuation">(</span>begin <span class="token operator">!=</span> str<span class="token punctuation">.</span><span class="token function">length</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span></pre></td></tr><tr><td data-num="23"></td><td><pre>        res<span class="token punctuation">.</span><span class="token function">push_back</span><span class="token punctuation">(</span>str<span class="token punctuation">.</span><span class="token function">substr</span><span class="token punctuation">(</span>begin<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span></pre></td></tr><tr><td data-num="24"></td><td><pre>    <span class="token punctuation">&#125;</span></pre></td></tr><tr><td data-num="25"></td><td><pre>    <span class="token keyword">return</span> res<span class="token punctuation">;</span></pre></td></tr><tr><td data-num="26"></td><td><pre><span class="token punctuation">&#125;</span></pre></td></tr><tr><td data-num="27"></td><td><pre></pre></td></tr><tr><td data-num="28"></td><td><pre><span class="token keyword">int</span> <span class="token function">main</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span></pre></td></tr><tr><td data-num="29"></td><td><pre>    string str <span class="token operator">=</span> <span class="token string">"This is a C++ string"</span><span class="token punctuation">;</span></pre></td></tr><tr><td data-num="30"></td><td><pre>    string pattern <span class="token operator">=</span> <span class="token string">" "</span><span class="token punctuation">;</span></pre></td></tr><tr><td data-num="31"></td><td><pre></pre></td></tr><tr><td data-num="32"></td><td><pre>    vector<span class="token operator">&lt;</span>string<span class="token operator">></span> v <span class="token operator">=</span> <span class="token function">split</span><span class="token punctuation">(</span>str<span class="token punctuation">,</span> pattern<span class="token punctuation">)</span><span class="token punctuation">;</span></pre></td></tr><tr><td data-num="33"></td><td><pre></pre></td></tr><tr><td data-num="34"></td><td><pre>    <span class="token keyword">for</span> <span class="token punctuation">(</span><span class="token keyword">auto</span><span class="token operator">&amp;</span> s <span class="token operator">:</span> v<span class="token punctuation">)</span> cout <span class="token operator">&lt;&lt;</span> s <span class="token operator">&lt;&lt;</span> endl<span class="token punctuation">;</span></pre></td></tr><tr><td data-num="35"></td><td><pre><span class="token punctuation">&#125;</span></pre></td></tr></table></figure><p>結果如下，</p><blockquote><p>This<br>is<br>a<br>C++<br>string</p></blockquote><h2 id="c-getline"><a class="anchor" href="#c-getline">#</a> C++ getline()</h2><p>先將  <code>string</code>  建立  <code>stringstream</code> ，再用  <code>getline()</code>  來處理  <code>stringstream</code> ，將每一次取出的字串放到  <code>vector</code> ，最後再回傳這個結果  <code>vector&lt;string&gt; result</code> ，這種方式的好處是原字串不會被修改。</p><figure class="highlight cpp"><figcaption data-lang="C++"><span>getline()</span><a href="https://chienikao.github.io">Home</a></figcaption><table><tr><td data-num="1"></td><td><pre><span class="token macro property"><span class="token directive-hash">#</span><span class="token directive keyword">include</span> <span class="token string">&lt;iostream></span></span></pre></td></tr><tr><td data-num="2"></td><td><pre><span class="token macro property"><span class="token directive-hash">#</span><span class="token directive keyword">include</span> <span class="token string">&lt;vector></span></span></pre></td></tr><tr class="marked"><td data-num="3"></td><td><pre><span class="token macro property"><span class="token directive-hash">#</span><span class="token directive keyword">include</span> <span class="token string">&lt;sstream></span></span></pre></td></tr><tr><td data-num="4"></td><td><pre><span class="token macro property"><span class="token directive-hash">#</span><span class="token directive keyword">include</span> <span class="token string">&lt;string></span></span></pre></td></tr><tr><td data-num="5"></td><td><pre></pre></td></tr><tr><td data-num="6"></td><td><pre><span class="token keyword">using</span> <span class="token keyword">namespace</span> std<span class="token punctuation">;</span></pre></td></tr><tr><td data-num="7"></td><td><pre></pre></td></tr><tr class="marked"><td data-num="8"></td><td><pre><span class="token keyword">const</span> vector<span class="token operator">&lt;</span>string<span class="token operator">></span> <span class="token function">split</span><span class="token punctuation">(</span><span class="token keyword">const</span> string<span class="token operator">&amp;</span> str<span class="token punctuation">,</span> <span class="token keyword">const</span> <span class="token keyword">char</span><span class="token operator">&amp;</span> delimiter<span class="token punctuation">)</span> <span class="token punctuation">&#123;</span></pre></td></tr><tr><td data-num="9"></td><td><pre>    vector<span class="token operator">&lt;</span>string<span class="token operator">></span> res<span class="token punctuation">;</span></pre></td></tr><tr><td data-num="10"></td><td><pre>    stringstream <span class="token function">ss</span><span class="token punctuation">(</span>str<span class="token punctuation">)</span><span class="token punctuation">;</span></pre></td></tr><tr><td data-num="11"></td><td><pre>    string tok<span class="token punctuation">;</span></pre></td></tr><tr><td data-num="12"></td><td><pre></pre></td></tr><tr><td data-num="13"></td><td><pre>    <span class="token keyword">while</span> <span class="token punctuation">(</span><span class="token function">getline</span><span class="token punctuation">(</span>ss<span class="token punctuation">,</span> tok<span class="token punctuation">,</span> delimiter<span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span></pre></td></tr><tr><td data-num="14"></td><td><pre>        res<span class="token punctuation">.</span><span class="token function">push_back</span><span class="token punctuation">(</span>tok<span class="token punctuation">)</span><span class="token punctuation">;</span></pre></td></tr><tr><td data-num="15"></td><td><pre>    <span class="token punctuation">&#125;</span></pre></td></tr><tr><td data-num="16"></td><td><pre>    <span class="token keyword">return</span> res<span class="token punctuation">;</span></pre></td></tr><tr><td data-num="17"></td><td><pre><span class="token punctuation">&#125;</span></pre></td></tr><tr><td data-num="18"></td><td><pre></pre></td></tr><tr><td data-num="19"></td><td><pre><span class="token keyword">int</span> <span class="token function">main</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span></pre></td></tr><tr><td data-num="20"></td><td><pre>    string str <span class="token operator">=</span> <span class="token string">"This is a C++ string"</span><span class="token punctuation">;</span></pre></td></tr><tr><td data-num="21"></td><td><pre>    vector<span class="token operator">&lt;</span>string<span class="token operator">></span> v <span class="token operator">=</span> <span class="token function">split</span><span class="token punctuation">(</span>str<span class="token punctuation">,</span> <span class="token char">' '</span><span class="token punctuation">)</span><span class="token punctuation">;</span></pre></td></tr><tr><td data-num="22"></td><td><pre></pre></td></tr><tr><td data-num="23"></td><td><pre>    <span class="token keyword">for</span> <span class="token punctuation">(</span><span class="token keyword">auto</span><span class="token operator">&amp;</span> s<span class="token operator">:</span> v<span class="token punctuation">)</span> cout <span class="token operator">&lt;&lt;</span> s <span class="token operator">&lt;&lt;</span> endl<span class="token punctuation">;</span></pre></td></tr><tr><td data-num="24"></td><td><pre><span class="token punctuation">&#125;</span></pre></td></tr></table></figure><p>結果如下，</p><blockquote><p>This<br>is<br>a<br>C++<br>string</p></blockquote><h2 id="參考資料"><a class="anchor" href="#參考資料">#</a> 參考資料</h2><ul><li><span class="exturl" data-url="aHR0cHM6Ly9zaGVuZ3l1NzY5Ny5naXRodWIuaW8vY3BwLXN0cmluZy1zcGxpdC8=">https://shengyu7697.github.io/cpp-string-split/</span></li></ul>]]></content>
      
      
      <categories>
          
          <category> Programming </category>
          
          <category> C/C++ </category>
          
      </categories>
      
      
        <tags>
            
            <tag> C/C++ </tag>
            
            <tag> String </tag>
            
            <tag> split </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>uva 496 - Simply Subsets</title>
      <link href="/2023/04/19/Coding/uva/Star1/uva%20496%20/"/>
      <url>/2023/04/19/Coding/uva/Star1/uva%20496%20/</url>
      
        <content type="html"><![CDATA[<p>⭐️</p><p><strong>Time limit: 3.000 seconds</strong></p><h2 id="題目連結"><a class="anchor" href="#題目連結">#</a> 題目連結</h2><ul><li><span class="exturl" data-url="aHR0cHM6Ly96ZXJvanVkZ2UudHcvU2hvd1Byb2JsZW0/cHJvYmxlbWlkPWQ2OTE=">ZeroJudge</span></li><li><span class="exturl" data-url="aHR0cHM6Ly9vbmxpbmVqdWRnZS5vcmcvZXh0ZXJuYWwvNC9wNDk2LnBkZg==">題目連結</span></li><li><span class="exturl" data-url="aHR0cHM6Ly9vbmxpbmVqdWRnZS5vcmcvaW5kZXgucGhwP29wdGlvbj1jb21fb25saW5lanVkZ2UmYW1wO0l0ZW1pZD04JmFtcDtjYXRlZ29yeT02JmFtcDtwYWdlPXNob3dfcHJvYmxlbSZhbXA7cHJvYmxlbT00Mzc=">Online Judge</span></li><li><span class="exturl" data-url="aHR0cHM6Ly93d3cudWRlYnVnLmNvbS9VVmEvNDk2">uDebug</span></li></ul><h2 id="題目敘述"><a class="anchor" href="#題目敘述">#</a> 題目敘述</h2><div class="note default no-icon"><p>在數學的定義中，一個集合裡有 0 或多個元素。  在本問題中要請你判斷 2 個集合的關係。</p></div><h2 id="input"><a class="anchor" href="#input">#</a> Input</h2><div class="note success no-icon"><p>輸入包含很多組測試資料，每組測試資料有 2 列。 第一列代表第一個集合 A，第二列代表第二個集合 B。 每個集合至多 100 個數字，數字間以一個空格分開。</p></div><h2 id="output"><a class="anchor" href="#output">#</a> Output</h2><div class="note info no-icon"><p>對每筆輸入資料你應該要輸出以下其中一種情況：</p><ul><li>A is a proper subset of B （A 是 B 的子集合）</li><li>B is a proper subset of A （B 是 A 的子集合）</li><li>A equals B （A、B 是相同集合）</li><li>A and B are disjoint （A、B 完全沒有交集）</li><li>I’m confused! （A、B 有部分交集）</li></ul></div><h2 id="sample-input"><a class="anchor" href="#sample-input">#</a> Sample Input</h2><blockquote><p>55 27<br>55 27<br>9 24 1995<br>9 24<br>1 2 3<br>1 2 3 4<br>1 2 3<br>4 5 6<br>1 2<br>2 3</p></blockquote><h2 id="sample-output"><a class="anchor" href="#sample-output">#</a> Sample Output</h2><blockquote><p>A equals B<br>B is a proper subset of A<br>A is a proper subset of B<br>A and B are disjoint<br>I’m confused!</p></blockquote><h2 id="code"><a class="anchor" href="#code">#</a> Code</h2><figure class="highlight cpp"><figcaption data-lang="C++"></figcaption><table><tr><td data-num="1"></td><td><pre><span class="token macro property"><span class="token directive-hash">#</span><span class="token directive keyword">include</span> <span class="token string">&lt;bits/stdc++.h></span></span></pre></td></tr><tr><td data-num="2"></td><td><pre><span class="token keyword">using</span> <span class="token keyword">namespace</span> std<span class="token punctuation">;</span></pre></td></tr><tr><td data-num="3"></td><td><pre></pre></td></tr><tr><td data-num="4"></td><td><pre><span class="token keyword">int</span> <span class="token function">main</span> <span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span></pre></td></tr><tr><td data-num="5"></td><td><pre>    string a<span class="token punctuation">,</span> b<span class="token punctuation">,</span> tok<span class="token punctuation">;</span></pre></td></tr><tr><td data-num="6"></td><td><pre>    <span class="token keyword">while</span> <span class="token punctuation">(</span><span class="token function">getline</span><span class="token punctuation">(</span>cin<span class="token punctuation">,</span> a<span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span></pre></td></tr><tr><td data-num="7"></td><td><pre>        <span class="token function">getline</span><span class="token punctuation">(</span>cin<span class="token punctuation">,</span> b<span class="token punctuation">)</span><span class="token punctuation">;</span></pre></td></tr><tr><td data-num="8"></td><td><pre>        stringstream <span class="token function">sa</span><span class="token punctuation">(</span>a<span class="token punctuation">)</span><span class="token punctuation">;</span></pre></td></tr><tr><td data-num="9"></td><td><pre>        set<span class="token operator">&lt;</span>string<span class="token operator">></span> setA<span class="token punctuation">,</span> setB<span class="token punctuation">,</span> sum<span class="token punctuation">;</span></pre></td></tr><tr><td data-num="10"></td><td><pre>        <span class="token keyword">while</span> <span class="token punctuation">(</span><span class="token function">getline</span><span class="token punctuation">(</span>sa<span class="token punctuation">,</span> tok<span class="token punctuation">,</span> <span class="token char">' '</span><span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span></pre></td></tr><tr><td data-num="11"></td><td><pre>            setA<span class="token punctuation">.</span><span class="token function">insert</span><span class="token punctuation">(</span>tok<span class="token punctuation">)</span><span class="token punctuation">;</span></pre></td></tr><tr><td data-num="12"></td><td><pre>            sum<span class="token punctuation">.</span><span class="token function">insert</span><span class="token punctuation">(</span>tok<span class="token punctuation">)</span><span class="token punctuation">;</span></pre></td></tr><tr><td data-num="13"></td><td><pre>        <span class="token punctuation">&#125;</span></pre></td></tr><tr><td data-num="14"></td><td><pre>        stringstream <span class="token function">sb</span><span class="token punctuation">(</span>b<span class="token punctuation">)</span><span class="token punctuation">;</span></pre></td></tr><tr><td data-num="15"></td><td><pre>        <span class="token keyword">while</span> <span class="token punctuation">(</span><span class="token function">getline</span><span class="token punctuation">(</span>sb<span class="token punctuation">,</span> tok<span class="token punctuation">,</span> <span class="token char">' '</span><span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span></pre></td></tr><tr><td data-num="16"></td><td><pre>            setB<span class="token punctuation">.</span><span class="token function">insert</span><span class="token punctuation">(</span>tok<span class="token punctuation">)</span><span class="token punctuation">;</span></pre></td></tr><tr><td data-num="17"></td><td><pre>            sum<span class="token punctuation">.</span><span class="token function">insert</span><span class="token punctuation">(</span>tok<span class="token punctuation">)</span><span class="token punctuation">;</span></pre></td></tr><tr><td data-num="18"></td><td><pre>        <span class="token punctuation">&#125;</span></pre></td></tr><tr><td data-num="19"></td><td><pre></pre></td></tr><tr><td data-num="20"></td><td><pre>        <span class="token keyword">int</span> numa <span class="token operator">=</span> setA<span class="token punctuation">.</span><span class="token function">size</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">,</span> numb <span class="token operator">=</span> setB<span class="token punctuation">.</span><span class="token function">size</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span></pre></td></tr><tr><td data-num="21"></td><td><pre>        <span class="token keyword">if</span> <span class="token punctuation">(</span>numa <span class="token operator">==</span> sum<span class="token punctuation">.</span><span class="token function">size</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">&amp;&amp;</span> numb <span class="token operator">==</span> sum<span class="token punctuation">.</span><span class="token function">size</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span> cout <span class="token operator">&lt;&lt;</span> <span class="token string">"A equals B\n"</span><span class="token punctuation">;</span></pre></td></tr><tr><td data-num="22"></td><td><pre>        <span class="token keyword">else</span> <span class="token keyword">if</span> <span class="token punctuation">(</span>numa <span class="token operator">==</span> sum<span class="token punctuation">.</span><span class="token function">size</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span> cout <span class="token operator">&lt;&lt;</span> <span class="token string">"B is a proper subset of A\n"</span><span class="token punctuation">;</span></pre></td></tr><tr><td data-num="23"></td><td><pre>        <span class="token keyword">else</span> <span class="token keyword">if</span> <span class="token punctuation">(</span>numb <span class="token operator">==</span> sum<span class="token punctuation">.</span><span class="token function">size</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span> cout <span class="token operator">&lt;&lt;</span> <span class="token string">"A is a proper subset of B\n"</span><span class="token punctuation">;</span></pre></td></tr><tr><td data-num="24"></td><td><pre>        <span class="token keyword">else</span> <span class="token keyword">if</span> <span class="token punctuation">(</span>sum<span class="token punctuation">.</span><span class="token function">size</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">==</span> numa <span class="token operator">+</span> numb<span class="token punctuation">)</span> cout <span class="token operator">&lt;&lt;</span> <span class="token string">"A and B are disjoint\n"</span><span class="token punctuation">;</span> </pre></td></tr><tr><td data-num="25"></td><td><pre>        <span class="token keyword">else</span> cout <span class="token operator">&lt;&lt;</span> <span class="token string">"I'm confused!\n"</span><span class="token punctuation">;</span></pre></td></tr><tr><td data-num="26"></td><td><pre>    <span class="token punctuation">&#125;</span></pre></td></tr><tr><td data-num="27"></td><td><pre><span class="token punctuation">&#125;</span></pre></td></tr></table></figure>]]></content>
      
      
      <categories>
          
          <category> Coding </category>
          
          <category> UVA </category>
          
          <category> Star1 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> Star1 </tag>
            
            <tag> CPE </tag>
            
            <tag> UVA </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>龜兔賽跑算法</title>
      <link href="/2023/04/19/Algorithm/%E9%BE%9C%E5%85%94%E8%B3%BD%E8%B7%91/"/>
      <url>/2023/04/19/Algorithm/%E9%BE%9C%E5%85%94%E8%B3%BD%E8%B7%91/</url>
      
        <content type="html"><![CDATA[<div class="note info no-icon"><p>假設同時一隻烏龜和一隻兔子從起點開始賽跑，<strong>烏龜一次跑一格，兔子一次跑兩格</strong>，一直跑下去<strong>如果他們能在某個地點會合，代表他們在環形跑道中</strong>。<br><img data-src="https://i.imgur.com/1RI63gz.png" alt=""></p><p>反之如果是直線跑道烏龜永遠追不上兔子。</p><p><img data-src="https://i.imgur.com/V4BoPwR.png" alt=""></p></div><h2 id="floyd-cycle-detection-algorithm-找出環的起點"><a class="anchor" href="#floyd-cycle-detection-algorithm-找出環的起點">#</a> Floyd Cycle Detection Algorithm 找出環的起點</h2><div class="note info no-icon"><p>從起點開始賽跑，兔子一次走兩格、烏龜一次走一格直到他們相遇停止，<strong>此時兔子所走的距離是烏龜的兩倍</strong>。</p></div><p><img data-src="https://i.imgur.com/US27XN9.png" alt=""></p><div class="note info no-icon"><p>假設烏龜與兔子在<span class="katex"><span class="katex-mathml"><math xmlns="http://www.w3.org/1998/Math/MathML"><semantics><mrow><mi>Z</mi></mrow><annotation encoding="application/x-tex">Z</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:0.68333em;vertical-align:0em;"></span><span class="mord mathnormal" style="margin-right:0.07153em;">Z</span></span></span></span> 點第一次相遇，<strong>環周長為<span class="katex"><span class="katex-mathml"><math xmlns="http://www.w3.org/1998/Math/MathML"><semantics><mrow><mi>S</mi></mrow><annotation encoding="application/x-tex">S</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:0.68333em;vertical-align:0em;"></span><span class="mord mathnormal" style="margin-right:0.05764em;">S</span></span></span></span></strong></p><p>烏龜走了<span class="katex"><span class="katex-mathml"><math xmlns="http://www.w3.org/1998/Math/MathML"><semantics><mrow><mi>a</mi><mo>+</mo><mi>b</mi><mo>+</mo><mi>m</mi><mi>S</mi></mrow><annotation encoding="application/x-tex">a + b + mS</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:0.66666em;vertical-align:-0.08333em;"></span><span class="mord mathnormal">a</span><span class="mspace" style="margin-right:0.2222222222222222em;"></span><span class="mbin">+</span><span class="mspace" style="margin-right:0.2222222222222222em;"></span></span><span class="base"><span class="strut" style="height:0.77777em;vertical-align:-0.08333em;"></span><span class="mord mathnormal">b</span><span class="mspace" style="margin-right:0.2222222222222222em;"></span><span class="mbin">+</span><span class="mspace" style="margin-right:0.2222222222222222em;"></span></span><span class="base"><span class="strut" style="height:0.68333em;vertical-align:0em;"></span><span class="mord mathnormal">m</span><span class="mord mathnormal" style="margin-right:0.05764em;">S</span></span></span></span> 的距離，兔子也同樣走了<span class="katex"><span class="katex-mathml"><math xmlns="http://www.w3.org/1998/Math/MathML"><semantics><mrow><mi>m</mi><mi>S</mi></mrow><annotation encoding="application/x-tex">mS</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:0.68333em;vertical-align:0em;"></span><span class="mord mathnormal">m</span><span class="mord mathnormal" style="margin-right:0.05764em;">S</span></span></span></span> 圈但比烏龜多走了<span class="katex"><span class="katex-mathml"><math xmlns="http://www.w3.org/1998/Math/MathML"><semantics><mrow><mi>n</mi><mi>S</mi></mrow><annotation encoding="application/x-tex">nS</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:0.68333em;vertical-align:0em;"></span><span class="mord mathnormal">n</span><span class="mord mathnormal" style="margin-right:0.05764em;">S</span></span></span></span> 圈，所以兔子總共走了<span class="katex"><span class="katex-mathml"><math xmlns="http://www.w3.org/1998/Math/MathML"><semantics><mrow><mi>a</mi><mo>+</mo><mi>b</mi><mo>+</mo><mo stretchy="false">(</mo><mi>m</mi><mo>+</mo><mi>n</mi><mo stretchy="false">)</mo><mi>S</mi></mrow><annotation encoding="application/x-tex">a + b + (m + n)S</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:0.66666em;vertical-align:-0.08333em;"></span><span class="mord mathnormal">a</span><span class="mspace" style="margin-right:0.2222222222222222em;"></span><span class="mbin">+</span><span class="mspace" style="margin-right:0.2222222222222222em;"></span></span><span class="base"><span class="strut" style="height:0.77777em;vertical-align:-0.08333em;"></span><span class="mord mathnormal">b</span><span class="mspace" style="margin-right:0.2222222222222222em;"></span><span class="mbin">+</span><span class="mspace" style="margin-right:0.2222222222222222em;"></span></span><span class="base"><span class="strut" style="height:1em;vertical-align:-0.25em;"></span><span class="mopen">(</span><span class="mord mathnormal">m</span><span class="mspace" style="margin-right:0.2222222222222222em;"></span><span class="mbin">+</span><span class="mspace" style="margin-right:0.2222222222222222em;"></span></span><span class="base"><span class="strut" style="height:1em;vertical-align:-0.25em;"></span><span class="mord mathnormal">n</span><span class="mclose">)</span><span class="mord mathnormal" style="margin-right:0.05764em;">S</span></span></span></span> 的距離，由於兩個都走了<span class="katex"><span class="katex-mathml"><math xmlns="http://www.w3.org/1998/Math/MathML"><semantics><mrow><mi>m</mi><mi>S</mi></mrow><annotation encoding="application/x-tex">mS</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:0.68333em;vertical-align:0em;"></span><span class="mord mathnormal">m</span><span class="mord mathnormal" style="margin-right:0.05764em;">S</span></span></span></span> 圈，所以我們可以把<span class="katex"><span class="katex-mathml"><math xmlns="http://www.w3.org/1998/Math/MathML"><semantics><mrow><mi>m</mi><mi>S</mi></mrow><annotation encoding="application/x-tex">mS</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:0.68333em;vertical-align:0em;"></span><span class="mord mathnormal">m</span><span class="mord mathnormal" style="margin-right:0.05764em;">S</span></span></span></span> 扣掉。</p></div><div class="note danger no-icon"><p><strong>兔子所走的距離是烏龜的兩倍</strong>所以</p><p><span class="katex-display"><span class="katex"><span class="katex-mathml"><math xmlns="http://www.w3.org/1998/Math/MathML" display="block"><semantics><mrow><mn>2</mn><mo stretchy="false">(</mo><mi>a</mi><mo>+</mo><mi>b</mi><mo stretchy="false">)</mo><mo>=</mo><mtext> </mtext><mi>a</mi><mo>+</mo><mi>b</mi><mo>+</mo><mi>n</mi><mi>S</mi><mspace linebreak="newline"></mspace><mi>a</mi><mo>+</mo><mi>b</mi><mo>=</mo><mtext> </mtext><mi>n</mi><mi>S</mi><mspace linebreak="newline"></mspace><mi>a</mi><mo>=</mo><mtext> </mtext><mi>n</mi><mi>S</mi><mo>−</mo><mi>b</mi></mrow><annotation encoding="application/x-tex">2(a + b) = \ a + b + nS \\a + b = \ nS \\a = \ nS - b</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:1em;vertical-align:-0.25em;"></span><span class="mord">2</span><span class="mopen">(</span><span class="mord mathnormal">a</span><span class="mspace" style="margin-right:0.2222222222222222em;"></span><span class="mbin">+</span><span class="mspace" style="margin-right:0.2222222222222222em;"></span></span><span class="base"><span class="strut" style="height:1em;vertical-align:-0.25em;"></span><span class="mord mathnormal">b</span><span class="mclose">)</span><span class="mspace" style="margin-right:0.2777777777777778em;"></span><span class="mrel">=</span><span class="mspace"> </span><span class="mspace" style="margin-right:0.2777777777777778em;"></span></span><span class="base"><span class="strut" style="height:0.66666em;vertical-align:-0.08333em;"></span><span class="mord mathnormal">a</span><span class="mspace" style="margin-right:0.2222222222222222em;"></span><span class="mbin">+</span><span class="mspace" style="margin-right:0.2222222222222222em;"></span></span><span class="base"><span class="strut" style="height:0.77777em;vertical-align:-0.08333em;"></span><span class="mord mathnormal">b</span><span class="mspace" style="margin-right:0.2222222222222222em;"></span><span class="mbin">+</span><span class="mspace" style="margin-right:0.2222222222222222em;"></span></span><span class="base"><span class="strut" style="height:0.68333em;vertical-align:0em;"></span><span class="mord mathnormal">n</span><span class="mord mathnormal" style="margin-right:0.05764em;">S</span></span><span class="mspace newline"></span><span class="base"><span class="strut" style="height:0.66666em;vertical-align:-0.08333em;"></span><span class="mord mathnormal">a</span><span class="mspace" style="margin-right:0.2222222222222222em;"></span><span class="mbin">+</span><span class="mspace" style="margin-right:0.2222222222222222em;"></span></span><span class="base"><span class="strut" style="height:0.69444em;vertical-align:0em;"></span><span class="mord mathnormal">b</span><span class="mspace" style="margin-right:0.2777777777777778em;"></span><span class="mrel">=</span><span class="mspace"> </span><span class="mspace" style="margin-right:0.2777777777777778em;"></span></span><span class="base"><span class="strut" style="height:0.68333em;vertical-align:0em;"></span><span class="mord mathnormal">n</span><span class="mord mathnormal" style="margin-right:0.05764em;">S</span></span><span class="mspace newline"></span><span class="base"><span class="strut" style="height:0.43056em;vertical-align:0em;"></span><span class="mord mathnormal">a</span><span class="mspace" style="margin-right:0.2777777777777778em;"></span><span class="mrel">=</span><span class="mspace"> </span><span class="mspace" style="margin-right:0.2777777777777778em;"></span></span><span class="base"><span class="strut" style="height:0.76666em;vertical-align:-0.08333em;"></span><span class="mord mathnormal">n</span><span class="mord mathnormal" style="margin-right:0.05764em;">S</span><span class="mspace" style="margin-right:0.2222222222222222em;"></span><span class="mbin">−</span><span class="mspace" style="margin-right:0.2222222222222222em;"></span></span><span class="base"><span class="strut" style="height:0.69444em;vertical-align:0em;"></span><span class="mord mathnormal">b</span></span></span></span></span></p><p><span class="katex"><span class="katex-mathml"><math xmlns="http://www.w3.org/1998/Math/MathML"><semantics><mrow><mi>n</mi></mrow><annotation encoding="application/x-tex">n</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:0.43056em;vertical-align:0em;"></span><span class="mord mathnormal">n</span></span></span></span> 代表圈數，不論跑幾圈，每圈的起始點都會在同一個地方<br>所以我們可以先假設<span class="katex"><span class="katex-mathml"><math xmlns="http://www.w3.org/1998/Math/MathML"><semantics><mrow><mi>n</mi><mo>=</mo><mn>1</mn></mrow><annotation encoding="application/x-tex">n = 1</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:0.43056em;vertical-align:0em;"></span><span class="mord mathnormal">n</span><span class="mspace" style="margin-right:0.2777777777777778em;"></span><span class="mrel">=</span><span class="mspace" style="margin-right:0.2777777777777778em;"></span></span><span class="base"><span class="strut" style="height:0.64444em;vertical-align:0em;"></span><span class="mord">1</span></span></span></span></p><p>則<span class="katex"><span class="katex-mathml"><math xmlns="http://www.w3.org/1998/Math/MathML"><semantics><mrow><mi>a</mi><mo>=</mo><mi>S</mi><mo>−</mo><mi>b</mi><mo>=</mo><mi>c</mi></mrow><annotation encoding="application/x-tex">a = S - b = c</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:0.43056em;vertical-align:0em;"></span><span class="mord mathnormal">a</span><span class="mspace" style="margin-right:0.2777777777777778em;"></span><span class="mrel">=</span><span class="mspace" style="margin-right:0.2777777777777778em;"></span></span><span class="base"><span class="strut" style="height:0.76666em;vertical-align:-0.08333em;"></span><span class="mord mathnormal" style="margin-right:0.05764em;">S</span><span class="mspace" style="margin-right:0.2222222222222222em;"></span><span class="mbin">−</span><span class="mspace" style="margin-right:0.2222222222222222em;"></span></span><span class="base"><span class="strut" style="height:0.69444em;vertical-align:0em;"></span><span class="mord mathnormal">b</span><span class="mspace" style="margin-right:0.2777777777777778em;"></span><span class="mrel">=</span><span class="mspace" style="margin-right:0.2777777777777778em;"></span></span><span class="base"><span class="strut" style="height:0.43056em;vertical-align:0em;"></span><span class="mord mathnormal">c</span></span></span></span></p></div><p>此時讓烏龜返回起始點，兩者以相同速度繼續前進，他們就會在 Y 點再次會合，也就是重複的數字。</p>]]></content>
      
      
      <categories>
          
          <category> Algorithm </category>
          
      </categories>
      
      
        <tags>
            
            <tag> Algorithm </tag>
            
            <tag> Data Structure </tag>
            
            <tag> Floyd Cycle Detection Algorithm </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>CSS - Transition</title>
      <link href="/2023/04/19/Web/CSS/CSS%20-%20Transition/"/>
      <url>/2023/04/19/Web/CSS/CSS%20-%20Transition/</url>
      
        <content type="html"><![CDATA[<div class="note info"><ul><li><code>transition</code>  讓我們可以在給定的時間內平滑的改變屬性的值。</li><li>要呈現 <code>transition</code>  效果，必須達成兩件事:<ol><li>要添加效果的 CSS 屬性</li><li>效果的持續時間</li></ol></li></ul></div><div class="note danger"><p><strong>NOTE:</strong> 如果沒有給定持續時間， <code>transition</code>  將不會有效果，因為 default 值為 0。</p></div><figure class="highlight css"><figcaption data-lang="CSS"><span>Example 1</span><span class="exturl" data-url="aHR0cHM6Ly93d3cudzNzY2hvb2xzLmNvbS9jc3MvdHJ5aXQuYXNwP2ZpbGVuYW1lPXRyeWNzczNfdHJhbnNpdGlvbjE=">link</span></figcaption><table><tr><td data-num="1"></td><td><pre><span class="token selector">div</span> <span class="token punctuation">&#123;</span></pre></td></tr><tr><td data-num="2"></td><td><pre>    <span class="token property">width</span><span class="token punctuation">:</span> 100px<span class="token punctuation">;</span></pre></td></tr><tr><td data-num="3"></td><td><pre>    <span class="token property">height</span><span class="token punctuation">:</span> 100px<span class="token punctuation">;</span></pre></td></tr><tr><td data-num="4"></td><td><pre>    <span class="token property">background-color</span><span class="token punctuation">:</span> red<span class="token punctuation">;</span></pre></td></tr><tr><td data-num="5"></td><td><pre>    <span class="token property">transition</span><span class="token punctuation">:</span> width 2s<span class="token punctuation">;</span></pre></td></tr><tr><td data-num="6"></td><td><pre><span class="token punctuation">&#125;</span></pre></td></tr><tr><td data-num="7"></td><td><pre></pre></td></tr><tr><td data-num="8"></td><td><pre><span class="token selector">div:hover</span> <span class="token punctuation">&#123;</span></pre></td></tr><tr><td data-num="9"></td><td><pre>   <span class="token property">width</span><span class="token punctuation">:</span> 300px<span class="token punctuation">;</span> </pre></td></tr><tr><td data-num="10"></td><td><pre><span class="token punctuation">&#125;</span></pre></td></tr></table></figure><figure class="highlight css"><figcaption data-lang="CSS"><span>Example 2</span><span class="exturl" data-url="aHR0cHM6Ly93d3cudzNzY2hvb2xzLmNvbS9jc3MvdHJ5aXQuYXNwP2ZpbGVuYW1lPXRyeWNzczNfdHJhbnNpdGlvbjI=">link</span></figcaption><table><tr><td data-num="1"></td><td><pre><span class="token selector">div</span> <span class="token punctuation">&#123;</span></pre></td></tr><tr><td data-num="2"></td><td><pre>    <span class="token property">width</span><span class="token punctuation">:</span> 100px<span class="token punctuation">;</span></pre></td></tr><tr><td data-num="3"></td><td><pre>    <span class="token property">height</span><span class="token punctuation">:</span> 100px<span class="token punctuation">;</span></pre></td></tr><tr><td data-num="4"></td><td><pre>    <span class="token property">background-color</span><span class="token punctuation">:</span> red<span class="token punctuation">;</span></pre></td></tr><tr><td data-num="5"></td><td><pre>    <span class="token property">transition</span><span class="token punctuation">:</span> width 2s<span class="token punctuation">,</span> height 4s<span class="token punctuation">;</span></pre></td></tr><tr><td data-num="6"></td><td><pre><span class="token punctuation">&#125;</span></pre></td></tr><tr><td data-num="7"></td><td><pre></pre></td></tr><tr><td data-num="8"></td><td><pre><span class="token selector">div:hover</span> <span class="token punctuation">&#123;</span></pre></td></tr><tr><td data-num="9"></td><td><pre>    <span class="token property">width</span><span class="token punctuation">:</span> 300px<span class="token punctuation">;</span></pre></td></tr><tr><td data-num="10"></td><td><pre>    <span class="token property">height</span><span class="token punctuation">:</span> 300px<span class="token punctuation">;</span></pre></td></tr><tr><td data-num="11"></td><td><pre><span class="token punctuation">&#125;</span></pre></td></tr></table></figure><figure class="highlight css"><figcaption data-lang="CSS"><span>Transition + Transformation</span><span class="exturl" data-url="aHR0cHM6Ly93d3cudzNzY2hvb2xzLmNvbS9jc3MvdHJ5aXQuYXNwP2ZpbGVuYW1lPXRyeWNzczNfdHJhbnNpdGlvbl90cmFuc2Zvcm0=">link</span></figcaption><table><tr><td data-num="1"></td><td><pre><span class="token selector">div</span> <span class="token punctuation">&#123;</span></pre></td></tr><tr><td data-num="2"></td><td><pre>    <span class="token property">width</span><span class="token punctuation">:</span> 100px<span class="token punctuation">;</span></pre></td></tr><tr><td data-num="3"></td><td><pre>    <span class="token property">height</span><span class="token punctuation">:</span> 100px<span class="token punctuation">;</span></pre></td></tr><tr><td data-num="4"></td><td><pre>    <span class="token property">background-color</span><span class="token punctuation">:</span> red<span class="token punctuation">;</span></pre></td></tr><tr><td data-num="5"></td><td><pre>    <span class="token property">transition</span><span class="token punctuation">:</span> width 2s<span class="token punctuation">,</span> height 2s<span class="token punctuation">,</span> transform 2s</pre></td></tr><tr><td data-num="6"></td><td><pre><span class="token punctuation">&#125;</span></pre></td></tr><tr><td data-num="7"></td><td><pre></pre></td></tr><tr><td data-num="8"></td><td><pre><span class="token selector">div:hover</span> <span class="token punctuation">&#123;</span></pre></td></tr><tr><td data-num="9"></td><td><pre>    <span class="token property">width</span><span class="token punctuation">:</span> 300px<span class="token punctuation">;</span></pre></td></tr><tr><td data-num="10"></td><td><pre>    <span class="token property">height</span><span class="token punctuation">:</span> 300px<span class="token punctuation">;</span></pre></td></tr><tr><td data-num="11"></td><td><pre>    <span class="token property">transform</span><span class="token punctuation">:</span> <span class="token function">rotate</span><span class="token punctuation">(</span>180deg<span class="token punctuation">)</span><span class="token punctuation">;</span></pre></td></tr><tr><td data-num="12"></td><td><pre><span class="token punctuation">&#125;</span></pre></td></tr></table></figure><h2 id="speed-curve-of-transition"><a class="anchor" href="#speed-curve-of-transition">#</a> Speed curve of Transition</h2><p><code>transition-timing-function</code>  指定了 <code>transition</code>  效果的速度曲線。</p><div class="note danger no-icon"><p><strong>Value</strong></p><ul><li><code>ease</code>  - default(slow start, then fast, then end slowly).</li><li><code>linear</code>  - same speed from start to end.</li><li><code>ease-in</code>  - slow start.</li><li><code>ease-out</code>  - slow end.</li><li><code>ease-in-out</code>  - slow start and end.</li><li><code>cubic-bezier(n, n, n, n)</code>  lets you define your own.</li></ul></div><div class="links"><div class="item" title="Example"><span class="exturl image" data-url="aHR0cHM6Ly93d3cudzNzY2hvb2xzLmNvbS9jc3MvdHJ5aXQuYXNwP2ZpbGVuYW1lPXRyeWNzczNfdHJhbnNpdGlvbl9zcGVlZA==" data-background-image="/images/404.png"></span>          <div class="info">          <span class="exturl title" data-url="aHR0cHM6Ly93d3cudzNzY2hvb2xzLmNvbS9jc3MvdHJ5aXQuYXNwP2ZpbGVuYW1lPXRyeWNzczNfdHJhbnNpdGlvbl9zcGVlZA==">Example</span>          <p class="desc">https://www.w3schools.com/css/tryit.asp?filename=trycss3_transition_speed</p>          </div></div></div><h2 id="transition-delay"><a class="anchor" href="#transition-delay">#</a> Transition Delay</h2><p><code>transition-delay</code>  可以指定效果的延遲 (in seconds)。</p><figure class="highlight css"><figcaption data-lang="CSS"><span>Example</span><span class="exturl" data-url="aHR0cHM6Ly93d3cudzNzY2hvb2xzLmNvbS9jc3MvdHJ5aXQuYXNwP2ZpbGVuYW1lPXRyeWNzczNfdHJhbnNpdGlvbl9kZWxheQ==">link</span></figcaption><table><tr><td data-num="1"></td><td><pre><span class="token comment">/* 1 second delay before starting */</span></pre></td></tr><tr><td data-num="2"></td><td><pre><span class="token selector">div</span> <span class="token punctuation">&#123;</span></pre></td></tr><tr><td data-num="3"></td><td><pre>    <span class="token property">transition-delay</span><span class="token punctuation">:</span> 1s<span class="token punctuation">;</span></pre></td></tr><tr><td data-num="4"></td><td><pre><span class="token punctuation">&#125;</span></pre></td></tr></table></figure>]]></content>
      
      
      <categories>
          
          <category> Web </category>
          
          <category> CSS </category>
          
      </categories>
      
      
        <tags>
            
            <tag> Web </tag>
            
            <tag> CSS </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>CSS - Transform</title>
      <link href="/2023/04/19/Web/CSS/CSS%20-%20Transform/"/>
      <url>/2023/04/19/Web/CSS/CSS%20-%20Transform/</url>
      
        <content type="html"><![CDATA[<h2 id="transform-origin"><a class="anchor" href="#transform-origin">#</a> Transform-origin</h2><div class="note info"><ul><li>預設值為元素<strong>中心點 (50%, 50%)</strong></li><li>位移、旋轉、縮放、傾斜的<strong>參考點</strong></li><li>元素<strong>左上角</strong>座標為 <strong>(x, y) = (0, 0)</strong></li></ul></div><blockquote><p>元素預設座標系統預設位置為左上角 (0,0)，主要用來<strong>排版</strong><br> transform 的預設值為 (50%,50%)，主要用來做<strong>動畫效果</strong></p></blockquote><p><code>transform</code>  讓我們可以<strong>移動、旋轉、縮放或傾斜</strong>元素。</p><h2 id="2d-transform-methods"><a class="anchor" href="#2d-transform-methods">#</a> 2D Transform Methods</h2><div class="note danger no-icon"><ul><li><code>translate()</code></li><li><code>rotate()</code></li><li><code>scaleX()</code></li><li><code>scaleY()</code></li><li><code>scale()</code></li><li><code>skewX()</code></li><li><code>skewY()</code></li><li><code>skew()</code></li><li><code>matrix()</code></li></ul></div><h3 id="translate"><a class="anchor" href="#translate">#</a> Translate()</h3><p><code>translate()</code>  可以根據給定的參數 (<em>X-axis</em>, <em>Y-axis</em>)<strong> 位移</strong>元素。</p><figure class="highlight css"><figcaption data-lang="CSS"><span>Example</span><span class="exturl" data-url="aHR0cHM6Ly93d3cudzNzY2hvb2xzLmNvbS9jc3MvdHJ5aXQuYXNwP2ZpbGVuYW1lPXRyeWNzczNfdHJhbnNmb3JtX3RyYW5zbGF0ZQ==">link</span></figcaption><table><tr><td data-num="1"></td><td><pre><span class="token comment">/* Moves the &lt;div> element 50 pixels to the right, and 100 pixels down from its current position */</span></pre></td></tr><tr><td data-num="2"></td><td><pre><span class="token selector">div</span> <span class="token punctuation">&#123;</span></pre></td></tr><tr><td data-num="3"></td><td><pre>    <span class="token property">transform</span><span class="token punctuation">:</span> <span class="token function">translate</span><span class="token punctuation">(</span>50px<span class="token punctuation">,</span> 100px<span class="token punctuation">)</span><span class="token punctuation">;</span></pre></td></tr><tr><td data-num="4"></td><td><pre><span class="token punctuation">&#125;</span></pre></td></tr></table></figure><h3 id="rotate"><a class="anchor" href="#rotate">#</a> Rotate()</h3><p><code>rotate()</code>  可以根據給定的角度<strong>順時針</strong>或<strong>逆時針旋轉</strong>元素。</p><figure class="highlight css"><figcaption data-lang="CSS"><span>Example 1</span><span class="exturl" data-url="aHR0cHM6Ly93d3cudzNzY2hvb2xzLmNvbS9jc3MvdHJ5aXQuYXNwP2ZpbGVuYW1lPXRyeWNzczNfdHJhbnNmb3JtX3JvdGF0ZQ==">link</span></figcaption><table><tr><td data-num="1"></td><td><pre><span class="token comment">/* Rotates the &lt;div> element clockwise with 20 degrees */</span></pre></td></tr><tr><td data-num="2"></td><td><pre><span class="token selector">div</span> <span class="token punctuation">&#123;</span></pre></td></tr><tr><td data-num="3"></td><td><pre>    <span class="token property">transform</span><span class="token punctuation">:</span> <span class="token function">rotate</span><span class="token punctuation">(</span>20deg<span class="token punctuation">)</span><span class="token punctuation">;</span></pre></td></tr><tr><td data-num="4"></td><td><pre><span class="token punctuation">&#125;</span></pre></td></tr></table></figure><figure class="highlight css"><figcaption data-lang="CSS"><span>Example 2</span><span class="exturl" data-url="aHR0cHM6Ly93d3cudzNzY2hvb2xzLmNvbS9jc3MvdHJ5aXQuYXNwP2ZpbGVuYW1lPXRyeWNzczNfdHJhbnNmb3JtX3JvdGF0ZTI=">link</span></figcaption><table><tr><td data-num="1"></td><td><pre><span class="token comment">/* Rotates the &lt;div> element counter-clockwise with 20 degrees */</span></pre></td></tr><tr><td data-num="2"></td><td><pre><span class="token selector">div</span> <span class="token punctuation">&#123;</span></pre></td></tr><tr><td data-num="3"></td><td><pre>    <span class="token property">transform</span><span class="token punctuation">:</span> <span class="token function">rotate</span><span class="token punctuation">(</span>-20deg<span class="token punctuation">)</span><span class="token punctuation">;</span></pre></td></tr><tr><td data-num="4"></td><td><pre><span class="token punctuation">&#125;</span></pre></td></tr></table></figure><h3 id="scale"><a class="anchor" href="#scale">#</a> Scale()</h3><ul><li><code>scale()</code>  可以根據給定的參數 (<em>width</em>, <em>height</em>)<strong> 縮放</strong>元素的大小。</li><li><code>scaleX()</code>  控制縮放的<strong>寬度 (<em>width</em>)</strong></li><li><code>scaleY()</code>  則控制縮放的<strong>高度 (<em>height</em>)</strong>。</li></ul><figure class="highlight css"><figcaption data-lang="CSS"><span>Example 1</span><span class="exturl" data-url="aHR0cHM6Ly93d3cudzNzY2hvb2xzLmNvbS9jc3MvdHJ5aXQuYXNwP2ZpbGVuYW1lPXRyeWNzczNfdHJhbnNmb3JtX3NjYWxl">link</span></figcaption><table><tr><td data-num="1"></td><td><pre><span class="token comment">/* Increases the &lt;div> element to be two times of its original width, and three times of its original height */</span></pre></td></tr><tr><td data-num="2"></td><td><pre><span class="token selector">div</span> <span class="token punctuation">&#123;</span></pre></td></tr><tr><td data-num="3"></td><td><pre>    <span class="token property">transform</span><span class="token punctuation">:</span> <span class="token function">scale</span><span class="token punctuation">(</span>2<span class="token punctuation">,</span> 3<span class="token punctuation">)</span><span class="token punctuation">;</span></pre></td></tr><tr><td data-num="4"></td><td><pre><span class="token punctuation">&#125;</span></pre></td></tr></table></figure><figure class="highlight css"><figcaption data-lang="CSS"><span>Example 2</span><span class="exturl" data-url="aHR0cHM6Ly93d3cudzNzY2hvb2xzLmNvbS9jc3MvdHJ5aXQuYXNwP2ZpbGVuYW1lPXRyeWNzczNfdHJhbnNmb3JtX3NjYWxlMg==">link</span></figcaption><table><tr><td data-num="1"></td><td><pre><span class="token comment">/* Decreases the &lt;div> element to be half of its original width and height */</span></pre></td></tr><tr><td data-num="2"></td><td><pre><span class="token selector">div</span> <span class="token punctuation">&#123;</span></pre></td></tr><tr><td data-num="3"></td><td><pre>    <span class="token property">transform</span><span class="token punctuation">:</span> <span class="token function">scale</span><span class="token punctuation">(</span>0.5<span class="token punctuation">,</span> 0.5<span class="token punctuation">)</span><span class="token punctuation">;</span></pre></td></tr><tr><td data-num="4"></td><td><pre><span class="token punctuation">&#125;</span></pre></td></tr></table></figure><figure class="highlight css"><figcaption data-lang="CSS"><span>Example 3</span><span class="exturl" data-url="aHR0cHM6Ly93d3cudzNzY2hvb2xzLmNvbS9jc3MvdHJ5aXQuYXNwP2ZpbGVuYW1lPXRyeWNzczNfdHJhbnNmb3JtX3NjYWxlWA==">link</span></figcaption><table><tr><td data-num="1"></td><td><pre><span class="token comment">/* Increases the &lt;div> element to be two times of its original width */</span></pre></td></tr><tr><td data-num="2"></td><td><pre><span class="token selector">div</span> <span class="token punctuation">&#123;</span></pre></td></tr><tr><td data-num="3"></td><td><pre>    <span class="token property">transform</span><span class="token punctuation">:</span> <span class="token function">scaleX</span><span class="token punctuation">(</span>2<span class="token punctuation">)</span><span class="token punctuation">;</span></pre></td></tr><tr><td data-num="4"></td><td><pre><span class="token punctuation">&#125;</span></pre></td></tr></table></figure><figure class="highlight css"><figcaption data-lang="CSS"><span>Example 4</span><span class="exturl" data-url="aHR0cHM6Ly93d3cudzNzY2hvb2xzLmNvbS9jc3MvdHJ5aXQuYXNwP2ZpbGVuYW1lPXRyeWNzczNfdHJhbnNmb3JtX3NjYWxlWTI=">link</span></figcaption><table><tr><td data-num="1"></td><td><pre><span class="token comment">/* Decreases the &lt;div> element to be half of its original height */</span></pre></td></tr><tr><td data-num="2"></td><td><pre><span class="token selector">div</span> <span class="token punctuation">&#123;</span></pre></td></tr><tr><td data-num="3"></td><td><pre>    <span class="token property">transform</span><span class="token punctuation">:</span> <span class="token function">scaleY</span><span class="token punctuation">(</span>0.5<span class="token punctuation">)</span><span class="token punctuation">;</span></pre></td></tr><tr><td data-num="4"></td><td><pre><span class="token punctuation">&#125;</span></pre></td></tr></table></figure><h3 id="skew"><a class="anchor" href="#skew">#</a> Skew()</h3><ul><li><code>skew()</code>  可以根據給定的角度 (<em>X-axis</em>, <em>Y-axis</em>)<strong> 傾斜</strong>元素</li><li><code>skewX()</code>  將元素沿著<em> X-axis</em> 傾斜。</li><li><code>skewY()</code>  將元素沿著<em> Y-axis</em> 傾斜。</li></ul><figure class="highlight css"><figcaption data-lang="CSS"><span>Example 1</span><span class="exturl" data-url="aHR0cHM6Ly93d3cudzNzY2hvb2xzLmNvbS9jc3MvdHJ5aXQuYXNwP2ZpbGVuYW1lPXRyeWNzczNfdHJhbnNmb3JtX3NrZXc=">link</span></figcaption><table><tr><td data-num="1"></td><td><pre><span class="token comment">/* Skews the &lt;div> element 20 degrees along the X-axis, and 10 degrees along the Y-axis */</span></pre></td></tr><tr><td data-num="2"></td><td><pre><span class="token selector">div</span> <span class="token punctuation">&#123;</span></pre></td></tr><tr><td data-num="3"></td><td><pre>    <span class="token property">transform</span><span class="token punctuation">:</span> <span class="token function">skew</span><span class="token punctuation">(</span>20deg<span class="token punctuation">,</span> 10deg<span class="token punctuation">)</span><span class="token punctuation">;</span></pre></td></tr><tr><td data-num="4"></td><td><pre><span class="token punctuation">&#125;</span></pre></td></tr></table></figure><figure class="highlight css"><figcaption data-lang="CSS"><span>Example 2</span><span class="exturl" data-url="aHR0cHM6Ly93d3cudzNzY2hvb2xzLmNvbS9jc3MvdHJ5aXQuYXNwP2ZpbGVuYW1lPXRyeWNzczNfdHJhbnNmb3JtX3NrZXd4">link</span></figcaption><table><tr><td data-num="1"></td><td><pre><span class="token comment">/* Skews the &lt;div> element 20 degrees along the X-axis */</span></pre></td></tr><tr><td data-num="2"></td><td><pre><span class="token selector">div</span> <span class="token punctuation">&#123;</span></pre></td></tr><tr><td data-num="3"></td><td><pre>    <span class="token property">transform</span><span class="token punctuation">:</span> <span class="token function">skewX</span><span class="token punctuation">(</span>20deg<span class="token punctuation">)</span><span class="token punctuation">;</span></pre></td></tr><tr><td data-num="4"></td><td><pre><span class="token punctuation">&#125;</span></pre></td></tr></table></figure><figure class="highlight css"><figcaption data-lang="CSS"><span>Example 3</span><span class="exturl" data-url="aHR0cHM6Ly93d3cudzNzY2hvb2xzLmNvbS9jc3MvdHJ5aXQuYXNwP2ZpbGVuYW1lPXRyeWNzczNfdHJhbnNmb3JtX3NrZXd5">link</span></figcaption><table><tr><td data-num="1"></td><td><pre><span class="token comment">/* Skews the &lt;div> element 20 degrees along the Y-axis */</span></pre></td></tr><tr><td data-num="2"></td><td><pre><span class="token selector">div</span> <span class="token punctuation">&#123;</span></pre></td></tr><tr><td data-num="3"></td><td><pre>    <span class="token property">transform</span><span class="token punctuation">:</span> <span class="token function">skewY</span><span class="token punctuation">(</span>20deg<span class="token punctuation">)</span><span class="token punctuation">;</span></pre></td></tr><tr><td data-num="4"></td><td><pre><span class="token punctuation">&#125;</span></pre></td></tr></table></figure><h3 id="matrix"><a class="anchor" href="#matrix">#</a> Matrix()</h3><p><code>matrix()</code>  整合所有 2D <code>transform</code>  方法。</p><figure class="highlight css"><figcaption data-lang="CSS"></figcaption><table><tr><td data-num="1"></td><td><pre><span class="token function">matrix</span><span class="token punctuation">(</span><span class="token function">scaleX</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">,</span> <span class="token function">skewY</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">,</span> <span class="token function">skewX</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">,</span> <span class="token function">scaleY</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">,</span> <span class="token function">translateX</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">,</span> <span class="token function">translateY</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span></pre></td></tr></table></figure><figure class="highlight css"><figcaption data-lang="CSS"><span>Example</span><span class="exturl" data-url="aHR0cHM6Ly93d3cudzNzY2hvb2xzLmNvbS9jc3MvdHJ5aXQuYXNwP2ZpbGVuYW1lPXRyeWNzczNfdHJhbnNmb3JtX21hdHJpeDE=">link</span></figcaption><table><tr><td data-num="1"></td><td><pre><span class="token selector">div</span> <span class="token punctuation">&#123;</span></pre></td></tr><tr><td data-num="2"></td><td><pre>    <span class="token property">transform</span><span class="token punctuation">:</span> <span class="token function">matrix</span><span class="token punctuation">(</span>1<span class="token punctuation">,</span> -0.3<span class="token punctuation">,</span> 0<span class="token punctuation">,</span> 1<span class="token punctuation">,</span> 0<span class="token punctuation">,</span> 0<span class="token punctuation">)</span><span class="token punctuation">;</span></pre></td></tr><tr><td data-num="3"></td><td><pre><span class="token punctuation">&#125;</span></pre></td></tr></table></figure><h2 id="3d-transform-methods"><a class="anchor" href="#3d-transform-methods">#</a> 3D Transform Methods</h2><div class="note danger"><ul><li>rotateX()</li><li>rotateY()</li><li>rotateZ()</li></ul></div><figure class="highlight css"><figcaption data-lang="CSS"><span>Example 1</span><span class="exturl" data-url="aHR0cHM6Ly93d3cudzNzY2hvb2xzLmNvbS9jc3MvdHJ5aXQuYXNwP2ZpbGVuYW1lPXRyeWNzczNfdHJhbnNmb3JtX3JvdGF0ZVg=">link</span></figcaption><table><tr><td data-num="1"></td><td><pre><span class="token comment">/* Rotates an element around its X-axis at a given degree */</span></pre></td></tr><tr><td data-num="2"></td><td><pre><span class="token selector">div</span> <span class="token punctuation">&#123;</span></pre></td></tr><tr><td data-num="3"></td><td><pre>    <span class="token property">transform</span><span class="token punctuation">:</span> <span class="token function">rotateX</span><span class="token punctuation">(</span>150deg<span class="token punctuation">)</span><span class="token punctuation">;</span></pre></td></tr><tr><td data-num="4"></td><td><pre><span class="token punctuation">&#125;</span></pre></td></tr></table></figure><figure class="highlight css"><figcaption data-lang="CSS"><span>Example 2</span><span class="exturl" data-url="aHR0cHM6Ly93d3cudzNzY2hvb2xzLmNvbS9jc3MvdHJ5aXQuYXNwP2ZpbGVuYW1lPXRyeWNzczNfdHJhbnNmb3JtX3JvdGF0ZVk=">link</span></figcaption><table><tr><td data-num="1"></td><td><pre><span class="token comment">/* Rotates an element around its Y-axis at a given degree */</span></pre></td></tr><tr><td data-num="2"></td><td><pre><span class="token selector">div</span> <span class="token punctuation">&#123;</span></pre></td></tr><tr><td data-num="3"></td><td><pre>    <span class="token property">transform</span><span class="token punctuation">:</span> <span class="token function">rotateY</span><span class="token punctuation">(</span>150deg<span class="token punctuation">)</span><span class="token punctuation">;</span></pre></td></tr><tr><td data-num="4"></td><td><pre><span class="token punctuation">&#125;</span></pre></td></tr></table></figure><figure class="highlight css"><figcaption data-lang="CSS"><span>Example 3</span><span class="exturl" data-url="aHR0cHM6Ly93d3cudzNzY2hvb2xzLmNvbS9jc3MvdHJ5aXQuYXNwP2ZpbGVuYW1lPXRyeWNzczNfdHJhbnNmb3JtX3JvdGF0ZVo=">link</span></figcaption><table><tr><td data-num="1"></td><td><pre><span class="token comment">/* Rotates an element around its Z-axis at a given degree */</span></pre></td></tr><tr><td data-num="2"></td><td><pre><span class="token selector">div</span> <span class="token punctuation">&#123;</span></pre></td></tr><tr><td data-num="3"></td><td><pre>    <span class="token property">transform</span><span class="token punctuation">:</span> <span class="token function">rotateZ</span><span class="token punctuation">(</span>150deg<span class="token punctuation">)</span><span class="token punctuation">;</span></pre></td></tr><tr><td data-num="4"></td><td><pre><span class="token punctuation">&#125;</span></pre></td></tr></table></figure>]]></content>
      
      
      <categories>
          
          <category> Web </category>
          
          <category> CSS </category>
          
      </categories>
      
      
        <tags>
            
            <tag> Web </tag>
            
            <tag> CSS </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>CSS - Float</title>
      <link href="/2023/04/19/Web/CSS/CSS%20-%20Float/"/>
      <url>/2023/04/19/Web/CSS/CSS%20-%20Float/</url>
      
        <content type="html"><![CDATA[<h2 id="float"><a class="anchor" href="#float">#</a> Float</h2><p><code>float</code>  用於定位和格式化內容。例如讓圖像浮動到容器的左側。</p><div class="note danger no-icon"><p><strong>Float contains following values:</strong></p><ul><li><code>left</code>  - 讓元素浮動到容器的左側。</li><li><code>right</code>  - 讓元素浮動到容器的右側。</li><li><code>none</code>  - Default value, 元素不浮動。</li><li><code>inherit</code>  - 繼承父元素的浮動值。</li></ul></div><figure class="highlight css"><figcaption data-lang="CSS"><span>Example - float: right</span><span class="exturl" data-url="aHR0cHM6Ly93d3cudzNzY2hvb2xzLmNvbS9jc3MvdHJ5aXQuYXNwP2ZpbGVuYW1lPXRyeWNzc19sYXlvdXRfZmxvYXQ=">link</span></figcaption><table><tr><td data-num="1"></td><td><pre><span class="token selector">img</span> <span class="token punctuation">&#123;</span><span class="token property">float</span><span class="token punctuation">:</span> right<span class="token punctuation">&#125;</span></pre></td></tr></table></figure><h3 id="float-next-to-each-other"><a class="anchor" href="#float-next-to-each-other">#</a> Float Next to Each Other</h3><p>運用  <code>float: left</code>  我們也可以讓元素水平排列。</p><figure class="highlight css"><figcaption data-lang="CSS"><span>Example</span><span class="exturl" data-url="aHR0cHM6Ly93d3cudzNzY2hvb2xzLmNvbS9jc3MvdHJ5aXQuYXNwP2ZpbGVuYW1lPXRyeWNzc19sYXlvdXRfZmxvYXQz">link</span></figcaption><table><tr><td data-num="1"></td><td><pre><span class="token selector">div</span> <span class="token punctuation">&#123;</span></pre></td></tr><tr><td data-num="2"></td><td><pre>  <span class="token property">float</span><span class="token punctuation">:</span> left<span class="token punctuation">;</span></pre></td></tr><tr><td data-num="3"></td><td><pre>  <span class="token property">padding</span><span class="token punctuation">:</span> 15px<span class="token punctuation">;</span></pre></td></tr><tr><td data-num="4"></td><td><pre><span class="token punctuation">&#125;</span></pre></td></tr><tr><td data-num="5"></td><td><pre><span class="token selector">.div1</span> <span class="token punctuation">&#123;</span><span class="token property">background</span><span class="token punctuation">:</span> red<span class="token punctuation">;</span><span class="token punctuation">&#125;</span></pre></td></tr><tr><td data-num="6"></td><td><pre><span class="token selector">.div2</span> <span class="token punctuation">&#123;</span><span class="token property">background</span><span class="token punctuation">:</span> yellow<span class="token punctuation">;</span><span class="token punctuation">&#125;</span></pre></td></tr><tr><td data-num="7"></td><td><pre><span class="token selector">.div3</span> <span class="token punctuation">&#123;</span><span class="token property">background</span><span class="token punctuation">:</span> green<span class="token punctuation">;</span><span class="token punctuation">&#125;</span></pre></td></tr></table></figure><h2 id="clear"><a class="anchor" href="#clear">#</a> Clear</h2><p><code>clear</code>  指定浮動元素旁邊的元素應該發生什麼。</p><div class="note danger no-icon"><p><strong>Clear contains following values:</strong></p><ul><li><code>none</code>  - Default value, 元素不會被推到左側或右側元素下方。</li><li><code>left</code>  - 元素被推到<strong>左浮動</strong>元素下方。</li><li><code>right</code>  - 元素被推到<strong>右浮動</strong>元素下方。</li><li><code>both</code>  - 元素被推到<strong>左右浮動</strong>元素下方。</li><li><code>inherit</code> - 從其父元素<strong>繼承</strong>清除值。</li></ul></div><p>當我們要清除浮動時，<strong>應將清除值與浮動值匹配:</strong> 如果元素向左浮動，則應向左清除。</p><figure class="highlight css"><figcaption data-lang="CSS"><span>Example</span><span class="exturl" data-url="aHR0cHM6Ly93d3cudzNzY2hvb2xzLmNvbS9jc3MvdHJ5aXQuYXNwP2ZpbGVuYW1lPXRyeWNzc19sYXlvdXRfY2xlYXI=">link</span></figcaption><table><tr><td data-num="1"></td><td><pre><span class="token selector">div1</span> <span class="token punctuation">&#123;</span><span class="token property">float</span><span class="token punctuation">:</span> left<span class="token punctuation">;</span><span class="token punctuation">&#125;</span></pre></td></tr><tr><td data-num="2"></td><td><pre><span class="token selector">div2</span> <span class="token punctuation">&#123;</span><span class="token property">clear</span><span class="token punctuation">:</span> left<span class="token punctuation">;</span><span class="token punctuation">&#125;</span></pre></td></tr></table></figure><h3 id="the-clearfix-hack"><a class="anchor" href="#the-clearfix-hack">#</a> The clearfix Hack</h3><p>如果浮動的元素高於容器時，將會超出邊界，我們可以用<font> <code>overflow: auto</code> </font>來修正。</p><figure class="highlight css"><figcaption data-lang="CSS"><span>Example</span><span class="exturl" data-url="aHR0cHM6Ly93d3cudzNzY2hvb2xzLmNvbS9jc3MvdHJ5aXQuYXNwP2ZpbGVuYW1lPXRyeWNzc19sYXlvdXRfY2xlYXJmaXg=">link</span></figcaption><table><tr><td data-num="1"></td><td><pre><span class="token selector">.clearfix</span> <span class="token punctuation">&#123;</span><span class="token property">overflow</span><span class="token punctuation">:</span> auto<span class="token punctuation">;</span><span class="token punctuation">&#125;</span></pre></td></tr></table></figure><p>而現在較多人用的是以下的代碼。</p><figure class="highlight css"><figcaption data-lang="CSS"><span>Example</span><span class="exturl" data-url="aHR0cHM6Ly93d3cudzNzY2hvb2xzLmNvbS9jc3MvdHJ5aXQuYXNwP2ZpbGVuYW1lPXRyeWNzc19sYXlvdXRfY2xlYXJmaXgy">link</span></figcaption><table><tr><td data-num="1"></td><td><pre><span class="token selector">.clearfix::after</span> <span class="token punctuation">&#123;</span></pre></td></tr><tr><td data-num="2"></td><td><pre>    <span class="token property">content</span><span class="token punctuation">:</span> <span class="token string">""</span><span class="token punctuation">;</span></pre></td></tr><tr><td data-num="3"></td><td><pre>    <span class="token property">clear</span><span class="token punctuation">:</span> both<span class="token punctuation">;</span></pre></td></tr><tr><td data-num="4"></td><td><pre>    <span class="token property">display</span><span class="token punctuation">:</span> table<span class="token punctuation">;</span></pre></td></tr><tr><td data-num="5"></td><td><pre><span class="token punctuation">&#125;</span></pre></td></tr></table></figure><div class="links"><div class="item" title="About clearfix hack" style="--block-color:#ccc;"><span class="exturl image" data-url="aHR0cHM6Ly93d3cucHJvZ3JhbWZhcm1lci5jb20vYXJ0aWNsZXMvc3R5bGUvY3NzLWZsb2F0LWFuZC1mbGV4" data-background-image="/images/404.png"></span>          <div class="info">          <span class="exturl title" data-url="aHR0cHM6Ly93d3cucHJvZ3JhbWZhcm1lci5jb20vYXJ0aWNsZXMvc3R5bGUvY3NzLWZsb2F0LWFuZC1mbGV4">About clearfix hack</span>          <p class="desc">https://www.programfarmer.com/articles/style/css-float-and-flex</p>          </div></div></div>]]></content>
      
      
      <categories>
          
          <category> Web </category>
          
          <category> CSS </category>
          
      </categories>
      
      
        <tags>
            
            <tag> Web </tag>
            
            <tag> CSS </tag>
            
            <tag> Float </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>HTML - Forms</title>
      <link href="/2023/04/19/Web/HTML/HTML%20-%20Forms/"/>
      <url>/2023/04/19/Web/HTML/HTML%20-%20Forms/</url>
      
        <content type="html"><![CDATA[<p>HTML 表單通常用於收集用戶輸入，用戶輸入會被蒐集到伺服器處理。<br> <code>&lt;form&gt;</code>  元素用於為用戶輸入創建 HTML 表單。</p><figure class="highlight html"><figcaption data-lang="HTML"></figcaption><table><tr><td data-num="1"></td><td><pre><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>form</span><span class="token punctuation">></span></span></pre></td></tr><tr><td data-num="2"></td><td><pre></pre></td></tr><tr><td data-num="3"></td><td><pre>/* form elements */</pre></td></tr><tr><td data-num="4"></td><td><pre></pre></td></tr><tr><td data-num="5"></td><td><pre><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>form</span><span class="token punctuation">></span></span></pre></td></tr></table></figure><h2 id="the-input-element"><a class="anchor" href="#the-input-element">#</a> The &lt;Input&gt; Element</h2><p><code>&lt;form&gt;</code>  擁有各式各樣的輸入容器，例如：單選、複選或提交按鈕。<br> <code>&lt;input&gt;</code>  的使用樣式取決於我們設定的  <code>type</code>  屬性。</p><p><strong>這裡是常用的樣式:</strong></p><table><thead><tr><th><strong>Type</strong></th><th><strong>Description</strong></th></tr></thead><tbody><tr><td><code>&lt;input type=&quot;text&quot;&gt;</code></td><td>Display a single-line text input field</td></tr><tr><td><code>&lt;input type=&quot;radio&quot;&gt;</code></td><td>Displays a radio button (for selecting one of many choices)</td></tr><tr><td><code>&lt;input type=&quot;checkbox&quot;&gt;</code></td><td>Displays a checkbox (for selecting zero or more of many choices)</td></tr><tr><td><code>&lt;input type=&quot;submit&quot;&gt;</code></td><td>Displays a submit button (for submitting the form)</td></tr><tr><td><code>&lt;input type=&quot;button&quot;&gt;</code></td><td>Displays a clickable button</td></tr></tbody></table><p>請參考這篇 <span class="exturl" data-url="aHR0cHM6Ly9oYWNrbWQuaW8vQENoaWVuSS9odG1sX2lucHV0">HTML - Input</span></p><h2 id="html-form-attributes"><a class="anchor" href="#html-form-attributes">#</a> HTML Form Attributes</h2><h3 id="action-attribute"><a class="anchor" href="#action-attribute">#</a> Action Attribute</h3><p><code>&lt;action&gt;</code>  屬性定義提交表單時要執行的操作。<br>通常，當使用者提交表單後，表單數據會被發送到伺服器上的一個文件中。</p><figure class="highlight html"><figcaption data-lang="HTML"><span>Example</span><span class="exturl" data-url="aHR0cHM6Ly93d3cudzNzY2hvb2xzLmNvbS9odG1sL3RyeWl0LmFzcD9maWxlbmFtZT10cnlodG1sX2Zvcm1fYXR0cmlidXRlc19zdWJtaXQ=">link</span></figcaption><table><tr><td data-num="1"></td><td><pre><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>form</span> <span class="token attr-name">action</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>/action_page.php<span class="token punctuation">"</span></span><span class="token punctuation">></span></span></pre></td></tr><tr><td data-num="2"></td><td><pre>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>label</span> <span class="token attr-name">for</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>fname<span class="token punctuation">"</span></span><span class="token punctuation">></span></span>First name:<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>label</span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>br</span><span class="token punctuation">></span></span></pre></td></tr><tr><td data-num="3"></td><td><pre>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>input</span> <span class="token attr-name">type</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>text<span class="token punctuation">"</span></span> <span class="token attr-name">id</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>fname<span class="token punctuation">"</span></span> <span class="token attr-name">name</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>fname<span class="token punctuation">"</span></span> <span class="token attr-name">value</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>John<span class="token punctuation">"</span></span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>br</span><span class="token punctuation">></span></span></pre></td></tr><tr><td data-num="4"></td><td><pre>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>label</span> <span class="token attr-name">for</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>lname<span class="token punctuation">"</span></span><span class="token punctuation">></span></span>Last name:<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>label</span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>br</span><span class="token punctuation">></span></span></pre></td></tr><tr><td data-num="5"></td><td><pre>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>input</span> <span class="token attr-name">type</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>text<span class="token punctuation">"</span></span> <span class="token attr-name">id</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>lname<span class="token punctuation">"</span></span> <span class="token attr-name">name</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>lname<span class="token punctuation">"</span></span> <span class="token attr-name">value</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>Doe<span class="token punctuation">"</span></span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>br</span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>br</span><span class="token punctuation">></span></span></pre></td></tr><tr><td data-num="6"></td><td><pre>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>input</span> <span class="token attr-name">type</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>submit<span class="token punctuation">"</span></span> <span class="token attr-name">value</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>Submit<span class="token punctuation">"</span></span><span class="token punctuation">></span></span></pre></td></tr><tr><td data-num="7"></td><td><pre><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>form</span><span class="token punctuation">></span></span></pre></td></tr></table></figure><blockquote><p><strong>NOTE: 如果省略  <code>action</code>  欄位，則預設為目前頁面。</strong></p></blockquote><h3 id="target-attribute"><a class="anchor" href="#target-attribute">#</a> Target Attribute</h3><p><code>target</code>  屬性定義在何處顯示提交表單後收到的回應。</p><div class="note danger no-icon"><p><strong> <code>target</code>  has following values:</strong></p><ul><li><code>_blank</code>  - The response is displayed in a <strong>new window or tab</strong>.</li><li><code>_self</code>  - Default value, the response is displayed in the <strong>current window</strong>.</li><li><code>_parent</code>  - The response is displayed in the <strong>parent frame</strong>.</li><li><code>_top</code>  - The response is displayed in the <strong>full body of the window</strong>.</li><li><em>framename</em> - The response is displayed <strong>in a named iframe</strong>.</li></ul></div><figure class="highlight html"><figcaption data-lang="HTML"><span>Example</span><span class="exturl" data-url="aHR0cHM6Ly93d3cudzNzY2hvb2xzLmNvbS9odG1sL3RyeWl0LmFzcD9maWxlbmFtZT10cnlodG1sX2Zvcm1fdGFyZ2V0">link</span></figcaption><table><tr><td data-num="1"></td><td><pre><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>form</span> <span class="token attr-name">action</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>/action_page.php<span class="token punctuation">"</span></span> <span class="token attr-name">target</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>_blank<span class="token punctuation">"</span></span><span class="token punctuation">></span></span></pre></td></tr></table></figure><h3 id="method-attribute"><a class="anchor" href="#method-attribute">#</a> Method Attribute</h3><p><code>method</code>  屬性定義 HTTP 要用何種方式傳送表單資料。</p><div class="note danger no-icon"><ul><li><code>method=&quot;get&quot;</code>  - Sent data as URL variables.</li><li><code>method=&quot;post&quot;</code>  - Sent data as HTTP post transaction.</li></ul><p>The default value is <em><strong>GET</strong></em>.</p></div><figure class="highlight html"><figcaption data-lang="HTML"><span>GET Example</span><span class="exturl" data-url="aHR0cHM6Ly93d3cudzNzY2hvb2xzLmNvbS9odG1sL3RyeWl0LmFzcD9maWxlbmFtZT10cnlodG1sX2Zvcm1fZ2V0">link</span></figcaption><table><tr><td data-num="1"></td><td><pre><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>form</span> <span class="token attr-name">action</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>/action_page.php<span class="token punctuation">"</span></span> <span class="token attr-name">method</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>get<span class="token punctuation">"</span></span><span class="token punctuation">></span></span></pre></td></tr></table></figure><p><img data-src="https://i.imgur.com/1pmMlQ1.png" alt=""></p><blockquote><p><strong>表單資訊會跟隨在網址後面，安全性較差。</strong></p></blockquote><figure class="highlight html"><figcaption data-lang="HTML"><span>POST Example</span><span class="exturl" data-url="aHR0cHM6Ly93d3cudzNzY2hvb2xzLmNvbS9odG1sL3RyeWl0LmFzcD9maWxlbmFtZT10cnlodG1sX2Zvcm1fcG9zdA==">link</span></figcaption><table><tr><td data-num="1"></td><td><pre><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>form</span> <span class="token attr-name">action</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>/action_page.php<span class="token punctuation">"</span></span> <span class="token attr-name">method</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>post<span class="token punctuation">"</span></span><span class="token punctuation">></span></span></pre></td></tr></table></figure><div class="note danger"><p><strong>NOTE on GET:</strong></p><ul><li>提交的表單資料會跟隨在 URL 後面，以 name/value 的形式。</li><li><strong>永遠不要用 GET 發送敏感信息！！！</strong></li><li>URL 的長度限制為 2048 characters。</li><li>對於用戶想要為結果添加書籤的表單提交很有用</li><li>GET 適用於非安全數據，例如 Google 中的查詢字符串</li></ul><p><strong>NOTE on POST:</strong></p><ul><li>在 HTTP 請求的正文中附加表單數據（提交的表單數據未顯示在 URL 中）。</li><li>POST 沒有大小限制，可用於發送大量數據。</li><li>使用 POST 提交的表單不能添加書籤。</li></ul></div><h3 id="autocomplete-attribute"><a class="anchor" href="#autocomplete-attribute">#</a> Autocomplete Attribute</h3><p><code>autocomplete</code>  屬性決定是否開啟表單自動完成功能。<br>啟用自動完成後，瀏覽器會根據用戶之前輸入的值自動完成。</p><figure class="highlight html"><figcaption data-lang="HTML"><span>Example</span><span class="exturl" data-url="aHR0cHM6Ly93d3cudzNzY2hvb2xzLmNvbS9odG1sL3RyeWl0LmFzcD9maWxlbmFtZT10cnlodG1sX2Zvcm1fYXV0b2NvbXBsZXRl">link</span></figcaption><table><tr><td data-num="1"></td><td><pre><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>form</span> <span class="token attr-name">action</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>/action_page.php<span class="token punctuation">"</span></span> <span class="token attr-name">autocomplete</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>on<span class="token punctuation">"</span></span><span class="token punctuation">></span></span></pre></td></tr></table></figure>]]></content>
      
      
      <categories>
          
          <category> Web </category>
          
          <category> HTML </category>
          
      </categories>
      
      
        <tags>
            
            <tag> Web </tag>
            
            <tag> HTML </tag>
            
            <tag> Forms </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>1372. Longest ZigZag Path in a Binary Tree</title>
      <link href="/2023/04/19/Coding/leetcode/Medium/1372%20Longest%20ZigZag%20Path%20in%20a%20Binary%20Tree/"/>
      <url>/2023/04/19/Coding/leetcode/Medium/1372%20Longest%20ZigZag%20Path%20in%20a%20Binary%20Tree/</url>
      
        <content type="html"><![CDATA[<p>⭐️⭐️</p><h2 id="題目敘述"><a class="anchor" href="#題目敘述">#</a> <span class="exturl" data-url="aHR0cHM6Ly9sZWV0Y29kZS5jb20vcHJvYmxlbXMvbG9uZ2VzdC16aWd6YWctcGF0aC1pbi1hLWJpbmFyeS10cmVlLw==">題目敘述</span></h2><p>You are given the  <code>root</code>  of a binary tree.</p><p>A ZigZag path for a binary tree is defined as follow:</p><ul><li>Choose <strong>any</strong> node in the binary tree and a direction (right or left).</li><li>If the current direction is right, move to the right child of the current node; otherwise, move to the left child.</li><li>Change the direction from right to left or from left to right.</li><li>Repeat the second and third steps until you can’t move in the tree.</li></ul><p>Zigzag length is defined as the number of nodes visited - 1. (A single node has a length of 0).</p><p>Return <em>the longest <strong>ZigZag</strong> path contained in that tree</em>.</p><h3 id="example-1"><a class="anchor" href="#example-1">#</a> Example 1</h3><p><img data-src="https://i.imgur.com/c7mfyjz.png" alt=""></p><blockquote><p><strong>Input</strong>: root = [1,null,1,1,1,null,null,1,1,null,1,null,null,null,1,null,1]<br><strong>Output</strong>: 3<br><strong>Explanation</strong>: Longest ZigZag path in blue nodes (right -&gt; left -&gt; right).</p></blockquote><h3 id="example-2"><a class="anchor" href="#example-2">#</a> Example 2</h3><p><img data-src="https://i.imgur.com/A23S6gD.png" alt=""></p><blockquote><p><strong>Input</strong>: root = [1,1,1,null,1,null,null,1,1,null,1]<br><strong>Output</strong>: 4<br><strong>Explanation</strong>: Longest ZigZag path in blue nodes (left -&gt; right -&gt; left -&gt; right).</p></blockquote><h3 id="example-3"><a class="anchor" href="#example-3">#</a> Example 3:</h3><blockquote><p><strong>Input</strong>: root = [1]<br><strong>Output</strong>: 0</p></blockquote><h2 id="解題思路"><a class="anchor" href="#解題思路">#</a> 解題思路</h2><h2 id="code"><a class="anchor" href="#code">#</a> Code</h2><div class="tab" data-id="id" data-title="C++"><figure class="highlight cpp"><figcaption data-lang="C++"></figcaption><table><tr><td data-num="1"></td><td><pre><span class="token keyword">class</span> <span class="token class-name">Solution</span> <span class="token punctuation">&#123;</span></pre></td></tr><tr><td data-num="2"></td><td><pre><span class="token keyword">public</span><span class="token operator">:</span></pre></td></tr><tr><td data-num="3"></td><td><pre>    vector<span class="token operator">&lt;</span><span class="token keyword">int</span><span class="token operator">></span> <span class="token function">dfs</span> <span class="token punctuation">(</span>TreeNode<span class="token operator">*</span> root<span class="token punctuation">)</span> <span class="token punctuation">&#123;</span></pre></td></tr><tr><td data-num="4"></td><td><pre>        <span class="token keyword">if</span> <span class="token punctuation">(</span><span class="token operator">!</span>root<span class="token punctuation">)</span> <span class="token keyword">return</span> <span class="token punctuation">&#123;</span><span class="token operator">-</span><span class="token number">1</span><span class="token punctuation">,</span> <span class="token operator">-</span><span class="token number">1</span><span class="token punctuation">,</span> <span class="token operator">-</span><span class="token number">1</span><span class="token punctuation">&#125;</span><span class="token punctuation">;</span></pre></td></tr><tr><td data-num="5"></td><td><pre></pre></td></tr><tr><td data-num="6"></td><td><pre>        vector<span class="token operator">&lt;</span><span class="token keyword">int</span><span class="token operator">></span> leftSubtree <span class="token operator">=</span> <span class="token function">dfs</span><span class="token punctuation">(</span>root<span class="token operator">-></span>left<span class="token punctuation">)</span><span class="token punctuation">;</span></pre></td></tr><tr><td data-num="7"></td><td><pre>        vector<span class="token operator">&lt;</span><span class="token keyword">int</span><span class="token operator">></span> rightSubtree <span class="token operator">=</span> <span class="token function">dfs</span><span class="token punctuation">(</span>root<span class="token operator">-></span>right<span class="token punctuation">)</span><span class="token punctuation">;</span></pre></td></tr><tr><td data-num="8"></td><td><pre></pre></td></tr><tr><td data-num="9"></td><td><pre>        <span class="token keyword">int</span> leftlen <span class="token operator">=</span> leftSubtree<span class="token punctuation">[</span><span class="token number">1</span><span class="token punctuation">]</span> <span class="token operator">+</span> <span class="token number">1</span><span class="token punctuation">;</span></pre></td></tr><tr><td data-num="10"></td><td><pre>        <span class="token keyword">int</span> rightlen <span class="token operator">=</span> rightSubtree<span class="token punctuation">[</span><span class="token number">0</span><span class="token punctuation">]</span> <span class="token operator">+</span> <span class="token number">1</span><span class="token punctuation">;</span></pre></td></tr><tr><td data-num="11"></td><td><pre>        <span class="token keyword">int</span> mxlen <span class="token operator">=</span> <span class="token function">max</span><span class="token punctuation">(</span><span class="token punctuation">&#123;</span>leftlen<span class="token punctuation">,</span> rightlen<span class="token punctuation">,</span> leftSubtree<span class="token punctuation">[</span><span class="token number">2</span><span class="token punctuation">]</span><span class="token punctuation">,</span> rightSubtree<span class="token punctuation">[</span><span class="token number">2</span><span class="token punctuation">]</span><span class="token punctuation">&#125;</span><span class="token punctuation">)</span><span class="token punctuation">;</span></pre></td></tr><tr><td data-num="12"></td><td><pre></pre></td></tr><tr><td data-num="13"></td><td><pre>        <span class="token keyword">return</span> <span class="token punctuation">&#123;</span>leftlen<span class="token punctuation">,</span> rightlen<span class="token punctuation">,</span> mxlen<span class="token punctuation">&#125;</span><span class="token punctuation">;</span></pre></td></tr><tr><td data-num="14"></td><td><pre>    <span class="token punctuation">&#125;</span></pre></td></tr><tr><td data-num="15"></td><td><pre>    <span class="token keyword">int</span> <span class="token function">longestZigZag</span><span class="token punctuation">(</span>TreeNode<span class="token operator">*</span> root<span class="token punctuation">)</span> <span class="token punctuation">&#123;</span></pre></td></tr><tr><td data-num="16"></td><td><pre>        vector<span class="token operator">&lt;</span><span class="token keyword">int</span><span class="token operator">></span> res <span class="token operator">=</span> <span class="token function">dfs</span><span class="token punctuation">(</span>root<span class="token punctuation">)</span><span class="token punctuation">;</span></pre></td></tr><tr><td data-num="17"></td><td><pre>        <span class="token keyword">return</span> res<span class="token punctuation">[</span><span class="token number">2</span><span class="token punctuation">]</span><span class="token punctuation">;</span></pre></td></tr><tr><td data-num="18"></td><td><pre>    <span class="token punctuation">&#125;</span></pre></td></tr><tr><td data-num="19"></td><td><pre><span class="token punctuation">&#125;</span><span class="token punctuation">;</span></pre></td></tr></table></figure></div><div class="tab" data-id="id" data-title="Java"><pre><code class="language-java="></code></pre></div><div class="tab" data-id="id" data-title="Python"><figure class="highlight python"><figcaption data-lang="python"></figcaption><table><tr><td data-num="1"></td><td><pre><span class="token keyword">class</span> <span class="token class-name">Solution</span><span class="token punctuation">:</span></pre></td></tr><tr><td data-num="2"></td><td><pre>    <span class="token keyword">def</span> <span class="token function">longestZigZag</span><span class="token punctuation">(</span>self<span class="token punctuation">,</span> root<span class="token punctuation">:</span> Optional<span class="token punctuation">[</span>TreeNode<span class="token punctuation">]</span><span class="token punctuation">)</span> <span class="token operator">-</span><span class="token operator">></span> <span class="token builtin">int</span><span class="token punctuation">:</span></pre></td></tr><tr><td data-num="3"></td><td><pre>        <span class="token keyword">def</span> <span class="token function">dfs</span><span class="token punctuation">(</span>root<span class="token punctuation">)</span><span class="token punctuation">:</span></pre></td></tr><tr><td data-num="4"></td><td><pre>            <span class="token keyword">if</span> <span class="token keyword">not</span> root<span class="token punctuation">:</span> <span class="token keyword">return</span> <span class="token punctuation">[</span><span class="token operator">-</span><span class="token number">1</span><span class="token punctuation">,</span> <span class="token operator">-</span><span class="token number">1</span><span class="token punctuation">,</span> <span class="token operator">-</span><span class="token number">1</span><span class="token punctuation">]</span></pre></td></tr><tr><td data-num="5"></td><td><pre></pre></td></tr><tr><td data-num="6"></td><td><pre>            leftSubtree<span class="token punctuation">,</span> rightSubtree <span class="token operator">=</span> dfs<span class="token punctuation">(</span>root<span class="token punctuation">.</span>left<span class="token punctuation">)</span><span class="token punctuation">,</span> dfs<span class="token punctuation">(</span>root<span class="token punctuation">.</span>right<span class="token punctuation">)</span></pre></td></tr><tr><td data-num="7"></td><td><pre>            <span class="token keyword">return</span> <span class="token punctuation">[</span></pre></td></tr><tr><td data-num="8"></td><td><pre>                leftSubtree<span class="token punctuation">[</span><span class="token number">1</span><span class="token punctuation">]</span> <span class="token operator">+</span> <span class="token number">1</span><span class="token punctuation">,</span></pre></td></tr><tr><td data-num="9"></td><td><pre>                rightSubtree<span class="token punctuation">[</span><span class="token number">0</span><span class="token punctuation">]</span> <span class="token operator">+</span> <span class="token number">1</span><span class="token punctuation">,</span></pre></td></tr><tr><td data-num="10"></td><td><pre>                <span class="token builtin">max</span><span class="token punctuation">(</span>leftSubtree<span class="token punctuation">[</span><span class="token number">1</span><span class="token punctuation">]</span> <span class="token operator">+</span> <span class="token number">1</span><span class="token punctuation">,</span> rightSubtree<span class="token punctuation">[</span><span class="token number">0</span><span class="token punctuation">]</span> <span class="token operator">+</span> <span class="token number">1</span><span class="token punctuation">,</span> leftSubtree<span class="token punctuation">[</span><span class="token number">2</span><span class="token punctuation">]</span><span class="token punctuation">,</span> rightSubtree<span class="token punctuation">[</span><span class="token number">2</span><span class="token punctuation">]</span><span class="token punctuation">)</span></pre></td></tr><tr><td data-num="11"></td><td><pre>            <span class="token punctuation">]</span></pre></td></tr><tr><td data-num="12"></td><td><pre>        <span class="token keyword">return</span> dfs<span class="token punctuation">(</span>root<span class="token punctuation">)</span><span class="token punctuation">[</span><span class="token operator">-</span><span class="token number">1</span><span class="token punctuation">]</span></pre></td></tr></table></figure></div>]]></content>
      
      
      <categories>
          
          <category> Coding </category>
          
          <category> Leetcode </category>
          
          <category> Medium </category>
          
      </categories>
      
      
        <tags>
            
            <tag> Leetcode </tag>
            
            <tag> Medium </tag>
            
            <tag> Tree </tag>
            
            <tag> Depth-First Search </tag>
            
            <tag> Binary Tree </tag>
            
            <tag> Dynamic Programming </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>CSS - Animation</title>
      <link href="/2023/04/18/Web/CSS/CSS%20-%20Animation/"/>
      <url>/2023/04/18/Web/CSS/CSS%20-%20Animation/</url>
      
        <content type="html"><![CDATA[<h1 id="css-animation"><a class="anchor" href="#css-animation">#</a> CSS - Animation</h1><div class="note info"><p>CSS 允許在不使用 <em>Javascript</em> 或 <em>Flash</em> 的情況下對 HTML 元素進行動畫處理。</p></div><h2 id="the-keyframes-rule"><a class="anchor" href="#the-keyframes-rule">#</a> The @Keyframes Rule</h2><div class="note default"><p>當我們在 <code>@keyframes</code>  規則中指定 CSS 樣式時，動畫會在特定時間從目前樣式逐漸變為新樣式。</p><ul><li><code>animation-name</code></li><li><code>animation-duration</code></li></ul></div><figure class="highlight css"><figcaption data-lang="CSS"><span>From - To</span><span class="exturl" data-url="aHR0cHM6Ly93d3cudzNzY2hvb2xzLmNvbS9jc3MvdHJ5aXQuYXNwP2ZpbGVuYW1lPXRyeWNzczNfYW5pbWF0aW9uMQ==">link</span></figcaption><table><tr><td data-num="1"></td><td><pre><span class="token comment">/* The animation will last for 4 seconds, and it will gradually change the background-color of the &lt;div> element from "red" to "yellow" */</span></pre></td></tr><tr><td data-num="2"></td><td><pre><span class="token comment">/* The animation code */</span></pre></td></tr><tr><td data-num="3"></td><td><pre><span class="token atrule"><span class="token rule">@keyframes</span> example</span> <span class="token punctuation">&#123;</span></pre></td></tr><tr><td data-num="4"></td><td><pre>    <span class="token selector">from</span> <span class="token punctuation">&#123;</span><span class="token property">background-color</span><span class="token punctuation">:</span> red<span class="token punctuation">;</span><span class="token punctuation">&#125;</span></pre></td></tr><tr><td data-num="5"></td><td><pre>    <span class="token selector">to</span> <span class="token punctuation">&#123;</span><span class="token property">background-color</span><span class="token punctuation">:</span> yellow<span class="token punctuation">;</span><span class="token punctuation">&#125;</span></pre></td></tr><tr><td data-num="6"></td><td><pre><span class="token punctuation">&#125;</span></pre></td></tr><tr><td data-num="7"></td><td><pre></pre></td></tr><tr><td data-num="8"></td><td><pre><span class="token comment">/* The element to apply the animation to */</span></pre></td></tr><tr><td data-num="9"></td><td><pre><span class="token selector">div</span> <span class="token punctuation">&#123;</span></pre></td></tr><tr><td data-num="10"></td><td><pre>    <span class="token property">width</span><span class="token punctuation">:</span> 100px<span class="token punctuation">;</span></pre></td></tr><tr><td data-num="11"></td><td><pre>    <span class="token property">height</span><span class="token punctuation">:</span> 100px<span class="token punctuation">;</span></pre></td></tr><tr><td data-num="12"></td><td><pre>    <span class="token property">background-color</span><span class="token punctuation">:</span> red<span class="token punctuation">;</span></pre></td></tr><tr><td data-num="13"></td><td><pre>    <span class="token property">animation-name</span><span class="token punctuation">:</span> example<span class="token punctuation">;</span></pre></td></tr><tr><td data-num="14"></td><td><pre>    <span class="token property">animation-duration</span><span class="token punctuation">:</span> 4s<span class="token punctuation">;</span></pre></td></tr><tr><td data-num="15"></td><td><pre><span class="token punctuation">&#125;</span></pre></td></tr></table></figure><div class="note danger"><p><strong>NOTE:</strong>  <code>animation-duration</code>  定義動畫會花多少時間完成，所以如果沒有指定時間，動畫將不會執行，因為 default 值是 0s。</p></div><figure class="highlight css"><figcaption data-lang="CSS"><span>Percent %</span><span class="exturl" data-url="aHR0cHM6Ly93d3cudzNzY2hvb2xzLmNvbS9jc3MvdHJ5aXQuYXNwP2ZpbGVuYW1lPXRyeWNzczNfYW5pbWF0aW9uMw==">link</span></figcaption><table><tr><td data-num="1"></td><td><pre><span class="token comment">/* The animation code */</span></pre></td></tr><tr><td data-num="2"></td><td><pre><span class="token atrule"><span class="token rule">@keyframes</span> example</span> <span class="token punctuation">&#123;</span></pre></td></tr><tr><td data-num="3"></td><td><pre>    <span class="token selector">0%</span> <span class="token punctuation">&#123;</span><span class="token property">background-color</span><span class="token punctuation">:</span> red<span class="token punctuation">;</span> <span class="token property">left</span><span class="token punctuation">:</span> 0px<span class="token punctuation">;</span> <span class="token property">top</span><span class="token punctuation">:</span> 0px<span class="token punctuation">;</span><span class="token punctuation">&#125;</span></pre></td></tr><tr><td data-num="4"></td><td><pre>    <span class="token selector">25%</span> <span class="token punctuation">&#123;</span><span class="token property">background-color</span><span class="token punctuation">:</span> yellow<span class="token punctuation">;</span> <span class="token property">left</span><span class="token punctuation">:</span> 200px<span class="token punctuation">;</span> <span class="token property">top</span><span class="token punctuation">:</span> 0px<span class="token punctuation">;</span><span class="token punctuation">&#125;</span></pre></td></tr><tr><td data-num="5"></td><td><pre>    <span class="token selector">50%</span> <span class="token punctuation">&#123;</span><span class="token property">background-color</span><span class="token punctuation">:</span> blue<span class="token punctuation">;</span> <span class="token property">left</span><span class="token punctuation">:</span> 200px<span class="token punctuation">;</span> <span class="token property">top</span><span class="token punctuation">:</span> 200px<span class="token punctuation">;</span><span class="token punctuation">&#125;</span></pre></td></tr><tr><td data-num="6"></td><td><pre>    <span class="token selector">75%</span> <span class="token punctuation">&#123;</span><span class="token property">background-color</span><span class="token punctuation">:</span> green<span class="token punctuation">;</span> <span class="token property">left</span><span class="token punctuation">:</span> 0px<span class="token punctuation">;</span> <span class="token property">top</span><span class="token punctuation">:</span> 200px<span class="token punctuation">;</span><span class="token punctuation">&#125;</span></pre></td></tr><tr><td data-num="7"></td><td><pre>    <span class="token selector">100%</span> <span class="token punctuation">&#123;</span><span class="token property">background-color</span><span class="token punctuation">:</span> red<span class="token punctuation">;</span> <span class="token property">left</span><span class="token punctuation">:</span> 0px<span class="token punctuation">;</span> <span class="token property">top</span><span class="token punctuation">:</span> 0px<span class="token punctuation">;</span><span class="token punctuation">&#125;</span></pre></td></tr><tr><td data-num="8"></td><td><pre><span class="token punctuation">&#125;</span></pre></td></tr><tr><td data-num="9"></td><td><pre></pre></td></tr><tr><td data-num="10"></td><td><pre><span class="token comment">/* The element to apply the animation to */</span></pre></td></tr><tr><td data-num="11"></td><td><pre><span class="token selector">div</span> <span class="token punctuation">&#123;</span></pre></td></tr><tr><td data-num="12"></td><td><pre>    <span class="token property">width</span><span class="token punctuation">:</span> 100px<span class="token punctuation">;</span></pre></td></tr><tr><td data-num="13"></td><td><pre>    <span class="token property">height</span><span class="token punctuation">:</span> 100px<span class="token punctuation">;</span></pre></td></tr><tr><td data-num="14"></td><td><pre>    <span class="token property">background-color</span><span class="token punctuation">:</span> red<span class="token punctuation">;</span></pre></td></tr><tr><td data-num="15"></td><td><pre>    <span class="token property">position</span><span class="token punctuation">:</span> relative<span class="token punctuation">;</span></pre></td></tr><tr><td data-num="16"></td><td><pre>    <span class="token property">animation-name</span><span class="token punctuation">:</span> example<span class="token punctuation">;</span></pre></td></tr><tr><td data-num="17"></td><td><pre>    <span class="token property">animation-duration</span><span class="token punctuation">:</span> 4s<span class="token punctuation">;</span></pre></td></tr><tr><td data-num="18"></td><td><pre><span class="token punctuation">&#125;</span></pre></td></tr></table></figure><h2 id="delay-an-animation"><a class="anchor" href="#delay-an-animation">#</a> Delay an Animation</h2><div class="note info"><p><code>animation-delay</code>  定義動畫延遲開始的時間。</p></div><figure class="highlight css"><figcaption data-lang="CSS"><span>Example 1</span><span class="exturl" data-url="aHR0cHM6Ly93d3cudzNzY2hvb2xzLmNvbS9jc3MvdHJ5aXQuYXNwP2ZpbGVuYW1lPXRyeWNzczNfYW5pbWF0aW9uX2RlbGF5">link</span></figcaption><table><tr><td data-num="1"></td><td><pre><span class="token selector">div</span> <span class="token punctuation">&#123;</span></pre></td></tr><tr><td data-num="2"></td><td><pre>    <span class="token property">width</span><span class="token punctuation">:</span> 100px<span class="token punctuation">;</span></pre></td></tr><tr><td data-num="3"></td><td><pre>    <span class="token property">height</span><span class="token punctuation">:</span> 100px<span class="token punctuation">;</span></pre></td></tr><tr><td data-num="4"></td><td><pre>    <span class="token property">background-color</span><span class="token punctuation">:</span> red<span class="token punctuation">;</span></pre></td></tr><tr><td data-num="5"></td><td><pre>    <span class="token property">position</span><span class="token punctuation">:</span> relative<span class="token punctuation">;</span></pre></td></tr><tr><td data-num="6"></td><td><pre>    <span class="token property">animation-name</span><span class="token punctuation">:</span> example<span class="token punctuation">;</span></pre></td></tr><tr><td data-num="7"></td><td><pre>    <span class="token property">animation-duration</span><span class="token punctuation">:</span> 4s<span class="token punctuation">;</span></pre></td></tr><tr><td data-num="8"></td><td><pre>    <span class="token property">animation-delay</span><span class="token punctuation">:</span> 2s<span class="token punctuation">;</span></pre></td></tr><tr><td data-num="9"></td><td><pre><span class="token punctuation">&#125;</span></pre></td></tr></table></figure><p><strong>負數也可以執行，動畫會從它像是已經跑了 Ns 開始</strong></p><figure class="highlight css"><figcaption data-lang="CSS"><span>Example 2</span><span class="exturl" data-url="aHR0cHM6Ly93d3cudzNzY2hvb2xzLmNvbS9jc3MvdHJ5aXQuYXNwP2ZpbGVuYW1lPXRyeWNzczNfYW5pbWF0aW9uX2RlbGF5Mg==">link</span></figcaption><table><tr><td data-num="1"></td><td><pre><span class="token selector">div</span> <span class="token punctuation">&#123;</span></pre></td></tr><tr><td data-num="2"></td><td><pre>    <span class="token property">width</span><span class="token punctuation">:</span> 100px<span class="token punctuation">;</span></pre></td></tr><tr><td data-num="3"></td><td><pre>    <span class="token property">height</span><span class="token punctuation">:</span> 100px<span class="token punctuation">;</span></pre></td></tr><tr><td data-num="4"></td><td><pre>    <span class="token property">background-color</span><span class="token punctuation">:</span> red<span class="token punctuation">;</span></pre></td></tr><tr><td data-num="5"></td><td><pre>    <span class="token property">position</span><span class="token punctuation">:</span> relative<span class="token punctuation">;</span></pre></td></tr><tr><td data-num="6"></td><td><pre>    <span class="token property">animation-name</span><span class="token punctuation">:</span> example<span class="token punctuation">;</span></pre></td></tr><tr><td data-num="7"></td><td><pre>    <span class="token property">animation-duration</span><span class="token punctuation">:</span> 4s<span class="token punctuation">;</span></pre></td></tr><tr><td data-num="8"></td><td><pre>    <span class="token property">animation-delay</span><span class="token punctuation">:</span> -2s<span class="token punctuation">;</span></pre></td></tr><tr><td data-num="9"></td><td><pre><span class="token punctuation">&#125;</span></pre></td></tr></table></figure><h2 id="set-how-many-times-an-animation-should-run"><a class="anchor" href="#set-how-many-times-an-animation-should-run">#</a> Set How Many Times an Animation Should Run</h2><div class="note info"><p><code>animation-iteration-count</code>  指定動畫須執行幾次。</p></div><figure class="highlight css"><figcaption data-lang="CSS"><span>Example 1</span><span class="exturl" data-url="aHR0cHM6Ly93d3cudzNzY2hvb2xzLmNvbS9jc3MvdHJ5aXQuYXNwP2ZpbGVuYW1lPXRyeWNzczNfYW5pbWF0aW9uX2NvdW50">link</span></figcaption><table><tr><td data-num="1"></td><td><pre><span class="token comment">/* Example will run the animation 3 times before it stops */</span></pre></td></tr><tr><td data-num="2"></td><td><pre><span class="token selector">div</span> <span class="token punctuation">&#123;</span></pre></td></tr><tr><td data-num="3"></td><td><pre>    <span class="token property">width</span><span class="token punctuation">:</span> 100px<span class="token punctuation">;</span></pre></td></tr><tr><td data-num="4"></td><td><pre>    <span class="token property">height</span><span class="token punctuation">:</span> 100px<span class="token punctuation">;</span></pre></td></tr><tr><td data-num="5"></td><td><pre>    <span class="token property">background-color</span><span class="token punctuation">:</span> red<span class="token punctuation">;</span></pre></td></tr><tr><td data-num="6"></td><td><pre>    <span class="token property">animation-name</span><span class="token punctuation">:</span> example<span class="token punctuation">;</span></pre></td></tr><tr><td data-num="7"></td><td><pre>    <span class="token property">animation-duration</span><span class="token punctuation">:</span> 4s<span class="token punctuation">;</span></pre></td></tr><tr><td data-num="8"></td><td><pre>    <span class="token property">animation-iteration-count</span><span class="token punctuation">:</span> 3<span class="token punctuation">;</span></pre></td></tr><tr><td data-num="9"></td><td><pre><span class="token punctuation">&#125;</span></pre></td></tr></table></figure><figure class="highlight css"><figcaption data-lang="CSS"><span>Example 2</span><span class="exturl" data-url="aHR0cHM6Ly93d3cudzNzY2hvb2xzLmNvbS9jc3MvdHJ5aXQuYXNwP2ZpbGVuYW1lPXRyeWNzczNfYW5pbWF0aW9uX2NvdW50Mg==">link</span></figcaption><table><tr><td data-num="1"></td><td><pre><span class="token comment">/* Example uses the value "infinite" to make the animation continue for ever */</span></pre></td></tr><tr><td data-num="2"></td><td><pre><span class="token selector">div</span> <span class="token punctuation">&#123;</span></pre></td></tr><tr><td data-num="3"></td><td><pre>    <span class="token property">width</span><span class="token punctuation">:</span> 100px<span class="token punctuation">;</span></pre></td></tr><tr><td data-num="4"></td><td><pre>    <span class="token property">height</span><span class="token punctuation">:</span> 100px<span class="token punctuation">;</span></pre></td></tr><tr><td data-num="5"></td><td><pre>    <span class="token property">background-color</span><span class="token punctuation">:</span> red<span class="token punctuation">;</span></pre></td></tr><tr><td data-num="6"></td><td><pre>    <span class="token property">animation-name</span><span class="token punctuation">:</span> example<span class="token punctuation">;</span></pre></td></tr><tr><td data-num="7"></td><td><pre>    <span class="token property">animation-duration</span><span class="token punctuation">:</span> 4s<span class="token punctuation">;</span></pre></td></tr><tr><td data-num="8"></td><td><pre>    <span class="token property">animation-iteration-count</span><span class="token punctuation">:</span> infinite<span class="token punctuation">;</span></pre></td></tr><tr><td data-num="9"></td><td><pre><span class="token punctuation">&#125;</span></pre></td></tr></table></figure><h2 id="run-animation-in-reverse-direction-or-alternate-cycles"><a class="anchor" href="#run-animation-in-reverse-direction-or-alternate-cycles">#</a> Run Animation in Reverse Direction or Alternate Cycles</h2><div class="note info"><p><code>animation-direction</code>  指定動畫要依什麼方向移動。</p></div><div class="note danger"><p><strong>The animation-direction values:</strong></p><ul><li><code>normal</code>  - Default, the animation is played as <strong>normal(forwards)</strong>.</li><li><code>reverse</code>  - The animation is played in <strong>reverse</strong> direction(backwards).</li><li><code>alternate</code>  - The animation is played <strong>forwards first, then backwards</strong>.</li><li><code>alternate-reverse</code>  - The animation is played <strong>backwards first, then forwards</strong>.</li></ul></div><figure class="highlight css"><figcaption data-lang="CSS"><span>Example 1</span><span class="exturl" data-url="aHR0cHM6Ly93d3cudzNzY2hvb2xzLmNvbS9jc3MvdHJ5aXQuYXNwP2ZpbGVuYW1lPXRyeWNzczNfYW5pbWF0aW9uX2RpcmVjdGlvbg==">link</span></figcaption><table><tr><td data-num="1"></td><td><pre><span class="token selector">div</span> <span class="token punctuation">&#123;</span></pre></td></tr><tr><td data-num="2"></td><td><pre>    <span class="token property">width</span><span class="token punctuation">:</span> 100px<span class="token punctuation">;</span></pre></td></tr><tr><td data-num="3"></td><td><pre>    <span class="token property">height</span><span class="token punctuation">:</span> 100px<span class="token punctuation">;</span></pre></td></tr><tr><td data-num="4"></td><td><pre>    <span class="token property">background-color</span><span class="token punctuation">:</span> red<span class="token punctuation">;</span></pre></td></tr><tr><td data-num="5"></td><td><pre>    <span class="token property">position</span><span class="token punctuation">:</span> relative<span class="token punctuation">;</span></pre></td></tr><tr><td data-num="6"></td><td><pre>    <span class="token property">animation-name</span><span class="token punctuation">:</span> example<span class="token punctuation">;</span></pre></td></tr><tr><td data-num="7"></td><td><pre>    <span class="token property">animation-duration</span><span class="token punctuation">:</span> 4s<span class="token punctuation">;</span></pre></td></tr><tr><td data-num="8"></td><td><pre>    <span class="token property">animation-direction</span><span class="token punctuation">:</span> reverse<span class="token punctuation">;</span></pre></td></tr><tr><td data-num="9"></td><td><pre><span class="token punctuation">&#125;</span></pre></td></tr></table></figure><div class="links"><div class="item" title="Example 2" style="--block-color:#e9546b;"><span class="exturl image" data-url="aHR0cHM6Ly93d3cudzNzY2hvb2xzLmNvbS9jc3MvdHJ5aXQuYXNwP2ZpbGVuYW1lPXRyeWNzczNfYW5pbWF0aW9uX2RpcmVjdGlvbjI=" data-background-image="/images/404.png"></span>          <div class="info">          <span class="exturl title" data-url="aHR0cHM6Ly93d3cudzNzY2hvb2xzLmNvbS9jc3MvdHJ5aXQuYXNwP2ZpbGVuYW1lPXRyeWNzczNfYW5pbWF0aW9uX2RpcmVjdGlvbjI=">Example 2</span>          <p class="desc">https://www.w3schools.com/css/tryit.asp?filename=trycss3_animation_direction2</p>          </div></div><div class="item" title="Example 3" style="--block-color:#9d5b8b;"><span class="exturl image" data-url="aHR0cHM6Ly93d3cudzNzY2hvb2xzLmNvbS9jc3MvdHJ5aXQuYXNwP2ZpbGVuYW1lPXRyeWNzczNfYW5pbWF0aW9uX2RpcmVjdGlvbjM=" data-background-image="/images/404.png"></span>          <div class="info">          <span class="exturl title" data-url="aHR0cHM6Ly93d3cudzNzY2hvb2xzLmNvbS9jc3MvdHJ5aXQuYXNwP2ZpbGVuYW1lPXRyeWNzczNfYW5pbWF0aW9uX2RpcmVjdGlvbjM=">Example 3</span>          <p class="desc">https://www.w3schools.com/css/tryit.asp?filename=trycss3_animation_direction3</p>          </div></div></div><h2 id="the-speed-curve-of-the-animation"><a class="anchor" href="#the-speed-curve-of-the-animation">#</a> The Speed Curve of the Animation</h2><div class="note info"><p><code>animation-timing-function</code>  指定動畫的速度曲線。</p></div><div class="note danger"><p><strong>Value</strong></p><ul><li><code>ease</code>  - default(slow start, then fast, then end slowly).</li><li><code>linear</code>  - same speed from start to end.</li><li><code>ease-in</code>  - slow start.</li><li><code>ease-out</code>  - slow end.</li><li><code>ease-in-out</code>  - slow start and end.</li><li><code>cubic-bezier(n, n, n, n)</code>  lets you define your own.</li></ul></div><div class="links"><div class="item" title="Example"><span class="exturl image" data-url="aHR0cHM6Ly93d3cudzNzY2hvb2xzLmNvbS9jc3MvdHJ5aXQuYXNwP2ZpbGVuYW1lPXRyeWNzczNfYW5pbWF0aW9uX3NwZWVk" data-background-image="/images/404.png"></span>          <div class="info">          <span class="exturl title" data-url="aHR0cHM6Ly93d3cudzNzY2hvb2xzLmNvbS9jc3MvdHJ5aXQuYXNwP2ZpbGVuYW1lPXRyeWNzczNfYW5pbWF0aW9uX3NwZWVk">Example</span>          <p class="desc">https://www.w3schools.com/css/tryit.asp?filename=trycss3_animation_speed</p>          </div></div></div><h2 id="the-fill-mode-for-an-animation"><a class="anchor" href="#the-fill-mode-for-an-animation">#</a> The fill-mode For an Animation</h2><div class="note info"><p>在播放第一個 <code>@keyframes</code>  之前或播放最後一個 <code>@keyframes</code>  之後，CSS 動畫不會影響元素。 <code>animation-fill-mode</code>  可以覆蓋此行為。</p><p><code>animation-fill-mode</code>  指定動畫未播放時 (開始前、結束後或兩者) 目標元素的樣式。</p></div><div class="note danger"><p><strong>Value</strong></p><ul><li><code>none</code>  - Default value. 動畫在執行前後不會對元素應用任何樣式。</li><li><code>forwards</code>  - 元素將保留最後一個 <code>@keyframes</code>  設置的樣式值 (取決於動畫方向和動畫迭代次數)。</li><li><code>backwards</code>  - 元素將獲得第一個 <code>@keyframes</code>  設置的樣式值（取決於動畫方向），並在動畫延遲期間保留它。</li><li><code>both</code>  - 動畫將遵循向前和向後的規則，在兩個方向上擴展動畫屬性。</li></ul></div><div class="links"><div class="item" title="Example 1"><span class="exturl image" data-url="aHR0cHM6Ly93d3cudzNzY2hvb2xzLmNvbS9jc3MvdHJ5aXQuYXNwP2ZpbGVuYW1lPXRyeWNzczNfYW5pbWF0aW9uX2ZpbGwtbW9kZQ==" data-background-image="/images/404.png"></span>          <div class="info">          <span class="exturl title" data-url="aHR0cHM6Ly93d3cudzNzY2hvb2xzLmNvbS9jc3MvdHJ5aXQuYXNwP2ZpbGVuYW1lPXRyeWNzczNfYW5pbWF0aW9uX2ZpbGwtbW9kZQ==">Example 1</span>          <p class="desc">讓元素保留最後一個動畫樣式</p>          </div></div><div class="item" title="Example 2"><span class="exturl image" data-url="aHR0cHM6Ly93d3cudzNzY2hvb2xzLmNvbS9jc3MvdHJ5aXQuYXNwP2ZpbGVuYW1lPXRyeWNzczNfYW5pbWF0aW9uX2ZpbGwtbW9kZTI=" data-background-image="/images/404.png"></span>          <div class="info">          <span class="exturl title" data-url="aHR0cHM6Ly93d3cudzNzY2hvb2xzLmNvbS9jc3MvdHJ5aXQuYXNwP2ZpbGVuYW1lPXRyeWNzczNfYW5pbWF0aW9uX2ZpbGwtbW9kZTI=">Example 2</span>          <p class="desc">讓元素獲得最後一個動畫樣式</p>          </div></div><div class="item" title="Example 3"><span class="exturl image" data-url="aHR0cHM6Ly93d3cudzNzY2hvb2xzLmNvbS9jc3MvdHJ5aXQuYXNwP2ZpbGVuYW1lPXRyeWNzczNfYW5pbWF0aW9uX2ZpbGwtbW9kZTM=" data-background-image="/images/404.png"></span>          <div class="info">          <span class="exturl title" data-url="aHR0cHM6Ly93d3cudzNzY2hvb2xzLmNvbS9jc3MvdHJ5aXQuYXNwP2ZpbGVuYW1lPXRyeWNzczNfYW5pbWF0aW9uX2ZpbGwtbW9kZTM=">Example 3</span>          <p class="desc">讓元素在動畫開始前獲取第一個設置的樣式，並在動畫結束時保留最後一個樣式</p>          </div></div></div><h2 id="animation-shorthand-property"><a class="anchor" href="#animation-shorthand-property">#</a> Animation Shorthand Property</h2><figure class="highlight css"><figcaption data-lang="CSS"></figcaption><table><tr><td data-num="1"></td><td><pre><span class="token property">animation</span><span class="token punctuation">:</span> animation-name animation-duration animation-timing-function animation-delay animation-iteration-count animation-direction<span class="token punctuation">;</span></pre></td></tr><tr><td data-num="2"></td><td><pre></pre></td></tr><tr><td data-num="3"></td><td><pre><span class="token selector">div</span> <span class="token punctuation">&#123;</span></pre></td></tr><tr><td data-num="4"></td><td><pre>    <span class="token property">animation</span><span class="token punctuation">:</span> example 5s linear 2s infinite alternate<span class="token punctuation">;</span></pre></td></tr><tr><td data-num="5"></td><td><pre><span class="token punctuation">&#125;</span></pre></td></tr></table></figure>]]></content>
      
      
      <categories>
          
          <category> Web </category>
          
          <category> CSS </category>
          
      </categories>
      
      
        <tags>
            
            <tag> Web </tag>
            
            <tag> CSS </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>CSS - RWD (Responsive Web Design)</title>
      <link href="/2023/04/18/Web/CSS/CSS%20-%20RWD%20(Responsive%20Web%20Design)/"/>
      <url>/2023/04/18/Web/CSS/CSS%20-%20RWD%20(Responsive%20Web%20Design)/</url>
      
        <content type="html"><![CDATA[<div class="note info"><p><strong>RWD (響應式網頁)</strong> 讓我們的網頁在各裝置都能漂亮的呈現，能夠適應不同大小的螢幕。</p></div><h2 id="rwd-viewport"><a class="anchor" href="#rwd-viewport">#</a> RWD Viewport</h2><div class="note info"><p>就是視窗的意思，使用者能看到的頁面範圍。</p></div><h3 id="setting-the-viewport"><a class="anchor" href="#setting-the-viewport">#</a> Setting the Viewport</h3><p>使用 HTML <font> <code>&lt;meta&gt;</code> </font> 標籤。</p><figure class="highlight css"><figcaption data-lang="CSS"></figcaption><table><tr><td data-num="1"></td><td><pre>&lt;meta name=<span class="token string">"viewport"</span> content=<span class="token string">"width=device-width, initial-scale=1.0"</span>></pre></td></tr></table></figure><div class="note danger no-icon"><ul><li><font> <code>width=device-width</code> </font> 設定視窗的寬度跟隨裝置的螢幕寬度。</li><li><font> <code>initial-scale=1.0</code> </font> 設定初始的視窗縮放比例，1 表示為 100%。</li></ul></div><h2 id="grid-view"><a class="anchor" href="#grid-view">#</a> Grid View</h2><div class="links"><div class="item" title="grid 小遊戲"><span class="exturl image" data-url="aHR0cHM6Ly9jc3NncmlkZ2FyZGVuLmNvbS8jemgtdHc=" data-background-image="/images/404.png"></span>          <div class="info">          <span class="exturl title" data-url="aHR0cHM6Ly9jc3NncmlkZ2FyZGVuLmNvbS8jemgtdHc=">grid 小遊戲</span>          <p class="desc">https://cssgridgarden.com/#zh-tw</p>          </div></div></div><p>我們將網頁分成<strong>網格 (rows, Columns)</strong> 來看，這讓我們更方便的排版。</p><p><img data-src="https://i.imgur.com/fKyOOXR.png" alt=""></p><blockquote><p><span class="exturl" data-url="aHR0cHM6Ly93d3cudzNzY2hvb2xzLmNvbS9jc3MvdHJ5cmVzcG9uc2l2ZV9ncmlkLmh0bQ==">A responsive grid-view often has 12 columns, and has a total width of 100%, and will shrink and expand as you resize the browser window.</span></p></blockquote><h3 id="building-a-responsive-grid-view"><a class="anchor" href="#building-a-responsive-grid-view">#</a> Building a Responsive Grid-View</h3><p>首先，將所有 HTML 元素都設置成 <font> <code>border-box</code> </font>，確保 <em><strong>padding</strong></em> 和 <em><strong>border</strong></em> 都將算在總寬度和總高度內。</p><figure class="highlight css"><figcaption data-lang="CSS"></figcaption><table><tr><td data-num="1"></td><td><pre><span class="token selector">*</span> <span class="token punctuation">&#123;</span></pre></td></tr><tr><td data-num="2"></td><td><pre>    <span class="token property">box-sizing</span><span class="token punctuation">:</span> border-box<span class="token punctuation">;</span></pre></td></tr><tr><td data-num="3"></td><td><pre><span class="token punctuation">&#125;</span></pre></td></tr></table></figure><p>設置 12 行的方法如下:</p><ul><li>每行寬度: 100% / 12 columns = 8.33%</li><li>建立一個類別定義 12 種寬度 <font> <code>class = &quot;col-&quot;</code> </font>，用數字編號來代表要延伸幾格。</li></ul><p><span class="exturl" data-url="aHR0cHM6Ly93d3cudzNzY2hvb2xzLmNvbS9jc3MvdHJ5aXQuYXNwP2ZpbGVuYW1lPXRyeXJlc3BvbnNpdmVfY29scw==">Example</span></p><p>一次定義好每個寬度都要有的樣式。</p><figure class="highlight css"><figcaption data-lang="CSS"></figcaption><table><tr><td data-num="1"></td><td><pre><span class="token selector">[class*="col-"]</span> <span class="token punctuation">&#123;</span></pre></td></tr><tr><td data-num="2"></td><td><pre>  <span class="token property">float</span><span class="token punctuation">:</span> left<span class="token punctuation">;</span></pre></td></tr><tr><td data-num="3"></td><td><pre>  <span class="token property">padding</span><span class="token punctuation">:</span> 15px<span class="token punctuation">;</span></pre></td></tr><tr><td data-num="4"></td><td><pre>  <span class="token property">border</span><span class="token punctuation">:</span> 1px solid red<span class="token punctuation">;</span></pre></td></tr><tr><td data-num="5"></td><td><pre><span class="token punctuation">&#125;</span></pre></td></tr></table></figure><p>數字編號表示拓展幾格。</p><figure class="highlight css"><figcaption data-lang="CSS"></figcaption><table><tr><td data-num="1"></td><td><pre><span class="token selector">.col-1</span> <span class="token punctuation">&#123;</span><span class="token property">width</span><span class="token punctuation">:</span> 8.33%<span class="token punctuation">;</span><span class="token punctuation">&#125;</span></pre></td></tr><tr><td data-num="2"></td><td><pre><span class="token selector">.col-2</span> <span class="token punctuation">&#123;</span><span class="token property">width</span><span class="token punctuation">:</span> 16.66%<span class="token punctuation">;</span><span class="token punctuation">&#125;</span></pre></td></tr><tr><td data-num="3"></td><td><pre><span class="token selector">.col-3</span> <span class="token punctuation">&#123;</span><span class="token property">width</span><span class="token punctuation">:</span> 25%<span class="token punctuation">;</span><span class="token punctuation">&#125;</span></pre></td></tr><tr><td data-num="4"></td><td><pre><span class="token selector">.col-4</span> <span class="token punctuation">&#123;</span><span class="token property">width</span><span class="token punctuation">:</span> 33.33%<span class="token punctuation">;</span><span class="token punctuation">&#125;</span></pre></td></tr><tr><td data-num="5"></td><td><pre><span class="token selector">.col-5</span> <span class="token punctuation">&#123;</span><span class="token property">width</span><span class="token punctuation">:</span> 41.66%<span class="token punctuation">;</span><span class="token punctuation">&#125;</span></pre></td></tr><tr><td data-num="6"></td><td><pre><span class="token selector">.col-6</span> <span class="token punctuation">&#123;</span><span class="token property">width</span><span class="token punctuation">:</span> 50%<span class="token punctuation">;</span><span class="token punctuation">&#125;</span></pre></td></tr><tr><td data-num="7"></td><td><pre><span class="token selector">.col-7</span> <span class="token punctuation">&#123;</span><span class="token property">width</span><span class="token punctuation">:</span> 58.33%<span class="token punctuation">;</span><span class="token punctuation">&#125;</span></pre></td></tr><tr><td data-num="8"></td><td><pre><span class="token selector">.col-8</span> <span class="token punctuation">&#123;</span><span class="token property">width</span><span class="token punctuation">:</span> 66.66%<span class="token punctuation">;</span><span class="token punctuation">&#125;</span></pre></td></tr><tr><td data-num="9"></td><td><pre><span class="token selector">.col-9</span> <span class="token punctuation">&#123;</span><span class="token property">width</span><span class="token punctuation">:</span> 75%<span class="token punctuation">;</span><span class="token punctuation">&#125;</span></pre></td></tr><tr><td data-num="10"></td><td><pre><span class="token selector">.col-10</span> <span class="token punctuation">&#123;</span><span class="token property">width</span><span class="token punctuation">:</span> 83.33%<span class="token punctuation">;</span><span class="token punctuation">&#125;</span></pre></td></tr><tr><td data-num="11"></td><td><pre><span class="token selector">.col-11</span> <span class="token punctuation">&#123;</span><span class="token property">width</span><span class="token punctuation">:</span> 91.66%<span class="token punctuation">;</span><span class="token punctuation">&#125;</span></pre></td></tr><tr><td data-num="12"></td><td><pre><span class="token selector">.col-12</span> <span class="token punctuation">&#123;</span><span class="token property">width</span><span class="token punctuation">:</span> 100%<span class="token punctuation">;</span><span class="token punctuation">&#125;</span></pre></td></tr></table></figure><p>由於 columns 都設置了 <font> <code>floating: left</code> </font> 的關係，其他元素將會當他們不存在。為了避免這種狀況，我們設置以下樣式來<span class="exturl" data-url="aHR0cHM6Ly9oYWNrbWQuaW8vQENoaWVuSS9jc3NfZmxvYXQjVGhlLWNsZWFyZml4LUhhY2s=">清除浮動</span>。</p><figure class="highlight css"><figcaption data-lang="CSS"></figcaption><table><tr><td data-num="1"></td><td><pre><span class="token selector">row::after</span> <span class="token punctuation">&#123;</span></pre></td></tr><tr><td data-num="2"></td><td><pre>    <span class="token property">content</span><span class="token punctuation">:</span> <span class="token string">""</span><span class="token punctuation">;</span></pre></td></tr><tr><td data-num="3"></td><td><pre>    <span class="token property">clear</span><span class="token punctuation">:</span> both<span class="token punctuation">;</span></pre></td></tr><tr><td data-num="4"></td><td><pre>    <span class="token property">display</span><span class="token punctuation">:</span> table<span class="token punctuation">;</span></pre></td></tr><tr><td data-num="5"></td><td><pre><span class="token punctuation">&#125;</span></pre></td></tr></table></figure><p><span class="exturl" data-url="aHR0cHM6Ly93d3cudzNzY2hvb2xzLmNvbS9jc3MvdHJ5aXQuYXNwP2ZpbGVuYW1lPXRyeXJlc3BvbnNpdmVfc3R5bGVz">Example</span></p><h2 id="media-query"><a class="anchor" href="#media-query">#</a> Media Query</h2><p><font> <code>@media</code> </font> 區塊定義某些條件下要套用的 CSS 樣式。</p><figure class="highlight css"><figcaption data-lang="CSS"><span>Example</span><span class="exturl" data-url="aHR0cHM6Ly93d3cudzNzY2hvb2xzLmNvbS9jc3MvdHJ5aXQuYXNwP2ZpbGVuYW1lPXRyeXJlc3BvbnNpdmVfbWVkaWFxdWVyeQ==">links</span></figcaption><table><tr><td data-num="1"></td><td><pre><span class="token atrule"><span class="token rule">@media</span> <span class="token keyword">only</span> screen <span class="token keyword">and</span> <span class="token punctuation">(</span><span class="token property">max-width</span><span class="token punctuation">:</span> 600px<span class="token punctuation">)</span></span> <span class="token punctuation">&#123;</span></pre></td></tr><tr><td data-num="2"></td><td><pre>    <span class="token selector">body</span> <span class="token punctuation">&#123;</span></pre></td></tr><tr><td data-num="3"></td><td><pre>        <span class="token property">background-color</span><span class="token punctuation">:</span> lightblue<span class="token punctuation">;</span></pre></td></tr><tr><td data-num="4"></td><td><pre>    <span class="token punctuation">&#125;</span></pre></td></tr><tr><td data-num="5"></td><td><pre><span class="token punctuation">&#125;</span></pre></td></tr></table></figure><h3 id="add-a-breakpoint"><a class="anchor" href="#add-a-breakpoint">#</a> Add a Breakpoint</h3><p>設置<strong>中斷點</strong>來區隔不同裝置上要套用的樣式。</p><figure class="highlight css"><figcaption data-lang="CSS"><span>Example</span><span class="exturl" data-url="aHR0cHM6Ly93d3cudzNzY2hvb2xzLmNvbS9jc3MvdHJ5aXQuYXNwP2ZpbGVuYW1lPXRyeXJlc3BvbnNpdmVfYnJlYWtwb2ludHM=">links</span></figcaption><table><tr><td data-num="1"></td><td><pre><span class="token comment">/* For desktop: */</span></pre></td></tr><tr><td data-num="2"></td><td><pre><span class="token selector">.col-1</span> <span class="token punctuation">&#123;</span><span class="token property">width</span><span class="token punctuation">:</span> 8.33%<span class="token punctuation">;</span><span class="token punctuation">&#125;</span></pre></td></tr><tr><td data-num="3"></td><td><pre><span class="token selector">.col-2</span> <span class="token punctuation">&#123;</span><span class="token property">width</span><span class="token punctuation">:</span> 16.66%<span class="token punctuation">;</span><span class="token punctuation">&#125;</span></pre></td></tr><tr><td data-num="4"></td><td><pre><span class="token selector">.col-3</span> <span class="token punctuation">&#123;</span><span class="token property">width</span><span class="token punctuation">:</span> 25%<span class="token punctuation">;</span><span class="token punctuation">&#125;</span></pre></td></tr><tr><td data-num="5"></td><td><pre><span class="token selector">.col-4</span> <span class="token punctuation">&#123;</span><span class="token property">width</span><span class="token punctuation">:</span> 33.33%<span class="token punctuation">;</span><span class="token punctuation">&#125;</span></pre></td></tr><tr><td data-num="6"></td><td><pre><span class="token selector">.col-5</span> <span class="token punctuation">&#123;</span><span class="token property">width</span><span class="token punctuation">:</span> 41.66%<span class="token punctuation">;</span><span class="token punctuation">&#125;</span></pre></td></tr><tr><td data-num="7"></td><td><pre><span class="token selector">.col-6</span> <span class="token punctuation">&#123;</span><span class="token property">width</span><span class="token punctuation">:</span> 50%<span class="token punctuation">;</span><span class="token punctuation">&#125;</span></pre></td></tr><tr><td data-num="8"></td><td><pre><span class="token selector">.col-7</span> <span class="token punctuation">&#123;</span><span class="token property">width</span><span class="token punctuation">:</span> 58.33%<span class="token punctuation">;</span><span class="token punctuation">&#125;</span></pre></td></tr><tr><td data-num="9"></td><td><pre><span class="token selector">.col-8</span> <span class="token punctuation">&#123;</span><span class="token property">width</span><span class="token punctuation">:</span> 66.66%<span class="token punctuation">;</span><span class="token punctuation">&#125;</span></pre></td></tr><tr><td data-num="10"></td><td><pre><span class="token selector">.col-9</span> <span class="token punctuation">&#123;</span><span class="token property">width</span><span class="token punctuation">:</span> 75%<span class="token punctuation">;</span><span class="token punctuation">&#125;</span></pre></td></tr><tr><td data-num="11"></td><td><pre><span class="token selector">.col-10</span> <span class="token punctuation">&#123;</span><span class="token property">width</span><span class="token punctuation">:</span> 83.33%<span class="token punctuation">;</span><span class="token punctuation">&#125;</span></pre></td></tr><tr><td data-num="12"></td><td><pre><span class="token selector">.col-11</span> <span class="token punctuation">&#123;</span><span class="token property">width</span><span class="token punctuation">:</span> 91.66%<span class="token punctuation">;</span><span class="token punctuation">&#125;</span></pre></td></tr><tr><td data-num="13"></td><td><pre><span class="token selector">.col-12</span> <span class="token punctuation">&#123;</span><span class="token property">width</span><span class="token punctuation">:</span> 100%<span class="token punctuation">;</span><span class="token punctuation">&#125;</span></pre></td></tr><tr><td data-num="14"></td><td><pre></pre></td></tr><tr><td data-num="15"></td><td><pre><span class="token atrule"><span class="token rule">@media</span> <span class="token keyword">only</span> screen <span class="token keyword">and</span> <span class="token punctuation">(</span><span class="token property">max-width</span><span class="token punctuation">:</span> 768px<span class="token punctuation">)</span></span> <span class="token punctuation">&#123;</span></pre></td></tr><tr><td data-num="16"></td><td><pre>  <span class="token comment">/* For mobile phones: */</span></pre></td></tr><tr><td data-num="17"></td><td><pre>  <span class="token selector">[class*="col-"]</span> <span class="token punctuation">&#123;</span></pre></td></tr><tr><td data-num="18"></td><td><pre>    <span class="token property">width</span><span class="token punctuation">:</span> 100%<span class="token punctuation">;</span></pre></td></tr><tr><td data-num="19"></td><td><pre>  <span class="token punctuation">&#125;</span></pre></td></tr><tr><td data-num="20"></td><td><pre><span class="token punctuation">&#125;</span></pre></td></tr></table></figure><p>我們也可以設置多個中斷點來適應更多不同的裝置。</p><figure class="highlight css"><figcaption data-lang="CSS"><span>Example</span><span class="exturl" data-url="aHR0cHM6Ly93d3cudzNzY2hvb2xzLmNvbS9jc3MvdHJ5aXQuYXNwP2ZpbGVuYW1lPXRyeXJlc3BvbnNpdmVfY29sLXM=">links</span></figcaption><table><tr><td data-num="1"></td><td><pre><span class="token comment">/* For mobile phones: */</span></pre></td></tr><tr><td data-num="2"></td><td><pre><span class="token selector">[class*="col-"]</span> <span class="token punctuation">&#123;</span></pre></td></tr><tr><td data-num="3"></td><td><pre>  <span class="token property">width</span><span class="token punctuation">:</span> 100%<span class="token punctuation">;</span></pre></td></tr><tr><td data-num="4"></td><td><pre><span class="token punctuation">&#125;</span></pre></td></tr><tr><td data-num="5"></td><td><pre></pre></td></tr><tr><td data-num="6"></td><td><pre><span class="token atrule"><span class="token rule">@media</span> <span class="token keyword">only</span> screen <span class="token keyword">and</span> <span class="token punctuation">(</span><span class="token property">min-width</span><span class="token punctuation">:</span> 600px<span class="token punctuation">)</span></span> <span class="token punctuation">&#123;</span></pre></td></tr><tr><td data-num="7"></td><td><pre>  <span class="token comment">/* For tablets: */</span></pre></td></tr><tr><td data-num="8"></td><td><pre>  <span class="token selector">.col-s-1</span> <span class="token punctuation">&#123;</span><span class="token property">width</span><span class="token punctuation">:</span> 8.33%<span class="token punctuation">;</span><span class="token punctuation">&#125;</span></pre></td></tr><tr><td data-num="9"></td><td><pre>  <span class="token selector">.col-s-2</span> <span class="token punctuation">&#123;</span><span class="token property">width</span><span class="token punctuation">:</span> 16.66%<span class="token punctuation">;</span><span class="token punctuation">&#125;</span></pre></td></tr><tr><td data-num="10"></td><td><pre>  <span class="token selector">.col-s-3</span> <span class="token punctuation">&#123;</span><span class="token property">width</span><span class="token punctuation">:</span> 25%<span class="token punctuation">;</span><span class="token punctuation">&#125;</span></pre></td></tr><tr><td data-num="11"></td><td><pre>  <span class="token selector">.col-s-4</span> <span class="token punctuation">&#123;</span><span class="token property">width</span><span class="token punctuation">:</span> 33.33%<span class="token punctuation">;</span><span class="token punctuation">&#125;</span></pre></td></tr><tr><td data-num="12"></td><td><pre>  <span class="token selector">.col-s-5</span> <span class="token punctuation">&#123;</span><span class="token property">width</span><span class="token punctuation">:</span> 41.66%<span class="token punctuation">;</span><span class="token punctuation">&#125;</span></pre></td></tr><tr><td data-num="13"></td><td><pre>  <span class="token selector">.col-s-6</span> <span class="token punctuation">&#123;</span><span class="token property">width</span><span class="token punctuation">:</span> 50%<span class="token punctuation">;</span><span class="token punctuation">&#125;</span></pre></td></tr><tr><td data-num="14"></td><td><pre>  <span class="token selector">.col-s-7</span> <span class="token punctuation">&#123;</span><span class="token property">width</span><span class="token punctuation">:</span> 58.33%<span class="token punctuation">;</span><span class="token punctuation">&#125;</span></pre></td></tr><tr><td data-num="15"></td><td><pre>  <span class="token selector">.col-s-8</span> <span class="token punctuation">&#123;</span><span class="token property">width</span><span class="token punctuation">:</span> 66.66%<span class="token punctuation">;</span><span class="token punctuation">&#125;</span></pre></td></tr><tr><td data-num="16"></td><td><pre>  <span class="token selector">.col-s-9</span> <span class="token punctuation">&#123;</span><span class="token property">width</span><span class="token punctuation">:</span> 75%<span class="token punctuation">;</span><span class="token punctuation">&#125;</span></pre></td></tr><tr><td data-num="17"></td><td><pre>  <span class="token selector">.col-s-10</span> <span class="token punctuation">&#123;</span><span class="token property">width</span><span class="token punctuation">:</span> 83.33%<span class="token punctuation">;</span><span class="token punctuation">&#125;</span></pre></td></tr><tr><td data-num="18"></td><td><pre>  <span class="token selector">.col-s-11</span> <span class="token punctuation">&#123;</span><span class="token property">width</span><span class="token punctuation">:</span> 91.66%<span class="token punctuation">;</span><span class="token punctuation">&#125;</span></pre></td></tr><tr><td data-num="19"></td><td><pre>  <span class="token selector">.col-s-12</span> <span class="token punctuation">&#123;</span><span class="token property">width</span><span class="token punctuation">:</span> 100%<span class="token punctuation">;</span><span class="token punctuation">&#125;</span></pre></td></tr><tr><td data-num="20"></td><td><pre><span class="token punctuation">&#125;</span></pre></td></tr><tr><td data-num="21"></td><td><pre></pre></td></tr><tr><td data-num="22"></td><td><pre><span class="token atrule"><span class="token rule">@media</span> <span class="token keyword">only</span> screen <span class="token keyword">and</span> <span class="token punctuation">(</span><span class="token property">min-width</span><span class="token punctuation">:</span> 768px<span class="token punctuation">)</span></span> <span class="token punctuation">&#123;</span></pre></td></tr><tr><td data-num="23"></td><td><pre>  <span class="token comment">/* For desktop: */</span></pre></td></tr><tr><td data-num="24"></td><td><pre>  <span class="token selector">.col-1</span> <span class="token punctuation">&#123;</span><span class="token property">width</span><span class="token punctuation">:</span> 8.33%<span class="token punctuation">;</span><span class="token punctuation">&#125;</span></pre></td></tr><tr><td data-num="25"></td><td><pre>  <span class="token selector">.col-2</span> <span class="token punctuation">&#123;</span><span class="token property">width</span><span class="token punctuation">:</span> 16.66%<span class="token punctuation">;</span><span class="token punctuation">&#125;</span></pre></td></tr><tr><td data-num="26"></td><td><pre>  <span class="token selector">.col-3</span> <span class="token punctuation">&#123;</span><span class="token property">width</span><span class="token punctuation">:</span> 25%<span class="token punctuation">;</span><span class="token punctuation">&#125;</span></pre></td></tr><tr><td data-num="27"></td><td><pre>  <span class="token selector">.col-4</span> <span class="token punctuation">&#123;</span><span class="token property">width</span><span class="token punctuation">:</span> 33.33%<span class="token punctuation">;</span><span class="token punctuation">&#125;</span></pre></td></tr><tr><td data-num="28"></td><td><pre>  <span class="token selector">.col-5</span> <span class="token punctuation">&#123;</span><span class="token property">width</span><span class="token punctuation">:</span> 41.66%<span class="token punctuation">;</span><span class="token punctuation">&#125;</span></pre></td></tr><tr><td data-num="29"></td><td><pre>  <span class="token selector">.col-6</span> <span class="token punctuation">&#123;</span><span class="token property">width</span><span class="token punctuation">:</span> 50%<span class="token punctuation">;</span><span class="token punctuation">&#125;</span></pre></td></tr><tr><td data-num="30"></td><td><pre>  <span class="token selector">.col-7</span> <span class="token punctuation">&#123;</span><span class="token property">width</span><span class="token punctuation">:</span> 58.33%<span class="token punctuation">;</span><span class="token punctuation">&#125;</span></pre></td></tr><tr><td data-num="31"></td><td><pre>  <span class="token selector">.col-8</span> <span class="token punctuation">&#123;</span><span class="token property">width</span><span class="token punctuation">:</span> 66.66%<span class="token punctuation">;</span><span class="token punctuation">&#125;</span></pre></td></tr><tr><td data-num="32"></td><td><pre>  <span class="token selector">.col-9</span> <span class="token punctuation">&#123;</span><span class="token property">width</span><span class="token punctuation">:</span> 75%<span class="token punctuation">;</span><span class="token punctuation">&#125;</span></pre></td></tr><tr><td data-num="33"></td><td><pre>  <span class="token selector">.col-10</span> <span class="token punctuation">&#123;</span><span class="token property">width</span><span class="token punctuation">:</span> 83.33%<span class="token punctuation">;</span><span class="token punctuation">&#125;</span></pre></td></tr><tr><td data-num="34"></td><td><pre>  <span class="token selector">.col-11</span> <span class="token punctuation">&#123;</span><span class="token property">width</span><span class="token punctuation">:</span> 91.66%<span class="token punctuation">;</span><span class="token punctuation">&#125;</span></pre></td></tr><tr><td data-num="35"></td><td><pre>  <span class="token selector">.col-12</span> <span class="token punctuation">&#123;</span><span class="token property">width</span><span class="token punctuation">:</span> 100%<span class="token punctuation">;</span><span class="token punctuation">&#125;</span></pre></td></tr><tr><td data-num="36"></td><td><pre><span class="token punctuation">&#125;</span></pre></td></tr></table></figure><h3 id="typical-device-breakpoints"><a class="anchor" href="#typical-device-breakpoints">#</a> Typical Device Breakpoints</h3><p>市面上大大小小的裝置太多了，很難準確定義出精準的中斷點，這裡有五個比較簡單區分的中斷點。</p><figure class="highlight css"><figcaption data-lang="CSS"><span>Example</span><span class="exturl" data-url="aHR0cHM6Ly93d3cudzNzY2hvb2xzLmNvbS9jc3MvdHJ5aXQuYXNwP2ZpbGVuYW1lPXRyeXJlc3BvbnNpdmVfbWVkaWFxdWVyeV9icmVha3BvaW50cw==">links</span></figcaption><table><tr><td data-num="1"></td><td><pre><span class="token comment">/* Extra small devices (phones, 600px and down) */</span></pre></td></tr><tr><td data-num="2"></td><td><pre><span class="token atrule"><span class="token rule">@media</span> <span class="token keyword">only</span> screen <span class="token keyword">and</span> <span class="token punctuation">(</span><span class="token property">max-width</span><span class="token punctuation">:</span> 600px<span class="token punctuation">)</span></span> <span class="token punctuation">&#123;</span>...<span class="token punctuation">&#125;</span></pre></td></tr><tr><td data-num="3"></td><td><pre></pre></td></tr><tr><td data-num="4"></td><td><pre><span class="token comment">/* Small devices (portrait tablets and large phones, 600px and up) */</span></pre></td></tr><tr><td data-num="5"></td><td><pre><span class="token atrule"><span class="token rule">@media</span> <span class="token keyword">only</span> screen <span class="token keyword">and</span> <span class="token punctuation">(</span><span class="token property">min-width</span><span class="token punctuation">:</span> 600px<span class="token punctuation">)</span></span> <span class="token punctuation">&#123;</span>...<span class="token punctuation">&#125;</span></pre></td></tr><tr><td data-num="6"></td><td><pre></pre></td></tr><tr><td data-num="7"></td><td><pre><span class="token comment">/* Medium devices (landscape tablets, 768px and up) */</span></pre></td></tr><tr><td data-num="8"></td><td><pre><span class="token atrule"><span class="token rule">@media</span> <span class="token keyword">only</span> screen <span class="token keyword">and</span> <span class="token punctuation">(</span><span class="token property">min-width</span><span class="token punctuation">:</span> 768px<span class="token punctuation">)</span></span> <span class="token punctuation">&#123;</span>...<span class="token punctuation">&#125;</span></pre></td></tr><tr><td data-num="9"></td><td><pre></pre></td></tr><tr><td data-num="10"></td><td><pre><span class="token comment">/* Large devices (laptops/desktops, 992px and up) */</span></pre></td></tr><tr><td data-num="11"></td><td><pre><span class="token atrule"><span class="token rule">@media</span> <span class="token keyword">only</span> screen <span class="token keyword">and</span> <span class="token punctuation">(</span><span class="token property">min-width</span><span class="token punctuation">:</span> 992px<span class="token punctuation">)</span></span> <span class="token punctuation">&#123;</span>...<span class="token punctuation">&#125;</span></pre></td></tr><tr><td data-num="12"></td><td><pre></pre></td></tr><tr><td data-num="13"></td><td><pre><span class="token comment">/* Extra large devices (large laptops and desktops, 1200px and up) */</span></pre></td></tr><tr><td data-num="14"></td><td><pre><span class="token atrule"><span class="token rule">@media</span> <span class="token keyword">only</span> screen <span class="token keyword">and</span> <span class="token punctuation">(</span><span class="token property">min-width</span><span class="token punctuation">:</span> 1200px<span class="token punctuation">)</span></span> <span class="token punctuation">&#123;</span>...<span class="token punctuation">&#125;</span></pre></td></tr></table></figure><h3 id="orientation-portrait-landscape"><a class="anchor" href="#orientation-portrait-landscape">#</a> Orientation: Portrait / Landscape</h3><div class="note info"><ul><li><font> <code>portrait</code> </font> : 當螢幕的<strong>寬度小於高度</strong>的時候套用。</li><li><font> <code>landscape</code> </font> : 當螢幕的<strong>寬度大於高度</strong>的時候套用。</li></ul></div><figure class="highlight css"><figcaption data-lang="CSS"><span>Example</span><span class="exturl" data-url="aHR0cHM6Ly93d3cudzNzY2hvb2xzLmNvbS9jc3MvdHJ5aXQuYXNwP2ZpbGVuYW1lPXRyeXJlc3BvbnNpdmVfbWVkaWFxdWVyeV9vcmllbnRhdGlvbjI=">links</span></figcaption><table><tr><td data-num="1"></td><td><pre><span class="token atrule"><span class="token rule">@media</span> <span class="token keyword">only</span> screen <span class="token keyword">and</span> <span class="token punctuation">(</span><span class="token property">orientation</span><span class="token punctuation">:</span> landscape<span class="token punctuation">)</span></span> <span class="token punctuation">&#123;</span></pre></td></tr><tr><td data-num="2"></td><td><pre>  <span class="token selector">body</span> <span class="token punctuation">&#123;</span></pre></td></tr><tr><td data-num="3"></td><td><pre>    <span class="token property">background-color</span><span class="token punctuation">:</span> lightblue<span class="token punctuation">;</span></pre></td></tr><tr><td data-num="4"></td><td><pre>  <span class="token punctuation">&#125;</span></pre></td></tr><tr><td data-num="5"></td><td><pre><span class="token punctuation">&#125;</span></pre></td></tr></table></figure><h3 id="hide-elements"><a class="anchor" href="#hide-elements">#</a> Hide Elements</h3><ul><li>另一個常用的方法就是在不同螢幕大小下，<strong>顯示 / 隱藏</strong>元素。</li><li>利用 <font> <code>display</code> </font>。</li></ul><figure class="highlight css"><figcaption data-lang="CSS"><span>Example</span><span class="exturl" data-url="aHR0cHM6Ly93d3cudzNzY2hvb2xzLmNvbS9jc3MvdHJ5aXQuYXNwP2ZpbGVuYW1lPXRyeWNzc19tZWRpYXF1ZXJpZXNfaGlkZTI=">links</span></figcaption><table><tr><td data-num="1"></td><td><pre><span class="token comment">/* If the screen size is 600px wide or less, hide the element */</span></pre></td></tr><tr><td data-num="2"></td><td><pre><span class="token atrule"><span class="token rule">@media</span> <span class="token keyword">only</span> screen <span class="token keyword">and</span> <span class="token punctuation">(</span><span class="token property">max-width</span><span class="token punctuation">:</span> 600px<span class="token punctuation">)</span></span> <span class="token punctuation">&#123;</span></pre></td></tr><tr><td data-num="3"></td><td><pre>  <span class="token selector">div.example</span> <span class="token punctuation">&#123;</span></pre></td></tr><tr><td data-num="4"></td><td><pre>    <span class="token property">display</span><span class="token punctuation">:</span> none<span class="token punctuation">;</span></pre></td></tr><tr><td data-num="5"></td><td><pre>  <span class="token punctuation">&#125;</span></pre></td></tr><tr><td data-num="6"></td><td><pre><span class="token punctuation">&#125;</span></pre></td></tr></table></figure><h3 id="change-font-size"><a class="anchor" href="#change-font-size">#</a> Change Font Size</h3><p>當然，調整字體大小也是一定要的。</p><figure class="highlight css"><figcaption data-lang="CSS"><span>Example</span><span class="exturl" data-url="aHR0cHM6Ly93d3cudzNzY2hvb2xzLmNvbS9jc3MvdHJ5aXQuYXNwP2ZpbGVuYW1lPXRyeWNzc19tZWRpYXF1ZXJpZXNfZm9udHNpemUy">links</span></figcaption><table><tr><td data-num="1"></td><td><pre><span class="token comment">/* If the screen size is 601px or more, set the font-size of &lt;div> to 80px */</span></pre></td></tr><tr><td data-num="2"></td><td><pre><span class="token atrule"><span class="token rule">@media</span> <span class="token keyword">only</span> screen <span class="token keyword">and</span> <span class="token punctuation">(</span><span class="token property">min-width</span><span class="token punctuation">:</span> 601px<span class="token punctuation">)</span></span> <span class="token punctuation">&#123;</span></pre></td></tr><tr><td data-num="3"></td><td><pre>  <span class="token selector">div.example</span> <span class="token punctuation">&#123;</span></pre></td></tr><tr><td data-num="4"></td><td><pre>    <span class="token property">font-size</span><span class="token punctuation">:</span> 80px<span class="token punctuation">;</span></pre></td></tr><tr><td data-num="5"></td><td><pre>  <span class="token punctuation">&#125;</span></pre></td></tr><tr><td data-num="6"></td><td><pre><span class="token punctuation">&#125;</span></pre></td></tr><tr><td data-num="7"></td><td><pre></pre></td></tr><tr><td data-num="8"></td><td><pre><span class="token comment">/* If the screen size is 600px or less, set the font-size of &lt;div> to 30px */</span></pre></td></tr><tr><td data-num="9"></td><td><pre><span class="token atrule"><span class="token rule">@media</span> <span class="token keyword">only</span> screen <span class="token keyword">and</span> <span class="token punctuation">(</span><span class="token property">max-width</span><span class="token punctuation">:</span> 600px<span class="token punctuation">)</span></span> <span class="token punctuation">&#123;</span></pre></td></tr><tr><td data-num="10"></td><td><pre>  <span class="token selector">div.example</span> <span class="token punctuation">&#123;</span></pre></td></tr><tr><td data-num="11"></td><td><pre>    <span class="token property">font-size</span><span class="token punctuation">:</span> 30px<span class="token punctuation">;</span></pre></td></tr><tr><td data-num="12"></td><td><pre>  <span class="token punctuation">&#125;</span></pre></td></tr><tr><td data-num="13"></td><td><pre><span class="token punctuation">&#125;</span></pre></td></tr></table></figure>]]></content>
      
      
      <categories>
          
          <category> Web </category>
          
          <category> CSS </category>
          
      </categories>
      
      
        <tags>
            
            <tag> Web </tag>
            
            <tag> CSS </tag>
            
            <tag> RWD </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>1768. Merge Strings Alternately</title>
      <link href="/2023/04/18/Coding/leetcode/Easy/1768%20Merge%20Strings%20Alternately/"/>
      <url>/2023/04/18/Coding/leetcode/Easy/1768%20Merge%20Strings%20Alternately/</url>
      
        <content type="html"><![CDATA[<p>⭐️</p><h2 id="題目敘述"><a class="anchor" href="#題目敘述">#</a> <span class="exturl" data-url="aHR0cHM6Ly9sZWV0Y29kZS5jb20vcHJvYmxlbXMvbWVyZ2Utc3RyaW5ncy1hbHRlcm5hdGVseS8=">題目敘述</span></h2><p>You are given two strings  <code>word1</code>  and  <code>word2</code> . Merge the strings by adding letters in alternating order, starting with  <code>word1</code> . If a string is longer than the other, append the additional letters onto the end of the merged string.</p><p>Return <em>the merged string</em>.</p><h3 id="example-1"><a class="anchor" href="#example-1">#</a> Example 1</h3><blockquote><p><strong>Input</strong>: word1 = “abc”, word2 = “pqr”<br><strong>Output</strong>: “apbqcr”<br><strong>Explanation</strong>: The merged string will be merged as so:<br>word1:  a   b   c<br>word2:    p   q   r<br>merged: a p b q c r</p></blockquote><h3 id="example-2"><a class="anchor" href="#example-2">#</a> Example 2</h3><blockquote><p><strong>Input</strong>: word1 = “ab”, word2 = “pqrs”<br><strong>Output</strong>: “apbqrs”<br><strong>Explanation</strong>: Notice that as word2 is longer, “rs” is appended to the end.<br>word1:  a   b<br>word2:    p   q   r   s<br>merged: a p b q   r   s</p></blockquote><h3 id="example-3"><a class="anchor" href="#example-3">#</a> Example 3</h3><blockquote><p><strong>Input</strong>: word1 = “abcd”, word2 = “pq”<br><strong>Output</strong>: “apbqcd”<br><strong>Explanation</strong>: Notice that as word1 is longer, “cd” is appended to the end.<br>word1:  a   b   c   d<br>word2:    p   q<br>merged: a p b q c   d</p></blockquote><h2 id="程式碼"><a class="anchor" href="#程式碼">#</a> 程式碼</h2><div class="tab" data-id="code" data-title="cpp"><figure class="highlight cpp"><figcaption data-lang="C++"></figcaption><table><tr><td data-num="1"></td><td><pre><span class="token keyword">class</span> <span class="token class-name">Solution</span> <span class="token punctuation">&#123;</span></pre></td></tr><tr><td data-num="2"></td><td><pre><span class="token keyword">public</span><span class="token operator">:</span></pre></td></tr><tr><td data-num="3"></td><td><pre>    string <span class="token function">mergeAlternately</span><span class="token punctuation">(</span>string word1<span class="token punctuation">,</span> string word2<span class="token punctuation">)</span> <span class="token punctuation">&#123;</span></pre></td></tr><tr><td data-num="4"></td><td><pre>       string res <span class="token operator">=</span> <span class="token string">""</span><span class="token punctuation">;</span></pre></td></tr><tr><td data-num="5"></td><td><pre>       <span class="token keyword">int</span> m <span class="token operator">=</span> word1<span class="token punctuation">.</span><span class="token function">size</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">,</span> n <span class="token operator">=</span> word2<span class="token punctuation">.</span><span class="token function">size</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span> </pre></td></tr><tr><td data-num="6"></td><td><pre>       <span class="token keyword">int</span> i <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">,</span> j <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span></pre></td></tr><tr><td data-num="7"></td><td><pre>       <span class="token keyword">while</span> <span class="token punctuation">(</span>i <span class="token operator">&lt;</span> m <span class="token operator">&amp;&amp;</span> j <span class="token operator">&lt;</span> n<span class="token punctuation">)</span> <span class="token punctuation">&#123;</span></pre></td></tr><tr><td data-num="8"></td><td><pre>           res <span class="token operator">+=</span> word1<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">;</span></pre></td></tr><tr><td data-num="9"></td><td><pre>           i<span class="token operator">++</span><span class="token punctuation">;</span></pre></td></tr><tr><td data-num="10"></td><td><pre>           res <span class="token operator">+=</span> word2<span class="token punctuation">[</span>j<span class="token punctuation">]</span><span class="token punctuation">;</span></pre></td></tr><tr><td data-num="11"></td><td><pre>           j<span class="token operator">++</span><span class="token punctuation">;</span></pre></td></tr><tr><td data-num="12"></td><td><pre>       <span class="token punctuation">&#125;</span></pre></td></tr><tr><td data-num="13"></td><td><pre>       <span class="token keyword">if</span> <span class="token punctuation">(</span>i <span class="token operator">!=</span> m<span class="token punctuation">)</span> <span class="token punctuation">&#123;</span></pre></td></tr><tr><td data-num="14"></td><td><pre>           <span class="token keyword">for</span> <span class="token punctuation">(</span><span class="token punctuation">;</span> i<span class="token operator">&lt;</span>m<span class="token punctuation">;</span> i<span class="token operator">++</span><span class="token punctuation">)</span> res <span class="token operator">+=</span> word1<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">;</span></pre></td></tr><tr><td data-num="15"></td><td><pre>       <span class="token punctuation">&#125;</span> <span class="token keyword">else</span> <span class="token punctuation">&#123;</span></pre></td></tr><tr><td data-num="16"></td><td><pre>           <span class="token keyword">for</span> <span class="token punctuation">(</span><span class="token punctuation">;</span> j<span class="token operator">&lt;</span>n<span class="token punctuation">;</span> j<span class="token operator">++</span><span class="token punctuation">)</span> res <span class="token operator">+=</span> word2<span class="token punctuation">[</span>j<span class="token punctuation">]</span><span class="token punctuation">;</span></pre></td></tr><tr><td data-num="17"></td><td><pre>       <span class="token punctuation">&#125;</span></pre></td></tr><tr><td data-num="18"></td><td><pre>       <span class="token keyword">return</span> res<span class="token punctuation">;</span></pre></td></tr><tr><td data-num="19"></td><td><pre>    <span class="token punctuation">&#125;</span></pre></td></tr><tr><td data-num="20"></td><td><pre><span class="token punctuation">&#125;</span><span class="token punctuation">;</span></pre></td></tr></table></figure></div><div class="tab" data-id="code" data-title="python"><figure class="highlight python"><figcaption data-lang="python"></figcaption><table><tr><td data-num="1"></td><td><pre><span class="token keyword">class</span> <span class="token class-name">Solution</span><span class="token punctuation">:</span></pre></td></tr><tr><td data-num="2"></td><td><pre>    <span class="token keyword">def</span> <span class="token function">mergeAlternately</span><span class="token punctuation">(</span>self<span class="token punctuation">,</span> word1<span class="token punctuation">:</span> <span class="token builtin">str</span><span class="token punctuation">,</span> word2<span class="token punctuation">:</span> <span class="token builtin">str</span><span class="token punctuation">)</span> <span class="token operator">-</span><span class="token operator">></span> <span class="token builtin">str</span><span class="token punctuation">:</span></pre></td></tr><tr><td data-num="3"></td><td><pre>        m<span class="token punctuation">,</span> n <span class="token operator">=</span> <span class="token builtin">len</span><span class="token punctuation">(</span>word1<span class="token punctuation">)</span><span class="token punctuation">,</span> <span class="token builtin">len</span><span class="token punctuation">(</span>word2<span class="token punctuation">)</span></pre></td></tr><tr><td data-num="4"></td><td><pre>        res <span class="token operator">=</span> <span class="token string">""</span></pre></td></tr><tr><td data-num="5"></td><td><pre>        i<span class="token punctuation">,</span> j <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">,</span> <span class="token number">0</span></pre></td></tr><tr><td data-num="6"></td><td><pre>        <span class="token keyword">while</span> i <span class="token operator">&lt;</span> m <span class="token keyword">and</span> j <span class="token operator">&lt;</span> n<span class="token punctuation">:</span></pre></td></tr><tr><td data-num="7"></td><td><pre>            res <span class="token operator">+=</span> word1<span class="token punctuation">[</span>i<span class="token punctuation">]</span></pre></td></tr><tr><td data-num="8"></td><td><pre>            i <span class="token operator">+=</span> <span class="token number">1</span></pre></td></tr><tr><td data-num="9"></td><td><pre>            res <span class="token operator">+=</span> word2<span class="token punctuation">[</span>j<span class="token punctuation">]</span></pre></td></tr><tr><td data-num="10"></td><td><pre>            j <span class="token operator">+=</span> <span class="token number">1</span></pre></td></tr><tr><td data-num="11"></td><td><pre>        <span class="token keyword">if</span> i <span class="token operator">!=</span> m<span class="token punctuation">:</span></pre></td></tr><tr><td data-num="12"></td><td><pre>            <span class="token keyword">while</span> i <span class="token operator">&lt;</span> m<span class="token punctuation">:</span></pre></td></tr><tr><td data-num="13"></td><td><pre>                res <span class="token operator">+=</span> word1<span class="token punctuation">[</span>i<span class="token punctuation">]</span></pre></td></tr><tr><td data-num="14"></td><td><pre>                i <span class="token operator">+=</span> <span class="token number">1</span></pre></td></tr><tr><td data-num="15"></td><td><pre>        <span class="token keyword">else</span> <span class="token punctuation">:</span></pre></td></tr><tr><td data-num="16"></td><td><pre>            <span class="token keyword">while</span> j <span class="token operator">&lt;</span> n<span class="token punctuation">:</span></pre></td></tr><tr><td data-num="17"></td><td><pre>                res <span class="token operator">+=</span> word2<span class="token punctuation">[</span>j<span class="token punctuation">]</span></pre></td></tr><tr><td data-num="18"></td><td><pre>                j <span class="token operator">+=</span> <span class="token number">1</span></pre></td></tr><tr><td data-num="19"></td><td><pre>        <span class="token keyword">return</span> res</pre></td></tr></table></figure></div><div class="tab" data-id="code" data-title="java"><figure class="highlight java"><figcaption data-lang="java"></figcaption><table><tr><td data-num="1"></td><td><pre><span class="token keyword">class</span> <span class="token class-name">Solution</span> <span class="token punctuation">&#123;</span></pre></td></tr><tr><td data-num="2"></td><td><pre>    <span class="token keyword">public</span> <span class="token class-name">String</span> <span class="token function">mergeAlternately</span><span class="token punctuation">(</span><span class="token class-name">String</span> word1<span class="token punctuation">,</span> <span class="token class-name">String</span> word2<span class="token punctuation">)</span> <span class="token punctuation">&#123;</span></pre></td></tr><tr><td data-num="3"></td><td><pre>        <span class="token class-name">String</span> res <span class="token operator">=</span> <span class="token string">""</span><span class="token punctuation">;</span></pre></td></tr><tr><td data-num="4"></td><td><pre>        <span class="token keyword">int</span> m <span class="token operator">=</span> word1<span class="token punctuation">.</span><span class="token function">length</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">,</span> n <span class="token operator">=</span> word2<span class="token punctuation">.</span><span class="token function">length</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span></pre></td></tr><tr><td data-num="5"></td><td><pre>        <span class="token keyword">int</span> i <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">,</span> j <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span></pre></td></tr><tr><td data-num="6"></td><td><pre>        <span class="token keyword">while</span> <span class="token punctuation">(</span>i <span class="token operator">&lt;</span> m <span class="token operator">&amp;&amp;</span> j <span class="token operator">&lt;</span> n<span class="token punctuation">)</span> <span class="token punctuation">&#123;</span></pre></td></tr><tr><td data-num="7"></td><td><pre>            res <span class="token operator">+=</span> word1<span class="token punctuation">.</span><span class="token function">charAt</span><span class="token punctuation">(</span>i<span class="token punctuation">)</span><span class="token punctuation">;</span></pre></td></tr><tr><td data-num="8"></td><td><pre>            i<span class="token operator">++</span><span class="token punctuation">;</span></pre></td></tr><tr><td data-num="9"></td><td><pre>            res <span class="token operator">+=</span> word2<span class="token punctuation">.</span><span class="token function">charAt</span><span class="token punctuation">(</span>j<span class="token punctuation">)</span><span class="token punctuation">;</span></pre></td></tr><tr><td data-num="10"></td><td><pre>            j<span class="token operator">++</span><span class="token punctuation">;</span></pre></td></tr><tr><td data-num="11"></td><td><pre>        <span class="token punctuation">&#125;</span></pre></td></tr><tr><td data-num="12"></td><td><pre>        <span class="token keyword">if</span> <span class="token punctuation">(</span>i <span class="token operator">!=</span> m<span class="token punctuation">)</span> <span class="token punctuation">&#123;</span></pre></td></tr><tr><td data-num="13"></td><td><pre>            <span class="token keyword">for</span> <span class="token punctuation">(</span><span class="token punctuation">;</span> i <span class="token operator">&lt;</span>m<span class="token punctuation">;</span> i<span class="token operator">++</span><span class="token punctuation">)</span> res <span class="token operator">+=</span> word1<span class="token punctuation">.</span><span class="token function">charAt</span><span class="token punctuation">(</span>i<span class="token punctuation">)</span><span class="token punctuation">;</span></pre></td></tr><tr><td data-num="14"></td><td><pre>        <span class="token punctuation">&#125;</span> <span class="token keyword">else</span> <span class="token punctuation">&#123;</span></pre></td></tr><tr><td data-num="15"></td><td><pre>            <span class="token keyword">for</span> <span class="token punctuation">(</span><span class="token punctuation">;</span> j<span class="token operator">&lt;</span>n<span class="token punctuation">;</span> j<span class="token operator">++</span><span class="token punctuation">)</span> res <span class="token operator">+=</span> word2<span class="token punctuation">.</span><span class="token function">charAt</span><span class="token punctuation">(</span>j<span class="token punctuation">)</span><span class="token punctuation">;</span></pre></td></tr><tr><td data-num="16"></td><td><pre>        <span class="token punctuation">&#125;</span></pre></td></tr><tr><td data-num="17"></td><td><pre>        <span class="token keyword">return</span> res<span class="token punctuation">;</span></pre></td></tr><tr><td data-num="18"></td><td><pre>    <span class="token punctuation">&#125;</span></pre></td></tr><tr><td data-num="19"></td><td><pre><span class="token punctuation">&#125;</span></pre></td></tr></table></figure></div>]]></content>
      
      
      <categories>
          
          <category> Coding </category>
          
          <category> Leetcode </category>
          
          <category> Easy </category>
          
      </categories>
      
      
        <tags>
            
            <tag> String </tag>
            
            <tag> Easy </tag>
            
            <tag> Two Pointers </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>uva 1587 - Box</title>
      <link href="/2023/04/18/Coding/uva/Star1/uva%201587/"/>
      <url>/2023/04/18/Coding/uva/Star1/uva%201587/</url>
      
        <content type="html"><![CDATA[<p>⭐️</p><p><strong>Time limit: 3.000 seconds</strong></p><h2 id="題目連結"><a class="anchor" href="#題目連結">#</a> 題目連結</h2><ul><li><span class="exturl" data-url="aHR0cHM6Ly96ZXJvanVkZ2UudHcvU2hvd1Byb2JsZW0/cHJvYmxlbWlkPWU1MzQ=">ZeroJudge</span></li><li><span class="exturl" data-url="aHR0cHM6Ly9vbmxpbmVqdWRnZS5vcmcvZXh0ZXJuYWwvMTUvcDE1ODcucGRm">題目連結</span></li><li><span class="exturl" data-url="aHR0cHM6Ly9vbmxpbmVqdWRnZS5vcmcvaW5kZXgucGhwP29wdGlvbj1jb21fb25saW5lanVkZ2UmYW1wO0l0ZW1pZD04JmFtcDtjYXRlZ29yeT00NDgmYW1wO3BhZ2U9c2hvd19wcm9ibGVtJmFtcDtwcm9ibGVtPTQ0NjI=">Online Judge</span></li><li><span class="exturl" data-url="aHR0cHM6Ly93d3cudWRlYnVnLmNvbS9VVmEvMTU4Nw==">uDebug</span></li></ul><h2 id="解題技巧"><a class="anchor" href="#解題技巧">#</a> 解題技巧</h2><h2 id="solution"><a class="anchor" href="#solution">#</a> Solution</h2><p><span class="exturl" data-url="aHR0cHM6Ly9kb2NzLmdvb2dsZS5jb20vc3ByZWFkc2hlZXRzL2QvMWo3NEdFQ2ZuTTBMM042TEpwNEY0Q2FfLXljY3hFNlJpaWp0YmZDLWRNamcvZWRpdD91c3A9c2hhcmluZw==">解題 / 紀錄</span></p><figure class="highlight cpp"><figcaption data-lang="C++"></figcaption><table><tr><td data-num="1"></td><td><pre><span class="token macro property"><span class="token directive-hash">#</span><span class="token directive keyword">include</span> <span class="token string">&lt;bits/stdc++.h></span></span></pre></td></tr><tr><td data-num="2"></td><td><pre><span class="token keyword">using</span> <span class="token keyword">namespace</span> std<span class="token punctuation">;</span></pre></td></tr><tr><td data-num="3"></td><td><pre></pre></td></tr><tr><td data-num="4"></td><td><pre><span class="token keyword">struct</span> <span class="token class-name">Box</span> <span class="token punctuation">&#123;</span></pre></td></tr><tr><td data-num="5"></td><td><pre>    <span class="token keyword">int</span> wid<span class="token punctuation">,</span> hgt<span class="token punctuation">;</span></pre></td></tr><tr><td data-num="6"></td><td><pre><span class="token punctuation">&#125;</span> box<span class="token punctuation">[</span><span class="token number">6</span><span class="token punctuation">]</span><span class="token punctuation">;</span></pre></td></tr><tr><td data-num="7"></td><td><pre></pre></td></tr><tr><td data-num="8"></td><td><pre><span class="token keyword">bool</span> <span class="token function">cmp</span><span class="token punctuation">(</span>Box a<span class="token punctuation">,</span> Box b<span class="token punctuation">)</span> <span class="token punctuation">&#123;</span></pre></td></tr><tr><td data-num="9"></td><td><pre>    <span class="token keyword">if</span> <span class="token punctuation">(</span>a<span class="token punctuation">.</span>wid <span class="token operator">!=</span> b<span class="token punctuation">.</span>wid<span class="token punctuation">)</span> <span class="token keyword">return</span> a<span class="token punctuation">.</span>wid <span class="token operator">&lt;</span> b<span class="token punctuation">.</span>wid<span class="token punctuation">;</span></pre></td></tr><tr><td data-num="10"></td><td><pre>    <span class="token keyword">return</span> a<span class="token punctuation">.</span>hgt <span class="token operator">&lt;</span> b<span class="token punctuation">.</span>hgt<span class="token punctuation">;</span></pre></td></tr><tr><td data-num="11"></td><td><pre><span class="token punctuation">&#125;</span></pre></td></tr><tr><td data-num="12"></td><td><pre></pre></td></tr><tr><td data-num="13"></td><td><pre><span class="token keyword">int</span> <span class="token function">main</span> <span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span></pre></td></tr><tr><td data-num="14"></td><td><pre>    <span class="token keyword">int</span> w<span class="token punctuation">,</span> h<span class="token punctuation">;</span></pre></td></tr><tr><td data-num="15"></td><td><pre>    <span class="token keyword">while</span> <span class="token punctuation">(</span>cin <span class="token operator">>></span> w <span class="token operator">>></span> h<span class="token punctuation">)</span> <span class="token punctuation">&#123;</span></pre></td></tr><tr><td data-num="16"></td><td><pre>        box<span class="token punctuation">[</span><span class="token number">0</span><span class="token punctuation">]</span><span class="token punctuation">.</span>wid <span class="token operator">=</span> <span class="token function">min</span><span class="token punctuation">(</span>w<span class="token punctuation">,</span> h<span class="token punctuation">)</span><span class="token punctuation">,</span> box<span class="token punctuation">[</span><span class="token number">0</span><span class="token punctuation">]</span><span class="token punctuation">.</span>hgt <span class="token operator">=</span> <span class="token function">max</span><span class="token punctuation">(</span>w<span class="token punctuation">,</span> h<span class="token punctuation">)</span><span class="token punctuation">;</span></pre></td></tr><tr><td data-num="17"></td><td><pre>        <span class="token keyword">for</span> <span class="token punctuation">(</span><span class="token keyword">int</span> i<span class="token operator">=</span><span class="token number">1</span><span class="token punctuation">;</span> i<span class="token operator">&lt;</span><span class="token number">6</span><span class="token punctuation">;</span> i<span class="token operator">++</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span></pre></td></tr><tr><td data-num="18"></td><td><pre>            cin <span class="token operator">>></span> w <span class="token operator">>></span> h<span class="token punctuation">;</span></pre></td></tr><tr><td data-num="19"></td><td><pre>            box<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">.</span>wid <span class="token operator">=</span> <span class="token function">min</span><span class="token punctuation">(</span>w<span class="token punctuation">,</span> h<span class="token punctuation">)</span><span class="token punctuation">,</span> box<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">.</span>hgt <span class="token operator">=</span> <span class="token function">max</span><span class="token punctuation">(</span>w<span class="token punctuation">,</span> h<span class="token punctuation">)</span><span class="token punctuation">;</span></pre></td></tr><tr><td data-num="20"></td><td><pre>        <span class="token punctuation">&#125;</span></pre></td></tr><tr><td data-num="21"></td><td><pre>        <span class="token function">sort</span><span class="token punctuation">(</span>box<span class="token punctuation">,</span> box <span class="token operator">+</span> <span class="token number">6</span><span class="token punctuation">,</span> cmp<span class="token punctuation">)</span><span class="token punctuation">;</span></pre></td></tr><tr><td data-num="22"></td><td><pre>        <span class="token keyword">if</span> <span class="token punctuation">(</span>box<span class="token punctuation">[</span><span class="token number">0</span><span class="token punctuation">]</span><span class="token punctuation">.</span>wid <span class="token operator">==</span> box<span class="token punctuation">[</span><span class="token number">1</span><span class="token punctuation">]</span><span class="token punctuation">.</span>wid <span class="token operator">&amp;&amp;</span> box<span class="token punctuation">[</span><span class="token number">1</span><span class="token punctuation">]</span><span class="token punctuation">.</span>wid <span class="token operator">==</span> box<span class="token punctuation">[</span><span class="token number">2</span><span class="token punctuation">]</span><span class="token punctuation">.</span>wid <span class="token operator">&amp;&amp;</span> box<span class="token punctuation">[</span><span class="token number">2</span><span class="token punctuation">]</span><span class="token punctuation">.</span>wid <span class="token operator">==</span> box<span class="token punctuation">[</span><span class="token number">3</span><span class="token punctuation">]</span><span class="token punctuation">.</span>wid <span class="token operator">&amp;&amp;</span></pre></td></tr><tr><td data-num="23"></td><td><pre>            box<span class="token punctuation">[</span><span class="token number">2</span><span class="token punctuation">]</span><span class="token punctuation">.</span>hgt <span class="token operator">==</span> box<span class="token punctuation">[</span><span class="token number">3</span><span class="token punctuation">]</span><span class="token punctuation">.</span>hgt <span class="token operator">&amp;&amp;</span> box<span class="token punctuation">[</span><span class="token number">3</span><span class="token punctuation">]</span><span class="token punctuation">.</span>hgt <span class="token operator">==</span> box<span class="token punctuation">[</span><span class="token number">4</span><span class="token punctuation">]</span><span class="token punctuation">.</span>hgt <span class="token operator">&amp;&amp;</span> box<span class="token punctuation">[</span><span class="token number">4</span><span class="token punctuation">]</span><span class="token punctuation">.</span>hgt <span class="token operator">==</span> box<span class="token punctuation">[</span><span class="token number">5</span><span class="token punctuation">]</span><span class="token punctuation">.</span>hgt <span class="token operator">&amp;&amp;</span></pre></td></tr><tr><td data-num="24"></td><td><pre>            box<span class="token punctuation">[</span><span class="token number">0</span><span class="token punctuation">]</span><span class="token punctuation">.</span>hgt <span class="token operator">==</span> box<span class="token punctuation">[</span><span class="token number">1</span><span class="token punctuation">]</span><span class="token punctuation">.</span>hgt <span class="token operator">&amp;&amp;</span> box<span class="token punctuation">[</span><span class="token number">1</span><span class="token punctuation">]</span><span class="token punctuation">.</span>hgt <span class="token operator">==</span> box<span class="token punctuation">[</span><span class="token number">4</span><span class="token punctuation">]</span><span class="token punctuation">.</span>wid <span class="token operator">&amp;&amp;</span> box<span class="token punctuation">[</span><span class="token number">4</span><span class="token punctuation">]</span><span class="token punctuation">.</span>wid <span class="token operator">==</span> box<span class="token punctuation">[</span><span class="token number">5</span><span class="token punctuation">]</span><span class="token punctuation">.</span>wid<span class="token punctuation">)</span> <span class="token punctuation">&#123;</span></pre></td></tr><tr><td data-num="25"></td><td><pre>            cout <span class="token operator">&lt;&lt;</span> <span class="token string">"POSSIBLE\n"</span><span class="token punctuation">;</span></pre></td></tr><tr><td data-num="26"></td><td><pre>        <span class="token punctuation">&#125;</span> <span class="token keyword">else</span> <span class="token punctuation">&#123;</span></pre></td></tr><tr><td data-num="27"></td><td><pre>            cout <span class="token operator">&lt;&lt;</span> <span class="token string">"IMPOSSIBLE\n"</span><span class="token punctuation">;</span></pre></td></tr><tr><td data-num="28"></td><td><pre>        <span class="token punctuation">&#125;</span></pre></td></tr><tr><td data-num="29"></td><td><pre>    <span class="token punctuation">&#125;</span></pre></td></tr><tr><td data-num="30"></td><td><pre><span class="token punctuation">&#125;</span></pre></td></tr></table></figure>]]></content>
      
      
      <categories>
          
          <category> Coding </category>
          
          <category> UVA </category>
          
          <category> Star1 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> Star1 </tag>
            
            <tag> CPE </tag>
            
            <tag> UVA </tag>
            
        </tags>
      
    </entry>
    
    
  
  
</search>
