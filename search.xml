<?xml version="1.0" encoding="utf-8"?>
<search> 
  
  
    
    <entry>
      <title>1557. Minimum Number of Vertices to Reach All Nodes</title>
      <link href="/2023/05/19/Coding/leetcode/Medium/1557%20Minimum%20Number%20of%20Vertices%20to%20Reach%20All%20Nodes/"/>
      <url>/2023/05/19/Coding/leetcode/Medium/1557%20Minimum%20Number%20of%20Vertices%20to%20Reach%20All%20Nodes/</url>
      
        <content type="html"><![CDATA[<p>⭐️⭐️</p><h2 id="題目敘述"><a class="anchor" href="#題目敘述">#</a> <span class="exturl" data-url="aHR0cHM6Ly9sZWV0Y29kZS5jb20vcHJvYmxlbXMvbWluaW11bS1udW1iZXItb2YtdmVydGljZXMtdG8tcmVhY2gtYWxsLW5vZGVzLw==">題目敘述</span></h2><p>Given a <strong>directed acyclic graph</strong>, with  <code>n</code>  vertices numbered from  <code>0</code>  to  <code>n - 1</code> , and an array  <code>edges</code>  where  <code>edges[i] = [fromi, toi]</code>  represents a directed edge from node  <code>fromi</code>  to node  <code>toi</code> .</p><p>Find the <em>smallest set of vertices from which all nodes in the graph are reachable</em>. It’s guaranteed that a unique solution exists.</p><p>Notice that you can return the vertices in any order.</p><h3 id="example-1"><a class="anchor" href="#example-1">#</a> Example 1</h3><p><img data-src="https://assets.leetcode.com/uploads/2020/07/07/untitled22.png" alt=""></p><blockquote><p><strong>Input</strong>: n = 6, edges = [[0,1],[0,2],[2,5],[3,4],[4,2]]<br><strong>Output</strong>: [0,3]<br><strong>Explanation</strong>: It’s not possible to reach all the nodes from a single vertex. From 0 we can reach [0,1,2,5]. From 3 we can reach [3,4,2,5]. So we output [0,3].</p></blockquote><h3 id="example-2"><a class="anchor" href="#example-2">#</a> Example 2</h3><p><img data-src="https://assets.leetcode.com/uploads/2020/07/07/untitled.png" alt=""></p><blockquote><p><strong>Input</strong>: n = 5, edges = [[0,1],[2,1],[3,1],[1,4],[2,4]]<br><strong>Output</strong>: [0,2,3]<br><strong>Explanation</strong>: Notice that vertices 0, 3 and 2 are not reachable from any other node, so we must include them. Also any of these vertices can reach nodes 1 and 4.</p></blockquote><h2 id="solution"><a class="anchor" href="#solution">#</a> Solution</h2><div class="tab" data-id="code" data-title="C++"><figure class="highlight cpp"><figcaption data-lang="C++"></figcaption><table><tr><td data-num="1"></td><td><pre><span class="token keyword">class</span> <span class="token class-name">Solution</span> <span class="token punctuation">&#123;</span></pre></td></tr><tr><td data-num="2"></td><td><pre><span class="token keyword">public</span><span class="token operator">:</span></pre></td></tr><tr><td data-num="3"></td><td><pre>    vector<span class="token operator">&lt;</span><span class="token keyword">int</span><span class="token operator">></span> <span class="token function">findSmallestSetOfVertices</span><span class="token punctuation">(</span><span class="token keyword">int</span> n<span class="token punctuation">,</span> vector<span class="token operator">&lt;</span>vector<span class="token operator">&lt;</span><span class="token keyword">int</span><span class="token operator">>></span><span class="token operator">&amp;</span> edges<span class="token punctuation">)</span> <span class="token punctuation">&#123;</span></pre></td></tr><tr><td data-num="4"></td><td><pre>        unordered_set<span class="token operator">&lt;</span><span class="token keyword">int</span><span class="token operator">></span> s<span class="token punctuation">;</span></pre></td></tr><tr><td data-num="5"></td><td><pre>        <span class="token keyword">for</span> <span class="token punctuation">(</span>vector<span class="token operator">&lt;</span><span class="token keyword">int</span><span class="token operator">></span><span class="token operator">&amp;</span> edge <span class="token operator">:</span> edges<span class="token punctuation">)</span> <span class="token punctuation">&#123;</span></pre></td></tr><tr><td data-num="6"></td><td><pre>            s<span class="token punctuation">.</span><span class="token function">insert</span><span class="token punctuation">(</span>edge<span class="token punctuation">[</span><span class="token number">1</span><span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token punctuation">;</span></pre></td></tr><tr><td data-num="7"></td><td><pre>        <span class="token punctuation">&#125;</span></pre></td></tr><tr><td data-num="8"></td><td><pre>        vector<span class="token operator">&lt;</span><span class="token keyword">int</span><span class="token operator">></span> res<span class="token punctuation">;</span></pre></td></tr><tr><td data-num="9"></td><td><pre>        <span class="token keyword">for</span> <span class="token punctuation">(</span><span class="token keyword">int</span> i<span class="token operator">=</span><span class="token number">0</span><span class="token punctuation">;</span> i<span class="token operator">&lt;</span>n<span class="token punctuation">;</span> i<span class="token operator">++</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span></pre></td></tr><tr><td data-num="10"></td><td><pre>            <span class="token keyword">if</span> <span class="token punctuation">(</span>s<span class="token punctuation">.</span><span class="token function">find</span><span class="token punctuation">(</span>i<span class="token punctuation">)</span> <span class="token operator">==</span> s<span class="token punctuation">.</span><span class="token function">end</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span></pre></td></tr><tr><td data-num="11"></td><td><pre>                res<span class="token punctuation">.</span><span class="token function">push_back</span><span class="token punctuation">(</span>i<span class="token punctuation">)</span><span class="token punctuation">;</span></pre></td></tr><tr><td data-num="12"></td><td><pre>            <span class="token punctuation">&#125;</span></pre></td></tr><tr><td data-num="13"></td><td><pre>        <span class="token punctuation">&#125;</span></pre></td></tr><tr><td data-num="14"></td><td><pre>        <span class="token keyword">return</span> res<span class="token punctuation">;</span></pre></td></tr><tr><td data-num="15"></td><td><pre>    <span class="token punctuation">&#125;</span></pre></td></tr><tr><td data-num="16"></td><td><pre><span class="token punctuation">&#125;</span><span class="token punctuation">;</span></pre></td></tr></table></figure></div><div class="tab" data-id="code" data-title="Java"><figure class="highlight java"><figcaption data-lang="java"></figcaption><table><tr><td data-num="1"></td><td><pre><span class="token keyword">class</span> <span class="token class-name">Solution</span> <span class="token punctuation">&#123;</span></pre></td></tr><tr><td data-num="2"></td><td><pre>    <span class="token keyword">public</span> <span class="token class-name">List</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token class-name">Integer</span><span class="token punctuation">></span></span> <span class="token function">findSmallestSetOfVertices</span><span class="token punctuation">(</span><span class="token keyword">int</span> n<span class="token punctuation">,</span> <span class="token class-name">List</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token class-name">List</span><span class="token punctuation">&lt;</span><span class="token class-name">Integer</span><span class="token punctuation">></span><span class="token punctuation">></span></span> edges<span class="token punctuation">)</span> <span class="token punctuation">&#123;</span></pre></td></tr><tr><td data-num="3"></td><td><pre>        <span class="token class-name">Set</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token class-name">Integer</span><span class="token punctuation">></span></span> link <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">HashSet</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token punctuation">></span></span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span></pre></td></tr><tr><td data-num="4"></td><td><pre>        <span class="token keyword">for</span> <span class="token punctuation">(</span><span class="token class-name">List</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token class-name">Integer</span><span class="token punctuation">></span></span> edge <span class="token operator">:</span> edges<span class="token punctuation">)</span> <span class="token punctuation">&#123;</span></pre></td></tr><tr><td data-num="5"></td><td><pre>            link<span class="token punctuation">.</span><span class="token function">add</span><span class="token punctuation">(</span>edge<span class="token punctuation">.</span><span class="token function">get</span><span class="token punctuation">(</span><span class="token number">1</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span></pre></td></tr><tr><td data-num="6"></td><td><pre>        <span class="token punctuation">&#125;</span></pre></td></tr><tr><td data-num="7"></td><td><pre>        </pre></td></tr><tr><td data-num="8"></td><td><pre>        <span class="token class-name">List</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token class-name">Integer</span><span class="token punctuation">></span></span> ans <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">ArrayList</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token punctuation">></span></span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span></pre></td></tr><tr><td data-num="9"></td><td><pre>        <span class="token keyword">for</span> <span class="token punctuation">(</span><span class="token keyword">int</span> i <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span> i <span class="token operator">&lt;</span> n<span class="token punctuation">;</span> i<span class="token operator">++</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span></pre></td></tr><tr><td data-num="10"></td><td><pre>            <span class="token keyword">if</span> <span class="token punctuation">(</span><span class="token operator">!</span>link<span class="token punctuation">.</span><span class="token function">contains</span><span class="token punctuation">(</span>i<span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span></pre></td></tr><tr><td data-num="11"></td><td><pre>                ans<span class="token punctuation">.</span><span class="token function">add</span><span class="token punctuation">(</span>i<span class="token punctuation">)</span><span class="token punctuation">;</span></pre></td></tr><tr><td data-num="12"></td><td><pre>            <span class="token punctuation">&#125;</span></pre></td></tr><tr><td data-num="13"></td><td><pre>        <span class="token punctuation">&#125;</span></pre></td></tr><tr><td data-num="14"></td><td><pre>        </pre></td></tr><tr><td data-num="15"></td><td><pre>        <span class="token keyword">return</span> ans<span class="token punctuation">;</span></pre></td></tr><tr><td data-num="16"></td><td><pre>    <span class="token punctuation">&#125;</span></pre></td></tr><tr><td data-num="17"></td><td><pre><span class="token punctuation">&#125;</span></pre></td></tr></table></figure></div><div class="tab" data-id="code" data-title="Python"><pre><code class="language-python"></code></pre></div>]]></content>
      
      
      <categories>
          
          <category> Coding </category>
          
          <category> Leetcode </category>
          
          <category> Medium </category>
          
      </categories>
      
      
        <tags>
            
            <tag> Leetcode </tag>
            
            <tag> Medium </tag>
            
            <tag> Graph </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>2130. Maximum Twin Sum of a Linked List</title>
      <link href="/2023/05/17/Coding/leetcode/Medium/2130%20Maximum%20Twin%20Sum%20of%20a%20Linked%20List/"/>
      <url>/2023/05/17/Coding/leetcode/Medium/2130%20Maximum%20Twin%20Sum%20of%20a%20Linked%20List/</url>
      
        <content type="html"><![CDATA[<p>⭐️⭐️</p><h2 id="題目敘述"><a class="anchor" href="#題目敘述">#</a> <span class="exturl" data-url="aHR0cHM6Ly9sZWV0Y29kZS5jb20vcHJvYmxlbXMvbWF4aW11bS10d2luLXN1bS1vZi1hLWxpbmtlZC1saXN0Lw==">題目敘述</span></h2><p>In a linked list of size  <code>n</code> , where  <code>n</code>  is even, the  <code>ith</code>  node <strong>(0-indexed)</strong> of the linked list is known as the <strong>twin</strong> of the  <code>(n-1-i)th</code>  node, if  <code>0 &lt;= i &lt;= (n / 2) - 1</code> .</p><ul><li>For example, if  <code>n = 4</code> , then node  <code>0</code>  is the twin of node  <code>3</code> , and node  <code>1</code>  is the twin of node  <code>2</code> . These are the only nodes with twins for  <code>n = 4</code> .</li></ul><p>The <strong>twin sum</strong> is defined as the sum of a node and its twin.</p><p>Given the  <code>head</code>  of a linked list with even length, return <em>the maximum twin sum of the linked list</em>.</p><h3 id="example-1"><a class="anchor" href="#example-1">#</a> Example 1</h3><p><img data-src="https://assets.leetcode.com/uploads/2021/12/03/eg1drawio.png" alt=""></p><blockquote><p><strong>Input</strong>: head = [5,4,2,1]<br><strong>Output</strong>: 6<br><strong>Explanation</strong>:<br>Nodes 0 and 1 are the twins of nodes 3 and 2, respectively. All have twin sum = 6.<br>There are no other nodes with twins in the linked list.<br>Thus, the maximum twin sum of the linked list is 6.</p></blockquote><h3 id="example-2"><a class="anchor" href="#example-2">#</a> Example 2</h3><p><img data-src="https://assets.leetcode.com/uploads/2021/12/03/eg2drawio.png" alt=""></p><blockquote><p><strong>Input</strong>: head = [4,2,2,3]<br><strong>Output</strong>: 7<br><strong>Explanation</strong>:<br>The nodes with twins present in this linked list are:</p><ul><li>Node 0 is the twin of node 3 having a twin sum of 4 + 3 = 7.</li><li>Node 1 is the twin of node 2 having a twin sum of 2 + 2 = 4.<br>Thus, the maximum twin sum of the linked list is max(7, 4) = 7.</li></ul></blockquote><h3 id="example-3"><a class="anchor" href="#example-3">#</a> Example 3</h3><p><img data-src="https://assets.leetcode.com/uploads/2021/12/03/eg3drawio.png" alt=""></p><blockquote><p><strong>Input</strong>: head = [1,100000]<br><strong>Output</strong>: 100001<br><strong>Explanation</strong>:<br>There is only one node with a twin in the linked list having twin sum of 1 + 100000 = 100001.</p></blockquote><h2 id="solution"><a class="anchor" href="#solution">#</a> Solution</h2><div class="tab" data-id="code" data-title="C++"><figure class="highlight cpp"><figcaption data-lang="C++"></figcaption><table><tr><td data-num="1"></td><td><pre><span class="token comment">/**</pre></td></tr><tr><td data-num="2"></td><td><pre> * Definition for singly-linked list.</pre></td></tr><tr><td data-num="3"></td><td><pre> * struct ListNode &#123;</pre></td></tr><tr><td data-num="4"></td><td><pre> *     int val;</pre></td></tr><tr><td data-num="5"></td><td><pre> *     ListNode *next;</pre></td></tr><tr><td data-num="6"></td><td><pre> *     ListNode() : val(0), next(nullptr) &#123;&#125;</pre></td></tr><tr><td data-num="7"></td><td><pre> *     ListNode(int x) : val(x), next(nullptr) &#123;&#125;</pre></td></tr><tr><td data-num="8"></td><td><pre> *     ListNode(int x, ListNode *next) : val(x), next(next) &#123;&#125;</pre></td></tr><tr><td data-num="9"></td><td><pre> * &#125;;</pre></td></tr><tr><td data-num="10"></td><td><pre> */</span></pre></td></tr><tr><td data-num="11"></td><td><pre><span class="token keyword">class</span> <span class="token class-name">Solution</span> <span class="token punctuation">&#123;</span></pre></td></tr><tr><td data-num="12"></td><td><pre><span class="token keyword">public</span><span class="token operator">:</span></pre></td></tr><tr><td data-num="13"></td><td><pre>    <span class="token keyword">int</span> <span class="token function">pairSum</span><span class="token punctuation">(</span>ListNode<span class="token operator">*</span> head<span class="token punctuation">)</span> <span class="token punctuation">&#123;</span></pre></td></tr><tr><td data-num="14"></td><td><pre>        vector<span class="token operator">&lt;</span><span class="token keyword">int</span><span class="token operator">></span> left<span class="token punctuation">;</span></pre></td></tr><tr><td data-num="15"></td><td><pre>        ListNode <span class="token operator">*</span>slow <span class="token operator">=</span> head<span class="token punctuation">,</span> <span class="token operator">*</span>fast <span class="token operator">=</span> head<span class="token operator">-></span>next<span class="token punctuation">;</span></pre></td></tr><tr><td data-num="16"></td><td><pre>        left<span class="token punctuation">.</span><span class="token function">push_back</span><span class="token punctuation">(</span>slow<span class="token operator">-></span>val<span class="token punctuation">)</span><span class="token punctuation">;</span></pre></td></tr><tr><td data-num="17"></td><td><pre>        <span class="token keyword">while</span> <span class="token punctuation">(</span>fast<span class="token operator">-></span>next <span class="token operator">&amp;&amp;</span> fast<span class="token operator">-></span>next<span class="token operator">-></span>next<span class="token punctuation">)</span> <span class="token punctuation">&#123;</span></pre></td></tr><tr><td data-num="18"></td><td><pre>            slow <span class="token operator">=</span> slow<span class="token operator">-></span>next<span class="token punctuation">;</span></pre></td></tr><tr><td data-num="19"></td><td><pre>            fast <span class="token operator">=</span> fast<span class="token operator">-></span>next<span class="token operator">-></span>next<span class="token punctuation">;</span></pre></td></tr><tr><td data-num="20"></td><td><pre>            left<span class="token punctuation">.</span><span class="token function">push_back</span><span class="token punctuation">(</span>slow<span class="token operator">-></span>val<span class="token punctuation">)</span><span class="token punctuation">;</span></pre></td></tr><tr><td data-num="21"></td><td><pre>        <span class="token punctuation">&#125;</span></pre></td></tr><tr><td data-num="22"></td><td><pre>        slow <span class="token operator">=</span> slow<span class="token operator">-></span>next<span class="token punctuation">;</span></pre></td></tr><tr><td data-num="23"></td><td><pre>        <span class="token keyword">int</span> res <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span></pre></td></tr><tr><td data-num="24"></td><td><pre>        <span class="token function">reverse</span><span class="token punctuation">(</span>left<span class="token punctuation">.</span><span class="token function">begin</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">,</span> left<span class="token punctuation">.</span><span class="token function">end</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span></pre></td></tr><tr><td data-num="25"></td><td><pre>        <span class="token keyword">for</span> <span class="token punctuation">(</span><span class="token keyword">int</span> i<span class="token operator">=</span><span class="token number">0</span><span class="token punctuation">;</span> i<span class="token operator">&lt;</span>left<span class="token punctuation">.</span><span class="token function">size</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span> i<span class="token operator">++</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span></pre></td></tr><tr><td data-num="26"></td><td><pre>            res <span class="token operator">=</span> <span class="token function">max</span><span class="token punctuation">(</span>res<span class="token punctuation">,</span> left<span class="token punctuation">[</span>i<span class="token punctuation">]</span> <span class="token operator">+</span> slow<span class="token operator">-></span>val<span class="token punctuation">)</span><span class="token punctuation">;</span></pre></td></tr><tr><td data-num="27"></td><td><pre>            slow <span class="token operator">=</span> slow<span class="token operator">-></span>next<span class="token punctuation">;</span></pre></td></tr><tr><td data-num="28"></td><td><pre>        <span class="token punctuation">&#125;</span></pre></td></tr><tr><td data-num="29"></td><td><pre>        <span class="token keyword">return</span> res<span class="token punctuation">;</span></pre></td></tr><tr><td data-num="30"></td><td><pre>    <span class="token punctuation">&#125;</span></pre></td></tr><tr><td data-num="31"></td><td><pre><span class="token punctuation">&#125;</span><span class="token punctuation">;</span></pre></td></tr></table></figure></div><div class="tab" data-id="code" data-title="Java"><figure class="highlight java"><figcaption data-lang="java"></figcaption><table><tr><td data-num="1"></td><td><pre><span class="token keyword">class</span> <span class="token class-name">Solution</span> <span class="token punctuation">&#123;</span></pre></td></tr><tr><td data-num="2"></td><td><pre>    <span class="token keyword">public</span> <span class="token keyword">int</span> <span class="token function">pairSum</span><span class="token punctuation">(</span><span class="token class-name">ListNode</span> head<span class="token punctuation">)</span> <span class="token punctuation">&#123;</span></pre></td></tr><tr><td data-num="3"></td><td><pre>        <span class="token class-name">Deque</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token class-name">Integer</span><span class="token punctuation">></span></span> dq <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">LinkedList</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token punctuation">></span></span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span></pre></td></tr><tr><td data-num="4"></td><td><pre></pre></td></tr><tr><td data-num="5"></td><td><pre>        <span class="token class-name">ListNode</span> curr <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">ListNode</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span></pre></td></tr><tr><td data-num="6"></td><td><pre>        curr <span class="token operator">=</span> head<span class="token punctuation">;</span></pre></td></tr><tr><td data-num="7"></td><td><pre>        <span class="token keyword">while</span><span class="token punctuation">(</span>curr <span class="token operator">!=</span> <span class="token keyword">null</span><span class="token punctuation">)</span><span class="token punctuation">&#123;</span></pre></td></tr><tr><td data-num="8"></td><td><pre>            dq<span class="token punctuation">.</span><span class="token function">add</span><span class="token punctuation">(</span>curr<span class="token punctuation">.</span>val<span class="token punctuation">)</span><span class="token punctuation">;</span></pre></td></tr><tr><td data-num="9"></td><td><pre>            curr <span class="token operator">=</span> curr<span class="token punctuation">.</span>next<span class="token punctuation">;</span></pre></td></tr><tr><td data-num="10"></td><td><pre>        <span class="token punctuation">&#125;</span></pre></td></tr><tr><td data-num="11"></td><td><pre></pre></td></tr><tr><td data-num="12"></td><td><pre>        <span class="token keyword">int</span> max <span class="token operator">=</span> <span class="token class-name">Integer</span><span class="token punctuation">.</span><span class="token constant">MIN_VALUE</span><span class="token punctuation">;</span></pre></td></tr><tr><td data-num="13"></td><td><pre>        <span class="token keyword">while</span><span class="token punctuation">(</span><span class="token operator">!</span>dq<span class="token punctuation">.</span><span class="token function">isEmpty</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">&amp;&amp;</span> dq<span class="token punctuation">.</span><span class="token function">size</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">>=</span> <span class="token number">2</span><span class="token punctuation">)</span><span class="token punctuation">&#123;</span></pre></td></tr><tr><td data-num="14"></td><td><pre>            max <span class="token operator">=</span> <span class="token class-name">Math</span><span class="token punctuation">.</span><span class="token function">max</span><span class="token punctuation">(</span>max<span class="token punctuation">,</span> dq<span class="token punctuation">.</span><span class="token function">pollFirst</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">+</span> dq<span class="token punctuation">.</span><span class="token function">pollLast</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span></pre></td></tr><tr><td data-num="15"></td><td><pre>        <span class="token punctuation">&#125;</span></pre></td></tr><tr><td data-num="16"></td><td><pre></pre></td></tr><tr><td data-num="17"></td><td><pre>        <span class="token keyword">return</span> max<span class="token punctuation">;</span></pre></td></tr><tr><td data-num="18"></td><td><pre>    <span class="token punctuation">&#125;</span></pre></td></tr><tr><td data-num="19"></td><td><pre><span class="token punctuation">&#125;</span></pre></td></tr></table></figure></div><div class="tab" data-id="code" data-title="Python"><pre><code class="language-python"></code></pre></div>]]></content>
      
      
      <categories>
          
          <category> Coding </category>
          
          <category> Leetcode </category>
          
          <category> Medium </category>
          
      </categories>
      
      
        <tags>
            
            <tag> Leetcode </tag>
            
            <tag> Two Pointers </tag>
            
            <tag> Medium </tag>
            
            <tag> Linked List </tag>
            
            <tag> Stack </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>24. Swap Nodes in Pairs</title>
      <link href="/2023/05/16/Coding/leetcode/Medium/24%20Swap%20Nodes%20in%20Pairs/"/>
      <url>/2023/05/16/Coding/leetcode/Medium/24%20Swap%20Nodes%20in%20Pairs/</url>
      
        <content type="html"><![CDATA[<p>⭐️⭐️</p><h2 id="題目敘述"><a class="anchor" href="#題目敘述">#</a> <span class="exturl" data-url="aHR0cHM6Ly9sZWV0Y29kZS5jb20vcHJvYmxlbXMvc3dhcC1ub2Rlcy1pbi1wYWlycy9kZXNjcmlwdGlvbi8=">題目敘述</span></h2><p>Given a linked list, swap every two adjacent nodes and return its head. You must solve the problem without modifying the values in the list’s nodes (i.e., only nodes themselves may be changed.)</p><h3 id="example-1"><a class="anchor" href="#example-1">#</a> Example 1</h3><p><img data-src="https://imgur.com/HJxT8bR.png" alt=""></p><blockquote><p><strong>Input</strong>: head = [1,2,3,4]<br><strong>Output</strong>: [2,1,4,3]</p></blockquote><h3 id="example-2"><a class="anchor" href="#example-2">#</a> Example 2</h3><blockquote><p><strong>Input</strong>: head = []<br><strong>Output</strong>: []</p></blockquote><h3 id="example-3"><a class="anchor" href="#example-3">#</a> Example 3</h3><blockquote><p><strong>Input</strong>: head = [1]<br><strong>Output</strong>: [1]</p></blockquote><h2 id="solution"><a class="anchor" href="#solution">#</a> Solution</h2><div class="tab" data-id="code" data-title="C++"><figure class="highlight cpp"><figcaption data-lang="C++"></figcaption><table><tr><td data-num="1"></td><td><pre><span class="token comment">/**</pre></td></tr><tr><td data-num="2"></td><td><pre> * Definition for singly-linked list.</pre></td></tr><tr><td data-num="3"></td><td><pre> * struct ListNode &#123;</pre></td></tr><tr><td data-num="4"></td><td><pre> *     int val;</pre></td></tr><tr><td data-num="5"></td><td><pre> *     ListNode *next;</pre></td></tr><tr><td data-num="6"></td><td><pre> *     ListNode() : val(0), next(nullptr) &#123;&#125;</pre></td></tr><tr><td data-num="7"></td><td><pre> *     ListNode(int x) : val(x), next(nullptr) &#123;&#125;</pre></td></tr><tr><td data-num="8"></td><td><pre> *     ListNode(int x, ListNode *next) : val(x), next(next) &#123;&#125;</pre></td></tr><tr><td data-num="9"></td><td><pre> * &#125;;</pre></td></tr><tr><td data-num="10"></td><td><pre> */</span></pre></td></tr><tr><td data-num="11"></td><td><pre><span class="token keyword">class</span> <span class="token class-name">Solution</span> <span class="token punctuation">&#123;</span></pre></td></tr><tr><td data-num="12"></td><td><pre><span class="token keyword">public</span><span class="token operator">:</span></pre></td></tr><tr><td data-num="13"></td><td><pre>    ListNode<span class="token operator">*</span> <span class="token function">swapPairs</span><span class="token punctuation">(</span>ListNode<span class="token operator">*</span> head<span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>        </pre></td></tr><tr><td data-num="14"></td><td><pre>        ListNode<span class="token operator">*</span> first <span class="token operator">=</span> head<span class="token punctuation">;</span>        </pre></td></tr><tr><td data-num="15"></td><td><pre>        <span class="token keyword">if</span> <span class="token punctuation">(</span>first<span class="token operator">==</span><span class="token constant">NULL</span> <span class="token operator">||</span> first<span class="token operator">-></span>next<span class="token operator">==</span><span class="token constant">NULL</span><span class="token punctuation">)</span> <span class="token keyword">return</span> head<span class="token punctuation">;</span>        </pre></td></tr><tr><td data-num="16"></td><td><pre>        ListNode<span class="token operator">*</span> second <span class="token operator">=</span> head<span class="token operator">-></span>next<span class="token punctuation">;</span>        </pre></td></tr><tr><td data-num="17"></td><td><pre>        </pre></td></tr><tr><td data-num="18"></td><td><pre>        <span class="token keyword">while</span> <span class="token punctuation">(</span>second <span class="token operator">&amp;&amp;</span> second<span class="token operator">-></span>next<span class="token punctuation">)</span> <span class="token punctuation">&#123;</span></pre></td></tr><tr><td data-num="19"></td><td><pre>            <span class="token keyword">int</span> temp <span class="token operator">=</span> first<span class="token operator">-></span>val<span class="token punctuation">;</span></pre></td></tr><tr><td data-num="20"></td><td><pre>            first<span class="token operator">-></span>val <span class="token operator">=</span> second<span class="token operator">-></span>val<span class="token punctuation">;</span></pre></td></tr><tr><td data-num="21"></td><td><pre>            second<span class="token operator">-></span>val <span class="token operator">=</span> temp<span class="token punctuation">;</span></pre></td></tr><tr><td data-num="22"></td><td><pre>            </pre></td></tr><tr><td data-num="23"></td><td><pre>            first <span class="token operator">=</span> first<span class="token operator">-></span>next<span class="token operator">-></span>next<span class="token punctuation">;</span></pre></td></tr><tr><td data-num="24"></td><td><pre>            second <span class="token operator">=</span> second<span class="token operator">-></span>next<span class="token operator">-></span>next<span class="token punctuation">;</span></pre></td></tr><tr><td data-num="25"></td><td><pre>        <span class="token punctuation">&#125;</span></pre></td></tr><tr><td data-num="26"></td><td><pre>        </pre></td></tr><tr><td data-num="27"></td><td><pre>        <span class="token keyword">if</span> <span class="token punctuation">(</span>second<span class="token punctuation">)</span> <span class="token punctuation">&#123;</span></pre></td></tr><tr><td data-num="28"></td><td><pre>            <span class="token keyword">int</span> temp <span class="token operator">=</span> first<span class="token operator">-></span>val<span class="token punctuation">;</span></pre></td></tr><tr><td data-num="29"></td><td><pre>            first<span class="token operator">-></span>val <span class="token operator">=</span> second<span class="token operator">-></span>val<span class="token punctuation">;</span></pre></td></tr><tr><td data-num="30"></td><td><pre>            second<span class="token operator">-></span>val <span class="token operator">=</span> temp<span class="token punctuation">;</span></pre></td></tr><tr><td data-num="31"></td><td><pre>        <span class="token punctuation">&#125;</span></pre></td></tr><tr><td data-num="32"></td><td><pre>        <span class="token keyword">return</span> head<span class="token punctuation">;</span></pre></td></tr><tr><td data-num="33"></td><td><pre>    <span class="token punctuation">&#125;</span></pre></td></tr><tr><td data-num="34"></td><td><pre><span class="token punctuation">&#125;</span><span class="token punctuation">;</span></pre></td></tr></table></figure></div><div class="tab" data-id="code" data-title="Java"><pre><code class="language-java"></code></pre></div><div class="tab" data-id="code" data-title="Python"><pre><code class="language-python"></code></pre></div>]]></content>
      
      
      <categories>
          
          <category> Coding </category>
          
          <category> Leetcode </category>
          
          <category> Medium </category>
          
      </categories>
      
      
        <tags>
            
            <tag> Leetcode </tag>
            
            <tag> Medium </tag>
            
            <tag> Linked List </tag>
            
            <tag> Recursion </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>2637. Promise Time Limit</title>
      <link href="/2023/05/16/Coding/leetcode/Easy/2637%20Promise%20Time%20Limit/"/>
      <url>/2023/05/16/Coding/leetcode/Easy/2637%20Promise%20Time%20Limit/</url>
      
        <content type="html"><![CDATA[<p>⭐️</p><h2 id="題目敘述"><a class="anchor" href="#題目敘述">#</a> <span class="exturl" data-url="aHR0cHM6Ly9sZWV0Y29kZS5jb20vcHJvYmxlbXMvcHJvbWlzZS10aW1lLWxpbWl0Lz91dG1fY2FtcGFpZ249UG9zdEQxMiZhbXA7dXRtX21lZGl1bT1Qb3N0JmFtcDt1dG1fc291cmNlPVBvc3QmYW1wO2dpb19saW5rX2lkPW5vbWJONVo5">題目敘述</span></h2><p>Given an asyncronous function  <code>fn</code>  and a time  <code>t</code>  in milliseconds, return a new <strong>time limited</strong> version of the input function.</p><p>A <strong>time limited</strong> function is a function that is identical to the original unless it takes longer than  <code>t</code>  milliseconds to fullfill. In that case, it will reject with  <code>&quot;Time Limit Exceeded&quot;</code> .  Note that it should reject with a string, not an  <code>Error</code> .</p><h3 id="example-1"><a class="anchor" href="#example-1">#</a> Example 1</h3><blockquote><p><strong>Input</strong>:<br>fn = async (n) =&gt; {<br>await new Promise(res =&gt; setTimeout(res, 100));<br>return n * n;<br>}<br>inputs = [5]<br>t = 50<br><strong>Output</strong>: {“rejected”:“Time Limit Exceeded”,“time”:50}<br><strong>Explanation</strong>:<br>The provided function is set to resolve after 100ms. However, the time limit is set to 50ms. It rejects at t=50ms because the time limit was reached.</p></blockquote><h3 id="example-2"><a class="anchor" href="#example-2">#</a> Example 2</h3><blockquote><p><strong>Input</strong>:<br>fn = async (n) =&gt; {<br>await new Promise(res =&gt; setTimeout(res, 100));<br>return n * n;<br>}<br>inputs = [5]<br>t = 150<br><strong>Output</strong>: {“resolved”:25,“time”:100}<br><strong>Explanation</strong>:<br>The function resolved 5 * 5 = 25 at t=100ms. The time limit is never reached.</p></blockquote><h3 id="example-3"><a class="anchor" href="#example-3">#</a> Example 3</h3><blockquote><p><strong>Input</strong>:<br>fn = async (a, b) =&gt; {<br>await new Promise(res =&gt; setTimeout(res, 120));<br>return a + b;<br>}<br>inputs = [5,10]<br>t = 150<br><strong>Output</strong>: {“resolved”:15,“time”:120}<br><strong>Explanation</strong>:<br>The function resolved 5 + 10 = 15 at t=120ms. The time limit is never reached.</p></blockquote><h3 id="example-4"><a class="anchor" href="#example-4">#</a> Example 4</h3><blockquote><p><strong>Input</strong>:<br>fn = async () =&gt; {<br>throw “Error”;<br>}<br>inputs = []<br>t = 1000<br><strong>Output</strong>: {“rejected”:“Error”,“time”:0}<br><strong>Explanation</strong>:<br>The function immediately throws an error.</p></blockquote><h2 id="solution"><a class="anchor" href="#solution">#</a> Solution</h2><div class="tab" data-id="code" data-title="Javascript"><figure class="highlight javascript"><figcaption data-lang="javascript"></figcaption><table><tr><td data-num="1"></td><td><pre><span class="token comment">/**</pre></td></tr><tr><td data-num="2"></td><td><pre> * @param &#123;Function&#125; fn</pre></td></tr><tr><td data-num="3"></td><td><pre> * @param &#123;number&#125; t</pre></td></tr><tr><td data-num="4"></td><td><pre> * @return &#123;Function&#125;</pre></td></tr><tr><td data-num="5"></td><td><pre> */</span></pre></td></tr><tr><td data-num="6"></td><td><pre><span class="token keyword">var</span> <span class="token function-variable function">timeLimit</span> <span class="token operator">=</span> <span class="token keyword">function</span><span class="token punctuation">(</span><span class="token parameter">fn<span class="token punctuation">,</span> t</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span></pre></td></tr><tr><td data-num="7"></td><td><pre><span class="token keyword">return</span> <span class="token keyword">async</span> <span class="token keyword">function</span><span class="token punctuation">(</span><span class="token parameter"><span class="token operator">...</span>args</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span></pre></td></tr><tr><td data-num="8"></td><td><pre>        <span class="token keyword">const</span> orgfn <span class="token operator">=</span> <span class="token function">fn</span><span class="token punctuation">(</span><span class="token operator">...</span>args<span class="token punctuation">)</span><span class="token punctuation">;</span></pre></td></tr><tr><td data-num="9"></td><td><pre>        <span class="token keyword">const</span> timeoutfn <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">Promise</span><span class="token punctuation">(</span><span class="token punctuation">(</span><span class="token parameter">resolved<span class="token punctuation">,</span> reject</span><span class="token punctuation">)</span> <span class="token operator">=></span> <span class="token punctuation">&#123;</span></pre></td></tr><tr><td data-num="10"></td><td><pre>            <span class="token function">setTimeout</span><span class="token punctuation">(</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">=></span> <span class="token function">reject</span><span class="token punctuation">(</span><span class="token string">"Time Limit Exceeded"</span><span class="token punctuation">)</span><span class="token punctuation">,</span> t<span class="token punctuation">)</span><span class="token punctuation">;</span></pre></td></tr><tr><td data-num="11"></td><td><pre>        <span class="token punctuation">&#125;</span><span class="token punctuation">)</span><span class="token punctuation">;</span></pre></td></tr><tr><td data-num="12"></td><td><pre>        <span class="token keyword">return</span> Promise<span class="token punctuation">.</span><span class="token function">race</span><span class="token punctuation">(</span><span class="token punctuation">[</span>orgfn<span class="token punctuation">,</span> timeoutfn<span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token punctuation">;</span></pre></td></tr><tr><td data-num="13"></td><td><pre>    <span class="token punctuation">&#125;</span></pre></td></tr><tr><td data-num="14"></td><td><pre><span class="token punctuation">&#125;</span><span class="token punctuation">;</span></pre></td></tr><tr><td data-num="15"></td><td><pre></pre></td></tr><tr><td data-num="16"></td><td><pre><span class="token comment">/**</pre></td></tr><tr><td data-num="17"></td><td><pre> * const limited = timeLimit((t) => new Promise(res => setTimeout(res, t)), 100);</pre></td></tr><tr><td data-num="18"></td><td><pre> * limited(150).catch(console.log) // "Time Limit Exceeded" at t=100ms</pre></td></tr><tr><td data-num="19"></td><td><pre> */</span></pre></td></tr></table></figure></div><div class="tab" data-id="code" data-title="Typescript"><figure class="highlight typescript"><figcaption data-lang="typescript"></figcaption><table><tr><td data-num="1"></td><td><pre><span class="token keyword">type</span> <span class="token class-name">Fn</span> <span class="token operator">=</span> <span class="token punctuation">(</span><span class="token operator">...</span>params<span class="token operator">:</span> <span class="token builtin">any</span><span class="token punctuation">[</span><span class="token punctuation">]</span><span class="token punctuation">)</span> <span class="token operator">=></span> <span class="token builtin">Promise</span><span class="token operator">&lt;</span><span class="token builtin">any</span><span class="token operator">></span><span class="token punctuation">;</span></pre></td></tr><tr><td data-num="2"></td><td><pre></pre></td></tr><tr><td data-num="3"></td><td><pre><span class="token keyword">function</span> <span class="token function">timeLimit</span><span class="token punctuation">(</span>fn<span class="token operator">:</span> Fn<span class="token punctuation">,</span> t<span class="token operator">:</span> <span class="token builtin">number</span><span class="token punctuation">)</span><span class="token operator">:</span> Fn <span class="token punctuation">&#123;</span></pre></td></tr><tr><td data-num="4"></td><td><pre><span class="token keyword">return</span> <span class="token keyword">async</span> <span class="token keyword">function</span><span class="token punctuation">(</span><span class="token operator">...</span>args<span class="token punctuation">)</span> <span class="token punctuation">&#123;</span></pre></td></tr><tr><td data-num="5"></td><td><pre>        <span class="token keyword">const</span> orgfn <span class="token operator">=</span> <span class="token function">fn</span><span class="token punctuation">(</span><span class="token operator">...</span>args<span class="token punctuation">)</span><span class="token punctuation">;</span></pre></td></tr><tr><td data-num="6"></td><td><pre>        <span class="token keyword">const</span> timeoutfn <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name"><span class="token builtin">Promise</span></span><span class="token punctuation">(</span><span class="token punctuation">(</span>resolve<span class="token punctuation">,</span> reject<span class="token punctuation">)</span> <span class="token operator">=></span> <span class="token punctuation">&#123;</span></pre></td></tr><tr><td data-num="7"></td><td><pre>            <span class="token function">setTimeout</span><span class="token punctuation">(</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">=></span> <span class="token function">reject</span><span class="token punctuation">(</span><span class="token string">"Time Limit Exceeded"</span><span class="token punctuation">)</span><span class="token punctuation">,</span> t<span class="token punctuation">)</span><span class="token punctuation">;</span></pre></td></tr><tr><td data-num="8"></td><td><pre>        <span class="token punctuation">&#125;</span><span class="token punctuation">)</span><span class="token punctuation">;</span></pre></td></tr><tr><td data-num="9"></td><td><pre>        <span class="token keyword">return</span> <span class="token builtin">Promise</span><span class="token punctuation">.</span><span class="token function">race</span><span class="token punctuation">(</span><span class="token punctuation">[</span>orgfn<span class="token punctuation">,</span> timeoutfn<span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token punctuation">;</span></pre></td></tr><tr><td data-num="10"></td><td><pre>    <span class="token punctuation">&#125;</span></pre></td></tr><tr><td data-num="11"></td><td><pre><span class="token punctuation">&#125;</span><span class="token punctuation">;</span></pre></td></tr><tr><td data-num="12"></td><td><pre></pre></td></tr><tr><td data-num="13"></td><td><pre><span class="token comment">/**</pre></td></tr><tr><td data-num="14"></td><td><pre> * const limited = timeLimit((t) => new Promise(res => setTimeout(res, t)), 100);</pre></td></tr><tr><td data-num="15"></td><td><pre> * limited(150).catch(console.log) // "Time Limit Exceeded" at t=100ms</pre></td></tr><tr><td data-num="16"></td><td><pre> */</span></pre></td></tr></table></figure></div>]]></content>
      
      
      <categories>
          
          <category> Coding </category>
          
          <category> Leetcode </category>
          
          <category> Easy </category>
          
      </categories>
      
      
        <tags>
            
            <tag> Leetcode </tag>
            
            <tag> Easy </tag>
            
            <tag> Typescript </tag>
            
            <tag> Promise </tag>
            
            <tag> Javasscript </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>1721. Swapping Nodes in a Linked List</title>
      <link href="/2023/05/15/Coding/leetcode/Medium/1721%20Swapping%20Nodes%20in%20a%20Linked%20List/"/>
      <url>/2023/05/15/Coding/leetcode/Medium/1721%20Swapping%20Nodes%20in%20a%20Linked%20List/</url>
      
        <content type="html"><![CDATA[<p>⭐️⭐️</p><h2 id="題目敘述"><a class="anchor" href="#題目敘述">#</a> <span class="exturl" data-url="aHR0cHM6Ly9sZWV0Y29kZS5jb20vcHJvYmxlbXMvc3dhcHBpbmctbm9kZXMtaW4tYS1saW5rZWQtbGlzdC8=">題目敘述</span></h2><p>You are given the  <code>head</code>  of a linked list, and an integer  <code>k</code> .</p><p>Return <em>the head of the linked list after <strong>swapping</strong> the values of the  <code>kth</code>  node from the beginning and the  <code>kth</code>  node from the end (the list is <strong>1-indexed</strong>)</em>.</p><h3 id="example-1"><a class="anchor" href="#example-1">#</a> Example 1</h3><p><img data-src="https://imgur.com/GLx5YvE.png" alt=""></p><blockquote><p><strong>Input</strong>: head = [1,2,3,4,5], k = 2<br><strong>Output</strong>: [1,4,3,2,5]</p></blockquote><h3 id="example-2"><a class="anchor" href="#example-2">#</a> Example 2</h3><blockquote><p><strong>Input</strong>: head = [7,9,6,6,7,8,3,0,9,5], k = 5<br><strong>Output</strong>: [7,9,6,6,8,7,3,0,9,5]</p></blockquote><h2 id="solution"><a class="anchor" href="#solution">#</a> Solution</h2><div class="tab" data-id="code" data-title="C++"><figure class="highlight cpp"><figcaption data-lang="C++"></figcaption><table><tr><td data-num="1"></td><td><pre><span class="token comment">/**</pre></td></tr><tr><td data-num="2"></td><td><pre> * Definition for singly-linked list.</pre></td></tr><tr><td data-num="3"></td><td><pre> * struct ListNode &#123;</pre></td></tr><tr><td data-num="4"></td><td><pre> *     int val;</pre></td></tr><tr><td data-num="5"></td><td><pre> *     ListNode *next;</pre></td></tr><tr><td data-num="6"></td><td><pre> *     ListNode() : val(0), next(nullptr) &#123;&#125;</pre></td></tr><tr><td data-num="7"></td><td><pre> *     ListNode(int x) : val(x), next(nullptr) &#123;&#125;</pre></td></tr><tr><td data-num="8"></td><td><pre> *     ListNode(int x, ListNode *next) : val(x), next(next) &#123;&#125;</pre></td></tr><tr><td data-num="9"></td><td><pre> * &#125;;</pre></td></tr><tr><td data-num="10"></td><td><pre> */</span></pre></td></tr><tr><td data-num="11"></td><td><pre><span class="token keyword">class</span> <span class="token class-name">Solution</span> <span class="token punctuation">&#123;</span></pre></td></tr><tr><td data-num="12"></td><td><pre><span class="token keyword">public</span><span class="token operator">:</span></pre></td></tr><tr><td data-num="13"></td><td><pre>    ListNode<span class="token operator">*</span> <span class="token function">swapNodes</span><span class="token punctuation">(</span>ListNode<span class="token operator">*</span> head<span class="token punctuation">,</span> <span class="token keyword">int</span> k<span class="token punctuation">)</span> <span class="token punctuation">&#123;</span></pre></td></tr><tr><td data-num="14"></td><td><pre>        <span class="token keyword">int</span> len <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span></pre></td></tr><tr><td data-num="15"></td><td><pre>        ListNode<span class="token operator">*</span> tmp <span class="token operator">=</span> head<span class="token punctuation">;</span></pre></td></tr><tr><td data-num="16"></td><td><pre>        <span class="token keyword">while</span> <span class="token punctuation">(</span>tmp<span class="token punctuation">)</span> <span class="token punctuation">&#123;</span></pre></td></tr><tr><td data-num="17"></td><td><pre>            len<span class="token operator">++</span><span class="token punctuation">;</span></pre></td></tr><tr><td data-num="18"></td><td><pre>            tmp <span class="token operator">=</span> tmp<span class="token operator">-></span>next<span class="token punctuation">;</span></pre></td></tr><tr><td data-num="19"></td><td><pre>        <span class="token punctuation">&#125;</span></pre></td></tr><tr><td data-num="20"></td><td><pre></pre></td></tr><tr><td data-num="21"></td><td><pre>        ListNode<span class="token operator">*</span> left <span class="token operator">=</span> head<span class="token punctuation">;</span></pre></td></tr><tr><td data-num="22"></td><td><pre>        ListNode<span class="token operator">*</span> right <span class="token operator">=</span> head<span class="token punctuation">;</span></pre></td></tr><tr><td data-num="23"></td><td><pre>        <span class="token keyword">for</span> <span class="token punctuation">(</span><span class="token keyword">int</span> i<span class="token operator">=</span><span class="token number">1</span><span class="token punctuation">;</span> i<span class="token operator">&lt;</span>k<span class="token punctuation">;</span> i<span class="token operator">++</span><span class="token punctuation">)</span> left <span class="token operator">=</span> left<span class="token operator">-></span>next<span class="token punctuation">;</span></pre></td></tr><tr><td data-num="24"></td><td><pre>        <span class="token keyword">for</span> <span class="token punctuation">(</span><span class="token keyword">int</span> j<span class="token operator">=</span><span class="token number">1</span><span class="token punctuation">;</span> j<span class="token operator">&lt;=</span>len<span class="token operator">-</span>k<span class="token punctuation">;</span> j<span class="token operator">++</span><span class="token punctuation">)</span> right <span class="token operator">=</span> right<span class="token operator">-></span>next<span class="token punctuation">;</span></pre></td></tr><tr><td data-num="25"></td><td><pre>        <span class="token function">swap</span><span class="token punctuation">(</span>left<span class="token operator">-></span>val<span class="token punctuation">,</span> right<span class="token operator">-></span>val<span class="token punctuation">)</span><span class="token punctuation">;</span></pre></td></tr><tr><td data-num="26"></td><td><pre>        <span class="token keyword">return</span> head<span class="token punctuation">;</span></pre></td></tr><tr><td data-num="27"></td><td><pre>    <span class="token punctuation">&#125;</span></pre></td></tr><tr><td data-num="28"></td><td><pre><span class="token punctuation">&#125;</span><span class="token punctuation">;</span></pre></td></tr></table></figure></div><div class="tab" data-id="code" data-title="Java"><figure class="highlight java"><figcaption data-lang="java"></figcaption><table><tr><td data-num="1"></td><td><pre><span class="token keyword">class</span> <span class="token class-name">Solution</span> <span class="token punctuation">&#123;</span></pre></td></tr><tr><td data-num="2"></td><td><pre>    <span class="token keyword">public</span> <span class="token class-name">ListNode</span> <span class="token function">swapNodes</span><span class="token punctuation">(</span><span class="token class-name">ListNode</span> head<span class="token punctuation">,</span> <span class="token keyword">int</span> k<span class="token punctuation">)</span> <span class="token punctuation">&#123;</span></pre></td></tr><tr><td data-num="3"></td><td><pre>        <span class="token class-name">ListNode</span> start <span class="token operator">=</span> head<span class="token punctuation">,</span> end <span class="token operator">=</span> head<span class="token punctuation">;</span></pre></td></tr><tr><td data-num="4"></td><td><pre>        </pre></td></tr><tr><td data-num="5"></td><td><pre>        <span class="token keyword">for</span> <span class="token punctuation">(</span><span class="token keyword">int</span> i <span class="token operator">=</span> <span class="token number">1</span><span class="token punctuation">;</span> i <span class="token operator">&lt;</span> k<span class="token punctuation">;</span> i<span class="token operator">++</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span></pre></td></tr><tr><td data-num="6"></td><td><pre>            start <span class="token operator">=</span> start<span class="token punctuation">.</span>next<span class="token punctuation">;</span></pre></td></tr><tr><td data-num="7"></td><td><pre>        <span class="token punctuation">&#125;</span></pre></td></tr><tr><td data-num="8"></td><td><pre>        </pre></td></tr><tr><td data-num="9"></td><td><pre>        <span class="token class-name">ListNode</span> curr <span class="token operator">=</span> start<span class="token punctuation">;</span></pre></td></tr><tr><td data-num="10"></td><td><pre>        <span class="token keyword">while</span> <span class="token punctuation">(</span>curr<span class="token punctuation">.</span>next <span class="token operator">!=</span> <span class="token keyword">null</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span></pre></td></tr><tr><td data-num="11"></td><td><pre>            curr <span class="token operator">=</span> curr<span class="token punctuation">.</span>next<span class="token punctuation">;</span></pre></td></tr><tr><td data-num="12"></td><td><pre>            end <span class="token operator">=</span> end<span class="token punctuation">.</span>next<span class="token punctuation">;</span></pre></td></tr><tr><td data-num="13"></td><td><pre>        <span class="token punctuation">&#125;</span></pre></td></tr><tr><td data-num="14"></td><td><pre>        </pre></td></tr><tr><td data-num="15"></td><td><pre>        <span class="token keyword">int</span> temp <span class="token operator">=</span> start<span class="token punctuation">.</span>val<span class="token punctuation">;</span></pre></td></tr><tr><td data-num="16"></td><td><pre>        start<span class="token punctuation">.</span>val <span class="token operator">=</span> end<span class="token punctuation">.</span>val<span class="token punctuation">;</span></pre></td></tr><tr><td data-num="17"></td><td><pre>        end<span class="token punctuation">.</span>val <span class="token operator">=</span> temp<span class="token punctuation">;</span></pre></td></tr><tr><td data-num="18"></td><td><pre>        </pre></td></tr><tr><td data-num="19"></td><td><pre>        <span class="token keyword">return</span> head<span class="token punctuation">;</span></pre></td></tr><tr><td data-num="20"></td><td><pre>    <span class="token punctuation">&#125;</span></pre></td></tr><tr><td data-num="21"></td><td><pre><span class="token punctuation">&#125;</span></pre></td></tr></table></figure></div><div class="tab" data-id="code" data-title="Python"><pre><code class="language-python"></code></pre></div>]]></content>
      
      
      <categories>
          
          <category> Coding </category>
          
          <category> Leetcode </category>
          
          <category> Medium </category>
          
      </categories>
      
      
        <tags>
            
            <tag> Leetcode </tag>
            
            <tag> Two Pointers </tag>
            
            <tag> Medium </tag>
            
            <tag> Linked List </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>2621. Sleep</title>
      <link href="/2023/05/15/Coding/leetcode/Easy/2621%20Sleep/"/>
      <url>/2023/05/15/Coding/leetcode/Easy/2621%20Sleep/</url>
      
        <content type="html"><![CDATA[<p>⭐️</p><h2 id="題目敘述"><a class="anchor" href="#題目敘述">#</a> <span class="exturl" data-url="aHR0cHM6Ly9sZWV0Y29kZS5jb20vcHJvYmxlbXMvc2xlZXAvP3V0bV9jYW1wYWlnbj1Qb3N0RDExJmFtcDt1dG1fbWVkaXVtPVBvc3QmYW1wO3V0bV9zb3VyY2U9UG9zdCZhbXA7Z2lvX2xpbmtfaWQ9NVJwMldtem8=">題目敘述</span></h2><p>Given a positive integer  <code>millis</code> , write an asyncronous function that sleeps for  <code>millis</code>  milliseconds. It can resolve any value.</p><h3 id="example-1"><a class="anchor" href="#example-1">#</a> Example 1</h3><blockquote><p><strong>Input</strong>: millis = 100<br><strong>Output</strong>: 100<br><strong>Explanation</strong>: It should return a promise that resolves after 100ms.<br>let t = Date.now();<br>sleep(100).then(() =&gt; {<br>console.log(Date.now() - t); // 100<br>});</p></blockquote><h3 id="example-2"><a class="anchor" href="#example-2">#</a> Example 2</h3><blockquote><p><strong>Input</strong>: millis = 200<br><strong>Output</strong>: 200<br><strong>Explanation</strong>: It should return a promise that resolves after 200ms.</p></blockquote><h2 id="solution"><a class="anchor" href="#solution">#</a> Solution</h2><div class="tab" data-id="code" data-title="Javascript"><figure class="highlight javascript"><figcaption data-lang="javascript"></figcaption><table><tr><td data-num="1"></td><td><pre><span class="token comment">/**</pre></td></tr><tr><td data-num="2"></td><td><pre> * @param &#123;number&#125; millis</pre></td></tr><tr><td data-num="3"></td><td><pre> */</span></pre></td></tr><tr><td data-num="4"></td><td><pre><span class="token keyword">async</span> <span class="token keyword">function</span> <span class="token function">sleep</span><span class="token punctuation">(</span><span class="token parameter">millis</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span></pre></td></tr><tr><td data-num="5"></td><td><pre>    <span class="token keyword">return</span> <span class="token keyword">new</span> <span class="token class-name">Promise</span><span class="token punctuation">(</span><span class="token parameter">resolve</span> <span class="token operator">=></span> <span class="token function">setTimeout</span><span class="token punctuation">(</span>resolve<span class="token punctuation">,</span> millis<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span></pre></td></tr><tr><td data-num="6"></td><td><pre><span class="token punctuation">&#125;</span></pre></td></tr><tr><td data-num="7"></td><td><pre></pre></td></tr><tr><td data-num="8"></td><td><pre><span class="token comment">/** </pre></td></tr><tr><td data-num="9"></td><td><pre> * let t = Date.now()</pre></td></tr><tr><td data-num="10"></td><td><pre> * sleep(100).then(() => console.log(Date.now() - t)) // 100</pre></td></tr><tr><td data-num="11"></td><td><pre> */</span></pre></td></tr></table></figure></div><div class="tab" data-id="code" data-title="Typescript"><figure class="highlight typescript"><figcaption data-lang="typescript"></figcaption><table><tr><td data-num="1"></td><td><pre><span class="token keyword">async</span> <span class="token keyword">function</span> <span class="token function">sleep</span><span class="token punctuation">(</span>millis<span class="token operator">:</span> <span class="token builtin">number</span><span class="token punctuation">)</span><span class="token operator">:</span> <span class="token builtin">Promise</span><span class="token operator">&lt;</span><span class="token keyword">void</span><span class="token operator">></span> <span class="token punctuation">&#123;</span></pre></td></tr><tr><td data-num="2"></td><td><pre>    <span class="token keyword">return</span> <span class="token keyword">new</span> <span class="token class-name"><span class="token builtin">Promise</span></span><span class="token punctuation">(</span>resolve <span class="token operator">=></span> <span class="token function">setTimeout</span><span class="token punctuation">(</span>resolve<span class="token punctuation">,</span> millis<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>   </pre></td></tr><tr><td data-num="3"></td><td><pre><span class="token punctuation">&#125;</span></pre></td></tr><tr><td data-num="4"></td><td><pre></pre></td></tr><tr><td data-num="5"></td><td><pre></pre></td></tr><tr><td data-num="6"></td><td><pre><span class="token comment">/** </pre></td></tr><tr><td data-num="7"></td><td><pre> * let t = Date.now()</pre></td></tr><tr><td data-num="8"></td><td><pre> * sleep(100).then(() => console.log(Date.now() - t)) // 100</pre></td></tr><tr><td data-num="9"></td><td><pre> */</span></pre></td></tr></table></figure></div>]]></content>
      
      
      <categories>
          
          <category> Coding </category>
          
          <category> Leetcode </category>
          
          <category> Easy </category>
          
      </categories>
      
      
        <tags>
            
            <tag> Javascript </tag>
            
            <tag> Leetcode </tag>
            
            <tag> Easy </tag>
            
            <tag> Typescript </tag>
            
            <tag> Promise </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>2632. Curry</title>
      <link href="/2023/05/15/Coding/leetcode/Medium/2632%20Curry/"/>
      <url>/2023/05/15/Coding/leetcode/Medium/2632%20Curry/</url>
      
        <content type="html"><![CDATA[<p>⭐️⭐️</p><h2 id="題目敘述"><a class="anchor" href="#題目敘述">#</a> <span class="exturl" data-url="aHR0cHM6Ly9sZWV0Y29kZS5jb20vcHJvYmxlbXMvY3VycnkvP3V0bV9jYW1wYWlnbj1Qb3N0RDEwJmFtcDt1dG1fbWVkaXVtPVBvc3QmYW1wO3V0bV9zb3VyY2U9UG9zdCZhbXA7Z2lvX2xpbmtfaWQ9UVJla3hnam8=">題目敘述</span></h2><p>Given a function  <code>fn</code> , return a <strong>curried</strong> version of that function.</p><p>A <strong>curried</strong> function is a function that accepts fewer or an equal number of parameters as the original function and returns either another <strong>curried</strong> function or the same value the original function would have returned.</p><p>In practical terms, if you called the original function like  <code>sum(1,2,3)</code> , you would call the curried version like  <code>csum(1)(2)(3)</code> ,  <code>csum(1)(2,3)</code> ,  <code>csum(1,2)(3)</code> , or  <code>csum(1,2,3)</code> . All these methods of calling the <strong>curried</strong> function should return the same value as the original.</p><h3 id="example-1"><a class="anchor" href="#example-1">#</a> Example 1</h3><blockquote><p><strong>Input</strong>:<br>fn = function sum(a, b, c) { return a + b + c; }<br>inputs = [[1],[2],[3]]<br><strong>Output</strong>: 6<br><strong>Explanation</strong>:<br>The code being executed is:<br>const curriedSum = curry(fn);<br>curriedSum(1)(2)(3) === 6;<br>curriedSum(1)(2)(3) should return the same value as sum(1, 2, 3).</p></blockquote><h3 id="example-2"><a class="anchor" href="#example-2">#</a> Example 2</h3><blockquote><p><strong>Input</strong>:<br>fn = function sum(a, b, c) { return a + b + c; }<br>inputs = [[1,2],[3]]<br><strong>Output</strong>: 6<br><strong>Explanation</strong>:<br>curriedSum(1, 2)(3) should return the same value as sum(1, 2, 3).</p></blockquote><h3 id="example-3"><a class="anchor" href="#example-3">#</a> Example 3</h3><blockquote><p><strong>Input</strong>:<br>fn = function sum(a, b, c) { return a + b + c; }<br>inputs = [[],[],[1,2,3]]<br><strong>Output</strong>: 6<br><strong>Explanation</strong>:<br>You should be able to pass the parameters in any way, including all at once or none at all.<br>curriedSum()()(1, 2, 3) should return the same value as sum(1, 2, 3).</p></blockquote><h3 id="example-4"><a class="anchor" href="#example-4">#</a> Example 4</h3><blockquote><p><strong>Input</strong>:<br>fn = function life() { return 42; }<br>inputs = [[]]<br><strong>Output</strong>: 42<br><strong>Explanation</strong>:<br>currying a function that accepts zero parameters should effectively do nothing.<br>curriedLife() === 42</p></blockquote><h2 id="solution"><a class="anchor" href="#solution">#</a> Solution</h2><div class="tab" data-id="code" data-title="Javascript"><figure class="highlight javascript"><figcaption data-lang="javascript"></figcaption><table><tr><td data-num="1"></td><td><pre><span class="token comment">/**</pre></td></tr><tr><td data-num="2"></td><td><pre> * @param &#123;Function&#125; fn</pre></td></tr><tr><td data-num="3"></td><td><pre> * @return &#123;Function&#125;</pre></td></tr><tr><td data-num="4"></td><td><pre> */</span></pre></td></tr><tr><td data-num="5"></td><td><pre><span class="token keyword">var</span> <span class="token function-variable function">curry</span> <span class="token operator">=</span> <span class="token keyword">function</span><span class="token punctuation">(</span><span class="token parameter">fn</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span></pre></td></tr><tr><td data-num="6"></td><td><pre>    <span class="token keyword">return</span> <span class="token keyword">function</span> <span class="token function">curried</span><span class="token punctuation">(</span><span class="token parameter"><span class="token operator">...</span>args</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span></pre></td></tr><tr><td data-num="7"></td><td><pre>        <span class="token keyword">if</span> <span class="token punctuation">(</span>args<span class="token punctuation">.</span>length <span class="token operator">>=</span> fn<span class="token punctuation">.</span>length<span class="token punctuation">)</span> <span class="token keyword">return</span> <span class="token function">fn</span><span class="token punctuation">(</span><span class="token operator">...</span>args<span class="token punctuation">)</span><span class="token punctuation">;</span></pre></td></tr><tr><td data-num="8"></td><td><pre>        <span class="token keyword">else</span> <span class="token keyword">return</span> <span class="token punctuation">(</span><span class="token parameter"><span class="token operator">...</span>moreArgs</span><span class="token punctuation">)</span> <span class="token operator">=></span> <span class="token function">curried</span><span class="token punctuation">(</span><span class="token operator">...</span>args<span class="token punctuation">,</span> <span class="token operator">...</span>moreArgs<span class="token punctuation">)</span><span class="token punctuation">;</span></pre></td></tr><tr><td data-num="9"></td><td><pre>    <span class="token punctuation">&#125;</span><span class="token punctuation">;</span></pre></td></tr><tr><td data-num="10"></td><td><pre><span class="token punctuation">&#125;</span><span class="token punctuation">;</span></pre></td></tr><tr><td data-num="11"></td><td><pre></pre></td></tr><tr><td data-num="12"></td><td><pre><span class="token comment">/**</pre></td></tr><tr><td data-num="13"></td><td><pre> * function sum(a, b) &#123; return a + b; &#125;</pre></td></tr><tr><td data-num="14"></td><td><pre> * const csum = curry(sum);</pre></td></tr><tr><td data-num="15"></td><td><pre> * csum(1)(2) // 3</pre></td></tr><tr><td data-num="16"></td><td><pre> */</span></pre></td></tr></table></figure></div><div class="tab" data-id="code" data-title="Typescript"><figure class="highlight typescript"><figcaption data-lang="typescript"></figcaption><table><tr><td data-num="1"></td><td><pre><span class="token keyword">function</span> <span class="token function">curry</span><span class="token punctuation">(</span>fn<span class="token operator">:</span> <span class="token builtin">Function</span><span class="token punctuation">)</span><span class="token operator">:</span> <span class="token builtin">Function</span> <span class="token punctuation">&#123;</span></pre></td></tr><tr><td data-num="2"></td><td><pre>    <span class="token keyword">return</span> <span class="token keyword">function</span> <span class="token function">curried</span><span class="token punctuation">(</span><span class="token operator">...</span>args<span class="token punctuation">)</span> <span class="token punctuation">&#123;</span></pre></td></tr><tr><td data-num="3"></td><td><pre>        <span class="token keyword">if</span> <span class="token punctuation">(</span>args<span class="token punctuation">.</span>length <span class="token operator">>=</span> fn<span class="token punctuation">.</span>length<span class="token punctuation">)</span> <span class="token keyword">return</span> <span class="token function">fn</span><span class="token punctuation">(</span><span class="token operator">...</span>args<span class="token punctuation">)</span><span class="token punctuation">;</span></pre></td></tr><tr><td data-num="4"></td><td><pre>        <span class="token keyword">else</span> <span class="token keyword">return</span> <span class="token punctuation">(</span><span class="token operator">...</span>moreArgs<span class="token punctuation">)</span> <span class="token operator">=></span> <span class="token function">curried</span><span class="token punctuation">(</span><span class="token operator">...</span>args<span class="token punctuation">,</span> <span class="token operator">...</span>moreArgs<span class="token punctuation">)</span><span class="token punctuation">;</span></pre></td></tr><tr><td data-num="5"></td><td><pre>    <span class="token punctuation">&#125;</span><span class="token punctuation">;</span></pre></td></tr><tr><td data-num="6"></td><td><pre><span class="token punctuation">&#125;</span><span class="token punctuation">;</span></pre></td></tr><tr><td data-num="7"></td><td><pre></pre></td></tr><tr><td data-num="8"></td><td><pre><span class="token comment">/**</pre></td></tr><tr><td data-num="9"></td><td><pre> * function sum(a, b) &#123; return a + b; &#125;</pre></td></tr><tr><td data-num="10"></td><td><pre> * const csum = curry(sum);</pre></td></tr><tr><td data-num="11"></td><td><pre> * csum(1)(2) // 3</pre></td></tr><tr><td data-num="12"></td><td><pre> */</span></pre></td></tr></table></figure></div>]]></content>
      
      
      <categories>
          
          <category> Coding </category>
          
          <category> Leetcode </category>
          
          <category> Medium </category>
          
      </categories>
      
      
        <tags>
            
            <tag> Javascript </tag>
            
            <tag> Leetcode </tag>
            
            <tag> Typescript </tag>
            
            <tag> Medium </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>2623. Memoize</title>
      <link href="/2023/05/15/Coding/leetcode/Medium/2623%20Memoize/"/>
      <url>/2023/05/15/Coding/leetcode/Medium/2623%20Memoize/</url>
      
        <content type="html"><![CDATA[<p>⭐️⭐️</p><h2 id="題目敘述"><a class="anchor" href="#題目敘述">#</a> <span class="exturl" data-url="aHR0cHM6Ly9sZWV0Y29kZS5jb20vcHJvYmxlbXMvbWVtb2l6ZS9kZXNjcmlwdGlvbi8/dXRtX2NhbXBhaWduPVBvc3REOSZhbXA7dXRtX21lZGl1bT1Qb3N0JmFtcDt1dG1fc291cmNlPVBvc3QmYW1wO2dpb19saW5rX2lkPW5SYkFEVmQ5">題目敘述</span></h2><p>Given a function  <code>fn</code> , return a <strong>memoized</strong> version of that function.</p><p>A <strong>memoized</strong> function is a function that will never be called twice with the same inputs. Instead it will return a cached value.</p><p>You can assume there are <strong>3</strong> possible input functions:  <code>sum</code> ,  <code>fib</code> , and  <code>factorial</code> .</p><ul><li><code>sum</code>  accepts two integers  <code>a</code>  and  <code>b</code>  and returns  <code>a + b</code> .</li><li><code>fib</code>  accepts a single integer n and returns  <code>1</code>  if  <code>n &lt;= 1</code>  or  <code>fib(n - 1) + fib(n - 2)</code>  otherwise.</li><li><code>factorial</code>  accepts a single integer  <code>n</code>  and returns  <code>1</code>  if  <code>n &lt;= 1</code>  or  <code>factorial(n - 1) * n</code>  otherwise.</li></ul><h3 id="example-1"><a class="anchor" href="#example-1">#</a> Example 1</h3><blockquote><p><strong>Input</strong><br>“sum”<br>[“call”,“call”,“getCallCount”,“call”,“getCallCount”]<br>[[2,2],[2,2],[],[1,2],[]]<br><strong>Output</strong><br>[4,4,1,3,2]<br><strong>Explanation</strong><br>const sum = (a, b) =&gt; a + b;<br>const memoizedSum = memoize(sum);<br>memoizedSum(2, 2); // Returns 4. sum() was called as (2, 2) was not seen before.<br>memoizedSum(2, 2); // Returns 4. However sum() was not called because the same inputs were seen before.<br>// Total call count: 1<br>memoizedSum(1, 2); // Returns 3. sum() was called as (1, 2) was not seen before.<br>// Total call count: 2</p></blockquote><h3 id="example-2"><a class="anchor" href="#example-2">#</a> Example 2</h3><blockquote><p><strong>Input</strong><br>“factorial”<br>[“call”,“call”,“call”,“getCallCount”,“call”,“getCallCount”]<br>[[2],[3],[2],[],[3],[]]<br><strong>Output</strong><br>[2,6,2,2,6,2]<br><strong>Explanation</strong><br>const factorial = (n) =&gt; (n &lt;= 1) ? 1 : (n * factorial(n - 1));<br>const memoFactorial = memoize(factorial);<br>memoFactorial(2); // Returns 2.<br>memoFactorial(3); // Returns 6.<br>memoFactorial(2); // Returns 2. However factorial was not called because 2 was seen before.<br>// Total call count: 2<br>memoFactorial(3); // Returns 6. However factorial was not called because 3 was seen before.<br>// Total call count: 2</p></blockquote><h3 id="example-3"><a class="anchor" href="#example-3">#</a> Example 3</h3><blockquote><p><strong>Input</strong><br>“fib”<br>[“call”,“getCallCount”]<br>[[5],[]]<br><strong>Output</strong><br>[8,1]<br><strong>Explanation</strong><br>fib(5) = 8<br>// Total call count: 1</p></blockquote><h2 id="solution"><a class="anchor" href="#solution">#</a> Solution</h2><div class="tab" data-id="code" data-title="Javescript"><figure class="highlight javascript"><figcaption data-lang="javascript"></figcaption><table><tr><td data-num="1"></td><td><pre><span class="token comment">/**</pre></td></tr><tr><td data-num="2"></td><td><pre> * @param &#123;Function&#125; fn</pre></td></tr><tr><td data-num="3"></td><td><pre> */</span></pre></td></tr><tr><td data-num="4"></td><td><pre><span class="token keyword">function</span> <span class="token function">memoize</span><span class="token punctuation">(</span><span class="token parameter">fn</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span></pre></td></tr><tr><td data-num="5"></td><td><pre>    <span class="token keyword">const</span> cache <span class="token operator">=</span> <span class="token punctuation">&#123;</span><span class="token punctuation">&#125;</span><span class="token punctuation">;</span></pre></td></tr><tr><td data-num="6"></td><td><pre>    <span class="token keyword">return</span> <span class="token keyword">function</span><span class="token punctuation">(</span><span class="token parameter"><span class="token operator">...</span>args</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span></pre></td></tr><tr><td data-num="7"></td><td><pre>        <span class="token keyword">const</span> key <span class="token operator">=</span> <span class="token constant">JSON</span><span class="token punctuation">.</span><span class="token function">stringify</span><span class="token punctuation">(</span>args<span class="token punctuation">)</span><span class="token punctuation">;</span></pre></td></tr><tr><td data-num="8"></td><td><pre>        <span class="token keyword">if</span> <span class="token punctuation">(</span>key <span class="token keyword">in</span> cache<span class="token punctuation">)</span> <span class="token keyword">return</span> cache<span class="token punctuation">[</span>key<span class="token punctuation">]</span><span class="token punctuation">;</span></pre></td></tr><tr><td data-num="9"></td><td><pre>        <span class="token keyword">const</span> result <span class="token operator">=</span> <span class="token function">fn</span><span class="token punctuation">.</span><span class="token function">apply</span><span class="token punctuation">(</span><span class="token keyword">this</span><span class="token punctuation">,</span> args<span class="token punctuation">)</span><span class="token punctuation">;</span></pre></td></tr><tr><td data-num="10"></td><td><pre>        cache<span class="token punctuation">[</span>key<span class="token punctuation">]</span> <span class="token operator">=</span> result<span class="token punctuation">;</span></pre></td></tr><tr><td data-num="11"></td><td><pre>        <span class="token keyword">return</span> result<span class="token punctuation">;</span></pre></td></tr><tr><td data-num="12"></td><td><pre>    <span class="token punctuation">&#125;</span></pre></td></tr><tr><td data-num="13"></td><td><pre><span class="token punctuation">&#125;</span></pre></td></tr><tr><td data-num="14"></td><td><pre></pre></td></tr><tr><td data-num="15"></td><td><pre><span class="token comment">/** </pre></td></tr><tr><td data-num="16"></td><td><pre> * let callCount = 0;</pre></td></tr><tr><td data-num="17"></td><td><pre> * const memoizedFn = memoize(function (a, b) &#123;</pre></td></tr><tr><td data-num="18"></td><td><pre> * callCount += 1;</pre></td></tr><tr><td data-num="19"></td><td><pre> *   return a + b;</pre></td></tr><tr><td data-num="20"></td><td><pre> * &#125;)</pre></td></tr><tr><td data-num="21"></td><td><pre> * memoizedFn(2, 3) // 5</pre></td></tr><tr><td data-num="22"></td><td><pre> * memoizedFn(2, 3) // 5</pre></td></tr><tr><td data-num="23"></td><td><pre> * console.log(callCount) // 1 </pre></td></tr><tr><td data-num="24"></td><td><pre> */</span></pre></td></tr></table></figure></div><div class="tab" data-id="code" data-title="Typescript"><figure class="highlight typescript"><figcaption data-lang="typescript"></figcaption><table><tr><td data-num="1"></td><td><pre><span class="token keyword">type</span> <span class="token class-name">Fn</span> <span class="token operator">=</span> <span class="token punctuation">(</span><span class="token operator">...</span>params<span class="token operator">:</span> <span class="token builtin">any</span><span class="token punctuation">)</span> <span class="token operator">=></span> <span class="token builtin">any</span></pre></td></tr><tr><td data-num="2"></td><td><pre></pre></td></tr><tr><td data-num="3"></td><td><pre><span class="token keyword">function</span> <span class="token function">memoize</span><span class="token punctuation">(</span>fn<span class="token operator">:</span> Fn<span class="token punctuation">)</span><span class="token operator">:</span> Fn <span class="token punctuation">&#123;</span></pre></td></tr><tr><td data-num="4"></td><td><pre>    <span class="token keyword">const</span> cache <span class="token operator">=</span> <span class="token punctuation">&#123;</span><span class="token punctuation">&#125;</span><span class="token punctuation">;</span></pre></td></tr><tr><td data-num="5"></td><td><pre>    <span class="token keyword">return</span> <span class="token keyword">function</span><span class="token punctuation">(</span><span class="token operator">...</span>args<span class="token punctuation">)</span> <span class="token punctuation">&#123;</span></pre></td></tr><tr><td data-num="6"></td><td><pre>        <span class="token keyword">const</span> key <span class="token operator">=</span> <span class="token constant">JSON</span><span class="token punctuation">.</span><span class="token function">stringify</span><span class="token punctuation">(</span>args<span class="token punctuation">)</span><span class="token punctuation">;</span></pre></td></tr><tr><td data-num="7"></td><td><pre>        <span class="token keyword">if</span> <span class="token punctuation">(</span>key <span class="token keyword">in</span> cache<span class="token punctuation">)</span> <span class="token keyword">return</span> cache<span class="token punctuation">[</span>key<span class="token punctuation">]</span><span class="token punctuation">;</span></pre></td></tr><tr><td data-num="8"></td><td><pre>        <span class="token keyword">const</span> result <span class="token operator">=</span> <span class="token function">fn</span><span class="token punctuation">.</span><span class="token function">apply</span><span class="token punctuation">(</span><span class="token keyword">this</span><span class="token punctuation">,</span> args<span class="token punctuation">)</span><span class="token punctuation">;</span></pre></td></tr><tr><td data-num="9"></td><td><pre>        cache<span class="token punctuation">[</span>key<span class="token punctuation">]</span> <span class="token operator">=</span> result<span class="token punctuation">;</span></pre></td></tr><tr><td data-num="10"></td><td><pre>        <span class="token keyword">return</span> result<span class="token punctuation">;</span></pre></td></tr><tr><td data-num="11"></td><td><pre>    <span class="token punctuation">&#125;</span></pre></td></tr><tr><td data-num="12"></td><td><pre><span class="token punctuation">&#125;</span></pre></td></tr><tr><td data-num="13"></td><td><pre></pre></td></tr><tr><td data-num="14"></td><td><pre></pre></td></tr><tr><td data-num="15"></td><td><pre><span class="token comment">/** </pre></td></tr><tr><td data-num="16"></td><td><pre> * let callCount = 0;</pre></td></tr><tr><td data-num="17"></td><td><pre> * const memoizedFn = memoize(function (a, b) &#123;</pre></td></tr><tr><td data-num="18"></td><td><pre> * callCount += 1;</pre></td></tr><tr><td data-num="19"></td><td><pre> *   return a + b;</pre></td></tr><tr><td data-num="20"></td><td><pre> * &#125;)</pre></td></tr><tr><td data-num="21"></td><td><pre> * memoizedFn(2, 3) // 5</pre></td></tr><tr><td data-num="22"></td><td><pre> * memoizedFn(2, 3) // 5</pre></td></tr><tr><td data-num="23"></td><td><pre> * console.log(callCount) // 1 </pre></td></tr><tr><td data-num="24"></td><td><pre> */</span></pre></td></tr></table></figure></div>]]></content>
      
      
      <categories>
          
          <category> Coding </category>
          
          <category> Leetcode </category>
          
          <category> Medium </category>
          
      </categories>
      
      
        <tags>
            
            <tag> Javascript </tag>
            
            <tag> Leetcode </tag>
            
            <tag> Typescript </tag>
            
            <tag> Medium </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>2666. Allow One Function Call</title>
      <link href="/2023/05/15/Coding/leetcode/Easy/2666%20Allow%20One%20Function%20Call/"/>
      <url>/2023/05/15/Coding/leetcode/Easy/2666%20Allow%20One%20Function%20Call/</url>
      
        <content type="html"><![CDATA[<p>⭐️</p><h2 id="題目敘述"><a class="anchor" href="#題目敘述">#</a> <span class="exturl" data-url="aHR0cHM6Ly9sZWV0Y29kZS5jb20vcHJvYmxlbXMvYWxsb3ctb25lLWZ1bmN0aW9uLWNhbGwvZGVzY3JpcHRpb24vP3V0bV9jYW1wYWlnbj1Qb3N0RDgmYW1wO3V0bV9tZWRpdW09UG9zdCZhbXA7dXRtX3NvdXJjZT1Qb3N0JmFtcDtnaW9fbGlua19pZD1hOUJ5MDFPbw==">題目敘述</span></h2><p>Given a function  <code>fn</code> , return a new function that is identical to the original function except that it ensures  <code>fn</code>  is called at most once.</p><ul><li>The first time the returned function is called, it should return the same result as  <code>fn</code> .</li><li>Every subsequent time it is called, it should return  <code>undefined</code> .</li></ul><h3 id="example-1"><a class="anchor" href="#example-1">#</a> Example 1</h3><blockquote><p><strong>Input</strong>: fn = (a,b,c) =&gt; (a + b + c), calls = [[1,2,3],[2,3,6]]<br><strong>Output</strong>: [{“calls”:1,“value”:6}]<br><strong>Explanation</strong>:<br>const onceFn = once(fn);<br>onceFn(1, 2, 3); // 6<br>onceFn(2, 3, 6); // undefined, fn was not called</p></blockquote><h3 id="example-2"><a class="anchor" href="#example-2">#</a> Example 2</h3><blockquote><p><strong>Input</strong>: fn = (a,b,c) =&gt; (a * b * c), calls = [[5,7,4],[2,3,6],[4,6,8]]<br><strong>Output</strong>: [{“calls”:1,“value”:140}]<br><strong>Explanation</strong>:<br>const onceFn = once(fn);<br>onceFn(5, 7, 4); // 140<br>onceFn(2, 3, 6); // undefined, fn was not called<br>onceFn(4, 6, 8); // undefined, fn was not called</p></blockquote><h2 id="solution"><a class="anchor" href="#solution">#</a> Solution</h2><div class="tab" data-id="code" data-title="Javascript"><figure class="highlight javascript"><figcaption data-lang="javascript"></figcaption><table><tr><td data-num="1"></td><td><pre><span class="token comment">/**</pre></td></tr><tr><td data-num="2"></td><td><pre> * @param &#123;Function&#125; fn</pre></td></tr><tr><td data-num="3"></td><td><pre> * @return &#123;Function&#125;</pre></td></tr><tr><td data-num="4"></td><td><pre> */</span></pre></td></tr><tr><td data-num="5"></td><td><pre><span class="token keyword">var</span> <span class="token function-variable function">once</span> <span class="token operator">=</span> <span class="token keyword">function</span><span class="token punctuation">(</span><span class="token parameter">fn</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span></pre></td></tr><tr><td data-num="6"></td><td><pre>    <span class="token keyword">let</span> cnt <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span></pre></td></tr><tr><td data-num="7"></td><td><pre>    <span class="token keyword">return</span> <span class="token keyword">function</span><span class="token punctuation">(</span><span class="token parameter"><span class="token operator">...</span>args</span><span class="token punctuation">)</span><span class="token punctuation">&#123;</span></pre></td></tr><tr><td data-num="8"></td><td><pre>        cnt<span class="token operator">++</span><span class="token punctuation">;</span></pre></td></tr><tr><td data-num="9"></td><td><pre>        <span class="token keyword">if</span> <span class="token punctuation">(</span>cnt <span class="token operator">==</span> <span class="token number">1</span><span class="token punctuation">)</span> <span class="token keyword">return</span> <span class="token function">fn</span><span class="token punctuation">(</span><span class="token operator">...</span>args<span class="token punctuation">)</span><span class="token punctuation">;</span></pre></td></tr><tr><td data-num="10"></td><td><pre>        <span class="token keyword">else</span> <span class="token keyword">return</span> <span class="token keyword">undefined</span><span class="token punctuation">;</span></pre></td></tr><tr><td data-num="11"></td><td><pre>    <span class="token punctuation">&#125;</span></pre></td></tr><tr><td data-num="12"></td><td><pre><span class="token punctuation">&#125;</span><span class="token punctuation">;</span></pre></td></tr><tr><td data-num="13"></td><td><pre></pre></td></tr><tr><td data-num="14"></td><td><pre><span class="token comment">/**</pre></td></tr><tr><td data-num="15"></td><td><pre> * let fn = (a,b,c) => (a + b + c)</pre></td></tr><tr><td data-num="16"></td><td><pre> * let onceFn = once(fn)</pre></td></tr><tr><td data-num="17"></td><td><pre> *</pre></td></tr><tr><td data-num="18"></td><td><pre> * onceFn(1,2,3); // 6</pre></td></tr><tr><td data-num="19"></td><td><pre> * onceFn(2,3,6); // returns undefined without calling fn</pre></td></tr><tr><td data-num="20"></td><td><pre> */</span></pre></td></tr></table></figure></div><div class="tab" data-id="code" data-title="Typescript"><figure class="highlight typescript"><figcaption data-lang="typescript"></figcaption><table><tr><td data-num="1"></td><td><pre><span class="token keyword">function</span> once<span class="token operator">&lt;</span><span class="token constant">T</span> <span class="token keyword">extends</span> <span class="token punctuation">(</span><span class="token operator">...</span>args<span class="token operator">:</span> <span class="token builtin">any</span><span class="token punctuation">[</span><span class="token punctuation">]</span><span class="token punctuation">)</span> <span class="token operator">=></span> <span class="token builtin">any</span><span class="token operator">></span><span class="token punctuation">(</span>fn<span class="token operator">:</span> <span class="token constant">T</span><span class="token punctuation">)</span><span class="token operator">:</span> </pre></td></tr><tr><td data-num="2"></td><td><pre> <span class="token punctuation">(</span><span class="token punctuation">(</span><span class="token operator">...</span>args<span class="token operator">:</span> Parameters<span class="token operator">&lt;</span><span class="token constant">T</span><span class="token operator">></span><span class="token punctuation">)</span> <span class="token operator">=></span> ReturnType<span class="token operator">&lt;</span><span class="token constant">T</span><span class="token operator">></span> <span class="token operator">|</span> <span class="token keyword">undefined</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span></pre></td></tr><tr><td data-num="3"></td><td><pre>  <span class="token keyword">let</span> cnt <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span></pre></td></tr><tr><td data-num="4"></td><td><pre>  <span class="token keyword">return</span> <span class="token keyword">function</span> <span class="token punctuation">(</span><span class="token operator">...</span>args<span class="token punctuation">)</span> <span class="token punctuation">&#123;</span></pre></td></tr><tr><td data-num="5"></td><td><pre>      cnt<span class="token operator">++</span><span class="token punctuation">;</span></pre></td></tr><tr><td data-num="6"></td><td><pre>      <span class="token keyword">if</span> <span class="token punctuation">(</span>cnt <span class="token operator">==</span> <span class="token number">1</span><span class="token punctuation">)</span> <span class="token keyword">return</span> <span class="token function">fn</span><span class="token punctuation">(</span><span class="token operator">...</span>args<span class="token punctuation">)</span><span class="token punctuation">;</span></pre></td></tr><tr><td data-num="7"></td><td><pre>      <span class="token keyword">else</span> <span class="token keyword">return</span> <span class="token keyword">undefined</span><span class="token punctuation">;</span></pre></td></tr><tr><td data-num="8"></td><td><pre>  <span class="token punctuation">&#125;</span><span class="token punctuation">;</span></pre></td></tr><tr><td data-num="9"></td><td><pre><span class="token punctuation">&#125;</span></pre></td></tr><tr><td data-num="10"></td><td><pre></pre></td></tr><tr><td data-num="11"></td><td><pre><span class="token comment">/**</pre></td></tr><tr><td data-num="12"></td><td><pre> * let fn = (a,b,c) => (a + b + c)</pre></td></tr><tr><td data-num="13"></td><td><pre> * let onceFn = once(fn)</pre></td></tr><tr><td data-num="14"></td><td><pre> *</pre></td></tr><tr><td data-num="15"></td><td><pre> * onceFn(1,2,3); // 6</pre></td></tr><tr><td data-num="16"></td><td><pre> * onceFn(2,3,6); // returns undefined without calling fn</pre></td></tr><tr><td data-num="17"></td><td><pre> */</span></pre></td></tr></table></figure></div>]]></content>
      
      
      <categories>
          
          <category> Coding </category>
          
          <category> Leetcode </category>
          
          <category> Easy </category>
          
      </categories>
      
      
        <tags>
            
            <tag> Javascript </tag>
            
            <tag> Leetcode </tag>
            
            <tag> Easy </tag>
            
            <tag> Typescript </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>2140. Solving Questions With Brainpower</title>
      <link href="/2023/05/15/Coding/leetcode/Medium/2140%20Solving%20Questions%20With%20Brainpower/"/>
      <url>/2023/05/15/Coding/leetcode/Medium/2140%20Solving%20Questions%20With%20Brainpower/</url>
      
        <content type="html"><![CDATA[<p>⭐️⭐️</p><h2 id="題目敘述"><a class="anchor" href="#題目敘述">#</a> <span class="exturl" data-url="aHR0cHM6Ly9sZWV0Y29kZS5jb20vcHJvYmxlbXMvc29sdmluZy1xdWVzdGlvbnMtd2l0aC1icmFpbnBvd2VyLw==">題目敘述</span></h2><p>You are given <strong>a 0-indexed</strong> 2D integer array  <code>questions</code>  where  <code>questions[i] = [pointsi, brainpoweri]</code> .</p><p>The array describes the questions of an exam, where you have to process the questions <strong>in order</strong> (i.e., starting from question  <code>0</code> ) and make a decision whether to <strong>solve</strong> or <strong>skip</strong> each question. Solving question  <code>i</code>  will earn you  <code>pointsi</code>  points but you will be <strong>unable</strong> to solve each of the next  <code>brainpoweri</code>  questions. If you skip question  <code>i</code> , you get to make the decision on the next question.</p><ul><li>For example, given  <code>questions = [[3, 2], [4, 3], [4, 4], [2, 5]]</code> :<ul><li>If question  <code>0</code>  is solved, you will earn  <code>3</code>  points but you will be unable to solve questions  <code>1</code>  and  <code>2</code> .</li><li>If instead, question  <code>0</code>  is skipped and question  <code>1</code>  is solved, you will earn  <code>4</code>  points but you will be unable to solve questions  <code>2</code>  and  <code>3</code> .</li></ul></li></ul><p>Return <em>the <strong>maximum</strong> points you can earn for the exam</em>.</p><h3 id="example-1"><a class="anchor" href="#example-1">#</a> Example 1</h3><blockquote><p><strong>Input:</strong> questions = [[3,2],[4,3],[4,4],[2,5]]<br><strong>Output:</strong> 5<br><strong>Explanation:</strong> The maximum points can be earned by solving questions 0 and 3.</p><ul><li>Solve question 0: Earn 3 points, will be unable to solve the next 2 questions</li><li>Unable to solve questions 1 and 2</li><li>Solve question 3: Earn 2 points<br>Total points earned: 3 + 2 = 5. There is no other way to earn 5 or more points.</li></ul></blockquote><h3 id="example-2"><a class="anchor" href="#example-2">#</a> Example 2</h3><blockquote><p><strong>Input:</strong> questions = [[1,1],[2,2],[3,3],[4,4],[5,5]]<br><strong>Output:</strong> 7<br><strong>Explanation:</strong> The maximum points can be earned by solving questions 1 and 4.</p><ul><li>Skip question 0</li><li>Solve question 1: Earn 2 points, will be unable to solve the next 2 questions</li><li>Unable to solve questions 2 and 3</li><li>Solve question 4: Earn 5 points<br>Total points earned: 2 + 5 = 7. There is no other way to earn 7 or more points.</li></ul></blockquote><h2 id="solution"><a class="anchor" href="#solution">#</a> Solution</h2><div class="tab" data-id="code" data-title="C++"><figure class="highlight cpp"><figcaption data-lang="C++"></figcaption><table><tr><td data-num="1"></td><td><pre><span class="token keyword">class</span> <span class="token class-name">Solution</span> <span class="token punctuation">&#123;</span></pre></td></tr><tr><td data-num="2"></td><td><pre><span class="token keyword">public</span><span class="token operator">:</span></pre></td></tr><tr><td data-num="3"></td><td><pre>    <span class="token keyword">long</span> <span class="token keyword">long</span> <span class="token function">mostPoints</span><span class="token punctuation">(</span>vector<span class="token operator">&lt;</span>vector<span class="token operator">&lt;</span><span class="token keyword">int</span><span class="token operator">>></span><span class="token operator">&amp;</span> questions<span class="token punctuation">)</span> <span class="token punctuation">&#123;</span></pre></td></tr><tr><td data-num="4"></td><td><pre>        <span class="token keyword">int</span> n <span class="token operator">=</span> questions<span class="token punctuation">.</span><span class="token function">size</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span></pre></td></tr><tr><td data-num="5"></td><td><pre>        vector<span class="token operator">&lt;</span><span class="token keyword">long</span> <span class="token keyword">long</span> <span class="token keyword">int</span><span class="token operator">></span> <span class="token function">dp</span><span class="token punctuation">(</span>n<span class="token operator">+</span><span class="token number">1</span><span class="token punctuation">,</span> <span class="token number">0</span><span class="token punctuation">)</span><span class="token punctuation">;</span></pre></td></tr><tr><td data-num="6"></td><td><pre></pre></td></tr><tr><td data-num="7"></td><td><pre>        <span class="token keyword">for</span> <span class="token punctuation">(</span><span class="token keyword">int</span> i<span class="token operator">=</span>n<span class="token operator">-</span><span class="token number">1</span><span class="token punctuation">;</span> i<span class="token operator">></span><span class="token operator">-</span><span class="token number">1</span><span class="token punctuation">;</span> i<span class="token operator">--</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span></pre></td></tr><tr><td data-num="8"></td><td><pre>            <span class="token keyword">int</span> p <span class="token operator">=</span> questions<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">[</span><span class="token number">0</span><span class="token punctuation">]</span><span class="token punctuation">,</span> bp <span class="token operator">=</span> questions<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">[</span><span class="token number">1</span><span class="token punctuation">]</span><span class="token punctuation">;</span></pre></td></tr><tr><td data-num="9"></td><td><pre>            <span class="token keyword">int</span> nextq <span class="token operator">=</span> <span class="token function">min</span><span class="token punctuation">(</span>bp <span class="token operator">+</span> i <span class="token operator">+</span> <span class="token number">1</span><span class="token punctuation">,</span> n<span class="token punctuation">)</span><span class="token punctuation">;</span></pre></td></tr><tr><td data-num="10"></td><td><pre></pre></td></tr><tr><td data-num="11"></td><td><pre>            dp<span class="token punctuation">[</span>i<span class="token punctuation">]</span> <span class="token operator">=</span> <span class="token function">max</span><span class="token punctuation">(</span>dp<span class="token punctuation">[</span>i<span class="token operator">+</span><span class="token number">1</span><span class="token punctuation">]</span><span class="token punctuation">,</span> p <span class="token operator">+</span> dp<span class="token punctuation">[</span>nextq<span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token punctuation">;</span></pre></td></tr><tr><td data-num="12"></td><td><pre>        <span class="token punctuation">&#125;</span></pre></td></tr><tr><td data-num="13"></td><td><pre>        <span class="token keyword">return</span> dp<span class="token punctuation">[</span><span class="token number">0</span><span class="token punctuation">]</span><span class="token punctuation">;</span></pre></td></tr><tr><td data-num="14"></td><td><pre>    <span class="token punctuation">&#125;</span></pre></td></tr><tr><td data-num="15"></td><td><pre><span class="token punctuation">&#125;</span><span class="token punctuation">;</span></pre></td></tr></table></figure></div><div class="tab" data-id="code" data-title="Java"><figure class="highlight java"><figcaption data-lang="java"></figcaption><table><tr><td data-num="1"></td><td><pre><span class="token keyword">class</span> <span class="token class-name">Solution</span> <span class="token punctuation">&#123;</span></pre></td></tr><tr><td data-num="2"></td><td><pre>    <span class="token keyword">public</span> <span class="token keyword">long</span> <span class="token function">mostPoints</span><span class="token punctuation">(</span><span class="token keyword">int</span><span class="token punctuation">[</span><span class="token punctuation">]</span><span class="token punctuation">[</span><span class="token punctuation">]</span> questions<span class="token punctuation">)</span> <span class="token punctuation">&#123;</span></pre></td></tr><tr><td data-num="3"></td><td><pre>        <span class="token keyword">int</span> n <span class="token operator">=</span> questions<span class="token punctuation">.</span>length<span class="token punctuation">;</span></pre></td></tr><tr><td data-num="4"></td><td><pre>        <span class="token keyword">long</span><span class="token punctuation">[</span><span class="token punctuation">]</span> dp <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token keyword">long</span><span class="token punctuation">[</span>n<span class="token punctuation">]</span><span class="token punctuation">;</span></pre></td></tr><tr><td data-num="5"></td><td><pre>        dp<span class="token punctuation">[</span>n <span class="token operator">-</span> <span class="token number">1</span><span class="token punctuation">]</span> <span class="token operator">=</span> questions<span class="token punctuation">[</span>n <span class="token operator">-</span> <span class="token number">1</span><span class="token punctuation">]</span><span class="token punctuation">[</span><span class="token number">0</span><span class="token punctuation">]</span><span class="token punctuation">;</span></pre></td></tr><tr><td data-num="6"></td><td><pre>        </pre></td></tr><tr><td data-num="7"></td><td><pre>        <span class="token keyword">for</span> <span class="token punctuation">(</span><span class="token keyword">int</span> i <span class="token operator">=</span> n <span class="token operator">-</span> <span class="token number">2</span><span class="token punctuation">;</span> i <span class="token operator">>=</span> <span class="token number">0</span><span class="token punctuation">;</span> <span class="token operator">--</span>i<span class="token punctuation">)</span> <span class="token punctuation">&#123;</span></pre></td></tr><tr><td data-num="8"></td><td><pre>            dp<span class="token punctuation">[</span>i<span class="token punctuation">]</span> <span class="token operator">=</span> questions<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">[</span><span class="token number">0</span><span class="token punctuation">]</span><span class="token punctuation">;</span></pre></td></tr><tr><td data-num="9"></td><td><pre>            <span class="token keyword">int</span> skip <span class="token operator">=</span> questions<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">[</span><span class="token number">1</span><span class="token punctuation">]</span><span class="token punctuation">;</span></pre></td></tr><tr><td data-num="10"></td><td><pre>            <span class="token keyword">if</span> <span class="token punctuation">(</span>i <span class="token operator">+</span> skip <span class="token operator">+</span> <span class="token number">1</span> <span class="token operator">&lt;</span> n<span class="token punctuation">)</span> <span class="token punctuation">&#123;</span></pre></td></tr><tr><td data-num="11"></td><td><pre>                dp<span class="token punctuation">[</span>i<span class="token punctuation">]</span> <span class="token operator">+=</span> dp<span class="token punctuation">[</span>i <span class="token operator">+</span> skip <span class="token operator">+</span> <span class="token number">1</span><span class="token punctuation">]</span><span class="token punctuation">;</span></pre></td></tr><tr><td data-num="12"></td><td><pre>            <span class="token punctuation">&#125;</span></pre></td></tr><tr><td data-num="13"></td><td><pre>            </pre></td></tr><tr><td data-num="14"></td><td><pre>            <span class="token comment">// dp[i] = max(solve it, skip it)</span></pre></td></tr><tr><td data-num="15"></td><td><pre>            dp<span class="token punctuation">[</span>i<span class="token punctuation">]</span> <span class="token operator">=</span> <span class="token class-name">Math</span><span class="token punctuation">.</span><span class="token function">max</span><span class="token punctuation">(</span>dp<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">,</span> dp<span class="token punctuation">[</span>i <span class="token operator">+</span> <span class="token number">1</span><span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token punctuation">;</span></pre></td></tr><tr><td data-num="16"></td><td><pre>        <span class="token punctuation">&#125;</span></pre></td></tr><tr><td data-num="17"></td><td><pre>        </pre></td></tr><tr><td data-num="18"></td><td><pre>        <span class="token keyword">return</span> dp<span class="token punctuation">[</span><span class="token number">0</span><span class="token punctuation">]</span><span class="token punctuation">;</span></pre></td></tr><tr><td data-num="19"></td><td><pre>    <span class="token punctuation">&#125;</span></pre></td></tr><tr><td data-num="20"></td><td><pre><span class="token punctuation">&#125;</span></pre></td></tr></table></figure></div><div class="tab" data-id="code" data-title="Python"><figure class="highlight python"><figcaption data-lang="python"></figcaption><table><tr><td data-num="1"></td><td><pre><span class="token keyword">class</span> <span class="token class-name">Solution</span><span class="token punctuation">:</span></pre></td></tr><tr><td data-num="2"></td><td><pre>    <span class="token keyword">def</span> <span class="token function">mostPoints</span><span class="token punctuation">(</span>self<span class="token punctuation">,</span> questions<span class="token punctuation">:</span> List<span class="token punctuation">[</span>List<span class="token punctuation">[</span><span class="token builtin">int</span><span class="token punctuation">]</span><span class="token punctuation">]</span><span class="token punctuation">)</span> <span class="token operator">-</span><span class="token operator">></span> <span class="token builtin">int</span><span class="token punctuation">:</span></pre></td></tr><tr><td data-num="3"></td><td><pre>        n <span class="token operator">=</span> <span class="token builtin">len</span><span class="token punctuation">(</span>questions<span class="token punctuation">)</span></pre></td></tr><tr><td data-num="4"></td><td><pre>        dp <span class="token operator">=</span> <span class="token punctuation">[</span><span class="token number">0</span><span class="token punctuation">]</span> <span class="token operator">*</span> <span class="token punctuation">(</span>n<span class="token operator">+</span><span class="token number">1</span><span class="token punctuation">)</span></pre></td></tr><tr><td data-num="5"></td><td><pre>        <span class="token keyword">for</span> i <span class="token keyword">in</span> <span class="token builtin">range</span><span class="token punctuation">(</span>n<span class="token operator">-</span><span class="token number">1</span><span class="token punctuation">,</span> <span class="token operator">-</span><span class="token number">1</span><span class="token punctuation">,</span> <span class="token operator">-</span><span class="token number">1</span><span class="token punctuation">)</span><span class="token punctuation">:</span></pre></td></tr><tr><td data-num="6"></td><td><pre>            p<span class="token punctuation">,</span> bp <span class="token operator">=</span> questions<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">[</span><span class="token number">0</span><span class="token punctuation">]</span><span class="token punctuation">,</span> questions<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">[</span><span class="token number">1</span><span class="token punctuation">]</span></pre></td></tr><tr><td data-num="7"></td><td><pre>            nextq <span class="token operator">=</span> <span class="token builtin">min</span><span class="token punctuation">(</span>bp <span class="token operator">+</span> i <span class="token operator">+</span> <span class="token number">1</span><span class="token punctuation">,</span> n<span class="token punctuation">)</span></pre></td></tr><tr><td data-num="8"></td><td><pre></pre></td></tr><tr><td data-num="9"></td><td><pre>            dp<span class="token punctuation">[</span>i<span class="token punctuation">]</span> <span class="token operator">=</span> <span class="token builtin">max</span><span class="token punctuation">(</span>dp<span class="token punctuation">[</span>i<span class="token operator">+</span><span class="token number">1</span><span class="token punctuation">]</span><span class="token punctuation">,</span> p <span class="token operator">+</span> dp<span class="token punctuation">[</span>nextq<span class="token punctuation">]</span><span class="token punctuation">)</span></pre></td></tr><tr><td data-num="10"></td><td><pre>        <span class="token keyword">return</span> dp<span class="token punctuation">[</span><span class="token number">0</span><span class="token punctuation">]</span></pre></td></tr></table></figure></div>]]></content>
      
      
      <categories>
          
          <category> Coding </category>
          
          <category> Leetcode </category>
          
          <category> Medium </category>
          
      </categories>
      
      
        <tags>
            
            <tag> Leetcode </tag>
            
            <tag> Array </tag>
            
            <tag> Dynamic Programming </tag>
            
            <tag> Medium </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>1035. Uncrossed Lines</title>
      <link href="/2023/05/15/Coding/leetcode/Medium/1035%20Uncrossed%20Lines/"/>
      <url>/2023/05/15/Coding/leetcode/Medium/1035%20Uncrossed%20Lines/</url>
      
        <content type="html"><![CDATA[<p>⭐️⭐️</p><h2 id="題目敘述"><a class="anchor" href="#題目敘述">#</a> <span class="exturl" data-url="aHR0cHM6Ly9sZWV0Y29kZS5jb20vcHJvYmxlbXMvdW5jcm9zc2VkLWxpbmVzLw==">題目敘述</span></h2><p>You are given two integer arrays  <code>nums1</code>  and  <code>nums2</code> . We write the integers of  <code>nums1</code>  and  <code>nums2</code>  (in the order they are given) on two separate horizontal lines.</p><p>We may draw connecting lines: a straight line connecting two numbers  <code>nums1[i]</code>  and  <code>nums2[j]</code>  such that:</p><ul><li><code>nums1[i] == nums2[j]</code> , and</li><li>the line we draw does not intersect any other connecting (non-horizontal) line.</li></ul><p>Note that a connecting line cannot intersect even at the endpoints (i.e., each number can only belong to one connecting line).</p><p>Return <em>the maximum number of connecting lines we can draw in this way</em>.</p><h3 id="example-1"><a class="anchor" href="#example-1">#</a> Example 1</h3><p><img data-src="https://imgur.com/zLcVTiy.png" alt=""></p><blockquote><p><strong>Input:</strong> nums1 = [1,4,2], nums2 = [1,2,4]<br><strong>Output:</strong> 2<br><strong>Explanation:</strong> We can draw 2 uncrossed lines as in the diagram.<br>We cannot draw 3 uncrossed lines, because the line from nums1[1] = 4 to nums2[2] = 4 will intersect the line from nums1[2]=2 to nums2[1]=2.</p></blockquote><h3 id="example-2"><a class="anchor" href="#example-2">#</a> Example 2</h3><blockquote><p><strong>Input:</strong> nums1 = [2,5,1,2,5], nums2 = [10,5,2,1,5,2]<br><strong>Output:</strong> 3</p></blockquote><h3 id="example-3"><a class="anchor" href="#example-3">#</a> Example 3</h3><blockquote><p><strong>Input:</strong> nums1 = [1,3,7,1,7,5], nums2 = [1,9,2,5,1]<br><strong>Output:</strong> 2</p></blockquote><h2 id="解題思路"><a class="anchor" href="#解題思路">#</a> 解題思路</h2><p>We can define a two-dimensional array  <code>dp</code> , where  <code>dp[i][j]</code>  represents the maximum number of uncrossed lines between the first  <code>i</code>  elements of  <code>nums1</code>  and the first  <code>j</code>  elements of  <code>nums2</code> .</p><ul><li>The base case is  <code>dp[0][j] = 0</code>  and  <code>dp[i][0] = 0</code> , since there are no elements in either array.</li><li>For each element  <code>nums1[i-1]</code>  in  <code>nums1</code>  and each element  <code>nums2[j-1]</code>  in  <code>nums2</code> , we can either include or exclude the current element.<ul><li>If  <code>nums1[i-1]</code>  <strong>is equal to</strong>  <code>nums2[j-1]</code> , then we can <strong>include</strong> it in the uncrossed lines, and the maximum number of uncrossed lines is  <code>dp[i-1][j-1] + 1</code> .</li><li>Otherwise, we can <strong>exclude</strong> it, and the maximum number of uncrossed lines is the maximum of  <code>dp[i-1][j]</code>  and  <code>dp[i][j-1]</code> .</li></ul></li><li>The final answer is  <code>dp[m][n]</code> , where  <code>m</code>  and  <code>n</code>  are the lengths of  <code>nums1</code>  and  <code>nums2</code>  respectively.</li></ul><h2 id="solution"><a class="anchor" href="#solution">#</a> Solution</h2><div class="tab" data-id="code" data-title="C++"><figure class="highlight cpp"><figcaption data-lang="C++"></figcaption><table><tr><td data-num="1"></td><td><pre><span class="token keyword">class</span> <span class="token class-name">Solution</span> <span class="token punctuation">&#123;</span></pre></td></tr><tr><td data-num="2"></td><td><pre><span class="token keyword">public</span><span class="token operator">:</span></pre></td></tr><tr><td data-num="3"></td><td><pre>    <span class="token keyword">int</span> <span class="token function">maxUncrossedLines</span><span class="token punctuation">(</span>vector<span class="token operator">&lt;</span><span class="token keyword">int</span><span class="token operator">></span><span class="token operator">&amp;</span> nums1<span class="token punctuation">,</span> vector<span class="token operator">&lt;</span><span class="token keyword">int</span><span class="token operator">></span><span class="token operator">&amp;</span> nums2<span class="token punctuation">)</span> <span class="token punctuation">&#123;</span></pre></td></tr><tr><td data-num="4"></td><td><pre>        <span class="token keyword">int</span> n <span class="token operator">=</span> nums1<span class="token punctuation">.</span><span class="token function">size</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">,</span> m <span class="token operator">=</span> nums2<span class="token punctuation">.</span><span class="token function">size</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span></pre></td></tr><tr><td data-num="5"></td><td><pre>        vector<span class="token operator">&lt;</span>vector<span class="token operator">&lt;</span><span class="token keyword">int</span><span class="token operator">>></span> <span class="token function">dp</span><span class="token punctuation">(</span>n<span class="token operator">+</span><span class="token number">1</span><span class="token punctuation">,</span> <span class="token generic-function"><span class="token function">vector</span><span class="token generic class-name"><span class="token operator">&lt;</span><span class="token keyword">int</span><span class="token operator">></span></span></span><span class="token punctuation">(</span>m<span class="token operator">+</span><span class="token number">1</span><span class="token punctuation">,</span> <span class="token number">0</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span></pre></td></tr><tr><td data-num="6"></td><td><pre>        <span class="token keyword">for</span> <span class="token punctuation">(</span><span class="token keyword">int</span> i<span class="token operator">=</span><span class="token number">1</span><span class="token punctuation">;</span> i<span class="token operator">&lt;=</span>n<span class="token punctuation">;</span> i<span class="token operator">++</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span></pre></td></tr><tr><td data-num="7"></td><td><pre>            <span class="token keyword">for</span> <span class="token punctuation">(</span><span class="token keyword">int</span> j<span class="token operator">=</span><span class="token number">1</span><span class="token punctuation">;</span> j<span class="token operator">&lt;=</span>m<span class="token punctuation">;</span> j<span class="token operator">++</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span></pre></td></tr><tr><td data-num="8"></td><td><pre>                dp<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">[</span>j<span class="token punctuation">]</span> <span class="token operator">=</span> <span class="token punctuation">(</span>nums1<span class="token punctuation">[</span>i<span class="token operator">-</span><span class="token number">1</span><span class="token punctuation">]</span> <span class="token operator">==</span> nums2<span class="token punctuation">[</span>j<span class="token operator">-</span><span class="token number">1</span><span class="token punctuation">]</span> <span class="token operator">?</span> <span class="token punctuation">(</span><span class="token number">1</span> <span class="token operator">+</span> dp<span class="token punctuation">[</span>i<span class="token operator">-</span><span class="token number">1</span><span class="token punctuation">]</span><span class="token punctuation">[</span>j<span class="token operator">-</span><span class="token number">1</span><span class="token punctuation">]</span><span class="token punctuation">)</span> <span class="token operator">:</span> <span class="token function">max</span><span class="token punctuation">(</span>dp<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">[</span>j<span class="token operator">-</span><span class="token number">1</span><span class="token punctuation">]</span><span class="token punctuation">,</span> dp<span class="token punctuation">[</span>i<span class="token operator">-</span><span class="token number">1</span><span class="token punctuation">]</span><span class="token punctuation">[</span>j<span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span></pre></td></tr><tr><td data-num="9"></td><td><pre>            <span class="token punctuation">&#125;</span></pre></td></tr><tr><td data-num="10"></td><td><pre>        <span class="token punctuation">&#125;</span></pre></td></tr><tr><td data-num="11"></td><td><pre>        <span class="token keyword">return</span> dp<span class="token punctuation">[</span>n<span class="token punctuation">]</span><span class="token punctuation">[</span>m<span class="token punctuation">]</span><span class="token punctuation">;</span></pre></td></tr><tr><td data-num="12"></td><td><pre>    <span class="token punctuation">&#125;</span></pre></td></tr><tr><td data-num="13"></td><td><pre><span class="token punctuation">&#125;</span><span class="token punctuation">;</span></pre></td></tr></table></figure></div><div class="tab" data-id="code" data-title="Java"><figure class="highlight java"><figcaption data-lang="java"></figcaption><table><tr><td data-num="1"></td><td><pre><span class="token keyword">class</span> <span class="token class-name">Solution</span> <span class="token punctuation">&#123;</span></pre></td></tr><tr><td data-num="2"></td><td><pre>    <span class="token keyword">public</span> <span class="token keyword">int</span> <span class="token function">maxUncrossedLines</span><span class="token punctuation">(</span><span class="token keyword">int</span><span class="token punctuation">[</span><span class="token punctuation">]</span> nums1<span class="token punctuation">,</span> <span class="token keyword">int</span><span class="token punctuation">[</span><span class="token punctuation">]</span> nums2<span class="token punctuation">)</span> <span class="token punctuation">&#123;</span></pre></td></tr><tr><td data-num="3"></td><td><pre>        <span class="token keyword">int</span> n <span class="token operator">=</span> nums1<span class="token punctuation">.</span>length<span class="token punctuation">,</span> m <span class="token operator">=</span> nums2<span class="token punctuation">.</span>length<span class="token punctuation">;</span></pre></td></tr><tr><td data-num="4"></td><td><pre>        <span class="token keyword">int</span><span class="token punctuation">[</span><span class="token punctuation">]</span><span class="token punctuation">[</span><span class="token punctuation">]</span> dp <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token keyword">int</span><span class="token punctuation">[</span>n <span class="token operator">+</span> <span class="token number">1</span><span class="token punctuation">]</span><span class="token punctuation">[</span>m <span class="token operator">+</span> <span class="token number">1</span><span class="token punctuation">]</span><span class="token punctuation">;</span></pre></td></tr><tr><td data-num="5"></td><td><pre></pre></td></tr><tr><td data-num="6"></td><td><pre>        <span class="token keyword">for</span> <span class="token punctuation">(</span><span class="token keyword">int</span> i <span class="token operator">=</span> <span class="token number">1</span><span class="token punctuation">;</span> i <span class="token operator">&lt;=</span> n<span class="token punctuation">;</span> i<span class="token operator">++</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span></pre></td></tr><tr><td data-num="7"></td><td><pre>            <span class="token keyword">for</span> <span class="token punctuation">(</span><span class="token keyword">int</span> j <span class="token operator">=</span> <span class="token number">1</span><span class="token punctuation">;</span> j <span class="token operator">&lt;=</span> m<span class="token punctuation">;</span> j<span class="token operator">++</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span></pre></td></tr><tr><td data-num="8"></td><td><pre>                dp<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">[</span>j<span class="token punctuation">]</span> <span class="token operator">=</span> <span class="token punctuation">(</span>nums1<span class="token punctuation">[</span>i <span class="token operator">-</span> <span class="token number">1</span><span class="token punctuation">]</span> <span class="token operator">==</span> nums2<span class="token punctuation">[</span>j <span class="token operator">-</span> <span class="token number">1</span><span class="token punctuation">]</span> <span class="token operator">?</span> <span class="token number">1</span> <span class="token operator">+</span> dp<span class="token punctuation">[</span>i <span class="token operator">-</span> <span class="token number">1</span><span class="token punctuation">]</span><span class="token punctuation">[</span>j <span class="token operator">-</span> <span class="token number">1</span><span class="token punctuation">]</span> <span class="token operator">:</span> <span class="token class-name">Math</span><span class="token punctuation">.</span><span class="token function">max</span><span class="token punctuation">(</span>dp<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">[</span>j <span class="token operator">-</span> <span class="token number">1</span><span class="token punctuation">]</span><span class="token punctuation">,</span> dp<span class="token punctuation">[</span>i <span class="token operator">-</span> <span class="token number">1</span><span class="token punctuation">]</span><span class="token punctuation">[</span>j<span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span></pre></td></tr><tr><td data-num="9"></td><td><pre>            <span class="token punctuation">&#125;</span></pre></td></tr><tr><td data-num="10"></td><td><pre>        <span class="token punctuation">&#125;</span></pre></td></tr><tr><td data-num="11"></td><td><pre></pre></td></tr><tr><td data-num="12"></td><td><pre>        <span class="token keyword">return</span> dp<span class="token punctuation">[</span>n<span class="token punctuation">]</span><span class="token punctuation">[</span>m<span class="token punctuation">]</span><span class="token punctuation">;</span></pre></td></tr><tr><td data-num="13"></td><td><pre>    <span class="token punctuation">&#125;</span></pre></td></tr><tr><td data-num="14"></td><td><pre><span class="token punctuation">&#125;</span></pre></td></tr></table></figure></div><div class="tab" data-id="code" data-title="Python"><pre><code class="language-python"></code></pre></div>]]></content>
      
      
      <categories>
          
          <category> Coding </category>
          
          <category> Leetcode </category>
          
          <category> Medium </category>
          
      </categories>
      
      
        <tags>
            
            <tag> Leetcode </tag>
            
            <tag> Array </tag>
            
            <tag> Dynamic Programming </tag>
            
            <tag> Medium </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>C++ - fstream</title>
      <link href="/2023/05/11/programming/CPP/cpp%20file/"/>
      <url>/2023/05/11/programming/CPP/cpp%20file/</url>
      
        <content type="html"><![CDATA[]]></content>
      
      
      <categories>
          
          <category> Programming </category>
          
          <category> CPP </category>
          
      </categories>
      
      
        <tags>
            
            <tag> C/C++ </tag>
            
            <tag> fstream </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>Ch07. Sorting</title>
      <link href="/2023/05/11/Algorithm/Ch07%20Sorting/"/>
      <url>/2023/05/11/Algorithm/Ch07%20Sorting/</url>
      
        <content type="html"><![CDATA[<h2 id="insertion-sort"><a class="anchor" href="#insertion-sort">#</a> Insertion Sort</h2><p>原理是逐一將原始資料加入已排序好資料中，並逐一與已排序好的資料作比較，找到對的位置插入。<br><span class="red">平均時間複雜度為: O (n²)</span></p><figure class="highlight c"><figcaption data-lang="c"><span>PseudoCode</span></figcaption><table><tr><td data-num="1"></td><td><pre><span class="token keyword">void</span> <span class="token function">insertionsort</span> <span class="token punctuation">(</span><span class="token keyword">int</span> n<span class="token punctuation">,</span> keytype S<span class="token punctuation">[</span><span class="token punctuation">]</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span></pre></td></tr><tr><td data-num="2"></td><td><pre>    index i<span class="token punctuation">,</span> j<span class="token punctuation">;</span></pre></td></tr><tr><td data-num="3"></td><td><pre>    keytype x<span class="token punctuation">;</span></pre></td></tr><tr><td data-num="4"></td><td><pre>    <span class="token keyword">for</span> <span class="token punctuation">(</span>i<span class="token operator">=</span><span class="token number">2</span><span class="token punctuation">;</span> i<span class="token operator">&lt;=</span>n<span class="token punctuation">;</span> i<span class="token operator">++</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span></pre></td></tr><tr><td data-num="5"></td><td><pre>        x <span class="token operator">=</span> S<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">;</span></pre></td></tr><tr><td data-num="6"></td><td><pre>        j <span class="token operator">=</span> i<span class="token operator">-</span><span class="token number">1</span><span class="token punctuation">;</span></pre></td></tr><tr><td data-num="7"></td><td><pre>        <span class="token keyword">while</span> <span class="token punctuation">(</span>j <span class="token operator">></span> <span class="token number">0</span> <span class="token operator">&amp;&amp;</span> S<span class="token punctuation">[</span>j<span class="token punctuation">]</span> <span class="token operator">></span> x<span class="token punctuation">)</span> <span class="token punctuation">&#123;</span></pre></td></tr><tr><td data-num="8"></td><td><pre>            S<span class="token punctuation">[</span>j<span class="token operator">+</span><span class="token number">1</span><span class="token punctuation">]</span> <span class="token operator">=</span> S<span class="token punctuation">[</span>j<span class="token punctuation">]</span><span class="token punctuation">;</span></pre></td></tr><tr><td data-num="9"></td><td><pre>            j<span class="token operator">--</span><span class="token punctuation">;</span></pre></td></tr><tr><td data-num="10"></td><td><pre>        <span class="token punctuation">&#125;</span></pre></td></tr><tr><td data-num="11"></td><td><pre>        S<span class="token punctuation">[</span>j<span class="token operator">+</span><span class="token number">1</span><span class="token punctuation">]</span> <span class="token operator">=</span> x<span class="token punctuation">;</span></pre></td></tr><tr><td data-num="12"></td><td><pre>    <span class="token punctuation">&#125;</span></pre></td></tr><tr><td data-num="13"></td><td><pre><span class="token punctuation">&#125;</span></pre></td></tr></table></figure><p><img data-src="https://miro.medium.com/v2/resize:fit:1012/1*JP-wURjwf4k23U2G3GNQDw.gif" alt=""></p><h2 id="selection-sort"><a class="anchor" href="#selection-sort">#</a> Selection Sort</h2><p>原理是反覆從未排序數列中找出最小值，將它與左邊的數做交換。<br><span class="red">平均時間複雜度為: O (n²)</span></p><figure class="highlight c"><figcaption data-lang="c"><span>PesudoCode</span></figcaption><table><tr><td data-num="1"></td><td><pre><span class="token keyword">void</span> <span class="token function">selectionsort</span><span class="token punctuation">(</span><span class="token keyword">int</span> n<span class="token punctuation">,</span> keytype S<span class="token punctuation">[</span><span class="token punctuation">]</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span></pre></td></tr><tr><td data-num="2"></td><td><pre>    index i<span class="token punctuation">,</span> j<span class="token punctuation">,</span> smallest<span class="token punctuation">;</span></pre></td></tr><tr><td data-num="3"></td><td><pre>    <span class="token keyword">for</span> <span class="token punctuation">(</span>i<span class="token operator">=</span><span class="token number">1</span><span class="token punctuation">;</span> i<span class="token operator">&lt;=</span>n<span class="token operator">-</span><span class="token number">1</span><span class="token punctuation">;</span> i<span class="token operator">++</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span></pre></td></tr><tr><td data-num="4"></td><td><pre>        smallest <span class="token operator">=</span> i<span class="token punctuation">;</span></pre></td></tr><tr><td data-num="5"></td><td><pre>        <span class="token keyword">for</span> <span class="token punctuation">(</span>j<span class="token operator">=</span>i<span class="token operator">+</span><span class="token number">1</span><span class="token punctuation">;</span> j<span class="token operator">&lt;=</span>n<span class="token punctuation">;</span> j<span class="token operator">++</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span></pre></td></tr><tr><td data-num="6"></td><td><pre>            <span class="token keyword">if</span> <span class="token punctuation">(</span>S<span class="token punctuation">[</span>j<span class="token punctuation">]</span> <span class="token operator">&lt;</span> S<span class="token punctuation">[</span>smallest<span class="token punctuation">]</span><span class="token punctuation">)</span> smallest <span class="token operator">=</span> j<span class="token punctuation">;</span></pre></td></tr><tr><td data-num="7"></td><td><pre>        <span class="token punctuation">&#125;</span></pre></td></tr><tr><td data-num="8"></td><td><pre>        exchange S<span class="token punctuation">[</span>i<span class="token punctuation">]</span> amd S<span class="token punctuation">[</span>smallest<span class="token punctuation">]</span><span class="token punctuation">;</span></pre></td></tr><tr><td data-num="9"></td><td><pre>    <span class="token punctuation">&#125;</span></pre></td></tr><tr><td data-num="10"></td><td><pre><span class="token punctuation">&#125;</span></pre></td></tr></table></figure><p><img data-src="https://www.michaelfxu.com/assets/gifs/sorts/selection-sort.gif" alt=""></p><h2 id="merge-sort"><a class="anchor" href="#merge-sort">#</a> Merge Sort</h2><p>原理是會先將原始資料分割成兩個資料列，接著再將兩個資料繼續分割成兩個資料列，依此類推，直到無法再分割，也就是每組都只剩下一筆資料時，再兩兩合併各組資料，合併時也會進行該組排序，每次排序都是比較最左邊的資料，將較小的資料加到新的資料列中，依此類推，直到最後合併成一個排序好的資料列為止。</p><h2 id="quick-sort"><a class="anchor" href="#quick-sort">#</a> Quick Sort</h2><p>原理是先從原始資料列中找一個基準值 (Pivot)，接著逐一將資料與基準值比較，小於基準值的資料放在左邊，大於基準值的資料放在右邊，再將兩邊區塊分別再找出基準值，重複前面的步驟，直到排序完為止。</p><figure class="highlight c"><figcaption data-lang="c"><span>PesudoCode</span></figcaption><table><tr><td data-num="1"></td><td><pre><span class="token keyword">void</span> <span class="token function">quicksort</span><span class="token punctuation">(</span>index low<span class="token punctuation">,</span> index high<span class="token punctuation">)</span> <span class="token punctuation">&#123;</span></pre></td></tr><tr><td data-num="2"></td><td><pre>    index pivotpoint<span class="token punctuation">;</span></pre></td></tr><tr><td data-num="3"></td><td><pre>    <span class="token keyword">if</span> <span class="token punctuation">(</span>high <span class="token operator">></span> low<span class="token punctuation">)</span> <span class="token punctuation">&#123;</span></pre></td></tr><tr><td data-num="4"></td><td><pre>        <span class="token function">partition</span><span class="token punctuation">(</span>low<span class="token punctuation">,</span> high<span class="token punctuation">,</span> pivotpoint<span class="token punctuation">)</span><span class="token punctuation">;</span></pre></td></tr><tr><td data-num="5"></td><td><pre>        <span class="token function">quicksort</span><span class="token punctuation">(</span>low<span class="token punctuation">,</span> pivotpoint <span class="token operator">-</span> <span class="token number">1</span><span class="token punctuation">)</span><span class="token punctuation">;</span></pre></td></tr><tr><td data-num="6"></td><td><pre>        <span class="token function">quicksort</span><span class="token punctuation">(</span>pivotpoint <span class="token operator">+</span> <span class="token number">1</span><span class="token punctuation">,</span> high<span class="token punctuation">)</span><span class="token punctuation">;</span></pre></td></tr><tr><td data-num="7"></td><td><pre>    <span class="token punctuation">&#125;</span></pre></td></tr><tr><td data-num="8"></td><td><pre><span class="token punctuation">&#125;</span></pre></td></tr></table></figure><h2 id="heap-sort"><a class="anchor" href="#heap-sort">#</a> Heap Sort</h2><p><strong>操作流程 (最大堆積為例):</strong></p><ol><li>將陣列轉換最大堆積 (Max Heap)</li><li>將 Root 與最後一個節點交換</li><li>將最後一個節點移除</li><li>將剩餘未排序完的節點重複 1~3 步驟，直到所有節點被移除，即完成排序。</li></ol>]]></content>
      
      
      <categories>
          
          <category> Algorithm </category>
          
      </categories>
      
      
        <tags>
            
            <tag> Algorithm </tag>
            
            <tag> Sorting </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>2629. Function Composition</title>
      <link href="/2023/05/11/Coding/leetcode/Easy/2629%20Function%20Composition/"/>
      <url>/2023/05/11/Coding/leetcode/Easy/2629%20Function%20Composition/</url>
      
        <content type="html"><![CDATA[<p>⭐️</p><h2 id="題目敘述"><a class="anchor" href="#題目敘述">#</a> <span class="exturl" data-url="aHR0cHM6Ly9sZWV0Y29kZS5jb20vcHJvYmxlbXMvZnVuY3Rpb24tY29tcG9zaXRpb24vZGVzY3JpcHRpb24vP3V0bV9jYW1wYWlnbj1Qb3N0RDcmYW1wO3V0bV9tZWRpdW09UG9zdCZhbXA7dXRtX3NvdXJjZT1Qb3N0JmFtcDtnaW9fbGlua19pZD00UFk3d1pNOQ==">題目敘述</span></h2><p>Given an array of functions  <code>[f1, f2, f3, ..., fn]</code> , return a new function  <code>fn</code>  that is the <strong>function composition</strong> of the array of functions.</p><p>The <strong>function composition</strong> of  <code>[f(x), g(x), h(x)]</code>  is  <code>fn(x) = f(g(h(x)))</code> .</p><p>The <strong>function composition</strong> of an empty list of functions is the <strong>identity function</strong>  <code>f(x) = x</code> .</p><p>You may assume each function in the array accepts one integer as input and returns one integer as output.</p><h3 id="example-1"><a class="anchor" href="#example-1">#</a> Example 1</h3><blockquote><p><strong>Input</strong>: functions = [x =&gt; x + 1, x =&gt; x * x, x =&gt; 2 * x], x = 4<br><strong>Output</strong>: 65<br><strong>Explanation</strong>:<br>Evaluating from right to left …<br>Starting with x = 4.<br>2 * (4) = 8<br>(8) * (8) = 64<br>(64) + 1 = 65</p></blockquote><h3 id="example-2"><a class="anchor" href="#example-2">#</a> Example 2</h3><blockquote><p><strong>Input</strong>: functions = [x =&gt; 10 * x, x =&gt; 10 * x, x =&gt; 10 * x], x = 1<br><strong>Output</strong>: 1000<br><strong>Explanation</strong>:<br>Evaluating from right to left …<br>10 * (1) = 10<br>10 * (10) = 100<br>10 * (100) = 1000</p></blockquote><h3 id="example-3"><a class="anchor" href="#example-3">#</a> Example 3</h3><blockquote><p><strong>Input</strong>: functions = [], x = 42<br><strong>Output</strong>: 42<br><strong>Explanation</strong>:<br>The composition of zero functions is the identity function</p></blockquote><h2 id="solution"><a class="anchor" href="#solution">#</a> Solution</h2><div class="tab" data-id="code" data-title="Javascript"><figure class="highlight javascript"><figcaption data-lang="javascript"></figcaption><table><tr><td data-num="1"></td><td><pre><span class="token comment">/**</pre></td></tr><tr><td data-num="2"></td><td><pre> * @param &#123;Function[]&#125; functions</pre></td></tr><tr><td data-num="3"></td><td><pre> * @return &#123;Function&#125;</pre></td></tr><tr><td data-num="4"></td><td><pre> */</span></pre></td></tr><tr><td data-num="5"></td><td><pre><span class="token keyword">var</span> <span class="token function-variable function">compose</span> <span class="token operator">=</span> <span class="token keyword">function</span><span class="token punctuation">(</span><span class="token parameter">functions</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span></pre></td></tr><tr><td data-num="6"></td><td><pre><span class="token keyword">return</span> <span class="token keyword">function</span><span class="token punctuation">(</span><span class="token parameter">x</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span></pre></td></tr><tr><td data-num="7"></td><td><pre>        functions<span class="token punctuation">.</span><span class="token function">reverse</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">forEach</span><span class="token punctuation">(</span><span class="token parameter">fn</span> <span class="token operator">=></span> x <span class="token operator">=</span> <span class="token function">fn</span><span class="token punctuation">(</span>x<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span></pre></td></tr><tr><td data-num="8"></td><td><pre>        <span class="token keyword">return</span> x<span class="token punctuation">;</span></pre></td></tr><tr><td data-num="9"></td><td><pre>    <span class="token punctuation">&#125;</span></pre></td></tr><tr><td data-num="10"></td><td><pre><span class="token punctuation">&#125;</span><span class="token punctuation">;</span></pre></td></tr><tr><td data-num="11"></td><td><pre></pre></td></tr><tr><td data-num="12"></td><td><pre><span class="token comment">/**</pre></td></tr><tr><td data-num="13"></td><td><pre> * const fn = compose([x => x + 1, x => 2 * x])</pre></td></tr><tr><td data-num="14"></td><td><pre> * fn(4) // 9</pre></td></tr><tr><td data-num="15"></td><td><pre> */</span></pre></td></tr></table></figure></div><div class="tab" data-id="code" data-title="Typescript"><figure class="highlight typescript"><figcaption data-lang="typescript"></figcaption><table><tr><td data-num="1"></td><td><pre><span class="token keyword">type</span> <span class="token class-name"><span class="token constant">F</span></span> <span class="token operator">=</span> <span class="token punctuation">(</span>x<span class="token operator">:</span> <span class="token builtin">number</span><span class="token punctuation">)</span> <span class="token operator">=></span> <span class="token builtin">number</span><span class="token punctuation">;</span></pre></td></tr><tr><td data-num="2"></td><td><pre></pre></td></tr><tr><td data-num="3"></td><td><pre><span class="token keyword">function</span> <span class="token function">compose</span><span class="token punctuation">(</span>functions<span class="token operator">:</span> <span class="token constant">F</span><span class="token punctuation">[</span><span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token operator">:</span> <span class="token constant">F</span> <span class="token punctuation">&#123;</span></pre></td></tr><tr><td data-num="4"></td><td><pre><span class="token keyword">return</span> <span class="token keyword">function</span><span class="token punctuation">(</span>x<span class="token punctuation">)</span> <span class="token punctuation">&#123;</span></pre></td></tr><tr><td data-num="5"></td><td><pre>        functions<span class="token punctuation">.</span><span class="token function">reverse</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">forEach</span><span class="token punctuation">(</span>fn <span class="token operator">=></span> x <span class="token operator">=</span> <span class="token function">fn</span><span class="token punctuation">(</span>x<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span></pre></td></tr><tr><td data-num="6"></td><td><pre>        <span class="token keyword">return</span> x<span class="token punctuation">;</span></pre></td></tr><tr><td data-num="7"></td><td><pre>    <span class="token punctuation">&#125;</span></pre></td></tr><tr><td data-num="8"></td><td><pre><span class="token punctuation">&#125;</span><span class="token punctuation">;</span></pre></td></tr><tr><td data-num="9"></td><td><pre></pre></td></tr><tr><td data-num="10"></td><td><pre><span class="token comment">/**</pre></td></tr><tr><td data-num="11"></td><td><pre> * const fn = compose([x => x + 1, x => 2 * x])</pre></td></tr><tr><td data-num="12"></td><td><pre> * fn(4) // 9</pre></td></tr><tr><td data-num="13"></td><td><pre> */</span></pre></td></tr></table></figure></div>]]></content>
      
      
      <categories>
          
          <category> Coding </category>
          
          <category> Leetcode </category>
          
          <category> Easy </category>
          
      </categories>
      
      
        <tags>
            
            <tag> Javascript </tag>
            
            <tag> Leetcode </tag>
            
            <tag> Easy </tag>
            
            <tag> Typescript </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>59. Spiral Matrix II</title>
      <link href="/2023/05/10/Coding/leetcode/Medium/59%20Spiral%20Matrix%20II/"/>
      <url>/2023/05/10/Coding/leetcode/Medium/59%20Spiral%20Matrix%20II/</url>
      
        <content type="html"><![CDATA[<p>⭐️⭐️</p><h2 id="題目敘述"><a class="anchor" href="#題目敘述">#</a> <span class="exturl" data-url="aHR0cHM6Ly9sZWV0Y29kZS5jb20vcHJvYmxlbXMvc3BpcmFsLW1hdHJpeC1paS8=">題目敘述</span></h2><p>Given a positive integer  <code>n</code> , generate an  <code>n x n</code>   <code>matrix</code>  filled with elements from  <code>1</code>  to  <code>n^2</code>  in spiral order.</p><h3 id="example-1"><a class="anchor" href="#example-1">#</a> Example 1</h3><p><img data-src="https://imgur.com/rrw0jpY.png" alt=""></p><blockquote><p><strong>Input:</strong> n = 3<br><strong>Output:</strong> [[1,2,3],[8,9,4],[7,6,5]]</p></blockquote><h3 id="example-2"><a class="anchor" href="#example-2">#</a> Example 2</h3><blockquote><p><strong>Input:</strong> n = 1<br><strong>Output:</strong> [[1]]</p></blockquote><h2 id="solution"><a class="anchor" href="#solution">#</a> Solution</h2><div class="tab" data-id="code" data-title="C++"><figure class="highlight cpp"><figcaption data-lang="C++"></figcaption><table><tr><td data-num="1"></td><td><pre><span class="token keyword">class</span> <span class="token class-name">Solution</span> <span class="token punctuation">&#123;</span></pre></td></tr><tr><td data-num="2"></td><td><pre><span class="token keyword">public</span><span class="token operator">:</span></pre></td></tr><tr><td data-num="3"></td><td><pre>    vector<span class="token operator">&lt;</span>vector<span class="token operator">&lt;</span><span class="token keyword">int</span><span class="token operator">>></span> <span class="token function">generateMatrix</span><span class="token punctuation">(</span><span class="token keyword">int</span> n<span class="token punctuation">)</span> <span class="token punctuation">&#123;</span></pre></td></tr><tr><td data-num="4"></td><td><pre>        vector<span class="token operator">&lt;</span>vector<span class="token operator">&lt;</span><span class="token keyword">int</span><span class="token operator">>></span> <span class="token function">res</span><span class="token punctuation">(</span>n<span class="token punctuation">,</span> <span class="token generic-function"><span class="token function">vector</span><span class="token generic class-name"><span class="token operator">&lt;</span><span class="token keyword">int</span><span class="token operator">></span></span></span><span class="token punctuation">(</span>n<span class="token punctuation">,</span> <span class="token number">0</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span></pre></td></tr><tr><td data-num="5"></td><td><pre>        <span class="token keyword">int</span> left <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">,</span> right <span class="token operator">=</span> n<span class="token operator">-</span><span class="token number">1</span><span class="token punctuation">,</span> up <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">,</span> down <span class="token operator">=</span> n<span class="token operator">-</span><span class="token number">1</span><span class="token punctuation">;</span></pre></td></tr><tr><td data-num="6"></td><td><pre>        <span class="token keyword">int</span> val <span class="token operator">=</span> <span class="token number">1</span><span class="token punctuation">;</span></pre></td></tr><tr><td data-num="7"></td><td><pre>        <span class="token keyword">while</span> <span class="token punctuation">(</span>left <span class="token operator">&lt;=</span> right <span class="token operator">&amp;&amp;</span> up <span class="token operator">&lt;=</span> down<span class="token punctuation">)</span> <span class="token punctuation">&#123;</span></pre></td></tr><tr><td data-num="8"></td><td><pre>            <span class="token keyword">for</span> <span class="token punctuation">(</span><span class="token keyword">int</span> j<span class="token operator">=</span>left<span class="token punctuation">;</span> j<span class="token operator">&lt;=</span>right<span class="token punctuation">;</span> j<span class="token operator">++</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span></pre></td></tr><tr><td data-num="9"></td><td><pre>                res<span class="token punctuation">[</span>up<span class="token punctuation">]</span><span class="token punctuation">[</span>j<span class="token punctuation">]</span> <span class="token operator">=</span> val<span class="token punctuation">;</span></pre></td></tr><tr><td data-num="10"></td><td><pre>                val<span class="token operator">++</span><span class="token punctuation">;</span></pre></td></tr><tr><td data-num="11"></td><td><pre>            <span class="token punctuation">&#125;</span></pre></td></tr><tr><td data-num="12"></td><td><pre>            up<span class="token operator">++</span><span class="token punctuation">;</span></pre></td></tr><tr><td data-num="13"></td><td><pre>            <span class="token keyword">if</span> <span class="token punctuation">(</span>up <span class="token operator">></span> down<span class="token punctuation">)</span> <span class="token keyword">break</span><span class="token punctuation">;</span></pre></td></tr><tr><td data-num="14"></td><td><pre></pre></td></tr><tr><td data-num="15"></td><td><pre>            <span class="token keyword">for</span> <span class="token punctuation">(</span><span class="token keyword">int</span> i<span class="token operator">=</span>up<span class="token punctuation">;</span> i<span class="token operator">&lt;=</span>down<span class="token punctuation">;</span> i<span class="token operator">++</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span></pre></td></tr><tr><td data-num="16"></td><td><pre>                res<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">[</span>right<span class="token punctuation">]</span> <span class="token operator">=</span> val<span class="token punctuation">;</span></pre></td></tr><tr><td data-num="17"></td><td><pre>                val<span class="token operator">++</span><span class="token punctuation">;</span></pre></td></tr><tr><td data-num="18"></td><td><pre>            <span class="token punctuation">&#125;</span></pre></td></tr><tr><td data-num="19"></td><td><pre>            right<span class="token operator">--</span><span class="token punctuation">;</span></pre></td></tr><tr><td data-num="20"></td><td><pre>            <span class="token keyword">if</span> <span class="token punctuation">(</span>left <span class="token operator">></span> right<span class="token punctuation">)</span> <span class="token keyword">break</span><span class="token punctuation">;</span></pre></td></tr><tr><td data-num="21"></td><td><pre></pre></td></tr><tr><td data-num="22"></td><td><pre>            <span class="token keyword">for</span> <span class="token punctuation">(</span><span class="token keyword">int</span> j<span class="token operator">=</span>right<span class="token punctuation">;</span> j<span class="token operator">>=</span>left<span class="token punctuation">;</span> j<span class="token operator">--</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span></pre></td></tr><tr><td data-num="23"></td><td><pre>                res<span class="token punctuation">[</span>down<span class="token punctuation">]</span><span class="token punctuation">[</span>j<span class="token punctuation">]</span> <span class="token operator">=</span> val<span class="token punctuation">;</span></pre></td></tr><tr><td data-num="24"></td><td><pre>                val<span class="token operator">++</span><span class="token punctuation">;</span></pre></td></tr><tr><td data-num="25"></td><td><pre>            <span class="token punctuation">&#125;</span></pre></td></tr><tr><td data-num="26"></td><td><pre>            down<span class="token operator">--</span><span class="token punctuation">;</span></pre></td></tr><tr><td data-num="27"></td><td><pre>            <span class="token keyword">if</span> <span class="token punctuation">(</span>up <span class="token operator">></span> down<span class="token punctuation">)</span> <span class="token keyword">break</span><span class="token punctuation">;</span></pre></td></tr><tr><td data-num="28"></td><td><pre></pre></td></tr><tr><td data-num="29"></td><td><pre>            <span class="token keyword">for</span> <span class="token punctuation">(</span><span class="token keyword">int</span> i<span class="token operator">=</span>down<span class="token punctuation">;</span> i<span class="token operator">>=</span> up<span class="token punctuation">;</span> i<span class="token operator">--</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span></pre></td></tr><tr><td data-num="30"></td><td><pre>                res<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">[</span>left<span class="token punctuation">]</span> <span class="token operator">=</span> val<span class="token punctuation">;</span></pre></td></tr><tr><td data-num="31"></td><td><pre>                val<span class="token operator">++</span><span class="token punctuation">;</span></pre></td></tr><tr><td data-num="32"></td><td><pre>            <span class="token punctuation">&#125;</span></pre></td></tr><tr><td data-num="33"></td><td><pre>            left<span class="token operator">++</span><span class="token punctuation">;</span></pre></td></tr><tr><td data-num="34"></td><td><pre>            <span class="token keyword">if</span> <span class="token punctuation">(</span>left <span class="token operator">></span> right<span class="token punctuation">)</span> <span class="token keyword">break</span><span class="token punctuation">;</span></pre></td></tr><tr><td data-num="35"></td><td><pre>        <span class="token punctuation">&#125;</span></pre></td></tr><tr><td data-num="36"></td><td><pre>        <span class="token keyword">return</span> res<span class="token punctuation">;</span></pre></td></tr><tr><td data-num="37"></td><td><pre>    <span class="token punctuation">&#125;</span></pre></td></tr><tr><td data-num="38"></td><td><pre><span class="token punctuation">&#125;</span><span class="token punctuation">;</span></pre></td></tr></table></figure></div><div class="tab" data-id="code" data-title="Java"><figure class="highlight java"><figcaption data-lang="java"></figcaption><table><tr><td data-num="1"></td><td><pre><span class="token keyword">class</span> <span class="token class-name">Solution</span> <span class="token punctuation">&#123;</span></pre></td></tr><tr><td data-num="2"></td><td><pre>    <span class="token keyword">public</span> <span class="token keyword">int</span><span class="token punctuation">[</span><span class="token punctuation">]</span><span class="token punctuation">[</span><span class="token punctuation">]</span> <span class="token function">generateMatrix</span><span class="token punctuation">(</span><span class="token keyword">int</span> n<span class="token punctuation">)</span> <span class="token punctuation">&#123;</span></pre></td></tr><tr><td data-num="3"></td><td><pre>        <span class="token keyword">int</span><span class="token punctuation">[</span><span class="token punctuation">]</span><span class="token punctuation">[</span><span class="token punctuation">]</span> ans <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token keyword">int</span><span class="token punctuation">[</span>n<span class="token punctuation">]</span><span class="token punctuation">[</span>n<span class="token punctuation">]</span><span class="token punctuation">;</span></pre></td></tr><tr><td data-num="4"></td><td><pre>        <span class="token keyword">int</span> count <span class="token operator">=</span> <span class="token number">1</span><span class="token punctuation">;</span></pre></td></tr><tr><td data-num="5"></td><td><pre></pre></td></tr><tr><td data-num="6"></td><td><pre>        <span class="token keyword">int</span> left <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">,</span> right <span class="token operator">=</span> n <span class="token operator">-</span> <span class="token number">1</span><span class="token punctuation">,</span> top <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">,</span> bottom <span class="token operator">=</span> n <span class="token operator">-</span> <span class="token number">1</span><span class="token punctuation">;</span></pre></td></tr><tr><td data-num="7"></td><td><pre>        <span class="token keyword">while</span> <span class="token punctuation">(</span>left <span class="token operator">&lt;=</span> right <span class="token operator">&amp;&amp;</span> top <span class="token operator">&lt;=</span> bottom<span class="token punctuation">)</span> <span class="token punctuation">&#123;</span></pre></td></tr><tr><td data-num="8"></td><td><pre>            <span class="token keyword">for</span> <span class="token punctuation">(</span><span class="token keyword">int</span> i <span class="token operator">=</span> left<span class="token punctuation">;</span> i <span class="token operator">&lt;=</span> right<span class="token punctuation">;</span> i<span class="token operator">++</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span></pre></td></tr><tr><td data-num="9"></td><td><pre>                ans<span class="token punctuation">[</span>top<span class="token punctuation">]</span><span class="token punctuation">[</span>i<span class="token punctuation">]</span> <span class="token operator">=</span> count<span class="token operator">++</span><span class="token punctuation">;</span></pre></td></tr><tr><td data-num="10"></td><td><pre>            <span class="token punctuation">&#125;</span></pre></td></tr><tr><td data-num="11"></td><td><pre>            top<span class="token operator">++</span><span class="token punctuation">;</span></pre></td></tr><tr><td data-num="12"></td><td><pre>            </pre></td></tr><tr><td data-num="13"></td><td><pre>            <span class="token keyword">for</span> <span class="token punctuation">(</span><span class="token keyword">int</span> i <span class="token operator">=</span> top<span class="token punctuation">;</span> i <span class="token operator">&lt;=</span> bottom<span class="token punctuation">;</span> i<span class="token operator">++</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span></pre></td></tr><tr><td data-num="14"></td><td><pre>                ans<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">[</span>right<span class="token punctuation">]</span> <span class="token operator">=</span> count<span class="token operator">++</span><span class="token punctuation">;</span></pre></td></tr><tr><td data-num="15"></td><td><pre>            <span class="token punctuation">&#125;</span></pre></td></tr><tr><td data-num="16"></td><td><pre>            right<span class="token operator">--</span><span class="token punctuation">;</span></pre></td></tr><tr><td data-num="17"></td><td><pre>            </pre></td></tr><tr><td data-num="18"></td><td><pre>            <span class="token keyword">if</span> <span class="token punctuation">(</span>top <span class="token operator">&lt;=</span> bottom<span class="token punctuation">)</span> <span class="token punctuation">&#123;</span></pre></td></tr><tr><td data-num="19"></td><td><pre>                <span class="token keyword">for</span> <span class="token punctuation">(</span><span class="token keyword">int</span> i <span class="token operator">=</span> right<span class="token punctuation">;</span> i <span class="token operator">>=</span> left<span class="token punctuation">;</span> i<span class="token operator">--</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span></pre></td></tr><tr><td data-num="20"></td><td><pre>                    ans<span class="token punctuation">[</span>bottom<span class="token punctuation">]</span><span class="token punctuation">[</span>i<span class="token punctuation">]</span> <span class="token operator">=</span> count<span class="token operator">++</span><span class="token punctuation">;</span></pre></td></tr><tr><td data-num="21"></td><td><pre>                <span class="token punctuation">&#125;</span></pre></td></tr><tr><td data-num="22"></td><td><pre>                bottom<span class="token operator">--</span><span class="token punctuation">;</span></pre></td></tr><tr><td data-num="23"></td><td><pre>            <span class="token punctuation">&#125;</span></pre></td></tr><tr><td data-num="24"></td><td><pre>            </pre></td></tr><tr><td data-num="25"></td><td><pre>            <span class="token keyword">if</span> <span class="token punctuation">(</span>left <span class="token operator">&lt;=</span> right<span class="token punctuation">)</span> <span class="token punctuation">&#123;</span></pre></td></tr><tr><td data-num="26"></td><td><pre>                <span class="token keyword">for</span> <span class="token punctuation">(</span><span class="token keyword">int</span> i <span class="token operator">=</span> bottom<span class="token punctuation">;</span> i <span class="token operator">>=</span> top<span class="token punctuation">;</span> i<span class="token operator">--</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span></pre></td></tr><tr><td data-num="27"></td><td><pre>                    ans<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">[</span>left<span class="token punctuation">]</span> <span class="token operator">=</span> count<span class="token operator">++</span><span class="token punctuation">;</span></pre></td></tr><tr><td data-num="28"></td><td><pre>                <span class="token punctuation">&#125;</span></pre></td></tr><tr><td data-num="29"></td><td><pre>                left<span class="token operator">++</span><span class="token punctuation">;</span></pre></td></tr><tr><td data-num="30"></td><td><pre>            <span class="token punctuation">&#125;</span></pre></td></tr><tr><td data-num="31"></td><td><pre>        <span class="token punctuation">&#125;</span></pre></td></tr><tr><td data-num="32"></td><td><pre>        </pre></td></tr><tr><td data-num="33"></td><td><pre>        <span class="token keyword">return</span> ans<span class="token punctuation">;</span></pre></td></tr><tr><td data-num="34"></td><td><pre>    <span class="token punctuation">&#125;</span></pre></td></tr><tr><td data-num="35"></td><td><pre><span class="token punctuation">&#125;</span></pre></td></tr></table></figure></div><div class="tab" data-id="code" data-title="Python"><pre><code class="language-python"></code></pre></div>]]></content>
      
      
      <categories>
          
          <category> Coding </category>
          
          <category> Leetcode </category>
          
          <category> Medium </category>
          
      </categories>
      
      
        <tags>
            
            <tag> Leetcode </tag>
            
            <tag> Array </tag>
            
            <tag> Simulation </tag>
            
            <tag> Matrix </tag>
            
            <tag> Medium </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>2626. Array Reduce Transformation</title>
      <link href="/2023/05/10/Coding/leetcode/Easy/2626%20Array%20Reduce%20Transformation/"/>
      <url>/2023/05/10/Coding/leetcode/Easy/2626%20Array%20Reduce%20Transformation/</url>
      
        <content type="html"><![CDATA[<p>⭐️</p><h2 id="題目敘述"><a class="anchor" href="#題目敘述">#</a> <span class="exturl" data-url="aHR0cHM6Ly9sZWV0Y29kZS5jb20vcHJvYmxlbXMvYXJyYXktcmVkdWNlLXRyYW5zZm9ybWF0aW9uL2Rlc2NyaXB0aW9uLz91dG1fY2FtcGFpZ249UG9zdEQ2JmFtcDt1dG1fbWVkaXVtPVBvc3QmYW1wO3V0bV9zb3VyY2U9UG9zdCZhbXA7Z2lvX2xpbmtfaWQ9blBONDVqRDk=">題目敘述</span></h2><p>Given an integer array  <code>nums</code> , a reducer function  <code>fn</code> , and an initial value  <code>init</code> , return a <strong>reduced</strong> array.</p><p>A <strong>reduced</strong> array is created by applying the following operation:  <code>val = fn(init, nums[0])</code> ,  <code>val = fn(val, nums[1])</code> ,  <code>val = fn(val, nums[2])</code> ,  <code>...</code>  until every element in the array has been processed. The final value of  <code>val</code>  is returned.</p><p>If the length of the array is 0, it should return  <code>init</code> .</p><p>Please solve it without using the built-in  <code>Array.reduce</code>  method.</p><h3 id="example-1"><a class="anchor" href="#example-1">#</a> Example 1</h3><blockquote><p><strong>Input</strong>:<br>nums = [1,2,3,4]<br>fn = function sum(accum, curr) { return accum + curr; }<br>init = 0<br><strong>Output</strong>: 10<br><strong>Explanation</strong>:<br>initially, the value is init=0.<br>(0) + nums[0] = 1<br>(1) + nums[1] = 3<br>(3) + nums[2] = 6<br>(6) + nums[3] = 10<br>The final answer is 10.</p></blockquote><h3 id="example-2"><a class="anchor" href="#example-2">#</a> Example 2</h3><blockquote><p><strong>Input</strong>:<br>nums = [1,2,3,4]<br>fn = function sum(accum, curr) { return accum + curr * curr; }<br>init = 100<br><strong>Output</strong>: 130<br><strong>Explanation</strong>:<br>initially, the value is init=100.<br>(100) + nums[0]^2 = 101<br>(101) + nums[1]^2 = 105<br>(105) + nums[2]^2 = 114<br>(114) + nums[3]^2 = 130<br>The final answer is 130.</p></blockquote><h3 id="example-3"><a class="anchor" href="#example-3">#</a> Example 3</h3><blockquote><p><strong>Input</strong>:<br>nums = []<br>fn = function sum(accum, curr) { return 0; }<br>init = 25<br><strong>Output</strong>: 25<br><strong>Explanation</strong>: For empty arrays, the answer is always init.</p></blockquote><h2 id="solution"><a class="anchor" href="#solution">#</a> Solution</h2><div class="tab" data-id="code" data-title="Javascript"><figure class="highlight javascript"><figcaption data-lang="javascript"></figcaption><table><tr><td data-num="1"></td><td><pre><span class="token comment">/**</pre></td></tr><tr><td data-num="2"></td><td><pre> * @param &#123;number[]&#125; nums</pre></td></tr><tr><td data-num="3"></td><td><pre> * @param &#123;Function&#125; fn</pre></td></tr><tr><td data-num="4"></td><td><pre> * @param &#123;number&#125; init</pre></td></tr><tr><td data-num="5"></td><td><pre> * @return &#123;number&#125;</pre></td></tr><tr><td data-num="6"></td><td><pre> */</span></pre></td></tr><tr><td data-num="7"></td><td><pre><span class="token keyword">var</span> <span class="token function-variable function">reduce</span> <span class="token operator">=</span> <span class="token keyword">function</span><span class="token punctuation">(</span><span class="token parameter">nums<span class="token punctuation">,</span> fn<span class="token punctuation">,</span> init</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span></pre></td></tr><tr><td data-num="8"></td><td><pre>    nums<span class="token punctuation">.</span><span class="token function">forEach</span><span class="token punctuation">(</span><span class="token parameter">num</span> <span class="token operator">=></span> init <span class="token operator">=</span> <span class="token function">fn</span><span class="token punctuation">(</span>init<span class="token punctuation">,</span> num<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span></pre></td></tr><tr><td data-num="9"></td><td><pre>    <span class="token keyword">return</span> init<span class="token punctuation">;</span></pre></td></tr><tr><td data-num="10"></td><td><pre><span class="token punctuation">&#125;</span><span class="token punctuation">;</span></pre></td></tr></table></figure></div><div class="tab" data-id="code" data-title="Typescript"><figure class="highlight typescript"><figcaption data-lang="typescript"></figcaption><table><tr><td data-num="1"></td><td><pre><span class="token keyword">type</span> <span class="token class-name">Fn</span> <span class="token operator">=</span> <span class="token punctuation">(</span>accum<span class="token operator">:</span> <span class="token builtin">number</span><span class="token punctuation">,</span> curr<span class="token operator">:</span> <span class="token builtin">number</span><span class="token punctuation">)</span> <span class="token operator">=></span> <span class="token builtin">number</span></pre></td></tr><tr><td data-num="2"></td><td><pre></pre></td></tr><tr><td data-num="3"></td><td><pre><span class="token keyword">function</span> <span class="token function">reduce</span><span class="token punctuation">(</span>nums<span class="token operator">:</span> <span class="token builtin">number</span><span class="token punctuation">[</span><span class="token punctuation">]</span><span class="token punctuation">,</span> fn<span class="token operator">:</span> Fn<span class="token punctuation">,</span> init<span class="token operator">:</span> <span class="token builtin">number</span><span class="token punctuation">)</span><span class="token operator">:</span> <span class="token builtin">number</span> <span class="token punctuation">&#123;</span></pre></td></tr><tr><td data-num="4"></td><td><pre>    nums<span class="token punctuation">.</span><span class="token function">forEach</span><span class="token punctuation">(</span>num <span class="token operator">=></span> init <span class="token operator">=</span> <span class="token function">fn</span><span class="token punctuation">(</span>init<span class="token punctuation">,</span> num<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span></pre></td></tr><tr><td data-num="5"></td><td><pre>    <span class="token keyword">return</span> init<span class="token punctuation">;</span></pre></td></tr><tr><td data-num="6"></td><td><pre><span class="token punctuation">&#125;</span><span class="token punctuation">;</span></pre></td></tr></table></figure></div>]]></content>
      
      
      <categories>
          
          <category> Coding </category>
          
          <category> Leetcode </category>
          
          <category> Easy </category>
          
      </categories>
      
      
        <tags>
            
            <tag> Javascript </tag>
            
            <tag> Leetcode </tag>
            
            <tag> Easy </tag>
            
            <tag> Typescript </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>54. Spiral Matrix</title>
      <link href="/2023/05/09/Coding/leetcode/Medium/54%20Spiral%20Matrix/"/>
      <url>/2023/05/09/Coding/leetcode/Medium/54%20Spiral%20Matrix/</url>
      
        <content type="html"><![CDATA[<p>⭐️⭐️</p><h2 id="題目敘述"><a class="anchor" href="#題目敘述">#</a> <span class="exturl" data-url="aHR0cHM6Ly9sZWV0Y29kZS5jb20vcHJvYmxlbXMvc3BpcmFsLW1hdHJpeC8=">題目敘述</span></h2><p>Given an  <code>m x n</code>   <code>matrix</code> , return <em>all elements of the  <code>matrix</code>  in spiral order.</em></p><h3 id="example-1"><a class="anchor" href="#example-1">#</a> Example 1</h3><p><img data-src="https://hackmd.io/_uploads/rJiuimwNh.png" alt=""></p><blockquote><p><strong>Input</strong>: matrix = [[1,2,3],[4,5,6],[7,8,9]]<br><strong>Output</strong>: [1,2,3,6,9,8,7,4,5]</p></blockquote><h3 id="example-2"><a class="anchor" href="#example-2">#</a> Example 2</h3><p><img data-src="https://hackmd.io/_uploads/rJgtsmDVn.png" alt=""></p><blockquote><p><strong>Input</strong>: matrix = [[1,2,3,4],[5,6,7,8],[9,10,11,12]]<br><strong>Output</strong>: [1,2,3,4,8,12,11,10,9,5,6,7]</p></blockquote><h2 id="solution"><a class="anchor" href="#solution">#</a> Solution</h2><div class="tab" data-id="code" data-title="C++"><figure class="highlight cpp"><figcaption data-lang="C++"></figcaption><table><tr><td data-num="1"></td><td><pre><span class="token keyword">class</span> <span class="token class-name">Solution</span> <span class="token punctuation">&#123;</span></pre></td></tr><tr><td data-num="2"></td><td><pre><span class="token keyword">public</span><span class="token operator">:</span></pre></td></tr><tr><td data-num="3"></td><td><pre>    vector<span class="token operator">&lt;</span><span class="token keyword">int</span><span class="token operator">></span> <span class="token function">spiralOrder</span><span class="token punctuation">(</span>vector<span class="token operator">&lt;</span>vector<span class="token operator">&lt;</span><span class="token keyword">int</span><span class="token operator">>></span><span class="token operator">&amp;</span> matrix<span class="token punctuation">)</span> <span class="token punctuation">&#123;</span></pre></td></tr><tr><td data-num="4"></td><td><pre>        vector<span class="token operator">&lt;</span><span class="token keyword">int</span><span class="token operator">></span> res<span class="token punctuation">;</span></pre></td></tr><tr><td data-num="5"></td><td><pre>        <span class="token keyword">int</span> m <span class="token operator">=</span> matrix<span class="token punctuation">.</span><span class="token function">size</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token operator">-</span><span class="token number">1</span><span class="token punctuation">;</span></pre></td></tr><tr><td data-num="6"></td><td><pre>        <span class="token keyword">int</span> n <span class="token operator">=</span> matrix<span class="token punctuation">[</span><span class="token number">0</span><span class="token punctuation">]</span><span class="token punctuation">.</span><span class="token function">size</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token operator">-</span><span class="token number">1</span><span class="token punctuation">;</span></pre></td></tr><tr><td data-num="7"></td><td><pre></pre></td></tr><tr><td data-num="8"></td><td><pre>        <span class="token keyword">int</span> left <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">,</span> right <span class="token operator">=</span> n<span class="token punctuation">,</span> up <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">,</span> down <span class="token operator">=</span> m<span class="token punctuation">;</span></pre></td></tr><tr><td data-num="9"></td><td><pre>        <span class="token keyword">while</span> <span class="token punctuation">(</span>left <span class="token operator">&lt;=</span> right <span class="token operator">&amp;&amp;</span> up <span class="token operator">&lt;=</span> down<span class="token punctuation">)</span> <span class="token punctuation">&#123;</span></pre></td></tr><tr><td data-num="10"></td><td><pre>            <span class="token keyword">for</span> <span class="token punctuation">(</span><span class="token keyword">int</span> j<span class="token operator">=</span>left<span class="token punctuation">;</span> j<span class="token operator">&lt;=</span>right<span class="token punctuation">;</span> j<span class="token operator">++</span><span class="token punctuation">)</span> res<span class="token punctuation">.</span><span class="token function">push_back</span><span class="token punctuation">(</span>matrix<span class="token punctuation">[</span>up<span class="token punctuation">]</span><span class="token punctuation">[</span>j<span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token punctuation">;</span></pre></td></tr><tr><td data-num="11"></td><td><pre>            up<span class="token operator">++</span><span class="token punctuation">;</span></pre></td></tr><tr><td data-num="12"></td><td><pre>            <span class="token keyword">if</span> <span class="token punctuation">(</span>up <span class="token operator">></span> down<span class="token punctuation">)</span> <span class="token keyword">break</span><span class="token punctuation">;</span></pre></td></tr><tr><td data-num="13"></td><td><pre></pre></td></tr><tr><td data-num="14"></td><td><pre>            <span class="token keyword">for</span> <span class="token punctuation">(</span><span class="token keyword">int</span> i<span class="token operator">=</span>up<span class="token punctuation">;</span> i<span class="token operator">&lt;=</span>down<span class="token punctuation">;</span> i<span class="token operator">++</span><span class="token punctuation">)</span> res<span class="token punctuation">.</span><span class="token function">push_back</span><span class="token punctuation">(</span>matrix<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">[</span>right<span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token punctuation">;</span></pre></td></tr><tr><td data-num="15"></td><td><pre>            right<span class="token operator">--</span><span class="token punctuation">;</span></pre></td></tr><tr><td data-num="16"></td><td><pre>            <span class="token keyword">if</span> <span class="token punctuation">(</span>left <span class="token operator">></span> right<span class="token punctuation">)</span> <span class="token keyword">break</span><span class="token punctuation">;</span></pre></td></tr><tr><td data-num="17"></td><td><pre></pre></td></tr><tr><td data-num="18"></td><td><pre>            <span class="token keyword">for</span> <span class="token punctuation">(</span><span class="token keyword">int</span> j<span class="token operator">=</span>right<span class="token punctuation">;</span> j<span class="token operator">>=</span>left<span class="token punctuation">;</span> j<span class="token operator">--</span><span class="token punctuation">)</span> res<span class="token punctuation">.</span><span class="token function">push_back</span><span class="token punctuation">(</span>matrix<span class="token punctuation">[</span>down<span class="token punctuation">]</span><span class="token punctuation">[</span>j<span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token punctuation">;</span></pre></td></tr><tr><td data-num="19"></td><td><pre>            down<span class="token operator">--</span><span class="token punctuation">;</span></pre></td></tr><tr><td data-num="20"></td><td><pre>            <span class="token keyword">if</span> <span class="token punctuation">(</span>up <span class="token operator">></span> down<span class="token punctuation">)</span> <span class="token keyword">break</span><span class="token punctuation">;</span></pre></td></tr><tr><td data-num="21"></td><td><pre></pre></td></tr><tr><td data-num="22"></td><td><pre>            <span class="token keyword">for</span> <span class="token punctuation">(</span><span class="token keyword">int</span> i<span class="token operator">=</span>down<span class="token punctuation">;</span> i<span class="token operator">>=</span>up<span class="token punctuation">;</span> i<span class="token operator">--</span><span class="token punctuation">)</span> res<span class="token punctuation">.</span><span class="token function">push_back</span><span class="token punctuation">(</span>matrix<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">[</span>left<span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token punctuation">;</span></pre></td></tr><tr><td data-num="23"></td><td><pre>            left<span class="token operator">++</span><span class="token punctuation">;</span>  </pre></td></tr><tr><td data-num="24"></td><td><pre>            <span class="token keyword">if</span> <span class="token punctuation">(</span>left <span class="token operator">></span> right<span class="token punctuation">)</span> <span class="token keyword">break</span><span class="token punctuation">;</span></pre></td></tr><tr><td data-num="25"></td><td><pre>        <span class="token punctuation">&#125;</span></pre></td></tr><tr><td data-num="26"></td><td><pre>        <span class="token keyword">return</span> res<span class="token punctuation">;</span></pre></td></tr><tr><td data-num="27"></td><td><pre>    <span class="token punctuation">&#125;</span></pre></td></tr><tr><td data-num="28"></td><td><pre><span class="token punctuation">&#125;</span><span class="token punctuation">;</span></pre></td></tr></table></figure></div><div class="tab" data-id="code" data-title="Java"><pre><code class="language-java"></code></pre></div><div class="tab" data-id="code" data-title="Python"><pre><code class="language-python"></code></pre></div>]]></content>
      
      
      <categories>
          
          <category> Coding </category>
          
          <category> Leetcode </category>
          
          <category> Medium </category>
          
      </categories>
      
      
        <tags>
            
            <tag> Leetcode </tag>
            
            <tag> Array </tag>
            
            <tag> Simulation </tag>
            
            <tag> Matrix </tag>
            
            <tag> Medium </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>2634. Filter Elements from Array</title>
      <link href="/2023/05/09/Coding/leetcode/Easy/2634%20Filter%20Elements%20from%20Array/"/>
      <url>/2023/05/09/Coding/leetcode/Easy/2634%20Filter%20Elements%20from%20Array/</url>
      
        <content type="html"><![CDATA[<p>⭐️</p><h2 id="題目敘述"><a class="anchor" href="#題目敘述">#</a> <span class="exturl" data-url="aHR0cHM6Ly9sZWV0Y29kZS5jb20vcHJvYmxlbXMvZmlsdGVyLWVsZW1lbnRzLWZyb20tYXJyYXkvZGVzY3JpcHRpb24vP3V0bV9jYW1wYWlnbj1Qb3N0RDUmYW1wO3V0bV9tZWRpdW09UG9zdCZhbXA7dXRtX3NvdXJjZT1Qb3N0JmFtcDtnaW9fbGlua19pZD1hOWE1VlpyOQ==">題目敘述</span></h2><p>Given an integer array  <code>arr</code>  and a filtering function  <code>fn</code> , return a new array with a fewer or equal number of elements.</p><p>The returned array should only contain elements where  <code>fn(arr[i], i)</code>  evaluated to a truthy value.</p><p>Please solve it without the built-in  <code>Array.filter</code>  method.</p><h3 id="example-1"><a class="anchor" href="#example-1">#</a> Example 1</h3><blockquote><p><strong>Input</strong>: arr = [0,10,20,30], fn = function greaterThan10(n) { return n &gt; 10; }<br><strong>Output</strong>: [20,30]<br><strong>Explanation</strong>:<br>const newArray = filter(arr, fn); // [20, 30]<br>The function filters out values that are not greater than 10</p></blockquote><h3 id="example-2"><a class="anchor" href="#example-2">#</a> Example 2</h3><blockquote><p><strong>Input</strong>: arr = [1,2,3], fn = function firstIndex(n, i) { return i === 0; }<br><strong>Output</strong>: [1]<br><strong>Explanation</strong>:<br>fn can also accept the index of each element<br>In this case, the function removes elements not at index 0</p></blockquote><h3 id="example-3"><a class="anchor" href="#example-3">#</a> Example 3</h3><blockquote><p><strong>Input</strong>: arr = [-2,-1,0,1,2], fn = function plusOne(n) { return n + 1 }<br><strong>Output</strong>: [-2,0,1,2]<br><strong>Explanation</strong>:<br>Falsey values such as 0 should be filtered out</p></blockquote><h2 id="solution"><a class="anchor" href="#solution">#</a> Solution</h2><div class="tab" data-id="code" data-title="Javascript"><figure class="highlight javascript"><figcaption data-lang="javascript"></figcaption><table><tr><td data-num="1"></td><td><pre><span class="token comment">/**</pre></td></tr><tr><td data-num="2"></td><td><pre> * @param &#123;number[]&#125; arr</pre></td></tr><tr><td data-num="3"></td><td><pre> * @param &#123;Function&#125; fn</pre></td></tr><tr><td data-num="4"></td><td><pre> * @return &#123;number[]&#125;</pre></td></tr><tr><td data-num="5"></td><td><pre> */</span></pre></td></tr><tr><td data-num="6"></td><td><pre><span class="token keyword">var</span> <span class="token function-variable function">filter</span> <span class="token operator">=</span> <span class="token keyword">function</span><span class="token punctuation">(</span><span class="token parameter">arr<span class="token punctuation">,</span> fn</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span></pre></td></tr><tr><td data-num="7"></td><td><pre>    <span class="token keyword">const</span> res <span class="token operator">=</span> <span class="token punctuation">[</span><span class="token punctuation">]</span><span class="token punctuation">;</span></pre></td></tr><tr><td data-num="8"></td><td><pre>    <span class="token keyword">for</span> <span class="token punctuation">(</span><span class="token keyword">let</span> i<span class="token operator">=</span><span class="token number">0</span><span class="token punctuation">;</span> i<span class="token operator">&lt;</span>arr<span class="token punctuation">.</span>length<span class="token punctuation">;</span> i<span class="token operator">++</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span></pre></td></tr><tr><td data-num="9"></td><td><pre>        <span class="token keyword">if</span> <span class="token punctuation">(</span><span class="token function">fn</span><span class="token punctuation">(</span>arr<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">,</span> i<span class="token punctuation">)</span><span class="token punctuation">)</span> res<span class="token punctuation">.</span><span class="token function">push</span><span class="token punctuation">(</span>arr<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token punctuation">;</span></pre></td></tr><tr><td data-num="10"></td><td><pre>    <span class="token punctuation">&#125;</span></pre></td></tr><tr><td data-num="11"></td><td><pre>    <span class="token keyword">return</span> res<span class="token punctuation">;</span></pre></td></tr><tr><td data-num="12"></td><td><pre><span class="token punctuation">&#125;</span><span class="token punctuation">;</span></pre></td></tr></table></figure></div><div class="tab" data-id="code" data-title="Typescript"><pre><code class="language-Typescript">function filter(arr: number[], fn: (n: number, i: number) =&gt; any): number[] &#123;    const res = [];    for (let i=0; i&lt;arr.length; i++) &#123;        if (fn(arr[i], i)) res.push(arr[i]);    &#125;    return res;&#125;;</code></pre></div>]]></content>
      
      
      <categories>
          
          <category> Coding </category>
          
          <category> Leetcode </category>
          
          <category> Easy </category>
          
      </categories>
      
      
        <tags>
            
            <tag> Javascript </tag>
            
            <tag> Leetcode </tag>
            
            <tag> Easy </tag>
            
            <tag> Typescript </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>前端框架介紹</title>
      <link href="/2023/05/08/Web/Svelte/%E5%89%8D%E7%AB%AF%E6%A1%86%E6%9E%B6%E4%BB%8B%E7%B4%B9/"/>
      <url>/2023/05/08/Web/Svelte/%E5%89%8D%E7%AB%AF%E6%A1%86%E6%9E%B6%E4%BB%8B%E7%B4%B9/</url>
      
        <content type="html"><![CDATA[<h2 id="dom"><a class="anchor" href="#dom">#</a> DOM</h2><h3 id="簡介"><a class="anchor" href="#簡介">#</a> 簡介</h3><p>DOM (document object model，文件物件模型) 由  <strong>W3C</strong> (world wide web consortium) 定義，DOM 將 HTML 內的所有 element 定義成<strong>物件</strong>，並以<strong>樹狀結構</strong>表示。</p><p><img data-src="https://www.w3schools.com/js/pic_htmltree.gif" alt="DOM 樹狀結構"><br> DOM 樹狀結構 <span class="exturl" data-url="aHR0cHM6Ly93d3cudzNzY2hvb2xzLmNvbS9qcy9qc19odG1sZG9tLmFzcA==">source</span></p><h3 id="結構"><a class="anchor" href="#結構">#</a> 結構</h3><p>DOM 的節點大致分為四類：</p><ul><li><strong>Document</strong>: HTML 文件本身，也就是 root node。</li><li><strong>Element</strong>: 文件裡的標籤，如  <code>&lt;head&gt;</code> 、 <code>&lt;body&gt;</code> 、 <code>&lt;div&gt;</code>  等。</li><li><strong>Text</strong>: 被 element 包起來的文字。</li><li><strong>Attribute</strong>: element 內的屬性。</li></ul><p>將上圖的樹狀結構轉回 HTML 後如下：</p><figure class="highlight html"><figcaption data-lang="HTML"></figcaption><table><tr><td data-num="1"></td><td><pre><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>html</span><span class="token punctuation">></span></span></pre></td></tr><tr><td data-num="2"></td><td><pre>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>head</span><span class="token punctuation">></span></span></pre></td></tr><tr><td data-num="3"></td><td><pre>        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>title</span><span class="token punctuation">></span></span>My title<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>title</span><span class="token punctuation">></span></span></pre></td></tr><tr><td data-num="4"></td><td><pre>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>head</span><span class="token punctuation">></span></span></pre></td></tr><tr><td data-num="5"></td><td><pre>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>body</span><span class="token punctuation">></span></span></pre></td></tr><tr><td data-num="6"></td><td><pre>        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>a</span> <span class="token attr-name">href</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>url<span class="token punctuation">"</span></span><span class="token punctuation">></span></span>My link<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>a</span><span class="token punctuation">></span></span></pre></td></tr><tr><td data-num="7"></td><td><pre>        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>h1</span><span class="token punctuation">></span></span>My header<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>h1</span><span class="token punctuation">></span></span></pre></td></tr><tr><td data-num="8"></td><td><pre>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>body</span><span class="token punctuation">></span></span></pre></td></tr><tr><td data-num="9"></td><td><pre><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>html</span><span class="token punctuation">></span></span></pre></td></tr></table></figure><h2 id="reflow-repaint"><a class="anchor" href="#reflow-repaint">#</a> Reflow &amp; Repaint</h2><p>瀏覽器在呈現出畫面之前，會先解析 HTML 與 CSS 檔並產生 render tree，而 <strong>reflow</strong> 這個步驟會遍歷 render tree 並計算所有 element 的位置、大小及其他<strong>屬性</strong>，會消耗大量效能。<strong>Repaint</strong> 步驟則是將 reflow 計算好的結果輸出到螢幕上，任何可見元素的更改都需要 repaint。</p><p>可以發現影響效能的關鍵在於 reflow，因此框架的效能優化主要在於減少 reflow 的次數及範圍。</p><h2 id="沒有框架的日子"><a class="anchor" href="#沒有框架的日子">#</a> 沒有框架的日子</h2><p>隨著專案規模逐漸增大，程式複雜度不斷上升，直接操作 DOM 的缺點也就逐漸浮出檯面：</p><h3 id="難以維護"><a class="anchor" href="#難以維護">#</a> 難以維護</h3><p>HTML、CSS、JavaScript 無法維持原先的各司其職，因為需要透過 JavaScript 處理互動內容，勢必要將結構、樣式寫到 JavaScript 的部份中，也就因此造成架構耦合度提高，程式碼管理困難。</p><h3 id="效能低落"><a class="anchor" href="#效能低落">#</a> 效能低落</h3><p>當 DOM 被改變，勢必要觸發整個 Reflow &amp; Repaint 的流程，頻繁的改動觸發重複渲染，便會讓頁面效能被消耗殆盡。</p><h2 id="框架的功能"><a class="anchor" href="#框架的功能">#</a> 框架的功能</h2><h3 id="資料與-ui-分離"><a class="anchor" href="#資料與-ui-分離">#</a> 資料與 UI 分離</h3><p>資料不必寫死在結構裡，可以根據資料變化而改變輸出內容。</p><h3 id="模組化的-ui"><a class="anchor" href="#模組化的-ui">#</a> 模組化的 UI</h3><p>一個網站總是會有一些重複出現的元素，例如按鈕、輸入表單、表格、對話框等等，而在現代框架的概念中，我們會把這些重複出現的元素稱為 <strong>組件（Components）</strong>，每個組件內包含了組件自己需要用的結構、樣式、邏輯。</p><p>這樣一來，各組件只需要處理組件內的事，外部引用的組件來決定怎麼使用、提供什麼資料給組件，藉由簡單的切分權責，加上前述的由資料決定畫面，就能讓各個組件的任務單一，並且能被重複使用。</p><h3 id="提升渲染效能"><a class="anchor" href="#提升渲染效能">#</a> 提升渲染效能</h3><p>如同前述，在複雜的頁面中，如果頻繁透過操作 DOM 的方式改變畫面，可能會造成全頁面的 Reflow 及 Repaint；不過在使用框架時，開發者不用太擔心這個問題。</p><p>原因是在各主流框架的實作中，幾乎都包含了 Virtual Dom 的概念，也就是用 JavaScript 物件來表達當前的頁面結構；藉由與 UI 分離的資料及 Virtual Dom 之間的關係，當資料變動時，事先計算好這次畫面需要變動的地方，如此一來便能抵銷掉無意義的更動，並重複利用已存在的 DOM 元素；當真的要進行 DOM 更新時，也會一次將所有需要更新的局部組件更新，讓效能的耗損盡可能降低。</p><h3 id="豐富的開發者生態圈"><a class="anchor" href="#豐富的開發者生態圈">#</a> 豐富的開發者生態圈</h3><p>選用熱門框架的優點，包含了能參與豐富的開發者生態圈；各大主流框架，在 GitHub 上都能輕鬆的找到數以千計的眾多套件，從基本組件、互動效果，到快速建立整個專案的模板，你想解決的問題也許剛好有別人早已經解決過，如果合適，自然可以從中擷取前人的智慧，更進一步的增進開發效率</p><h2 id="參考資料"><a class="anchor" href="#參考資料">#</a> 參考資料</h2><ul><li><span class="exturl" data-url="aHR0cHM6Ly9pdGhlbHAuaXRob21lLmNvbS50dy9hcnRpY2xlcy8xMDIyNDQxNw==">為什麼現在的前端都在用「框架」？</span></li><li><span class="exturl" data-url="aHR0cHM6Ly9qaHRudC5ub3Rpb24uc2l0ZS9lODJlNDY0MGY4NGE0OGE5YmQyYjljOGNhMzFmN2UzNA==">前端框架簡介</span></li></ul>]]></content>
      
      
      <categories>
          
          <category> Web </category>
          
          <category> Svelte </category>
          
      </categories>
      
      
        <tags>
            
            <tag> Web </tag>
            
            <tag> Svelte </tag>
            
            <tag> Framework </tag>
            
            <tag> Javascript </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>2635. Apply Transform Over Each Element in Array</title>
      <link href="/2023/05/08/Coding/leetcode/Easy/2635%20Apply%20Transform%20Over%20Each%20Element%20in%20Array/"/>
      <url>/2023/05/08/Coding/leetcode/Easy/2635%20Apply%20Transform%20Over%20Each%20Element%20in%20Array/</url>
      
        <content type="html"><![CDATA[<p>⭐️</p><h2 id="題目敘述"><a class="anchor" href="#題目敘述">#</a> <span class="exturl" data-url="aHR0cHM6Ly9sZWV0Y29kZS5jb20vcHJvYmxlbXMvYXBwbHktdHJhbnNmb3JtLW92ZXItZWFjaC1lbGVtZW50LWluLWFycmF5Lz91dG1fY2FtcGFpZ249UG9zdEQ0JmFtcDt1dG1fbWVkaXVtPVBvc3QmYW1wO3V0bV9zb3VyY2U9UG9zdCZhbXA7Z2lvX2xpbmtfaWQ9bm9xYk5Pdjk=">題目敘述</span></h2><p>Given an integer array  <code>arr</code>  and a mapping function  <code>fn</code> , return a new array with a transformation applied to each element.</p><p>The returned array should be created such that  <code>returnedArray[i] = fn(arr[i], i)</code> .</p><p>Please solve it without the built-in  <code>Array.map</code>  method.</p><h3 id="example-1"><a class="anchor" href="#example-1">#</a> Example 1</h3><blockquote><p><strong>Input:</strong> arr = [1,2,3], fn = function plusone(n) { return n + 1; }<br><strong>Output:</strong> [2,3,4]<br><strong>Explanation:</strong><br>const newArray = map(arr, plusone); // [2,3,4]<br>The function increases each value in the array by one.</p></blockquote><h3 id="example-2"><a class="anchor" href="#example-2">#</a> Example 2</h3><blockquote><p><strong>Input:</strong> arr = [1,2,3], fn = function plusI(n, i) { return n + i; }<br><strong>Output:</strong> [1,3,5]<br><strong>Explanation:</strong> The function increases each value by the index it resides in.</p></blockquote><h3 id="example-3"><a class="anchor" href="#example-3">#</a> Example 3</h3><blockquote><p><strong>Input:</strong> arr = [10,20,30], fn = function constant() { return 42; }<br><strong>Output:</strong> [42,42,42]<br><strong>Explanation:</strong> The function always returns 42.</p></blockquote><h2 id="solution"><a class="anchor" href="#solution">#</a> Solution</h2><div class="tab" data-id="code" data-title="Javascript"><figure class="highlight javascript"><figcaption data-lang="javascript"></figcaption><table><tr><td data-num="1"></td><td><pre><span class="token comment">/**</pre></td></tr><tr><td data-num="2"></td><td><pre> * @param &#123;number[]&#125; arr</pre></td></tr><tr><td data-num="3"></td><td><pre> * @param &#123;Function&#125; fn</pre></td></tr><tr><td data-num="4"></td><td><pre> * @return &#123;number[]&#125;</pre></td></tr><tr><td data-num="5"></td><td><pre> */</span></pre></td></tr><tr><td data-num="6"></td><td><pre><span class="token keyword">var</span> <span class="token function-variable function">map</span> <span class="token operator">=</span> <span class="token keyword">function</span><span class="token punctuation">(</span><span class="token parameter">arr<span class="token punctuation">,</span> fn</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span></pre></td></tr><tr><td data-num="7"></td><td><pre>    <span class="token keyword">return</span> arr<span class="token punctuation">.</span><span class="token function">map</span><span class="token punctuation">(</span><span class="token punctuation">(</span><span class="token parameter">val<span class="token punctuation">,</span> idx</span><span class="token punctuation">)</span> <span class="token operator">=></span> val <span class="token operator">=</span> <span class="token function">fn</span><span class="token punctuation">(</span>val<span class="token punctuation">,</span> idx<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span></pre></td></tr><tr><td data-num="8"></td><td><pre><span class="token punctuation">&#125;</span><span class="token punctuation">;</span></pre></td></tr></table></figure></div><div class="tab" data-id="code" data-title="Typescript"><figure class="highlight typescript"><figcaption data-lang="typescript"></figcaption><table><tr><td data-num="1"></td><td><pre><span class="token keyword">function</span> <span class="token function">map</span><span class="token punctuation">(</span>arr<span class="token operator">:</span> <span class="token builtin">number</span><span class="token punctuation">[</span><span class="token punctuation">]</span><span class="token punctuation">,</span> <span class="token function-variable function">fn</span><span class="token operator">:</span> <span class="token punctuation">(</span>n<span class="token operator">:</span> <span class="token builtin">number</span><span class="token punctuation">,</span> i<span class="token operator">:</span> <span class="token builtin">number</span><span class="token punctuation">)</span> <span class="token operator">=></span> <span class="token builtin">number</span><span class="token punctuation">)</span><span class="token operator">:</span> <span class="token builtin">number</span><span class="token punctuation">[</span><span class="token punctuation">]</span> <span class="token punctuation">&#123;</span></pre></td></tr><tr><td data-num="2"></td><td><pre>    <span class="token keyword">return</span> arr<span class="token punctuation">.</span><span class="token function">map</span><span class="token punctuation">(</span><span class="token punctuation">(</span>val<span class="token operator">:</span> <span class="token builtin">number</span><span class="token punctuation">,</span> idx<span class="token operator">:</span> <span class="token builtin">number</span><span class="token punctuation">)</span> <span class="token operator">=></span> val <span class="token operator">=</span> <span class="token function">fn</span><span class="token punctuation">(</span>val<span class="token punctuation">,</span> idx<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span></pre></td></tr><tr><td data-num="3"></td><td><pre><span class="token punctuation">&#125;</span><span class="token punctuation">;</span></pre></td></tr></table></figure></div>]]></content>
      
      
      <categories>
          
          <category> Coding </category>
          
          <category> Leetcode </category>
          
          <category> Easy </category>
          
      </categories>
      
      
        <tags>
            
            <tag> Javascript </tag>
            
            <tag> Leetcode </tag>
            
            <tag> Easy </tag>
            
            <tag> Typescript </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>1572. Matrix Diagonal Sum</title>
      <link href="/2023/05/08/Coding/leetcode/Easy/1572%20Matrix%20Diagonal%20Sum/"/>
      <url>/2023/05/08/Coding/leetcode/Easy/1572%20Matrix%20Diagonal%20Sum/</url>
      
        <content type="html"><![CDATA[<p>⭐️</p><h2 id="題目敘述"><a class="anchor" href="#題目敘述">#</a> <span class="exturl" data-url="aHR0cHM6Ly9sZWV0Y29kZS5jb20vcHJvYmxlbXMvbWF0cml4LWRpYWdvbmFsLXN1bS8=">題目敘述</span></h2><p>Given a square matrix  <code>mat</code> , return the sum of the matrix diagonals.</p><p>Only include the sum of all the elements on the primary diagonal and all the elements on the secondary diagonal that are not part of the primary diagonal.</p><h3 id="example-1"><a class="anchor" href="#example-1">#</a> Example 1</h3><p><img data-src="https://hackmd.io/_uploads/rJ0RgRHVh.png" alt=""></p><blockquote><p><strong>Input:</strong> mat =<br>[[<strong>1</strong>,2,<strong>3</strong>],<br>[4,<strong>5</strong>,6],<br>[<strong>7</strong>,8,<strong>9</strong>]]<br><strong>Output:</strong> 25<br><strong>Explanation:</strong> Diagonals sum: 1 + 5 + 9 + 3 + 7 = 25<br>Notice that element mat[1][1] = 5 is counted only once.</p></blockquote><h3 id="example-2"><a class="anchor" href="#example-2">#</a> Example 2</h3><blockquote><p><strong>Input:</strong> mat =<br>[[<strong>1</strong>,1,1,<strong>1</strong>],<br>[1,<strong>1</strong>,<strong>1</strong>,1],<br>[1,<strong>1</strong>,<strong>1</strong>,1],<br>[<strong>1</strong>,1,1,<strong>1</strong>]]<br><strong>Output:</strong> 8</p></blockquote><h3 id="example-3"><a class="anchor" href="#example-3">#</a> Example 3</h3><blockquote><p><strong>Input:</strong> mat = [[<strong>5</strong>]]<br><strong>Output:</strong> 5</p></blockquote><h2 id="solution"><a class="anchor" href="#solution">#</a> Solution</h2><div class="tab" data-id="code" data-title="C++"><figure class="highlight cpp"><figcaption data-lang="C++"></figcaption><table><tr><td data-num="1"></td><td><pre><span class="token keyword">class</span> <span class="token class-name">Solution</span> <span class="token punctuation">&#123;</span></pre></td></tr><tr><td data-num="2"></td><td><pre><span class="token keyword">public</span><span class="token operator">:</span></pre></td></tr><tr><td data-num="3"></td><td><pre>    <span class="token keyword">int</span> <span class="token function">diagonalSum</span><span class="token punctuation">(</span>vector<span class="token operator">&lt;</span>vector<span class="token operator">&lt;</span><span class="token keyword">int</span><span class="token operator">>></span><span class="token operator">&amp;</span> mat<span class="token punctuation">)</span> <span class="token punctuation">&#123;</span></pre></td></tr><tr><td data-num="4"></td><td><pre>        <span class="token keyword">int</span> res <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span></pre></td></tr><tr><td data-num="5"></td><td><pre>        <span class="token keyword">int</span> n <span class="token operator">=</span> mat<span class="token punctuation">.</span><span class="token function">size</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span></pre></td></tr><tr><td data-num="6"></td><td><pre>        <span class="token keyword">for</span> <span class="token punctuation">(</span><span class="token keyword">int</span> i<span class="token operator">=</span><span class="token number">0</span><span class="token punctuation">;</span> i<span class="token operator">&lt;</span>n<span class="token punctuation">;</span> i<span class="token operator">++</span><span class="token punctuation">)</span> res <span class="token operator">+=</span> mat<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">;</span></pre></td></tr><tr><td data-num="7"></td><td><pre>        <span class="token keyword">for</span> <span class="token punctuation">(</span><span class="token keyword">int</span> i<span class="token operator">=</span>n<span class="token operator">-</span><span class="token number">1</span><span class="token punctuation">;</span> i<span class="token operator">>=</span><span class="token number">0</span><span class="token punctuation">;</span> i<span class="token operator">--</span><span class="token punctuation">)</span> res <span class="token operator">+=</span> mat<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">[</span>n<span class="token operator">-</span><span class="token number">1</span><span class="token operator">-</span>i<span class="token punctuation">]</span><span class="token punctuation">;</span></pre></td></tr><tr><td data-num="8"></td><td><pre>        <span class="token keyword">if</span> <span class="token punctuation">(</span>n <span class="token operator">%</span> <span class="token number">2</span><span class="token punctuation">)</span> <span class="token keyword">return</span> res <span class="token operator">-</span> mat<span class="token punctuation">[</span>n<span class="token operator">/</span><span class="token number">2</span><span class="token punctuation">]</span><span class="token punctuation">[</span>n<span class="token operator">/</span><span class="token number">2</span><span class="token punctuation">]</span><span class="token punctuation">;</span></pre></td></tr><tr><td data-num="9"></td><td><pre>        <span class="token keyword">else</span> <span class="token keyword">return</span> res<span class="token punctuation">;</span></pre></td></tr><tr><td data-num="10"></td><td><pre>    <span class="token punctuation">&#125;</span></pre></td></tr><tr><td data-num="11"></td><td><pre><span class="token punctuation">&#125;</span><span class="token punctuation">;</span></pre></td></tr></table></figure></div><div class="tab" data-id="code" data-title="Java"><pre><code class="language-java"></code></pre></div><div class="tab" data-id="code" data-title="Python"><figure class="highlight python"><figcaption data-lang="python"></figcaption><table><tr><td data-num="1"></td><td><pre><span class="token keyword">class</span> <span class="token class-name">Solution</span><span class="token punctuation">:</span></pre></td></tr><tr><td data-num="2"></td><td><pre>    <span class="token keyword">def</span> <span class="token function">diagonalSum</span><span class="token punctuation">(</span>self<span class="token punctuation">,</span> mat<span class="token punctuation">:</span> List<span class="token punctuation">[</span>List<span class="token punctuation">[</span><span class="token builtin">int</span><span class="token punctuation">]</span><span class="token punctuation">]</span><span class="token punctuation">)</span> <span class="token operator">-</span><span class="token operator">></span> <span class="token builtin">int</span><span class="token punctuation">:</span></pre></td></tr><tr><td data-num="3"></td><td><pre>        n <span class="token operator">=</span> <span class="token builtin">len</span><span class="token punctuation">(</span>mat<span class="token punctuation">)</span></pre></td></tr><tr><td data-num="4"></td><td><pre>        res <span class="token operator">=</span> <span class="token number">0</span></pre></td></tr><tr><td data-num="5"></td><td><pre>        <span class="token keyword">for</span> i <span class="token keyword">in</span> <span class="token builtin">range</span><span class="token punctuation">(</span><span class="token number">0</span><span class="token punctuation">,</span> n<span class="token punctuation">)</span><span class="token punctuation">:</span> res <span class="token operator">+=</span> mat<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">[</span>i<span class="token punctuation">]</span></pre></td></tr><tr><td data-num="6"></td><td><pre>        <span class="token keyword">for</span> i <span class="token keyword">in</span> <span class="token builtin">range</span><span class="token punctuation">(</span>n<span class="token operator">-</span><span class="token number">1</span><span class="token punctuation">,</span> <span class="token operator">-</span><span class="token number">1</span><span class="token punctuation">,</span> <span class="token operator">-</span><span class="token number">1</span><span class="token punctuation">)</span><span class="token punctuation">:</span> res <span class="token operator">+=</span> mat<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">[</span>n<span class="token operator">-</span><span class="token number">1</span><span class="token operator">-</span>i<span class="token punctuation">]</span></pre></td></tr><tr><td data-num="7"></td><td><pre>        <span class="token keyword">if</span> n <span class="token operator">%</span> <span class="token number">2</span> <span class="token operator">==</span> <span class="token number">1</span><span class="token punctuation">:</span> <span class="token keyword">return</span> res <span class="token operator">-</span> mat<span class="token punctuation">[</span>n<span class="token operator">//</span><span class="token number">2</span><span class="token punctuation">]</span><span class="token punctuation">[</span>n<span class="token operator">//</span><span class="token number">2</span><span class="token punctuation">]</span> </pre></td></tr><tr><td data-num="8"></td><td><pre>        <span class="token keyword">else</span><span class="token punctuation">:</span> <span class="token keyword">return</span> res</pre></td></tr></table></figure></div>]]></content>
      
      
      <categories>
          
          <category> Coding </category>
          
          <category> Leetcode </category>
          
          <category> Easy </category>
          
      </categories>
      
      
        <tags>
            
            <tag> Leetcode </tag>
            
            <tag> Easy </tag>
            
            <tag> Array </tag>
            
            <tag> Matrix </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>2665. Counter II</title>
      <link href="/2023/05/07/Coding/leetcode/Easy/2665%20Counter%20II/"/>
      <url>/2023/05/07/Coding/leetcode/Easy/2665%20Counter%20II/</url>
      
        <content type="html"><![CDATA[<p>⭐️</p><h2 id="題目敘述"><a class="anchor" href="#題目敘述">#</a> <span class="exturl" data-url="aHR0cHM6Ly9sZWV0Y29kZS5jb20vcHJvYmxlbXMvY291bnRlci1paS9kZXNjcmlwdGlvbi8/dXRtX2NhbXBhaWduPVBvc3REMyZhbXA7dXRtX21lZGl1bT1Qb3N0JmFtcDt1dG1fc291cmNlPVBvc3QmYW1wO2dpb19saW5rX2lkPXhSeFZZT1hv">題目敘述</span></h2><p>Write a function  <code>createCounter</code> . It should accept an initial integer  <code>init</code> . It should return an object with three functions.</p><p>The three functions are:</p><ul><li><code>increment()</code>  increases the current value by 1 and then returns it.</li><li><code>decrement()</code>  reduces the current value by 1 and then returns it.</li><li><code>reset()</code>  sets the current value to  <code>init</code>  and then returns it.</li></ul><h3 id="example-1"><a class="anchor" href="#example-1">#</a> Example 1</h3><blockquote><p><strong>Input</strong>: init = 5, calls = [“increment”,“reset”,“decrement”]<br><strong>Output</strong>: [6,5,4]<br><strong>Explanation</strong>:<br>const counter = createCounter(5);<br>counter.increment(); // 6<br>counter.reset(); // 5<br>counter.decrement(); // 4</p></blockquote><h3 id="example-2"><a class="anchor" href="#example-2">#</a> Example 2</h3><blockquote><p><strong>Input</strong>: init = 0, calls = [“increment”,“increment”,“decrement”,“reset”,“reset”]<br><strong>Output</strong>: [1,2,1,0,0]<br><strong>Explanation</strong>:<br>const counter = createCounter(0);<br>counter.increment(); // 1<br>counter.increment(); // 2<br>counter.decrement(); // 1<br>counter.reset(); // 0<br>counter.reset(); // 0</p></blockquote><h2 id="solution"><a class="anchor" href="#solution">#</a> Solution</h2><div class="tab" data-id="code" data-title="Javascript"><figure class="highlight javascript"><figcaption data-lang="javascript"></figcaption><table><tr><td data-num="1"></td><td><pre><span class="token comment">/**</pre></td></tr><tr><td data-num="2"></td><td><pre> * @param &#123;integer&#125; init</pre></td></tr><tr><td data-num="3"></td><td><pre> * @return &#123; increment: Function, decrement: Function, reset: Function &#125;</pre></td></tr><tr><td data-num="4"></td><td><pre> */</span></pre></td></tr><tr><td data-num="5"></td><td><pre><span class="token keyword">var</span> <span class="token function-variable function">createCounter</span> <span class="token operator">=</span> <span class="token keyword">function</span><span class="token punctuation">(</span><span class="token parameter">init</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span></pre></td></tr><tr><td data-num="6"></td><td><pre>    <span class="token keyword">let</span> tmp <span class="token operator">=</span> init<span class="token punctuation">;</span></pre></td></tr><tr><td data-num="7"></td><td><pre>    <span class="token function-variable function">increment</span> <span class="token operator">=</span> <span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">=></span> <span class="token operator">++</span>tmp<span class="token punctuation">;</span></pre></td></tr><tr><td data-num="8"></td><td><pre>    <span class="token function-variable function">decrement</span> <span class="token operator">=</span> <span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">=></span> <span class="token operator">--</span>tmp<span class="token punctuation">;</span></pre></td></tr><tr><td data-num="9"></td><td><pre>    <span class="token function-variable function">reset</span> <span class="token operator">=</span> <span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">=></span> tmp <span class="token operator">=</span> init<span class="token punctuation">;</span></pre></td></tr><tr><td data-num="10"></td><td><pre>    <span class="token keyword">return</span> <span class="token punctuation">&#123;</span>increment<span class="token punctuation">,</span> decrement<span class="token punctuation">,</span> reset<span class="token punctuation">&#125;</span><span class="token punctuation">;</span></pre></td></tr><tr><td data-num="11"></td><td><pre><span class="token punctuation">&#125;</span><span class="token punctuation">;</span></pre></td></tr><tr><td data-num="12"></td><td><pre></pre></td></tr><tr><td data-num="13"></td><td><pre><span class="token comment">/**</pre></td></tr><tr><td data-num="14"></td><td><pre> * const counter = createCounter(5)</pre></td></tr><tr><td data-num="15"></td><td><pre> * counter.increment(); // 6</pre></td></tr><tr><td data-num="16"></td><td><pre> * counter.reset(); // 5</pre></td></tr><tr><td data-num="17"></td><td><pre> * counter.decrement(); // 4</pre></td></tr><tr><td data-num="18"></td><td><pre> */</span></pre></td></tr></table></figure></div><div class="tab" data-id="code" data-title="Typescript"><figure class="highlight typescript"><figcaption data-lang="typescript"></figcaption><table><tr><td data-num="1"></td><td><pre><span class="token keyword">type</span> <span class="token class-name">ReturnObj</span> <span class="token operator">=</span> <span class="token punctuation">&#123;</span></pre></td></tr><tr><td data-num="2"></td><td><pre>    <span class="token function-variable function">increment</span><span class="token operator">:</span> <span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">=></span> <span class="token builtin">number</span><span class="token punctuation">,</span></pre></td></tr><tr><td data-num="3"></td><td><pre>    <span class="token function-variable function">decrement</span><span class="token operator">:</span> <span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">=></span> <span class="token builtin">number</span><span class="token punctuation">,</span></pre></td></tr><tr><td data-num="4"></td><td><pre>    <span class="token function-variable function">reset</span><span class="token operator">:</span> <span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">=></span> <span class="token builtin">number</span><span class="token punctuation">,</span></pre></td></tr><tr><td data-num="5"></td><td><pre><span class="token punctuation">&#125;</span></pre></td></tr><tr><td data-num="6"></td><td><pre></pre></td></tr><tr><td data-num="7"></td><td><pre><span class="token keyword">function</span> <span class="token function">createCounter</span><span class="token punctuation">(</span>init<span class="token operator">:</span> <span class="token builtin">number</span><span class="token punctuation">)</span><span class="token operator">:</span> ReturnObj <span class="token punctuation">&#123;</span></pre></td></tr><tr><td data-num="8"></td><td><pre>    <span class="token keyword">let</span> tmp<span class="token operator">:</span> <span class="token builtin">number</span> <span class="token operator">=</span> init<span class="token punctuation">;</span></pre></td></tr><tr><td data-num="9"></td><td><pre>    <span class="token keyword">const</span> increment <span class="token operator">=</span> <span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token operator">:</span> <span class="token builtin">number</span> <span class="token operator">=></span> <span class="token operator">++</span>tmp<span class="token punctuation">;</span></pre></td></tr><tr><td data-num="10"></td><td><pre>    <span class="token keyword">const</span> <span class="token function-variable function">decrement</span> <span class="token operator">=</span> <span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">=></span> <span class="token operator">--</span>tmp<span class="token punctuation">;</span></pre></td></tr><tr><td data-num="11"></td><td><pre>    <span class="token keyword">const</span> reset <span class="token operator">=</span> <span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token operator">:</span> <span class="token builtin">number</span> <span class="token operator">=></span> tmp <span class="token operator">=</span> init<span class="token punctuation">;</span></pre></td></tr><tr><td data-num="12"></td><td><pre>    <span class="token keyword">return</span> <span class="token punctuation">&#123;</span>increment<span class="token punctuation">,</span> decrement<span class="token punctuation">,</span> reset<span class="token punctuation">&#125;</span><span class="token punctuation">;</span></pre></td></tr><tr><td data-num="13"></td><td><pre><span class="token punctuation">&#125;</span><span class="token punctuation">;</span></pre></td></tr><tr><td data-num="14"></td><td><pre></pre></td></tr><tr><td data-num="15"></td><td><pre><span class="token comment">/**</pre></td></tr><tr><td data-num="16"></td><td><pre> * const counter = createCounter(5)</pre></td></tr><tr><td data-num="17"></td><td><pre> * counter.increment(); // 6</pre></td></tr><tr><td data-num="18"></td><td><pre> * counter.reset(); // 5</pre></td></tr><tr><td data-num="19"></td><td><pre> * counter.decrement(); // 4</pre></td></tr><tr><td data-num="20"></td><td><pre> */</span></pre></td></tr></table></figure></div>]]></content>
      
      
      <categories>
          
          <category> Coding </category>
          
          <category> Leetcode </category>
          
          <category> Easy </category>
          
      </categories>
      
      
        <tags>
            
            <tag> Javascript </tag>
            
            <tag> Leetcode </tag>
            
            <tag> Easy </tag>
            
            <tag> Typescript </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>1498. Number of Subsequences That Satisfy the Given Sum Condition</title>
      <link href="/2023/05/07/Coding/leetcode/Medium/1498%20Number%20of%20Subsequences%20That%20Satisfy%20the%20Given%20Sum%20Condition/"/>
      <url>/2023/05/07/Coding/leetcode/Medium/1498%20Number%20of%20Subsequences%20That%20Satisfy%20the%20Given%20Sum%20Condition/</url>
      
        <content type="html"><![CDATA[<p>⭐️⭐️</p><h2 id="題目敘述"><a class="anchor" href="#題目敘述">#</a> <span class="exturl" data-url="aHR0cHM6Ly9sZWV0Y29kZS5jb20vcHJvYmxlbXMvbnVtYmVyLW9mLXN1YnNlcXVlbmNlcy10aGF0LXNhdGlzZnktdGhlLWdpdmVuLXN1bS1jb25kaXRpb24v">題目敘述</span></h2><p>You are given an array of integers  <code>nums</code>  and an integer  <code>target</code> .</p><p>Return <em>the number of non-empty subsequences of  <code>nums</code>  such that the sum of the minimum and maximum element on it is less or equal to  <code>target</code> </em>. Since the answer may be too large, return it <strong>modulo</strong>  <code>10^9 + 7</code> .</p><h3 id="example-1"><a class="anchor" href="#example-1">#</a> Example 1</h3><blockquote><p><strong>Input:</strong> nums = [3,5,6,7], target = 9<br><strong>Output:</strong> 4<br><strong>Explanation:</strong> There are 4 subsequences that satisfy the condition.<br>[3] -&gt; Min value + max value &lt;= target (3 + 3 &lt;= 9)<br>[3,5] -&gt; (3 + 5 &lt;= 9)<br>[3,5,6] -&gt; (3 + 6 &lt;= 9)<br>[3,6] -&gt; (3 + 6 &lt;= 9)</p></blockquote><h3 id="example-2"><a class="anchor" href="#example-2">#</a> Example 2</h3><blockquote><p><strong>Input:</strong> nums = [3,3,6,8], target = 10<br><strong>Output:</strong> 6<br><strong>Explanation:</strong> There are 6 subsequences that satisfy the condition. (nums can have repeated numbers).<br>[3] , [3] , [3,3], [3,6] , [3,6] , [3,3,6]</p></blockquote><h3 id="example-3"><a class="anchor" href="#example-3">#</a> Example 3</h3><blockquote><p><strong>Input:</strong> nums = [2,3,3,4,6,7], target = 12<br><strong>Output:</strong> 61<br><strong>Explanation:</strong> There are 63 non-empty subsequences, two of them do not satisfy the condition ([6,7], [7]).<br>Number of valid subsequences (63 - 2 = 61).</p></blockquote><h2 id="solution"><a class="anchor" href="#solution">#</a> Solution</h2><div class="tab" data-id="code" data-title="C++"><pre><code class="language-cpp"></code></pre></div><div class="tab" data-id="code" data-title="Java"><figure class="highlight java"><figcaption data-lang="java"></figcaption><table><tr><td data-num="1"></td><td><pre><span class="token keyword">import</span> <span class="token import"><span class="token namespace">java<span class="token punctuation">.</span>util<span class="token punctuation">.</span></span><span class="token class-name">Arrays</span></span><span class="token punctuation">;</span></pre></td></tr><tr><td data-num="2"></td><td><pre></pre></td></tr><tr><td data-num="3"></td><td><pre><span class="token keyword">class</span> <span class="token class-name">Solution</span> <span class="token punctuation">&#123;</span></pre></td></tr><tr><td data-num="4"></td><td><pre>    <span class="token keyword">public</span> <span class="token keyword">int</span> <span class="token function">numSubseq</span><span class="token punctuation">(</span><span class="token keyword">int</span><span class="token punctuation">[</span><span class="token punctuation">]</span> nums<span class="token punctuation">,</span> <span class="token keyword">int</span> target<span class="token punctuation">)</span> <span class="token punctuation">&#123;</span></pre></td></tr><tr><td data-num="5"></td><td><pre>        <span class="token keyword">int</span> n <span class="token operator">=</span> nums<span class="token punctuation">.</span>length<span class="token punctuation">;</span></pre></td></tr><tr><td data-num="6"></td><td><pre>        <span class="token keyword">int</span> mod <span class="token operator">=</span> <span class="token number">1000000007</span><span class="token punctuation">;</span></pre></td></tr><tr><td data-num="7"></td><td><pre>        <span class="token keyword">int</span> ans <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span></pre></td></tr><tr><td data-num="8"></td><td><pre>        <span class="token class-name">Arrays</span><span class="token punctuation">.</span><span class="token function">sort</span><span class="token punctuation">(</span>nums<span class="token punctuation">)</span><span class="token punctuation">;</span></pre></td></tr><tr><td data-num="9"></td><td><pre></pre></td></tr><tr><td data-num="10"></td><td><pre>        <span class="token keyword">int</span><span class="token punctuation">[</span><span class="token punctuation">]</span> count <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token keyword">int</span><span class="token punctuation">[</span>n<span class="token punctuation">]</span><span class="token punctuation">;</span></pre></td></tr><tr><td data-num="11"></td><td><pre>        count<span class="token punctuation">[</span><span class="token number">0</span><span class="token punctuation">]</span> <span class="token operator">=</span> <span class="token number">1</span><span class="token punctuation">;</span></pre></td></tr><tr><td data-num="12"></td><td><pre>        <span class="token keyword">for</span> <span class="token punctuation">(</span><span class="token keyword">int</span> i <span class="token operator">=</span> <span class="token number">1</span><span class="token punctuation">;</span> i <span class="token operator">&lt;</span> n<span class="token punctuation">;</span> i<span class="token operator">++</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span></pre></td></tr><tr><td data-num="13"></td><td><pre>            count<span class="token punctuation">[</span>i<span class="token punctuation">]</span> <span class="token operator">=</span> <span class="token punctuation">(</span>count<span class="token punctuation">[</span>i <span class="token operator">-</span> <span class="token number">1</span><span class="token punctuation">]</span> <span class="token operator">*</span> <span class="token number">2</span><span class="token punctuation">)</span> <span class="token operator">%</span> mod<span class="token punctuation">;</span></pre></td></tr><tr><td data-num="14"></td><td><pre>        <span class="token punctuation">&#125;</span></pre></td></tr><tr><td data-num="15"></td><td><pre></pre></td></tr><tr><td data-num="16"></td><td><pre>        <span class="token keyword">int</span> left <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">,</span> right <span class="token operator">=</span> n <span class="token operator">-</span> <span class="token number">1</span><span class="token punctuation">;</span></pre></td></tr><tr><td data-num="17"></td><td><pre>        <span class="token keyword">while</span> <span class="token punctuation">(</span>left <span class="token operator">&lt;=</span> right<span class="token punctuation">)</span> <span class="token punctuation">&#123;</span></pre></td></tr><tr><td data-num="18"></td><td><pre>            <span class="token keyword">if</span> <span class="token punctuation">(</span>nums<span class="token punctuation">[</span>left<span class="token punctuation">]</span> <span class="token operator">+</span> nums<span class="token punctuation">[</span>right<span class="token punctuation">]</span> <span class="token operator">&lt;=</span> target<span class="token punctuation">)</span> <span class="token punctuation">&#123;</span></pre></td></tr><tr><td data-num="19"></td><td><pre>                ans <span class="token operator">=</span> <span class="token punctuation">(</span>ans <span class="token operator">+</span> count<span class="token punctuation">[</span>right <span class="token operator">-</span> left<span class="token punctuation">]</span><span class="token punctuation">)</span> <span class="token operator">%</span> mod<span class="token punctuation">;</span></pre></td></tr><tr><td data-num="20"></td><td><pre>                left<span class="token operator">++</span><span class="token punctuation">;</span></pre></td></tr><tr><td data-num="21"></td><td><pre>            <span class="token punctuation">&#125;</span> <span class="token keyword">else</span> <span class="token punctuation">&#123;</span></pre></td></tr><tr><td data-num="22"></td><td><pre>                right<span class="token operator">--</span><span class="token punctuation">;</span></pre></td></tr><tr><td data-num="23"></td><td><pre>            <span class="token punctuation">&#125;</span></pre></td></tr><tr><td data-num="24"></td><td><pre>        <span class="token punctuation">&#125;</span></pre></td></tr><tr><td data-num="25"></td><td><pre>        </pre></td></tr><tr><td data-num="26"></td><td><pre>        <span class="token keyword">return</span> ans<span class="token punctuation">;</span></pre></td></tr><tr><td data-num="27"></td><td><pre>    <span class="token punctuation">&#125;</span></pre></td></tr><tr><td data-num="28"></td><td><pre><span class="token punctuation">&#125;</span></pre></td></tr></table></figure></div><div class="tab" data-id="code" data-title="Python"><pre><code class="language-python"></code></pre></div>]]></content>
      
      
      <categories>
          
          <category> Coding </category>
          
          <category> Leetcode </category>
          
          <category> Medium </category>
          
      </categories>
      
      
        <tags>
            
            <tag> Sorting </tag>
            
            <tag> Leetcode </tag>
            
            <tag> Array </tag>
            
            <tag> Two Pointers </tag>
            
            <tag> Medium </tag>
            
            <tag> Binary Search </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>2620. Counter</title>
      <link href="/2023/05/07/Coding/leetcode/Easy/2620%20Counter/"/>
      <url>/2023/05/07/Coding/leetcode/Easy/2620%20Counter/</url>
      
        <content type="html"><![CDATA[<p>⭐️</p><h2 id="題目敘述"><a class="anchor" href="#題目敘述">#</a> <span class="exturl" data-url="aHR0cHM6Ly9sZWV0Y29kZS5jb20vcHJvYmxlbXMvY291bnRlci8/dXRtX2NhbXBhaWduPVBvc3REMiZhbXA7dXRtX21lZGl1bT1Qb3N0JmFtcDt1dG1fc291cmNlPVBvc3QmYW1wO2dpb19saW5rX2lkPXhvZ2tWcUJv">題目敘述</span></h2><p>Given an integer  <code>n</code> , return a  <code>counter</code>  function. This counter function initially returns  <code>n</code>  and then returns 1 more than the previous value every subsequent time it is called ( <code>n</code> ,  <code>n + 1</code> ,  <code>n + 2</code> , etc).</p><h3 id="example-1"><a class="anchor" href="#example-1">#</a> Example 1</h3><blockquote><p><strong>Input:</strong><br>n = 10<br>[“call”,“call”,“call”]<br><strong>Output:</strong> [10,11,12]<br><strong>Explanation:</strong><br>counter() = 10 // The first time counter() is called, it returns n.<br>counter() = 11 // Returns 1 more than the previous time.<br>counter() = 12 // Returns 1 more than the previous time.</p></blockquote><h3 id="example-2"><a class="anchor" href="#example-2">#</a> Example 2</h3><blockquote><p><strong>Input:</strong><br>n = -2<br>[“call”,“call”,“call”,“call”,“call”]<br><strong>Output:</strong> [-2,-1,0,1,2]<br><strong>Explanation:</strong> counter() initially returns -2. Then increases after each sebsequent call.</p></blockquote><h2 id="solution"><a class="anchor" href="#solution">#</a> Solution</h2><div class="tab" data-id="code" data-title="Javascript"><figure class="highlight javascript"><figcaption data-lang="javascript"></figcaption><table><tr><td data-num="1"></td><td><pre><span class="token comment">/**</pre></td></tr><tr><td data-num="2"></td><td><pre> * @param &#123;number&#125; n</pre></td></tr><tr><td data-num="3"></td><td><pre> * @return &#123;Function&#125; counter</pre></td></tr><tr><td data-num="4"></td><td><pre> */</span></pre></td></tr><tr><td data-num="5"></td><td><pre><span class="token keyword">var</span> <span class="token function-variable function">createCounter</span> <span class="token operator">=</span> <span class="token keyword">function</span><span class="token punctuation">(</span><span class="token parameter">n</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span></pre></td></tr><tr><td data-num="6"></td><td><pre>    <span class="token keyword">let</span> counter <span class="token operator">=</span> n <span class="token operator">-</span> <span class="token number">1</span><span class="token punctuation">;</span></pre></td></tr><tr><td data-num="7"></td><td><pre>    <span class="token keyword">return</span> <span class="token keyword">function</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span></pre></td></tr><tr><td data-num="8"></td><td><pre>        counter <span class="token operator">+=</span> <span class="token number">1</span><span class="token punctuation">;</span></pre></td></tr><tr><td data-num="9"></td><td><pre>        <span class="token keyword">return</span> counter<span class="token punctuation">;</span></pre></td></tr><tr><td data-num="10"></td><td><pre>    <span class="token punctuation">&#125;</span><span class="token punctuation">;</span></pre></td></tr><tr><td data-num="11"></td><td><pre><span class="token punctuation">&#125;</span><span class="token punctuation">;</span></pre></td></tr><tr><td data-num="12"></td><td><pre></pre></td></tr><tr><td data-num="13"></td><td><pre><span class="token comment">/** </pre></td></tr><tr><td data-num="14"></td><td><pre> * const counter = createCounter(10)</pre></td></tr><tr><td data-num="15"></td><td><pre> * counter() // 10</pre></td></tr><tr><td data-num="16"></td><td><pre> * counter() // 11</pre></td></tr><tr><td data-num="17"></td><td><pre> * counter() // 12</pre></td></tr><tr><td data-num="18"></td><td><pre> */</span></pre></td></tr></table></figure></div><div class="tab" data-id="code" data-title="Typescript"><figure class="highlight typescript"><figcaption data-lang="typescript"></figcaption><table><tr><td data-num="1"></td><td><pre><span class="token keyword">function</span> <span class="token function">createCounter</span><span class="token punctuation">(</span>n<span class="token operator">:</span> <span class="token builtin">number</span><span class="token punctuation">)</span><span class="token operator">:</span> <span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">=></span> <span class="token builtin">number</span> <span class="token punctuation">&#123;</span></pre></td></tr><tr><td data-num="2"></td><td><pre>    <span class="token keyword">let</span> counter <span class="token operator">=</span> n <span class="token operator">-</span> <span class="token number">1</span><span class="token punctuation">;</span></pre></td></tr><tr><td data-num="3"></td><td><pre>    <span class="token keyword">return</span> <span class="token keyword">function</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span></pre></td></tr><tr><td data-num="4"></td><td><pre>        counter <span class="token operator">+=</span> <span class="token number">1</span><span class="token punctuation">;</span></pre></td></tr><tr><td data-num="5"></td><td><pre>        <span class="token keyword">return</span> counter<span class="token punctuation">;</span></pre></td></tr><tr><td data-num="6"></td><td><pre>    <span class="token punctuation">&#125;</span></pre></td></tr><tr><td data-num="7"></td><td><pre><span class="token punctuation">&#125;</span></pre></td></tr><tr><td data-num="8"></td><td><pre></pre></td></tr><tr><td data-num="9"></td><td><pre></pre></td></tr><tr><td data-num="10"></td><td><pre><span class="token comment">/** </pre></td></tr><tr><td data-num="11"></td><td><pre> * const counter = createCounter(10)</pre></td></tr><tr><td data-num="12"></td><td><pre> * counter() // 10</pre></td></tr><tr><td data-num="13"></td><td><pre> * counter() // 11</pre></td></tr><tr><td data-num="14"></td><td><pre> * counter() // 12</pre></td></tr><tr><td data-num="15"></td><td><pre> */</span></pre></td></tr></table></figure></div>]]></content>
      
      
      <categories>
          
          <category> Coding </category>
          
          <category> Leetcode </category>
          
          <category> Easy </category>
          
      </categories>
      
      
        <tags>
            
            <tag> Javascript </tag>
            
            <tag> Leetcode </tag>
            
            <tag> Easy </tag>
            
            <tag> Typescript </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>2667. Create Hello World Function</title>
      <link href="/2023/05/07/Coding/leetcode/Easy/2667%20Create%20Hello%20World%20Function/"/>
      <url>/2023/05/07/Coding/leetcode/Easy/2667%20Create%20Hello%20World%20Function/</url>
      
        <content type="html"><![CDATA[<p>⭐️</p><h2 id="題目敘述"><a class="anchor" href="#題目敘述">#</a> <span class="exturl" data-url="aHR0cHM6Ly9sZWV0Y29kZS5jb20vcHJvYmxlbXMvY3JlYXRlLWhlbGxvLXdvcmxkLWZ1bmN0aW9uLz91dG1fY2FtcGFpZ249UG9zdEQxJmFtcDt1dG1fbWVkaXVtPVBvc3QmYW1wO3V0bV9zb3VyY2U9UG9zdCZhbXA7Z2lvX2xpbmtfaWQ9UVBEdzBrSlI=">題目敘述</span></h2><p>Write a function  <code>createHelloWorld</code> . It should return a new function that always returns  <code>&quot;Hello World&quot;</code> .</p><h3 id="example-1"><a class="anchor" href="#example-1">#</a> Example 1</h3><blockquote><p><strong>Input:</strong> args = []<br><strong>Output:</strong> “Hello World”<br><strong>Explanation:</strong><br>const f = createHelloWorld();<br>f(); // “Hello World”</p><p>The function returned by createHelloWorld should always return “Hello World”.</p></blockquote><h3 id="example-2"><a class="anchor" href="#example-2">#</a> Example 2</h3><blockquote><p><strong>Input:</strong> args = [{},null,42]<br><strong>Output:</strong> “Hello World”<br><strong>Explanation:</strong><br>const f = createHelloWorld();<br>f({}, null, 42); // “Hello World”</p><p>Any arguments could be passed to the function but it should still always return “Hello World”.</p></blockquote><h2 id="solution"><a class="anchor" href="#solution">#</a> Solution</h2><div class="tab" data-id="code" data-title="Javascript"><figure class="highlight javascript"><figcaption data-lang="javascript"></figcaption><table><tr><td data-num="1"></td><td><pre><span class="token comment">/**</pre></td></tr><tr><td data-num="2"></td><td><pre> * @return &#123;Function&#125;</pre></td></tr><tr><td data-num="3"></td><td><pre> */</span></pre></td></tr><tr><td data-num="4"></td><td><pre><span class="token keyword">var</span> <span class="token function-variable function">createHelloWorld</span> <span class="token operator">=</span> <span class="token keyword">function</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span></pre></td></tr><tr><td data-num="5"></td><td><pre>    <span class="token keyword">return</span> <span class="token keyword">function</span><span class="token punctuation">(</span><span class="token parameter"><span class="token operator">...</span>args</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span></pre></td></tr><tr><td data-num="6"></td><td><pre>        <span class="token keyword">return</span> <span class="token string">"Hello World"</span></pre></td></tr><tr><td data-num="7"></td><td><pre>    <span class="token punctuation">&#125;</span></pre></td></tr><tr><td data-num="8"></td><td><pre><span class="token punctuation">&#125;</span><span class="token punctuation">;</span></pre></td></tr><tr><td data-num="9"></td><td><pre></pre></td></tr><tr><td data-num="10"></td><td><pre><span class="token comment">/**</pre></td></tr><tr><td data-num="11"></td><td><pre> * const f = createHelloWorld();</pre></td></tr><tr><td data-num="12"></td><td><pre> * f(); // "Hello World"</pre></td></tr><tr><td data-num="13"></td><td><pre> */</span></pre></td></tr></table></figure></div><div class="tab" data-id="code" data-title="Typescript"><figure class="highlight typescript"><figcaption data-lang="typescript"></figcaption><table><tr><td data-num="1"></td><td><pre><span class="token keyword">function</span> <span class="token function">createHelloWorld</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span></pre></td></tr><tr><td data-num="2"></td><td><pre><span class="token keyword">return</span> <span class="token keyword">function</span><span class="token punctuation">(</span><span class="token operator">...</span>args<span class="token punctuation">)</span><span class="token operator">:</span> <span class="token builtin">string</span> <span class="token punctuation">&#123;</span></pre></td></tr><tr><td data-num="3"></td><td><pre>        <span class="token keyword">return</span> <span class="token string">"Hello World"</span></pre></td></tr><tr><td data-num="4"></td><td><pre>    <span class="token punctuation">&#125;</span><span class="token punctuation">;</span></pre></td></tr><tr><td data-num="5"></td><td><pre><span class="token punctuation">&#125;</span><span class="token punctuation">;</span></pre></td></tr><tr><td data-num="6"></td><td><pre></pre></td></tr><tr><td data-num="7"></td><td><pre><span class="token comment">/**</pre></td></tr><tr><td data-num="8"></td><td><pre> * const f = createHelloWorld();</pre></td></tr><tr><td data-num="9"></td><td><pre> * f(); // "Hello World"</pre></td></tr><tr><td data-num="10"></td><td><pre> */</span></pre></td></tr></table></figure></div>]]></content>
      
      
      <categories>
          
          <category> Coding </category>
          
          <category> Leetcode </category>
          
          <category> Easy </category>
          
      </categories>
      
      
        <tags>
            
            <tag> Javascript </tag>
            
            <tag> Leetcode </tag>
            
            <tag> Easy </tag>
            
            <tag> Typescript </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>1456. Maximum Number of Vowels in a Substring of Given Length</title>
      <link href="/2023/05/07/Coding/leetcode/Medium/1456%20Maximum%20Number%20of%20Vowels%20in%20a%20Substring%20of%20Given%20Length/"/>
      <url>/2023/05/07/Coding/leetcode/Medium/1456%20Maximum%20Number%20of%20Vowels%20in%20a%20Substring%20of%20Given%20Length/</url>
      
        <content type="html"><![CDATA[<p>⭐️⭐️</p><h2 id="題目敘述"><a class="anchor" href="#題目敘述">#</a> <span class="exturl" data-url="aHR0cHM6Ly9sZWV0Y29kZS5jb20vcHJvYmxlbXMvbWF4aW11bS1udW1iZXItb2Ytdm93ZWxzLWluLWEtc3Vic3RyaW5nLW9mLWdpdmVuLWxlbmd0aC8=">題目敘述</span></h2><p>Given a string  <code>s</code>  and an integer  <code>k</code> , return <em>the maximum number of vowel letters in any substring of  <code>s</code>  with length  <code>k</code> </em>.</p><p><strong>Vowel letters</strong> in English are  <code>'a'</code> ,  <code>'e'</code> ,  <code>'i'</code> ,  <code>'o'</code> , and  <code>'u'</code> .</p><h3 id="example-1"><a class="anchor" href="#example-1">#</a> Example 1</h3><blockquote><p><strong>Input:</strong> s = “abciiidef”, k = 3<br><strong>Output:</strong> 3<br><strong>Explanation:</strong> The substring “iii” contains 3 vowel letters.</p></blockquote><h3 id="example-2"><a class="anchor" href="#example-2">#</a> Example 2</h3><blockquote><p><strong>Input:</strong> s = “aeiou”, k = 2<br><strong>Output:</strong> 2<br><strong>Explanation:</strong> Any substring of length 2 contains 2 vowels.</p></blockquote><h3 id="example-3"><a class="anchor" href="#example-3">#</a> Example 3</h3><blockquote><p><strong>Input:</strong> s = “leetcode”, k = 3<br><strong>Output:</strong> 2<br><strong>Explanation:</strong> “lee”, “eet” and “ode” contain 2 vowels.</p></blockquote><h2 id="solution"><a class="anchor" href="#solution">#</a> Solution</h2><div class="tab" data-id="code" data-title="C++"><figure class="highlight cpp"><figcaption data-lang="C++"></figcaption><table><tr><td data-num="1"></td><td><pre><span class="token keyword">class</span> <span class="token class-name">Solution</span> <span class="token punctuation">&#123;</span></pre></td></tr><tr><td data-num="2"></td><td><pre><span class="token keyword">public</span><span class="token operator">:</span></pre></td></tr><tr><td data-num="3"></td><td><pre>    <span class="token keyword">int</span> <span class="token function">maxVowels</span><span class="token punctuation">(</span>string s<span class="token punctuation">,</span> <span class="token keyword">int</span> k<span class="token punctuation">)</span> <span class="token punctuation">&#123;</span></pre></td></tr><tr><td data-num="4"></td><td><pre>        <span class="token keyword">int</span> res <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span></pre></td></tr><tr><td data-num="5"></td><td><pre>        unordered_set<span class="token operator">&lt;</span><span class="token keyword">char</span><span class="token operator">></span> vowels <span class="token operator">=</span> <span class="token punctuation">&#123;</span><span class="token char">'a'</span><span class="token punctuation">,</span> <span class="token char">'e'</span><span class="token punctuation">,</span> <span class="token char">'i'</span><span class="token punctuation">,</span> <span class="token char">'o'</span><span class="token punctuation">,</span> <span class="token char">'u'</span><span class="token punctuation">&#125;</span><span class="token punctuation">;</span></pre></td></tr><tr><td data-num="6"></td><td><pre>        <span class="token keyword">for</span> <span class="token punctuation">(</span><span class="token keyword">int</span> i<span class="token operator">=</span><span class="token number">0</span><span class="token punctuation">,</span> tmp<span class="token operator">=</span><span class="token number">0</span><span class="token punctuation">;</span> i<span class="token operator">&lt;</span>s<span class="token punctuation">.</span><span class="token function">size</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span> i<span class="token operator">++</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span></pre></td></tr><tr><td data-num="7"></td><td><pre>            tmp <span class="token operator">+=</span> vowels<span class="token punctuation">.</span><span class="token function">count</span><span class="token punctuation">(</span>s<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token punctuation">;</span></pre></td></tr><tr><td data-num="8"></td><td><pre>            <span class="token keyword">if</span> <span class="token punctuation">(</span>i <span class="token operator">-</span> k <span class="token operator">>=</span> <span class="token number">0</span><span class="token punctuation">)</span> tmp <span class="token operator">-=</span> vowels<span class="token punctuation">.</span><span class="token function">count</span><span class="token punctuation">(</span>s<span class="token punctuation">[</span>i<span class="token operator">-</span>k<span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token punctuation">;</span></pre></td></tr><tr><td data-num="9"></td><td><pre>            res <span class="token operator">=</span> <span class="token function">max</span><span class="token punctuation">(</span>res<span class="token punctuation">,</span> tmp<span class="token punctuation">)</span><span class="token punctuation">;</span></pre></td></tr><tr><td data-num="10"></td><td><pre>        <span class="token punctuation">&#125;</span></pre></td></tr><tr><td data-num="11"></td><td><pre>        <span class="token keyword">return</span> res<span class="token punctuation">;</span></pre></td></tr><tr><td data-num="12"></td><td><pre>    <span class="token punctuation">&#125;</span></pre></td></tr><tr><td data-num="13"></td><td><pre><span class="token punctuation">&#125;</span><span class="token punctuation">;</span></pre></td></tr></table></figure></div><div class="tab" data-id="code" data-title="Java"><figure class="highlight java"><figcaption data-lang="java"></figcaption><table><tr><td data-num="1"></td><td><pre><span class="token keyword">class</span> <span class="token class-name">Solution</span> <span class="token punctuation">&#123;</span></pre></td></tr><tr><td data-num="2"></td><td><pre>    <span class="token keyword">public</span> <span class="token keyword">int</span> <span class="token function">maxVowels</span><span class="token punctuation">(</span><span class="token class-name">String</span> s<span class="token punctuation">,</span> <span class="token keyword">int</span> k<span class="token punctuation">)</span> <span class="token punctuation">&#123;</span></pre></td></tr><tr><td data-num="3"></td><td><pre>        <span class="token keyword">int</span> ans <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span></pre></td></tr><tr><td data-num="4"></td><td><pre></pre></td></tr><tr><td data-num="5"></td><td><pre>        <span class="token class-name">String</span> temp <span class="token operator">=</span> s<span class="token punctuation">.</span><span class="token function">substring</span><span class="token punctuation">(</span><span class="token number">0</span><span class="token punctuation">,</span> k<span class="token punctuation">)</span><span class="token punctuation">;</span></pre></td></tr><tr><td data-num="6"></td><td><pre>        <span class="token keyword">for</span> <span class="token punctuation">(</span><span class="token keyword">char</span> t <span class="token operator">:</span> temp<span class="token punctuation">.</span><span class="token function">toCharArray</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span></pre></td></tr><tr><td data-num="7"></td><td><pre>            <span class="token keyword">if</span> <span class="token punctuation">(</span><span class="token function">isVowel</span><span class="token punctuation">(</span>t<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">&#123;</span></pre></td></tr><tr><td data-num="8"></td><td><pre>                ans<span class="token operator">++</span><span class="token punctuation">;</span></pre></td></tr><tr><td data-num="9"></td><td><pre>            <span class="token punctuation">&#125;</span></pre></td></tr><tr><td data-num="10"></td><td><pre>        <span class="token punctuation">&#125;</span></pre></td></tr><tr><td data-num="11"></td><td><pre></pre></td></tr><tr><td data-num="12"></td><td><pre>        <span class="token keyword">int</span> cur <span class="token operator">=</span> ans<span class="token punctuation">;</span></pre></td></tr><tr><td data-num="13"></td><td><pre>        <span class="token keyword">for</span> <span class="token punctuation">(</span><span class="token keyword">int</span> i <span class="token operator">=</span> k<span class="token punctuation">;</span> i <span class="token operator">&lt;</span> s<span class="token punctuation">.</span><span class="token function">length</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span> i<span class="token operator">++</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span></pre></td></tr><tr><td data-num="14"></td><td><pre>            <span class="token keyword">if</span> <span class="token punctuation">(</span><span class="token function">isVowel</span><span class="token punctuation">(</span>s<span class="token punctuation">.</span><span class="token function">charAt</span><span class="token punctuation">(</span>i<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">)</span></pre></td></tr><tr><td data-num="15"></td><td><pre>                cur<span class="token operator">++</span><span class="token punctuation">;</span></pre></td></tr><tr><td data-num="16"></td><td><pre>            <span class="token keyword">if</span> <span class="token punctuation">(</span><span class="token function">isVowel</span><span class="token punctuation">(</span>s<span class="token punctuation">.</span><span class="token function">charAt</span><span class="token punctuation">(</span>i <span class="token operator">-</span> k<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">)</span></pre></td></tr><tr><td data-num="17"></td><td><pre>                cur<span class="token operator">--</span><span class="token punctuation">;</span></pre></td></tr><tr><td data-num="18"></td><td><pre>            ans <span class="token operator">=</span> <span class="token class-name">Math</span><span class="token punctuation">.</span><span class="token function">max</span><span class="token punctuation">(</span>ans<span class="token punctuation">,</span> cur<span class="token punctuation">)</span><span class="token punctuation">;</span></pre></td></tr><tr><td data-num="19"></td><td><pre>        <span class="token punctuation">&#125;</span></pre></td></tr><tr><td data-num="20"></td><td><pre></pre></td></tr><tr><td data-num="21"></td><td><pre>        <span class="token keyword">return</span> ans<span class="token punctuation">;</span></pre></td></tr><tr><td data-num="22"></td><td><pre>    <span class="token punctuation">&#125;</span></pre></td></tr><tr><td data-num="23"></td><td><pre></pre></td></tr><tr><td data-num="24"></td><td><pre>    <span class="token keyword">public</span> <span class="token keyword">boolean</span> <span class="token function">isVowel</span><span class="token punctuation">(</span><span class="token keyword">char</span> c<span class="token punctuation">)</span> <span class="token punctuation">&#123;</span></pre></td></tr><tr><td data-num="25"></td><td><pre>        <span class="token keyword">if</span> <span class="token punctuation">(</span>c <span class="token operator">==</span> <span class="token char">'a'</span> <span class="token operator">||</span> c <span class="token operator">==</span> <span class="token char">'e'</span> <span class="token operator">||</span> c <span class="token operator">==</span> <span class="token char">'i'</span> <span class="token operator">||</span> c <span class="token operator">==</span> <span class="token char">'o'</span> <span class="token operator">||</span> c <span class="token operator">==</span> <span class="token char">'u'</span><span class="token punctuation">)</span></pre></td></tr><tr><td data-num="26"></td><td><pre>            <span class="token keyword">return</span> <span class="token boolean">true</span><span class="token punctuation">;</span></pre></td></tr><tr><td data-num="27"></td><td><pre>        <span class="token keyword">return</span> <span class="token boolean">false</span><span class="token punctuation">;</span></pre></td></tr><tr><td data-num="28"></td><td><pre>    <span class="token punctuation">&#125;</span></pre></td></tr><tr><td data-num="29"></td><td><pre><span class="token punctuation">&#125;</span></pre></td></tr></table></figure></div><div class="tab" data-id="code" data-title="Python"><pre><code class="language-python"></code></pre></div>]]></content>
      
      
      <categories>
          
          <category> Coding </category>
          
          <category> Leetcode </category>
          
          <category> Medium </category>
          
      </categories>
      
      
        <tags>
            
            <tag> String </tag>
            
            <tag> Leetcode </tag>
            
            <tag> Medium </tag>
            
            <tag> Sliding Window </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>1964. Find the Longest Valid Obstacle Course at Each Position</title>
      <link href="/2023/05/07/Coding/leetcode/Hard/1964%20Find%20the%20Longest%20Valid%20Obstacle%20Course%20at%20Each%20Position/"/>
      <url>/2023/05/07/Coding/leetcode/Hard/1964%20Find%20the%20Longest%20Valid%20Obstacle%20Course%20at%20Each%20Position/</url>
      
        <content type="html"><![CDATA[<p>⭐️⭐️⭐️</p><h2 id="題目敘述"><a class="anchor" href="#題目敘述">#</a> <span class="exturl" data-url="aHR0cHM6Ly9sZWV0Y29kZS5jb20vcHJvYmxlbXMvZmluZC10aGUtbG9uZ2VzdC12YWxpZC1vYnN0YWNsZS1jb3Vyc2UtYXQtZWFjaC1wb3NpdGlvbi8=">題目敘述</span></h2><p>You want to build some obstacle courses. You are given a <strong>0-indexed</strong> integer array  <code>obstacles</code>  of length  <code>n</code> , where  <code>obstacles[i]</code>  describes the height of the  <code>ith</code>  obstacle.</p><p>For every index  <code>i</code>  between  <code>0</code>  and  <code>n - 1</code>  (<strong>inclusive</strong>), find the length of the <strong>longest obstacle course</strong> in  <code>obstacles</code>  such that:</p><ul><li>You choose any number of obstacles between  <code>0</code>  and  <code>i</code>  <strong>inclusive</strong>.</li><li>You must include the  <code>ith</code>  obstacle in the course.</li><li>You must put the chosen obstacles in the <strong>same order</strong> as they appear in  <code>obstacles</code> .</li><li>Every obstacle (except the first) is <strong>taller</strong> than or the <strong>same height</strong> as the obstacle immediately before it.</li></ul><p>Return <em>an array  <code>ans</code>  of length  <code>n</code> , where  <code>ans[i]</code>  is the length of the <strong>longest obstacle course</strong> for index  <code>i</code>  as described above</em>.</p><h3 id="example-1"><a class="anchor" href="#example-1">#</a> Example 1</h3><blockquote><p><strong>Input:</strong> obstacles = [1,2,3,2]<br><strong>Output:</strong> [1,2,3,3]<br><strong>Explanation:</strong> The longest valid obstacle course at each position is:</p><ul><li>i = 0: [1], [1] has length 1.</li><li>i = 1: [1,2], [1,2] has length 2.</li><li>i = 2: [1,2,3], [1,2,3] has length 3.</li><li>i = 3: [1,2,3,2], [1,2,2] has length 3.</li></ul></blockquote><h3 id="example-2"><a class="anchor" href="#example-2">#</a> Example 2</h3><blockquote><p><strong>Input:</strong> obstacles = [2,2,1]<br><strong>Output:</strong> [1,2,1]<br><strong>Explanation:</strong> The longest valid obstacle course at each position is:</p><ul><li>i = 0: [2], [2] has length 1.</li><li>i = 1: [2,2], [2,2] has length 2.</li><li>i = 2: [2,2,1], [1] has length 1.</li></ul></blockquote><h3 id="example-3"><a class="anchor" href="#example-3">#</a> Example 3</h3><blockquote><p><strong>Input:</strong> obstacles = [3,1,5,6,4,2]<br><strong>Output:</strong> [1,1,2,3,2,2]<br><strong>Explanation:</strong> The longest valid obstacle course at each position is:</p><ul><li>i = 0: [3], [3] has length 1.</li><li>i = 1: [3,1], [1] has length 1.</li><li>i = 2: [3,1,5], [3,5] has length 2. [1,5] is also valid.</li><li>i = 3: [3,1,5,6], [3,5,6] has length 3. [1,5,6] is also valid.</li><li>i = 4: [3,1,5,6,4], [3,4] has length 2. [1,4] is also valid.</li><li>i = 5: [3,1,5,6,4,2], [1,2] has length 2.</li></ul></blockquote><h2 id="解題思路"><a class="anchor" href="#解題思路">#</a> 解題思路</h2><p>Using DP.</p><h2 id="solution"><a class="anchor" href="#solution">#</a> Solution</h2><div class="tab" data-id="code" data-title="C++"><figure class="highlight cpp"><figcaption data-lang="C++"></figcaption><table><tr><td data-num="1"></td><td><pre><span class="token keyword">class</span> <span class="token class-name">Solution</span> <span class="token punctuation">&#123;</span></pre></td></tr><tr><td data-num="2"></td><td><pre><span class="token keyword">public</span><span class="token operator">:</span></pre></td></tr><tr><td data-num="3"></td><td><pre>    vector<span class="token operator">&lt;</span><span class="token keyword">int</span><span class="token operator">></span> <span class="token function">longestObstacleCourseAtEachPosition</span><span class="token punctuation">(</span>vector<span class="token operator">&lt;</span><span class="token keyword">int</span><span class="token operator">></span><span class="token operator">&amp;</span> obstacles<span class="token punctuation">)</span> <span class="token punctuation">&#123;</span></pre></td></tr><tr><td data-num="4"></td><td><pre>        <span class="token keyword">int</span> n <span class="token operator">=</span> obstacles<span class="token punctuation">.</span><span class="token function">size</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span></pre></td></tr><tr><td data-num="5"></td><td><pre>        <span class="token keyword">int</span> length <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span></pre></td></tr><tr><td data-num="6"></td><td><pre>        vector<span class="token operator">&lt;</span><span class="token keyword">int</span><span class="token operator">></span> <span class="token function">result</span><span class="token punctuation">(</span>n<span class="token punctuation">)</span><span class="token punctuation">;</span></pre></td></tr><tr><td data-num="7"></td><td><pre>        vector<span class="token operator">&lt;</span><span class="token keyword">int</span><span class="token operator">></span> <span class="token function">increasingSubseq</span><span class="token punctuation">(</span>n<span class="token punctuation">)</span><span class="token punctuation">;</span></pre></td></tr><tr><td data-num="8"></td><td><pre>        <span class="token keyword">for</span> <span class="token punctuation">(</span><span class="token keyword">int</span> i <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span> i <span class="token operator">&lt;</span> n<span class="token punctuation">;</span> <span class="token operator">++</span>i<span class="token punctuation">)</span> <span class="token punctuation">&#123;</span></pre></td></tr><tr><td data-num="9"></td><td><pre>            <span class="token keyword">int</span> left <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">,</span> right <span class="token operator">=</span> length<span class="token punctuation">;</span></pre></td></tr><tr><td data-num="10"></td><td><pre>            <span class="token keyword">while</span> <span class="token punctuation">(</span>left <span class="token operator">&lt;</span> right<span class="token punctuation">)</span> <span class="token punctuation">&#123;</span></pre></td></tr><tr><td data-num="11"></td><td><pre>                <span class="token keyword">int</span> mid <span class="token operator">=</span> <span class="token punctuation">(</span>left <span class="token operator">+</span> right<span class="token punctuation">)</span> <span class="token operator">/</span> <span class="token number">2</span><span class="token punctuation">;</span></pre></td></tr><tr><td data-num="12"></td><td><pre>                <span class="token keyword">if</span> <span class="token punctuation">(</span>increasingSubseq<span class="token punctuation">[</span>mid<span class="token punctuation">]</span> <span class="token operator">&lt;=</span> obstacles<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">)</span></pre></td></tr><tr><td data-num="13"></td><td><pre>                    left <span class="token operator">=</span> mid <span class="token operator">+</span> <span class="token number">1</span><span class="token punctuation">;</span></pre></td></tr><tr><td data-num="14"></td><td><pre>                <span class="token keyword">else</span></pre></td></tr><tr><td data-num="15"></td><td><pre>                    right <span class="token operator">=</span> mid<span class="token punctuation">;</span></pre></td></tr><tr><td data-num="16"></td><td><pre>            <span class="token punctuation">&#125;</span></pre></td></tr><tr><td data-num="17"></td><td><pre>            result<span class="token punctuation">[</span>i<span class="token punctuation">]</span> <span class="token operator">=</span> left <span class="token operator">+</span> <span class="token number">1</span><span class="token punctuation">;</span></pre></td></tr><tr><td data-num="18"></td><td><pre>            <span class="token keyword">if</span> <span class="token punctuation">(</span>length <span class="token operator">==</span> left<span class="token punctuation">)</span></pre></td></tr><tr><td data-num="19"></td><td><pre>                length<span class="token operator">++</span><span class="token punctuation">;</span></pre></td></tr><tr><td data-num="20"></td><td><pre>            increasingSubseq<span class="token punctuation">[</span>left<span class="token punctuation">]</span> <span class="token operator">=</span> obstacles<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">;</span></pre></td></tr><tr><td data-num="21"></td><td><pre>        <span class="token punctuation">&#125;</span></pre></td></tr><tr><td data-num="22"></td><td><pre>        <span class="token keyword">return</span> result<span class="token punctuation">;</span></pre></td></tr><tr><td data-num="23"></td><td><pre>    <span class="token punctuation">&#125;</span></pre></td></tr><tr><td data-num="24"></td><td><pre><span class="token punctuation">&#125;</span><span class="token punctuation">;</span></pre></td></tr></table></figure></div><div class="tab" data-id="code" data-title="Java"><figure class="highlight java"><figcaption data-lang="java"></figcaption><table><tr><td data-num="1"></td><td><pre><span class="token keyword">class</span> <span class="token class-name">Solution</span> <span class="token punctuation">&#123;</span></pre></td></tr><tr><td data-num="2"></td><td><pre>    <span class="token keyword">public</span> <span class="token keyword">int</span><span class="token punctuation">[</span><span class="token punctuation">]</span> <span class="token function">longestObstacleCourseAtEachPosition</span><span class="token punctuation">(</span><span class="token keyword">int</span><span class="token punctuation">[</span><span class="token punctuation">]</span> obstacles<span class="token punctuation">)</span> <span class="token punctuation">&#123;</span></pre></td></tr><tr><td data-num="3"></td><td><pre>        <span class="token keyword">int</span> n <span class="token operator">=</span> obstacles<span class="token punctuation">.</span>length<span class="token punctuation">;</span></pre></td></tr><tr><td data-num="4"></td><td><pre>        <span class="token keyword">int</span> length <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span></pre></td></tr><tr><td data-num="5"></td><td><pre>        <span class="token keyword">int</span><span class="token punctuation">[</span><span class="token punctuation">]</span> result <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token keyword">int</span><span class="token punctuation">[</span>n<span class="token punctuation">]</span><span class="token punctuation">;</span></pre></td></tr><tr><td data-num="6"></td><td><pre>        <span class="token keyword">int</span><span class="token punctuation">[</span><span class="token punctuation">]</span> sub <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token keyword">int</span><span class="token punctuation">[</span>n<span class="token punctuation">]</span><span class="token punctuation">;</span></pre></td></tr><tr><td data-num="7"></td><td><pre></pre></td></tr><tr><td data-num="8"></td><td><pre>        <span class="token keyword">for</span> <span class="token punctuation">(</span><span class="token keyword">int</span> i <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span> i <span class="token operator">&lt;</span> n<span class="token punctuation">;</span> <span class="token operator">++</span>i<span class="token punctuation">)</span> <span class="token punctuation">&#123;</span></pre></td></tr><tr><td data-num="9"></td><td><pre>            <span class="token keyword">int</span> left <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">,</span> right <span class="token operator">=</span> length<span class="token punctuation">;</span></pre></td></tr><tr><td data-num="10"></td><td><pre></pre></td></tr><tr><td data-num="11"></td><td><pre>            <span class="token keyword">while</span> <span class="token punctuation">(</span>left <span class="token operator">&lt;</span> right<span class="token punctuation">)</span> <span class="token punctuation">&#123;</span></pre></td></tr><tr><td data-num="12"></td><td><pre>                <span class="token keyword">int</span> mid <span class="token operator">=</span> left <span class="token operator">+</span> <span class="token punctuation">(</span>right <span class="token operator">-</span> left<span class="token punctuation">)</span> <span class="token operator">/</span> <span class="token number">2</span><span class="token punctuation">;</span></pre></td></tr><tr><td data-num="13"></td><td><pre>                <span class="token keyword">if</span> <span class="token punctuation">(</span>sub<span class="token punctuation">[</span>mid<span class="token punctuation">]</span> <span class="token operator">&lt;=</span> obstacles<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">)</span></pre></td></tr><tr><td data-num="14"></td><td><pre>                    left <span class="token operator">=</span> mid <span class="token operator">+</span> <span class="token number">1</span><span class="token punctuation">;</span></pre></td></tr><tr><td data-num="15"></td><td><pre>                <span class="token keyword">else</span></pre></td></tr><tr><td data-num="16"></td><td><pre>                    right <span class="token operator">=</span> mid<span class="token punctuation">;</span></pre></td></tr><tr><td data-num="17"></td><td><pre>            <span class="token punctuation">&#125;</span></pre></td></tr><tr><td data-num="18"></td><td><pre></pre></td></tr><tr><td data-num="19"></td><td><pre>            result<span class="token punctuation">[</span>i<span class="token punctuation">]</span> <span class="token operator">=</span> left <span class="token operator">+</span> <span class="token number">1</span><span class="token punctuation">;</span></pre></td></tr><tr><td data-num="20"></td><td><pre>            <span class="token keyword">if</span> <span class="token punctuation">(</span>length <span class="token operator">==</span> left<span class="token punctuation">)</span></pre></td></tr><tr><td data-num="21"></td><td><pre>                length<span class="token operator">++</span><span class="token punctuation">;</span></pre></td></tr><tr><td data-num="22"></td><td><pre>            sub<span class="token punctuation">[</span>left<span class="token punctuation">]</span> <span class="token operator">=</span> obstacles<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">;</span></pre></td></tr><tr><td data-num="23"></td><td><pre>        <span class="token punctuation">&#125;</span></pre></td></tr><tr><td data-num="24"></td><td><pre>        </pre></td></tr><tr><td data-num="25"></td><td><pre>        <span class="token keyword">return</span> result<span class="token punctuation">;</span></pre></td></tr><tr><td data-num="26"></td><td><pre>    <span class="token punctuation">&#125;</span></pre></td></tr><tr><td data-num="27"></td><td><pre><span class="token punctuation">&#125;</span></pre></td></tr></table></figure></div><div class="tab" data-id="code" data-title="Python"><pre><code class="language-python"></code></pre></div>]]></content>
      
      
      <categories>
          
          <category> Coding </category>
          
          <category> Leetcode </category>
          
          <category> Hard </category>
          
      </categories>
      
      
        <tags>
            
            <tag> Leetcode </tag>
            
            <tag> Array </tag>
            
            <tag> Hard </tag>
            
            <tag> Binary Search </tag>
            
            <tag> Binary Indexed  Tree </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>649. Dota2 Senate</title>
      <link href="/2023/05/04/Coding/leetcode/Hard/649%20Dota2%20Senate/"/>
      <url>/2023/05/04/Coding/leetcode/Hard/649%20Dota2%20Senate/</url>
      
        <content type="html"><![CDATA[<p>⭐️⭐️</p><h2 id="題目敘述"><a class="anchor" href="#題目敘述">#</a> <span class="exturl" data-url="aHR0cHM6Ly9sZWV0Y29kZS5jb20vcHJvYmxlbXMvZG90YTItc2VuYXRlLw==">題目敘述</span></h2><p>In the world of Dota2, there are two parties: the Radiant and the Dire.</p><p>The Dota2 senate consists of senators coming from two parties. Now the Senate wants to decide on a change in the Dota2 game. The voting for this change is a round-based procedure. In each round, each senator can exercise <strong>one</strong> of the two rights:</p><ul><li><strong>Ban one senator’s right:</strong> A senator can make another senator lose all his rights in this and all the following rounds.</li><li><strong>Announce the victory:</strong> If this senator found the senators who still have rights to vote are all from the same party, he can announce the victory and decide on the change in the game.</li></ul><p>Given a string  <code>senate</code>  representing each senator’s party belonging. The character  <code>'R'</code>  and  <code>'D'</code>  represent the Radiant party and the Dire party. Then if there are  <code>n</code>  senators, the size of the given string will be  <code>n</code> .</p><p>The round-based procedure starts from the first senator to the last senator in the given order. This procedure will last until the end of voting. All the senators who have lost their rights will be skipped during the procedure.</p><p>Suppose every senator is smart enough and will play the best strategy for his own party. Predict which party will finally announce the victory and change the Dota2 game. The output should be  <code>&quot;Radiant&quot;</code>  or  <code>&quot;Dire&quot;</code> .</p><h3 id="example-1"><a class="anchor" href="#example-1">#</a> Example 1</h3><blockquote><p><strong>Input:</strong> senate = “RD”<br><strong>Output</strong>: “Radiant”<br><strong>Explanation:</strong><br>The first senator comes from Radiant and he can just ban the next senator’s right in round 1.<br>And the second senator can’t exercise any rights anymore since his right has been banned.<br>And in round 2, the first senator can just announce the victory since he is the only guy in the senate who can vote.</p></blockquote><h3 id="example-2"><a class="anchor" href="#example-2">#</a> Example 2</h3><blockquote><p><strong>Input:</strong> senate = “RDD”<br><strong>Output:</strong> “Dire”<br><strong>Explanation:</strong><br>The first senator comes from Radiant and he can just ban the next senator’s right in round 1.<br>And the second senator can’t exercise any rights anymore since his right has been banned.<br>And the third senator comes from Dire and he can ban the first senator’s right in round 1.<br>And in round 2, the third senator can just announce the victory since he is the only guy in the senate who can vote.</p></blockquote><div class="tab" data-id="code" data-title="C++"><figure class="highlight cpp"><figcaption data-lang="C++"></figcaption><table><tr><td data-num="1"></td><td><pre><span class="token keyword">class</span> <span class="token class-name">Solution</span> <span class="token punctuation">&#123;</span></pre></td></tr><tr><td data-num="2"></td><td><pre><span class="token keyword">public</span><span class="token operator">:</span></pre></td></tr><tr><td data-num="3"></td><td><pre>    string <span class="token function">predictPartyVictory</span><span class="token punctuation">(</span>string senate<span class="token punctuation">)</span> <span class="token punctuation">&#123;</span></pre></td></tr><tr><td data-num="4"></td><td><pre>        <span class="token keyword">int</span> n <span class="token operator">=</span> senate<span class="token punctuation">.</span><span class="token function">length</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span></pre></td></tr><tr><td data-num="5"></td><td><pre>        queue<span class="token operator">&lt;</span><span class="token keyword">int</span><span class="token operator">></span> r<span class="token punctuation">,</span> d<span class="token punctuation">;</span></pre></td></tr><tr><td data-num="6"></td><td><pre>        <span class="token keyword">for</span> <span class="token punctuation">(</span><span class="token keyword">int</span> i<span class="token operator">=</span><span class="token number">0</span><span class="token punctuation">;</span> i<span class="token operator">&lt;</span>n<span class="token punctuation">;</span> i<span class="token operator">++</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span></pre></td></tr><tr><td data-num="7"></td><td><pre>            senate<span class="token punctuation">[</span>i<span class="token punctuation">]</span> <span class="token operator">==</span> <span class="token char">'R'</span> <span class="token operator">?</span> r<span class="token punctuation">.</span><span class="token function">push</span><span class="token punctuation">(</span>i<span class="token punctuation">)</span> <span class="token operator">:</span> d<span class="token punctuation">.</span><span class="token function">push</span><span class="token punctuation">(</span>i<span class="token punctuation">)</span><span class="token punctuation">;</span></pre></td></tr><tr><td data-num="8"></td><td><pre>        <span class="token punctuation">&#125;</span></pre></td></tr><tr><td data-num="9"></td><td><pre></pre></td></tr><tr><td data-num="10"></td><td><pre>        <span class="token keyword">while</span> <span class="token punctuation">(</span><span class="token operator">!</span>r<span class="token punctuation">.</span><span class="token function">empty</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">&amp;&amp;</span> <span class="token operator">!</span>d<span class="token punctuation">.</span><span class="token function">empty</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span></pre></td></tr><tr><td data-num="11"></td><td><pre>            <span class="token keyword">int</span> tr <span class="token operator">=</span> r<span class="token punctuation">.</span><span class="token function">front</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span> r<span class="token punctuation">.</span><span class="token function">pop</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span></pre></td></tr><tr><td data-num="12"></td><td><pre>            <span class="token keyword">int</span> td <span class="token operator">=</span> d<span class="token punctuation">.</span><span class="token function">front</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span> d<span class="token punctuation">.</span><span class="token function">pop</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span></pre></td></tr><tr><td data-num="13"></td><td><pre>            tr <span class="token operator">&lt;</span> td <span class="token operator">?</span> r<span class="token punctuation">.</span><span class="token function">push</span><span class="token punctuation">(</span>tr <span class="token operator">+</span> n<span class="token punctuation">)</span> <span class="token operator">:</span> d<span class="token punctuation">.</span><span class="token function">push</span><span class="token punctuation">(</span>td <span class="token operator">+</span> n<span class="token punctuation">)</span><span class="token punctuation">;</span></pre></td></tr><tr><td data-num="14"></td><td><pre>        <span class="token punctuation">&#125;</span></pre></td></tr><tr><td data-num="15"></td><td><pre>        <span class="token keyword">return</span> r<span class="token punctuation">.</span><span class="token function">empty</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">?</span> <span class="token string">"Dire"</span> <span class="token operator">:</span> <span class="token string">"Radiant"</span><span class="token punctuation">;</span></pre></td></tr><tr><td data-num="16"></td><td><pre>    <span class="token punctuation">&#125;</span></pre></td></tr><tr><td data-num="17"></td><td><pre><span class="token punctuation">&#125;</span><span class="token punctuation">;</span></pre></td></tr></table></figure></div><div class="tab" data-id="code" data-title="Java"><figure class="highlight java"><figcaption data-lang="java"></figcaption><table><tr><td data-num="1"></td><td><pre><span class="token keyword">import</span> <span class="token import"><span class="token namespace">java<span class="token punctuation">.</span>util<span class="token punctuation">.</span></span><span class="token class-name">LinkedList</span></span><span class="token punctuation">;</span></pre></td></tr><tr><td data-num="2"></td><td><pre><span class="token keyword">import</span> <span class="token import"><span class="token namespace">java<span class="token punctuation">.</span>util<span class="token punctuation">.</span></span><span class="token class-name">Queue</span></span><span class="token punctuation">;</span></pre></td></tr><tr><td data-num="3"></td><td><pre></pre></td></tr><tr><td data-num="4"></td><td><pre><span class="token keyword">class</span> <span class="token class-name">Solution</span> <span class="token punctuation">&#123;</span></pre></td></tr><tr><td data-num="5"></td><td><pre>    <span class="token keyword">public</span> <span class="token class-name">String</span> <span class="token function">predictPartyVictory</span><span class="token punctuation">(</span><span class="token class-name">String</span> senate<span class="token punctuation">)</span> <span class="token punctuation">&#123;</span></pre></td></tr><tr><td data-num="6"></td><td><pre>        <span class="token keyword">int</span> n <span class="token operator">=</span> senate<span class="token punctuation">.</span><span class="token function">length</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span></pre></td></tr><tr><td data-num="7"></td><td><pre>        </pre></td></tr><tr><td data-num="8"></td><td><pre>        <span class="token class-name">Queue</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token class-name">Integer</span><span class="token punctuation">></span></span> rQueue <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">LinkedList</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token punctuation">></span></span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span></pre></td></tr><tr><td data-num="9"></td><td><pre>        <span class="token class-name">Queue</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token class-name">Integer</span><span class="token punctuation">></span></span> dQueue <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">LinkedList</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token punctuation">></span></span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span></pre></td></tr><tr><td data-num="10"></td><td><pre></pre></td></tr><tr><td data-num="11"></td><td><pre>        <span class="token keyword">for</span> <span class="token punctuation">(</span><span class="token keyword">int</span> i <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span> i <span class="token operator">&lt;</span> n<span class="token punctuation">;</span> i<span class="token operator">++</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span></pre></td></tr><tr><td data-num="12"></td><td><pre>            <span class="token keyword">if</span> <span class="token punctuation">(</span>senate<span class="token punctuation">.</span><span class="token function">charAt</span><span class="token punctuation">(</span>i<span class="token punctuation">)</span> <span class="token operator">==</span> <span class="token char">'R'</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span></pre></td></tr><tr><td data-num="13"></td><td><pre>                rQueue<span class="token punctuation">.</span><span class="token function">add</span><span class="token punctuation">(</span>i<span class="token punctuation">)</span><span class="token punctuation">;</span></pre></td></tr><tr><td data-num="14"></td><td><pre>            <span class="token punctuation">&#125;</span> <span class="token keyword">else</span> <span class="token punctuation">&#123;</span></pre></td></tr><tr><td data-num="15"></td><td><pre>                dQueue<span class="token punctuation">.</span><span class="token function">add</span><span class="token punctuation">(</span>i<span class="token punctuation">)</span><span class="token punctuation">;</span></pre></td></tr><tr><td data-num="16"></td><td><pre>            <span class="token punctuation">&#125;</span></pre></td></tr><tr><td data-num="17"></td><td><pre>        <span class="token punctuation">&#125;</span></pre></td></tr><tr><td data-num="18"></td><td><pre></pre></td></tr><tr><td data-num="19"></td><td><pre>        <span class="token keyword">while</span> <span class="token punctuation">(</span><span class="token operator">!</span>rQueue<span class="token punctuation">.</span><span class="token function">isEmpty</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">&amp;&amp;</span> <span class="token operator">!</span>dQueue<span class="token punctuation">.</span><span class="token function">isEmpty</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span></pre></td></tr><tr><td data-num="20"></td><td><pre>            <span class="token keyword">int</span> rTurn <span class="token operator">=</span> rQueue<span class="token punctuation">.</span><span class="token function">poll</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span></pre></td></tr><tr><td data-num="21"></td><td><pre>            <span class="token keyword">int</span> dTurn <span class="token operator">=</span> dQueue<span class="token punctuation">.</span><span class="token function">poll</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span></pre></td></tr><tr><td data-num="22"></td><td><pre></pre></td></tr><tr><td data-num="23"></td><td><pre>            <span class="token keyword">if</span> <span class="token punctuation">(</span>dTurn <span class="token operator">&lt;</span> rTurn<span class="token punctuation">)</span> <span class="token punctuation">&#123;</span></pre></td></tr><tr><td data-num="24"></td><td><pre>                dQueue<span class="token punctuation">.</span><span class="token function">add</span><span class="token punctuation">(</span>dTurn <span class="token operator">+</span> n<span class="token punctuation">)</span><span class="token punctuation">;</span></pre></td></tr><tr><td data-num="25"></td><td><pre>            <span class="token punctuation">&#125;</span> <span class="token keyword">else</span> <span class="token punctuation">&#123;</span></pre></td></tr><tr><td data-num="26"></td><td><pre>                rQueue<span class="token punctuation">.</span><span class="token function">add</span><span class="token punctuation">(</span>rTurn <span class="token operator">+</span> n<span class="token punctuation">)</span><span class="token punctuation">;</span></pre></td></tr><tr><td data-num="27"></td><td><pre>            <span class="token punctuation">&#125;</span></pre></td></tr><tr><td data-num="28"></td><td><pre>        <span class="token punctuation">&#125;</span></pre></td></tr><tr><td data-num="29"></td><td><pre></pre></td></tr><tr><td data-num="30"></td><td><pre>        <span class="token keyword">return</span> rQueue<span class="token punctuation">.</span><span class="token function">isEmpty</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">?</span> <span class="token string">"Dire"</span> <span class="token operator">:</span> <span class="token string">"Radiant"</span><span class="token punctuation">;</span></pre></td></tr><tr><td data-num="31"></td><td><pre>    <span class="token punctuation">&#125;</span></pre></td></tr><tr><td data-num="32"></td><td><pre><span class="token punctuation">&#125;</span></pre></td></tr></table></figure></div><div class="tab" data-id="code" data-title="Python"><figure class="highlight python"><figcaption data-lang="python"></figcaption><table><tr><td data-num="1"></td><td><pre><span class="token keyword">class</span> <span class="token class-name">Solution</span><span class="token punctuation">:</span></pre></td></tr><tr><td data-num="2"></td><td><pre>    <span class="token keyword">def</span> <span class="token function">predictPartyVictory</span><span class="token punctuation">(</span>self<span class="token punctuation">,</span> senate<span class="token punctuation">:</span> <span class="token builtin">str</span><span class="token punctuation">)</span> <span class="token operator">-</span><span class="token operator">></span> <span class="token builtin">str</span><span class="token punctuation">:</span></pre></td></tr><tr><td data-num="3"></td><td><pre>        n <span class="token operator">=</span> <span class="token builtin">len</span><span class="token punctuation">(</span>senate<span class="token punctuation">)</span></pre></td></tr><tr><td data-num="4"></td><td><pre>        r <span class="token operator">=</span> <span class="token punctuation">[</span><span class="token punctuation">]</span></pre></td></tr><tr><td data-num="5"></td><td><pre>        d <span class="token operator">=</span> <span class="token punctuation">[</span><span class="token punctuation">]</span></pre></td></tr><tr><td data-num="6"></td><td><pre>        <span class="token keyword">for</span> i <span class="token keyword">in</span> <span class="token builtin">range</span><span class="token punctuation">(</span><span class="token number">0</span><span class="token punctuation">,</span> n<span class="token punctuation">)</span><span class="token punctuation">:</span></pre></td></tr><tr><td data-num="7"></td><td><pre>            r<span class="token punctuation">.</span>append<span class="token punctuation">(</span>i<span class="token punctuation">)</span> <span class="token keyword">if</span> senate<span class="token punctuation">[</span>i<span class="token punctuation">]</span> <span class="token operator">==</span> <span class="token string">'R'</span> <span class="token keyword">else</span> d<span class="token punctuation">.</span>append<span class="token punctuation">(</span>i<span class="token punctuation">)</span></pre></td></tr><tr><td data-num="8"></td><td><pre>        <span class="token keyword">while</span> r <span class="token keyword">and</span> d<span class="token punctuation">:</span></pre></td></tr><tr><td data-num="9"></td><td><pre>            tr <span class="token operator">=</span> r<span class="token punctuation">.</span>pop<span class="token punctuation">(</span><span class="token number">0</span><span class="token punctuation">)</span></pre></td></tr><tr><td data-num="10"></td><td><pre>            td <span class="token operator">=</span> d<span class="token punctuation">.</span>pop<span class="token punctuation">(</span><span class="token number">0</span><span class="token punctuation">)</span></pre></td></tr><tr><td data-num="11"></td><td><pre>            r<span class="token punctuation">.</span>append<span class="token punctuation">(</span>tr <span class="token operator">+</span> n<span class="token punctuation">)</span> <span class="token keyword">if</span> tr <span class="token operator">&lt;</span> td <span class="token keyword">else</span> d<span class="token punctuation">.</span>append<span class="token punctuation">(</span>td <span class="token operator">+</span> n<span class="token punctuation">)</span></pre></td></tr><tr><td data-num="12"></td><td><pre>        <span class="token keyword">return</span> <span class="token string">"Radiant"</span> <span class="token keyword">if</span> <span class="token builtin">len</span><span class="token punctuation">(</span>d<span class="token punctuation">)</span> <span class="token operator">==</span> <span class="token number">0</span> <span class="token keyword">else</span> <span class="token string">"Dire"</span></pre></td></tr></table></figure></div>]]></content>
      
      
      <categories>
          
          <category> Coding </category>
          
          <category> Leetcode </category>
          
          <category> Medium </category>
          
      </categories>
      
      
        <tags>
            
            <tag> String </tag>
            
            <tag> Leetcode </tag>
            
            <tag> Medium </tag>
            
            <tag> Greedy </tag>
            
            <tag> Queue </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>Ch06. Branch and Bound</title>
      <link href="/2023/05/03/Algorithm/Ch05%20Branch%20and%20Bound/"/>
      <url>/2023/05/03/Algorithm/Ch05%20Branch%20and%20Bound/</url>
      
        <content type="html"><![CDATA[<h2 id="branch-and-bound"><a class="anchor" href="#branch-and-bound">#</a> Branch and Bound</h2><ul><li>The branch-and-bound algorithm developed here is <span class="red">an improvement on the backtracking algorithm</span>.</li><li>The B&amp;B design strategy is very similar to backtracking in that a state space tree is used to solve a problem.</li><li>B&amp;B vs. Backtracking<ul><li>B&amp;B does <strong>not limit</strong> us to any particular way of <strong>traversing</strong> the tree and</li><li>B&amp;B is used only for optimization problems</li></ul></li><li>A B&amp;B algorithm computes a number (<strong>bound</strong>) at a node to <strong>determine whether the node is promising</strong>.<ul><li>If that bound is <strong>no better than</strong> the value of the best solution found so far, the node is <strong>nonpromising</strong>.</li><li>Otherwise, it is <strong>promising</strong>.</li></ul></li></ul><h3 id="0-1-knapsack-example"><a class="anchor" href="#0-1-knapsack-example">#</a> <a href="https://chienikao.github.io/2023/04/25/Algorithm/Backtracking/#0-1-knapsack-problem">0-1 Knapsack Example</a></h3><h3 id="best-first-search-with-branch-and-bound-pruning"><a class="anchor" href="#best-first-search-with-branch-and-bound-pruning">#</a> Best-First Search with Branch-and-Bound Pruning</h3><ul><li>In general, the breadth-first search strategy has <span class="red">no advantage over</span> a DFS (backtracking).</li><li>However, we can improve our search by using our bound to do more than just determine whether a node is promising.</li><li>After visiting all the children of a given node, we can look at all the <strong>promising, unexpanded nodes</strong> and <strong>expand beyond the one with the best bound</strong>.</li><li>In this way, we often <span class="red">arrive at an optimal solution more quickly</span> than if we simply proceeded blindly in a predetemined order.</li></ul><p><img data-src="https://imgur.com/ic0hY68.png" alt=""></p><div class="note info no-icon"><ol><li>Visit node (0, 0) (the root)<ul><li>Compute its  <code>profit = $0</code> ,  <code>weight = 0</code> ,  <code>bound = $115</code> .</li><li>Set  <code>maxprofit = 0</code> .</li></ul></li><li>Visit node (1, 1)<ul><li>Compute its  <code>profit = $40</code> ,  <code>weight = 2</code> ,  <code>bound = $115</code> .</li><li>Because  <code>weight = 2 &lt; W = 16</code>  and  <code>profit = $40 &gt; maxprofit = $0</code>  set  <code>maxprofit = $40</code> .</li></ul></li><li>Visit node (1, 2)<ul><li>Compute its  <code>profit = $0</code> ,  <code>weight = 0</code> ,  <code>bound = $82</code> .</li><li><code>maxprofit = $40</code> .</li></ul></li></ol><p><strong>Determine promising, unexpanded node with the greatest bound</strong>.</p><ul><li>Because node (1, 1) has a bound of $115 and node (1, 2) has a bound of $82, node (1, 1) is the promising, unexpanded node with the grearest bound.</li><li>We visit its children next.</li></ul><ol start="4"><li>Visit node (2, 1)<ul><li>Compute its  <code>profit = $70</code> ,  <code>weight = 7</code> ,  <code>bound = $115</code> .</li><li>Because  <code>weight = 7 &lt; W = 16</code>  and  <code>profit = $70 &gt; maxprofit = $40</code>  set  <code>maxprofit = $70</code> .</li></ul></li><li>Visit node (2, 2)<ul><li>Compute its  <code>profit = $40</code> ,  <code>weight = 2</code> ,  <code>bound = $98</code> .</li><li><code>maxprofit = $70</code> .</li></ul></li></ol><p><strong>Determine promising, unexpanded node with the greatest bound</strong>.</p><ul><li>That node is node (2, 1). We visit its children next.</li></ul><ol start="6"><li>Visit node (3, 1)<ul><li>Compute  <code>profit = $120</code> ,  <code>weight = 17</code> .</li><li>It is nonpromising because its  <code>weight = 17 &gt; W = 16</code> , set  <code>bound = 0</code></li></ul></li><li>Visit node (3, 2)<ul><li>Compute  <code>profit = $70</code> ,  <code>weight = 7</code> ,  <code>bound = $80</code> .</li><li><code>maxprofit = $70</code> .</li></ul></li></ol><p><strong>Determine promising, unexpanded node with the greatest bound</strong>.</p><ul><li>That node is node (2, 2). We visit its children next.</li></ul><ol start="8"><li>Visit node (3, 3)<ul><li>Compute its  <code>profit = $90</code> ,  <code>weight = 12</code> ,  <code>bound = $98</code> .</li><li>Because  <code>weight = 12 &lt; W = 16</code>  and  <code>profit = $90 &gt; maxprofit = $70</code> , set  <code>maxprofit = $90</code> .</li><li>At this point, nodes (1, 2) and (3, 2) become nonpromising because their  <code>bound</code> ,  <code>$82</code>  and  <code>$80</code>  are less than  <code>$90 = maxprofit</code> .</li></ul></li><li>Visit node (3, 4)<ul><li>Compute its  <code>profit = $40</code> ,  <code>weight = 2</code> ,  <code>bound = $50</code> .</li><li>It is nonpromising because its  <code>bound = $50 &lt; $90 = maxprofit</code> .</li></ul></li></ol><p><strong>Determine promising, unexpanded node with the greatest bound</strong>.</p><ul><li>That node is node (3, 3). We visit its children next.</li></ul><ol start="10"><li>Visit node (4, 1)<br>- Compute its  <code>profit = $100</code> ,  <code>weight = 17</code>  =&gt; nonpromising.</li><li>Visit node (4, 2)<br>- Compute its  <code>profit = $90</code> ,  <code>weight = 12</code> ,  <code>bound = $90</code>  =&gt; nonpromising.</li></ol><p>Because there are now no promising, unexpanded nodes, we are done.</p></div><h2 id="traveling-salesperson-problem"><a class="anchor" href="#traveling-salesperson-problem">#</a> Traveling Salesperson Problem</h2><p>Find the <strong>shortest path</strong> in a <strong>directed graph</strong> that starts at a given vertex, visits each vertex <span class="red">exactly once</span>, and ends up back at the starting vertex.</p><p>Such a tour is called an <em>optimal tour</em>.</p><h3 id="bb-approach"><a class="anchor" href="#bb-approach">#</a> B&amp;B Approach</h3><p><img data-src="https://imgur.com/q8dbjNb.png" alt=""></p><ul><li>A <strong>lower bound</strong> should be determined on the length of any tour that can be obtained by expanding beyond a given node. (In 0-1 Knapsack problem, we need an upper bound.)</li><li>A node is promising only if its  <code>bound &lt; current minimum tour length</code> .</li><li>In any tour, <strong>the length of the edge taken when leaving a vertex must be at least as great as the length of the shortest edge emanating from that vertex</strong>.</li><li>If the graph of a TSP is represented by <strong>Adjacency Matrix</strong>, then <strong>the lower bound on the cost of leaving vertex vi is the minimum of all the nonzero entries in row i</strong>.</li></ul><p><img data-src="https://imgur.com/oeww53M.png" alt=""></p><ul><li>Because a tour must leave every vertex exactly once, a lower bound on the length of a tour is the sum of these minimums.</li><li>Therefore, a lower bound on the length of a tour is  <code>4 + 7 + 4 + 2 + 4 = 21</code> .</li><li><strong>This is not to say that there is a tour with this length. Rather, it says that there can be <span class="red">no tour with a shorter length</span></strong>.</li></ul><p>If we have visited the node containing [1, 2], then the cost of getting from v1 to v2 is the weight on the edge from v1 to v2 (14), and any tour obtained by expanding beyond v2 has the following lower bounds.</p><p><img data-src="https://imgur.com/HpcVEOw.png" alt=""></p><ul><li><strong>For v1</strong>: lower bound is determined.</li><li><strong>For v2</strong>: edge to v1 should not be included.</li><li><strong>For other vertices</strong>: edge to v2 is not included.</li></ul><p>Now, a lower bound on the length of a tour is  <code>14 + 7 + 4 + 2 + 4 = 31</code></p>]]></content>
      
      
      <categories>
          
          <category> Algorithm </category>
          
      </categories>
      
      
        <tags>
            
            <tag> Algorithm </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>2215. Find the Difference of Two Arrays</title>
      <link href="/2023/05/03/Coding/leetcode/Easy/2215%20Find%20the%20Difference%20of%20Two%20Arrays/"/>
      <url>/2023/05/03/Coding/leetcode/Easy/2215%20Find%20the%20Difference%20of%20Two%20Arrays/</url>
      
        <content type="html"><![CDATA[<p>⭐️</p><h2 id="題目敘述"><a class="anchor" href="#題目敘述">#</a> <span class="exturl" data-url="aHR0cHM6Ly9sZWV0Y29kZS5jb20vcHJvYmxlbXMvZmluZC10aGUtZGlmZmVyZW5jZS1vZi10d28tYXJyYXlzLw==">題目敘述</span></h2><p>Given two <strong>0-indexed</strong> integer arrays  <code>nums1</code>  and  <code>nums2</code> , return a list  <code>answer</code>  of size  <code>2</code>  where:</p><ul><li><code>answer[0]</code>  <em>is a list of all <strong>distinct</strong> integers in  <code>nums1</code>  which are <strong>not</strong> present in  <code>nums2</code> </em>.</li><li><code>answer[1]</code>  is a list of all <strong>distinct</strong> integers in  <code>nums2</code>  which are <strong>not</strong> present in  <code>nums1</code> .</li></ul><p><strong>Note</strong> that the integers in the lists may be returned in <strong>any</strong> order.</p><h3 id="example-1"><a class="anchor" href="#example-1">#</a> Example 1</h3><blockquote><p><strong>Input:</strong> nums1 = [1,2,3], nums2 = [2,4,6]<br><strong>Output:</strong> [[1,3],[4,6]]<br><strong>Explanation:</strong><br>For nums1, nums1[1] = 2 is present at index 0 of nums2, whereas nums1[0] = 1 and nums1[2] = 3 are not present in nums2. Therefore, answer[0] = [1,3].<br>For nums2, nums2[0] = 2 is present at index 1 of nums1, whereas nums2[1] = 4 and nums2[2] = 6 are not present in nums2. Therefore, answer[1] = [4,6].</p></blockquote><h3 id="example-2"><a class="anchor" href="#example-2">#</a> Example 2</h3><blockquote><p><strong>Input:</strong> nums1 = [1,2,3,3], nums2 = [1,1,2,2]<br><strong>Output:</strong> [[3],[]]<br><strong>Explanation:</strong><br>For nums1, nums1[2] and nums1[3] are not present in nums2. Since nums1[2] == nums1[3], their value is only included once and answer[0] = [3].<br>Every integer in nums2 is present in nums1. Therefore, answer[1] = [].</p></blockquote><div class="tab" data-id="code" data-title="C++"><figure class="highlight cpp"><figcaption data-lang="C++"></figcaption><table><tr><td data-num="1"></td><td><pre><span class="token keyword">class</span> <span class="token class-name">Solution</span> <span class="token punctuation">&#123;</span></pre></td></tr><tr><td data-num="2"></td><td><pre><span class="token keyword">public</span><span class="token operator">:</span></pre></td></tr><tr><td data-num="3"></td><td><pre>    vector<span class="token operator">&lt;</span>vector<span class="token operator">&lt;</span><span class="token keyword">int</span><span class="token operator">>></span> <span class="token function">findDifference</span><span class="token punctuation">(</span>vector<span class="token operator">&lt;</span><span class="token keyword">int</span><span class="token operator">></span><span class="token operator">&amp;</span> nums1<span class="token punctuation">,</span> vector<span class="token operator">&lt;</span><span class="token keyword">int</span><span class="token operator">></span><span class="token operator">&amp;</span> nums2<span class="token punctuation">)</span> <span class="token punctuation">&#123;</span></pre></td></tr><tr><td data-num="4"></td><td><pre>        vector<span class="token operator">&lt;</span>vector<span class="token operator">&lt;</span><span class="token keyword">int</span><span class="token operator">>></span> res<span class="token punctuation">;</span></pre></td></tr><tr><td data-num="5"></td><td><pre>        vector<span class="token operator">&lt;</span><span class="token keyword">int</span><span class="token operator">></span> tmp<span class="token punctuation">;</span></pre></td></tr><tr><td data-num="6"></td><td><pre>        map<span class="token operator">&lt;</span><span class="token keyword">int</span><span class="token punctuation">,</span> <span class="token keyword">int</span><span class="token operator">></span> mp1<span class="token punctuation">,</span> mp2<span class="token punctuation">;</span></pre></td></tr><tr><td data-num="7"></td><td><pre>        <span class="token keyword">for</span> <span class="token punctuation">(</span><span class="token keyword">int</span> n <span class="token operator">:</span> nums1<span class="token punctuation">)</span> mp1<span class="token punctuation">[</span>n<span class="token punctuation">]</span> <span class="token operator">=</span> <span class="token number">1</span><span class="token punctuation">;</span></pre></td></tr><tr><td data-num="8"></td><td><pre>        <span class="token keyword">for</span> <span class="token punctuation">(</span><span class="token keyword">int</span> n <span class="token operator">:</span> nums2<span class="token punctuation">)</span> mp2<span class="token punctuation">[</span>n<span class="token punctuation">]</span> <span class="token operator">=</span> <span class="token number">1</span><span class="token punctuation">;</span></pre></td></tr><tr><td data-num="9"></td><td><pre></pre></td></tr><tr><td data-num="10"></td><td><pre>        <span class="token keyword">for</span> <span class="token punctuation">(</span><span class="token keyword">auto</span> m <span class="token operator">:</span> mp1<span class="token punctuation">)</span> <span class="token punctuation">&#123;</span></pre></td></tr><tr><td data-num="11"></td><td><pre>            <span class="token keyword">if</span> <span class="token punctuation">(</span>mp2<span class="token punctuation">.</span><span class="token function">count</span><span class="token punctuation">(</span>m<span class="token punctuation">.</span>first<span class="token punctuation">)</span> <span class="token operator">==</span> <span class="token number">0</span><span class="token punctuation">)</span> tmp<span class="token punctuation">.</span><span class="token function">push_back</span><span class="token punctuation">(</span>m<span class="token punctuation">.</span>first<span class="token punctuation">)</span><span class="token punctuation">;</span></pre></td></tr><tr><td data-num="12"></td><td><pre>        <span class="token punctuation">&#125;</span></pre></td></tr><tr><td data-num="13"></td><td><pre>        res<span class="token punctuation">.</span><span class="token function">push_back</span><span class="token punctuation">(</span>tmp<span class="token punctuation">)</span><span class="token punctuation">;</span></pre></td></tr><tr><td data-num="14"></td><td><pre>        tmp<span class="token punctuation">.</span><span class="token function">clear</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span></pre></td></tr><tr><td data-num="15"></td><td><pre>        <span class="token keyword">for</span> <span class="token punctuation">(</span><span class="token keyword">auto</span> m <span class="token operator">:</span> mp2<span class="token punctuation">)</span> <span class="token punctuation">&#123;</span></pre></td></tr><tr><td data-num="16"></td><td><pre>            <span class="token keyword">if</span> <span class="token punctuation">(</span>mp1<span class="token punctuation">.</span><span class="token function">count</span><span class="token punctuation">(</span>m<span class="token punctuation">.</span>first<span class="token punctuation">)</span> <span class="token operator">==</span> <span class="token number">0</span><span class="token punctuation">)</span> tmp<span class="token punctuation">.</span><span class="token function">push_back</span><span class="token punctuation">(</span>m<span class="token punctuation">.</span>first<span class="token punctuation">)</span><span class="token punctuation">;</span></pre></td></tr><tr><td data-num="17"></td><td><pre>        <span class="token punctuation">&#125;</span></pre></td></tr><tr><td data-num="18"></td><td><pre>        res<span class="token punctuation">.</span><span class="token function">push_back</span><span class="token punctuation">(</span>tmp<span class="token punctuation">)</span><span class="token punctuation">;</span></pre></td></tr><tr><td data-num="19"></td><td><pre>        <span class="token keyword">return</span> res<span class="token punctuation">;</span></pre></td></tr><tr><td data-num="20"></td><td><pre>    <span class="token punctuation">&#125;</span></pre></td></tr><tr><td data-num="21"></td><td><pre><span class="token punctuation">&#125;</span><span class="token punctuation">;</span></pre></td></tr></table></figure></div><div class="tab" data-id="code" data-title="Java"><figure class="highlight java"><figcaption data-lang="java"></figcaption><table><tr><td data-num="1"></td><td><pre><span class="token keyword">import</span> <span class="token import"><span class="token namespace">java<span class="token punctuation">.</span>util<span class="token punctuation">.</span></span><span class="token class-name">ArrayList</span></span><span class="token punctuation">;</span></pre></td></tr><tr><td data-num="2"></td><td><pre><span class="token keyword">import</span> <span class="token import"><span class="token namespace">java<span class="token punctuation">.</span>util<span class="token punctuation">.</span></span><span class="token class-name">List</span></span><span class="token punctuation">;</span></pre></td></tr><tr><td data-num="3"></td><td><pre></pre></td></tr><tr><td data-num="4"></td><td><pre><span class="token keyword">class</span> <span class="token class-name">Solution</span> <span class="token punctuation">&#123;</span></pre></td></tr><tr><td data-num="5"></td><td><pre>    <span class="token keyword">public</span> <span class="token class-name">List</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token class-name">List</span><span class="token punctuation">&lt;</span><span class="token class-name">Integer</span><span class="token punctuation">></span><span class="token punctuation">></span></span> <span class="token function">findDifference</span><span class="token punctuation">(</span><span class="token keyword">int</span><span class="token punctuation">[</span><span class="token punctuation">]</span> nums1<span class="token punctuation">,</span> <span class="token keyword">int</span><span class="token punctuation">[</span><span class="token punctuation">]</span> nums2<span class="token punctuation">)</span> <span class="token punctuation">&#123;</span></pre></td></tr><tr><td data-num="6"></td><td><pre>        <span class="token class-name">List</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token class-name">List</span><span class="token punctuation">&lt;</span><span class="token class-name">Integer</span><span class="token punctuation">></span><span class="token punctuation">></span></span> ans <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">ArrayList</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token punctuation">></span></span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span></pre></td></tr><tr><td data-num="7"></td><td><pre>        <span class="token class-name">List</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token class-name">Integer</span><span class="token punctuation">></span></span> map1 <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">ArrayList</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token punctuation">></span></span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">,</span> map2 <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">ArrayList</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token punctuation">></span></span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span></pre></td></tr><tr><td data-num="8"></td><td><pre>        <span class="token keyword">for</span><span class="token punctuation">(</span><span class="token keyword">int</span> n <span class="token operator">:</span> nums1<span class="token punctuation">)</span> map1<span class="token punctuation">.</span><span class="token function">add</span><span class="token punctuation">(</span>n<span class="token punctuation">)</span><span class="token punctuation">;</span></pre></td></tr><tr><td data-num="9"></td><td><pre>        <span class="token keyword">for</span><span class="token punctuation">(</span><span class="token keyword">int</span> n <span class="token operator">:</span> nums2<span class="token punctuation">)</span> map2<span class="token punctuation">.</span><span class="token function">add</span><span class="token punctuation">(</span>n<span class="token punctuation">)</span><span class="token punctuation">;</span></pre></td></tr><tr><td data-num="10"></td><td><pre></pre></td></tr><tr><td data-num="11"></td><td><pre>        <span class="token class-name">List</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token class-name">Integer</span><span class="token punctuation">></span></span> temp1 <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">ArrayList</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token punctuation">></span></span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span></pre></td></tr><tr><td data-num="12"></td><td><pre>        <span class="token keyword">for</span><span class="token punctuation">(</span><span class="token keyword">int</span> n <span class="token operator">:</span> nums1<span class="token punctuation">)</span><span class="token punctuation">&#123;</span></pre></td></tr><tr><td data-num="13"></td><td><pre>            <span class="token keyword">if</span><span class="token punctuation">(</span><span class="token operator">!</span>map2<span class="token punctuation">.</span><span class="token function">contains</span><span class="token punctuation">(</span>n<span class="token punctuation">)</span> <span class="token operator">&amp;&amp;</span> <span class="token operator">!</span>temp1<span class="token punctuation">.</span><span class="token function">contains</span><span class="token punctuation">(</span>n<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">&#123;</span></pre></td></tr><tr><td data-num="14"></td><td><pre>                temp1<span class="token punctuation">.</span><span class="token function">add</span><span class="token punctuation">(</span>n<span class="token punctuation">)</span><span class="token punctuation">;</span></pre></td></tr><tr><td data-num="15"></td><td><pre>            <span class="token punctuation">&#125;</span></pre></td></tr><tr><td data-num="16"></td><td><pre>        <span class="token punctuation">&#125;</span></pre></td></tr><tr><td data-num="17"></td><td><pre>        ans<span class="token punctuation">.</span><span class="token function">add</span><span class="token punctuation">(</span>temp1<span class="token punctuation">)</span><span class="token punctuation">;</span></pre></td></tr><tr><td data-num="18"></td><td><pre></pre></td></tr><tr><td data-num="19"></td><td><pre>        <span class="token class-name">List</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token class-name">Integer</span><span class="token punctuation">></span></span> temp2 <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">ArrayList</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token punctuation">></span></span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span></pre></td></tr><tr><td data-num="20"></td><td><pre>        <span class="token keyword">for</span><span class="token punctuation">(</span><span class="token keyword">int</span> n <span class="token operator">:</span> nums2<span class="token punctuation">)</span><span class="token punctuation">&#123;</span></pre></td></tr><tr><td data-num="21"></td><td><pre>            <span class="token keyword">if</span><span class="token punctuation">(</span><span class="token operator">!</span>map1<span class="token punctuation">.</span><span class="token function">contains</span><span class="token punctuation">(</span>n<span class="token punctuation">)</span> <span class="token operator">&amp;&amp;</span> <span class="token operator">!</span>temp2<span class="token punctuation">.</span><span class="token function">contains</span><span class="token punctuation">(</span>n<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">&#123;</span></pre></td></tr><tr><td data-num="22"></td><td><pre>                temp2<span class="token punctuation">.</span><span class="token function">add</span><span class="token punctuation">(</span>n<span class="token punctuation">)</span><span class="token punctuation">;</span></pre></td></tr><tr><td data-num="23"></td><td><pre>            <span class="token punctuation">&#125;</span></pre></td></tr><tr><td data-num="24"></td><td><pre>        <span class="token punctuation">&#125;</span></pre></td></tr><tr><td data-num="25"></td><td><pre>        ans<span class="token punctuation">.</span><span class="token function">add</span><span class="token punctuation">(</span>temp2<span class="token punctuation">)</span><span class="token punctuation">;</span></pre></td></tr><tr><td data-num="26"></td><td><pre></pre></td></tr><tr><td data-num="27"></td><td><pre>        <span class="token keyword">return</span> ans<span class="token punctuation">;</span></pre></td></tr><tr><td data-num="28"></td><td><pre>    <span class="token punctuation">&#125;</span></pre></td></tr><tr><td data-num="29"></td><td><pre><span class="token punctuation">&#125;</span></pre></td></tr></table></figure></div><div class="tab" data-id="code" data-title="Python"><figure class="highlight python"><figcaption data-lang="python"></figcaption><table><tr><td data-num="1"></td><td><pre><span class="token keyword">class</span> <span class="token class-name">Solution</span><span class="token punctuation">:</span></pre></td></tr><tr><td data-num="2"></td><td><pre>    <span class="token keyword">def</span> <span class="token function">findDifference</span><span class="token punctuation">(</span>self<span class="token punctuation">,</span> nums1<span class="token punctuation">,</span> nums2<span class="token punctuation">)</span><span class="token punctuation">:</span>    </pre></td></tr><tr><td data-num="3"></td><td><pre>        <span class="token keyword">return</span> <span class="token punctuation">[</span><span class="token builtin">list</span><span class="token punctuation">(</span><span class="token builtin">set</span><span class="token punctuation">(</span>nums1<span class="token punctuation">)</span> <span class="token operator">-</span> <span class="token builtin">set</span><span class="token punctuation">(</span>nums2<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">,</span> <span class="token builtin">list</span><span class="token punctuation">(</span><span class="token builtin">set</span><span class="token punctuation">(</span>nums2<span class="token punctuation">)</span> <span class="token operator">-</span> <span class="token builtin">set</span><span class="token punctuation">(</span>nums1<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">]</span></pre></td></tr></table></figure></div>]]></content>
      
      
      <categories>
          
          <category> Coding </category>
          
          <category> Leetcode </category>
          
          <category> Easy </category>
          
      </categories>
      
      
        <tags>
            
            <tag> Leetcode </tag>
            
            <tag> Easy </tag>
            
            <tag> Array </tag>
            
            <tag> Hash Table </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>1822. Sign of the Product of an Array</title>
      <link href="/2023/05/02/Coding/leetcode/Easy/1822%20Sign%20of%20the%20Product%20of%20an%20Array/"/>
      <url>/2023/05/02/Coding/leetcode/Easy/1822%20Sign%20of%20the%20Product%20of%20an%20Array/</url>
      
        <content type="html"><![CDATA[<p>⭐️</p><h2 id="題目敘述"><a class="anchor" href="#題目敘述">#</a> <span class="exturl" data-url="aHR0cHM6Ly9sZWV0Y29kZS5jb20vcHJvYmxlbXMvc2lnbi1vZi10aGUtcHJvZHVjdC1vZi1hbi1hcnJheS8=">題目敘述</span></h2><p>There is a function  <code>signFunc(x)</code>  that returns:</p><ul><li><code>1</code>  if  <code>x</code>  is positive.</li><li><code>-1</code>  if  <code>x</code>  is negative.</li><li><code>0</code>  if  <code>x</code>  is equal to  <code>0</code> .</li></ul><p>You are given an integer array  <code>nums</code> . Let  <code>product</code>  be the product of all values in the array  <code>nums</code> .</p><p>Return  <code>signFunc(product)</code> .</p><h3 id="example-1"><a class="anchor" href="#example-1">#</a> Example 1</h3><blockquote><p><strong>Input</strong>: nums = [-1,-2,-3,-4,3,2,1]<br><strong>Output</strong>: 1<br><strong>Explanation</strong>: The product of all values in the array is 144, and signFunc(144) = 1</p></blockquote><h3 id="example-2"><a class="anchor" href="#example-2">#</a> Example 2</h3><blockquote><p><strong>Input</strong>: nums = [1,5,0,2,-3]<br><strong>Output</strong>: 0<br><strong>Explanation</strong>: The product of all values in the array is 0, and signFunc(0) = 0</p></blockquote><h3 id="example-3"><a class="anchor" href="#example-3">#</a> Example 3</h3><blockquote><p><strong>Input</strong>: nums = [-1,1,-1,1,-1]<br><strong>Output</strong>: -1<br><strong>Explanation</strong>: The product of all values in the array is -1, and signFunc(-1) = -1</p></blockquote><div class="tab" data-id="code" data-title="C++"><figure class="highlight cpp"><figcaption data-lang="C++"></figcaption><table><tr><td data-num="1"></td><td><pre><span class="token keyword">class</span> <span class="token class-name">Solution</span> <span class="token punctuation">&#123;</span></pre></td></tr><tr><td data-num="2"></td><td><pre><span class="token keyword">public</span><span class="token operator">:</span></pre></td></tr><tr><td data-num="3"></td><td><pre>    <span class="token keyword">int</span> <span class="token function">arraySign</span><span class="token punctuation">(</span>vector<span class="token operator">&lt;</span><span class="token keyword">int</span><span class="token operator">></span><span class="token operator">&amp;</span> nums<span class="token punctuation">)</span> <span class="token punctuation">&#123;</span></pre></td></tr><tr><td data-num="4"></td><td><pre>        <span class="token keyword">int</span> sign <span class="token operator">=</span> <span class="token number">1</span><span class="token punctuation">;</span></pre></td></tr><tr><td data-num="5"></td><td><pre>        <span class="token keyword">for</span> <span class="token punctuation">(</span><span class="token keyword">int</span> n <span class="token operator">:</span> nums<span class="token punctuation">)</span> <span class="token punctuation">&#123;</span></pre></td></tr><tr><td data-num="6"></td><td><pre>            <span class="token keyword">if</span> <span class="token punctuation">(</span>n <span class="token operator">==</span> <span class="token number">0</span><span class="token punctuation">)</span> <span class="token keyword">return</span> <span class="token number">0</span><span class="token punctuation">;</span></pre></td></tr><tr><td data-num="7"></td><td><pre>            <span class="token keyword">if</span> <span class="token punctuation">(</span>n <span class="token operator">&lt;</span> <span class="token number">0</span><span class="token punctuation">)</span> sign <span class="token operator">*=</span> <span class="token operator">-</span><span class="token number">1</span><span class="token punctuation">;</span></pre></td></tr><tr><td data-num="8"></td><td><pre>        <span class="token punctuation">&#125;</span></pre></td></tr><tr><td data-num="9"></td><td><pre>        <span class="token keyword">if</span> <span class="token punctuation">(</span>sign <span class="token operator">></span> <span class="token number">0</span><span class="token punctuation">)</span> <span class="token keyword">return</span> <span class="token number">1</span><span class="token punctuation">;</span></pre></td></tr><tr><td data-num="10"></td><td><pre>        <span class="token keyword">else</span> <span class="token keyword">return</span> <span class="token operator">-</span><span class="token number">1</span><span class="token punctuation">;</span></pre></td></tr><tr><td data-num="11"></td><td><pre>    <span class="token punctuation">&#125;</span></pre></td></tr><tr><td data-num="12"></td><td><pre><span class="token punctuation">&#125;</span><span class="token punctuation">;</span></pre></td></tr></table></figure></div><div class="tab" data-id="code" data-title="Java"><figure class="highlight java"><figcaption data-lang="java"></figcaption><table><tr><td data-num="1"></td><td><pre><span class="token keyword">class</span> <span class="token class-name">Solution</span> <span class="token punctuation">&#123;</span></pre></td></tr><tr><td data-num="2"></td><td><pre>    <span class="token keyword">public</span> <span class="token keyword">int</span> <span class="token function">arraySign</span><span class="token punctuation">(</span><span class="token keyword">int</span><span class="token punctuation">[</span><span class="token punctuation">]</span> nums<span class="token punctuation">)</span> <span class="token punctuation">&#123;</span></pre></td></tr><tr><td data-num="3"></td><td><pre>        <span class="token keyword">int</span> sign <span class="token operator">=</span> <span class="token number">1</span><span class="token punctuation">;</span></pre></td></tr><tr><td data-num="4"></td><td><pre>        <span class="token keyword">for</span> <span class="token punctuation">(</span><span class="token keyword">int</span> n <span class="token operator">:</span> nums<span class="token punctuation">)</span> <span class="token punctuation">&#123;</span></pre></td></tr><tr><td data-num="5"></td><td><pre>            <span class="token keyword">if</span> <span class="token punctuation">(</span>n <span class="token operator">==</span> <span class="token number">0</span><span class="token punctuation">)</span> <span class="token keyword">return</span> <span class="token number">0</span><span class="token punctuation">;</span></pre></td></tr><tr><td data-num="6"></td><td><pre>            <span class="token keyword">if</span> <span class="token punctuation">(</span>n <span class="token operator">&lt;</span> <span class="token number">0</span><span class="token punctuation">)</span> sign <span class="token operator">*=</span> <span class="token operator">-</span><span class="token number">1</span><span class="token punctuation">;</span></pre></td></tr><tr><td data-num="7"></td><td><pre>        <span class="token punctuation">&#125;</span></pre></td></tr><tr><td data-num="8"></td><td><pre>        <span class="token keyword">return</span> sign <span class="token operator">></span> <span class="token number">0</span> <span class="token operator">?</span> <span class="token number">1</span> <span class="token operator">:</span> <span class="token operator">-</span><span class="token number">1</span><span class="token punctuation">;</span></pre></td></tr><tr><td data-num="9"></td><td><pre>    <span class="token punctuation">&#125;</span></pre></td></tr><tr><td data-num="10"></td><td><pre><span class="token punctuation">&#125;</span></pre></td></tr></table></figure></div><div class="tab" data-id="code" data-title="Python"><figure class="highlight python"><figcaption data-lang="python"></figcaption><table><tr><td data-num="1"></td><td><pre><span class="token keyword">class</span> <span class="token class-name">Solution</span><span class="token punctuation">:</span></pre></td></tr><tr><td data-num="2"></td><td><pre>    <span class="token keyword">def</span> <span class="token function">arraySign</span><span class="token punctuation">(</span>self<span class="token punctuation">,</span> nums<span class="token punctuation">:</span> List<span class="token punctuation">[</span><span class="token builtin">int</span><span class="token punctuation">]</span><span class="token punctuation">)</span> <span class="token operator">-</span><span class="token operator">></span> <span class="token builtin">int</span><span class="token punctuation">:</span></pre></td></tr><tr><td data-num="3"></td><td><pre>        sign <span class="token operator">=</span> <span class="token number">1</span></pre></td></tr><tr><td data-num="4"></td><td><pre>        <span class="token keyword">for</span> n <span class="token keyword">in</span> nums<span class="token punctuation">:</span></pre></td></tr><tr><td data-num="5"></td><td><pre>            <span class="token keyword">if</span> n <span class="token operator">==</span> <span class="token number">0</span><span class="token punctuation">:</span> <span class="token keyword">return</span> <span class="token number">0</span></pre></td></tr><tr><td data-num="6"></td><td><pre>            <span class="token keyword">if</span> n <span class="token operator">&lt;</span> <span class="token number">0</span><span class="token punctuation">:</span> sign <span class="token operator">*=</span> <span class="token operator">-</span><span class="token number">1</span></pre></td></tr><tr><td data-num="7"></td><td><pre>        <span class="token keyword">return</span> <span class="token number">1</span> <span class="token keyword">if</span> sign <span class="token operator">></span> <span class="token number">0</span> <span class="token keyword">else</span> <span class="token operator">-</span><span class="token number">1</span></pre></td></tr></table></figure></div>]]></content>
      
      
      <categories>
          
          <category> Coding </category>
          
          <category> Leetcode </category>
          
          <category> Easy </category>
          
      </categories>
      
      
        <tags>
            
            <tag> Leetcode </tag>
            
            <tag> Easy </tag>
            
            <tag> Array </tag>
            
            <tag> Math </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>1491. Average Salary Excluding the Minimum and Maximum Salary</title>
      <link href="/2023/05/01/Coding/leetcode/Easy/1491%20Average%20Salary%20Excluding%20the%20Minimum%20and%20Maximum%20Salary/"/>
      <url>/2023/05/01/Coding/leetcode/Easy/1491%20Average%20Salary%20Excluding%20the%20Minimum%20and%20Maximum%20Salary/</url>
      
        <content type="html"><![CDATA[<p>⭐️</p><h2 id="題目敘述"><a class="anchor" href="#題目敘述">#</a> <span class="exturl" data-url="aHR0cHM6Ly9sZWV0Y29kZS5jb20vcHJvYmxlbXMvYXZlcmFnZS1zYWxhcnktZXhjbHVkaW5nLXRoZS1taW5pbXVtLWFuZC1tYXhpbXVtLXNhbGFyeS8=">題目敘述</span></h2><p>You are given an array of <strong>unique</strong> integers  <code>salary</code>  where  <code>salary[i]</code>  is the salary of the  <code>ith</code>  employee.</p><p>Return <em>the average salary of employees excluding the minimum and maximum salary</em>. Answers within  <code>10-5</code>  of the actual answer will be accepted.</p><h3 id="example-1"><a class="anchor" href="#example-1">#</a> Example 1</h3><blockquote><p><strong>Input:</strong> salary = [4000,3000,1000,2000]<br><strong>Output:</strong> 2500.00000<br><strong>Explanation:</strong> Minimum salary and maximum salary are 1000 and 4000 respectively.<br>Average salary excluding minimum and maximum salary is (2000+3000) / 2 = 2500</p></blockquote><h3 id="example-2"><a class="anchor" href="#example-2">#</a> Example 2</h3><blockquote><p><strong>Input:</strong> salary = [1000,2000,3000]<br><strong>Output:</strong> 2000.00000<br><strong>Explanation:</strong> Minimum salary and maximum salary are 1000 and 3000 respectively.<br>Average salary excluding minimum and maximum salary is (2000) / 1 = 2000</p></blockquote><h2 id="solution"><a class="anchor" href="#solution">#</a> Solution</h2><div class="tab" data-id="code" data-title="C++"><figure class="highlight cpp"><figcaption data-lang="C++"></figcaption><table><tr><td data-num="1"></td><td><pre><span class="token keyword">class</span> <span class="token class-name">Solution</span> <span class="token punctuation">&#123;</span></pre></td></tr><tr><td data-num="2"></td><td><pre><span class="token keyword">public</span><span class="token operator">:</span></pre></td></tr><tr><td data-num="3"></td><td><pre>    <span class="token keyword">double</span> <span class="token function">average</span><span class="token punctuation">(</span>vector<span class="token operator">&lt;</span><span class="token keyword">int</span><span class="token operator">></span><span class="token operator">&amp;</span> salary<span class="token punctuation">)</span> <span class="token punctuation">&#123;</span></pre></td></tr><tr><td data-num="4"></td><td><pre>        <span class="token keyword">int</span> mn <span class="token operator">=</span> salary<span class="token punctuation">[</span><span class="token number">0</span><span class="token punctuation">]</span><span class="token punctuation">,</span> mx <span class="token operator">=</span> salary<span class="token punctuation">[</span><span class="token number">0</span><span class="token punctuation">]</span><span class="token punctuation">;</span></pre></td></tr><tr><td data-num="5"></td><td><pre>        <span class="token keyword">double</span> res <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span></pre></td></tr><tr><td data-num="6"></td><td><pre>        <span class="token keyword">for</span> <span class="token punctuation">(</span><span class="token keyword">int</span> s <span class="token operator">:</span> salary<span class="token punctuation">)</span> <span class="token punctuation">&#123;</span></pre></td></tr><tr><td data-num="7"></td><td><pre>            res <span class="token operator">+=</span> s<span class="token punctuation">;</span></pre></td></tr><tr><td data-num="8"></td><td><pre>            mn <span class="token operator">=</span> <span class="token function">min</span><span class="token punctuation">(</span>mn<span class="token punctuation">,</span> s<span class="token punctuation">)</span><span class="token punctuation">;</span></pre></td></tr><tr><td data-num="9"></td><td><pre>            mx <span class="token operator">=</span> <span class="token function">max</span><span class="token punctuation">(</span>mx<span class="token punctuation">,</span> s<span class="token punctuation">)</span><span class="token punctuation">;</span></pre></td></tr><tr><td data-num="10"></td><td><pre>        <span class="token punctuation">&#125;</span></pre></td></tr><tr><td data-num="11"></td><td><pre>        res <span class="token operator">-=</span> <span class="token punctuation">(</span>mn <span class="token operator">+</span> mx<span class="token punctuation">)</span><span class="token punctuation">;</span></pre></td></tr><tr><td data-num="12"></td><td><pre>        <span class="token keyword">return</span> res <span class="token operator">/</span> <span class="token punctuation">(</span>salary<span class="token punctuation">.</span><span class="token function">size</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token operator">-</span><span class="token number">2</span><span class="token punctuation">)</span><span class="token punctuation">;</span></pre></td></tr><tr><td data-num="13"></td><td><pre>    <span class="token punctuation">&#125;</span></pre></td></tr><tr><td data-num="14"></td><td><pre><span class="token punctuation">&#125;</span><span class="token punctuation">;</span></pre></td></tr></table></figure></div><div class="tab" data-id="code" data-title="Java"><figure class="highlight java"><figcaption data-lang="java"></figcaption><table><tr><td data-num="1"></td><td><pre><span class="token keyword">import</span> <span class="token import"><span class="token namespace">java<span class="token punctuation">.</span>util<span class="token punctuation">.</span></span><span class="token class-name">Arrays</span></span><span class="token punctuation">;</span></pre></td></tr><tr><td data-num="2"></td><td><pre></pre></td></tr><tr><td data-num="3"></td><td><pre><span class="token keyword">class</span> <span class="token class-name">Solution</span> <span class="token punctuation">&#123;</span></pre></td></tr><tr><td data-num="4"></td><td><pre>    <span class="token keyword">public</span> <span class="token keyword">double</span> <span class="token function">average</span><span class="token punctuation">(</span><span class="token keyword">int</span><span class="token punctuation">[</span><span class="token punctuation">]</span> salary<span class="token punctuation">)</span> <span class="token punctuation">&#123;</span></pre></td></tr><tr><td data-num="5"></td><td><pre>        <span class="token class-name">Arrays</span><span class="token punctuation">.</span><span class="token function">sort</span><span class="token punctuation">(</span>salary<span class="token punctuation">)</span><span class="token punctuation">;</span></pre></td></tr><tr><td data-num="6"></td><td><pre>        <span class="token keyword">long</span> sum <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span></pre></td></tr><tr><td data-num="7"></td><td><pre>        <span class="token keyword">for</span><span class="token punctuation">(</span><span class="token keyword">int</span> i <span class="token operator">=</span> <span class="token number">1</span><span class="token punctuation">;</span> i <span class="token operator">&lt;</span> salary<span class="token punctuation">.</span>length <span class="token operator">-</span> <span class="token number">1</span><span class="token punctuation">;</span> i<span class="token operator">++</span><span class="token punctuation">)</span><span class="token punctuation">&#123;</span></pre></td></tr><tr><td data-num="8"></td><td><pre>            sum <span class="token operator">+=</span> salary<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">;</span></pre></td></tr><tr><td data-num="9"></td><td><pre>        <span class="token punctuation">&#125;</span></pre></td></tr><tr><td data-num="10"></td><td><pre>        </pre></td></tr><tr><td data-num="11"></td><td><pre>        <span class="token keyword">return</span> sum <span class="token operator">/</span> <span class="token punctuation">(</span>salary<span class="token punctuation">.</span>length <span class="token operator">-</span> <span class="token number">2</span> <span class="token operator">*</span> <span class="token number">1.0</span><span class="token punctuation">)</span><span class="token punctuation">;</span></pre></td></tr><tr><td data-num="12"></td><td><pre>    <span class="token punctuation">&#125;</span></pre></td></tr><tr><td data-num="13"></td><td><pre><span class="token punctuation">&#125;</span></pre></td></tr></table></figure></div><div class="tab" data-id="code" data-title="Python"><figure class="highlight python"><figcaption data-lang="python"></figcaption><table><tr><td data-num="1"></td><td><pre><span class="token keyword">class</span> <span class="token class-name">Solution</span><span class="token punctuation">:</span></pre></td></tr><tr><td data-num="2"></td><td><pre>    <span class="token keyword">def</span> <span class="token function">average</span><span class="token punctuation">(</span>self<span class="token punctuation">,</span> salary<span class="token punctuation">:</span> List<span class="token punctuation">[</span><span class="token builtin">int</span><span class="token punctuation">]</span><span class="token punctuation">)</span> <span class="token operator">-</span><span class="token operator">></span> <span class="token builtin">float</span><span class="token punctuation">:</span></pre></td></tr><tr><td data-num="3"></td><td><pre>        min_salary <span class="token operator">=</span> <span class="token builtin">min</span><span class="token punctuation">(</span>salary<span class="token punctuation">)</span></pre></td></tr><tr><td data-num="4"></td><td><pre>        max_salary <span class="token operator">=</span> <span class="token builtin">max</span><span class="token punctuation">(</span>salary<span class="token punctuation">)</span></pre></td></tr><tr><td data-num="5"></td><td><pre>        total_salary <span class="token operator">=</span> <span class="token builtin">sum</span><span class="token punctuation">(</span>salary<span class="token punctuation">)</span> <span class="token operator">-</span> min_salary <span class="token operator">-</span> max_salary</pre></td></tr><tr><td data-num="6"></td><td><pre>        num_employees <span class="token operator">=</span> <span class="token builtin">len</span><span class="token punctuation">(</span>salary<span class="token punctuation">)</span> <span class="token operator">-</span> <span class="token number">2</span></pre></td></tr><tr><td data-num="7"></td><td><pre>        <span class="token keyword">return</span> total_salary <span class="token operator">/</span> num_employees</pre></td></tr></table></figure></div>]]></content>
      
      
      <categories>
          
          <category> Coding </category>
          
          <category> Leetcode </category>
          
          <category> Easy </category>
          
      </categories>
      
      
        <tags>
            
            <tag> Sorting </tag>
            
            <tag> Leetcode </tag>
            
            <tag> Easy </tag>
            
            <tag> Array </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>1579. Remove Max Number of Edges to Keep Graph Fully Traversable</title>
      <link href="/2023/04/30/Coding/leetcode/Hard/1579%20Remove%20Max%20Number%20of%20Edges%20to%20Keep%20Graph%20Fully%20Traversable/"/>
      <url>/2023/04/30/Coding/leetcode/Hard/1579%20Remove%20Max%20Number%20of%20Edges%20to%20Keep%20Graph%20Fully%20Traversable/</url>
      
        <content type="html"><![CDATA[<p>⭐️⭐️⭐️</p><h2 id="題目敘述"><a class="anchor" href="#題目敘述">#</a> <span class="exturl" data-url="aHR0cHM6Ly9sZWV0Y29kZS5jb20vcHJvYmxlbXMvcmVtb3ZlLW1heC1udW1iZXItb2YtZWRnZXMtdG8ta2VlcC1ncmFwaC1mdWxseS10cmF2ZXJzYWJsZS8=">題目敘述</span></h2><p>Alice and Bob have an undirected graph of  <code>n</code>  nodes and three types of edges:</p><ul><li>Type 1: Can be traversed by Alice only.</li><li>Type 2: Can be traversed by Bob only.</li><li>Type 3: Can be traversed by both Alice and Bob.</li></ul><p>Given an array  <code>edges</code>  where  <code>edges[i] = [typei, ui, vi]</code>  represents a bidirectional edge of type  <code>typei</code>  between nodes  <code>ui</code>  and  <code>vi</code> , find the maximum number of edges you can remove so that after removing the edges, the graph can still be fully traversed by both Alice and Bob. The graph is fully traversed by Alice and Bob if starting from any node, they can reach all other nodes.</p><p>Return <em>the maximum number of edges you can remove, or return  <code>-1</code>  if Alice and Bob cannot fully traverse the graph</em>.</p><h3 id="example-1"><a class="anchor" href="#example-1">#</a> Example 1</h3><p><img data-src="https://i.imgur.com/2SsBc9T.png" alt=""></p><blockquote><p><strong>Input</strong>: n = 4, edges = [[3,1,2],[3,2,3],[1,1,3],[1,2,4],[1,1,2],[2,3,4]]<br><strong>Output</strong>: 2<br><strong>Explanation</strong>: If we remove the 2 edges [1,1,2] and [1,1,3]. The graph will still be fully traversable by Alice and Bob. Removing any additional edge will not make it so. So the maximum number of edges we can remove is 2.</p></blockquote><h3 id="example-2"><a class="anchor" href="#example-2">#</a> Example 2</h3><p><img data-src="https://i.imgur.com/sNylQd6.png" alt=""></p><blockquote><p><strong>Input</strong>: n = 4, edges = [[3,1,2],[3,2,3],[1,1,4],[2,1,4]]<br><strong>Output</strong>: 0<br><strong>Explanation</strong>: Notice that removing any edge will not make the graph fully traversable by Alice and Bob.</p></blockquote><h3 id="example-3"><a class="anchor" href="#example-3">#</a> Example 3</h3><p><img data-src="https://i.imgur.com/jYOpe7F.png" alt=""></p><blockquote><p><strong>Input</strong>: n = 4, edges = [[3,2,3],[1,1,2],[2,3,4]]<br><strong>Output</strong>: -1<br><strong>Explanation</strong>: In the current graph, Alice cannot reach node 4 from the other nodes. Likewise, Bob cannot reach 1. Therefore it’s impossible to make the graph fully traversable.</p></blockquote><h2 id="solution"><a class="anchor" href="#solution">#</a> Solution</h2><div class="tab" data-id="code" data-title="C++"><figure class="highlight cpp"><figcaption data-lang="C++"></figcaption><table><tr><td data-num="1"></td><td><pre><span class="token keyword">class</span> <span class="token class-name">UnionFind</span> <span class="token punctuation">&#123;</span></pre></td></tr><tr><td data-num="2"></td><td><pre><span class="token keyword">public</span><span class="token operator">:</span></pre></td></tr><tr><td data-num="3"></td><td><pre>    vector<span class="token operator">&lt;</span><span class="token keyword">int</span><span class="token operator">></span> parent<span class="token punctuation">,</span> rank<span class="token punctuation">;</span></pre></td></tr><tr><td data-num="4"></td><td><pre>    <span class="token keyword">int</span> nodes<span class="token punctuation">;</span></pre></td></tr><tr><td data-num="5"></td><td><pre>    <span class="token function">UnionFind</span><span class="token punctuation">(</span><span class="token keyword">int</span> n<span class="token punctuation">)</span><span class="token operator">:</span> <span class="token function">parent</span><span class="token punctuation">(</span>n<span class="token operator">+</span><span class="token number">1</span><span class="token punctuation">)</span><span class="token punctuation">,</span> <span class="token function">rank</span><span class="token punctuation">(</span>n<span class="token operator">+</span><span class="token number">1</span><span class="token punctuation">)</span><span class="token punctuation">,</span> <span class="token function">nodes</span><span class="token punctuation">(</span><span class="token number">1</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span></pre></td></tr><tr><td data-num="6"></td><td><pre>        <span class="token keyword">for</span> <span class="token punctuation">(</span><span class="token keyword">int</span> i<span class="token operator">=</span><span class="token number">1</span><span class="token punctuation">;</span> i<span class="token operator">&lt;=</span>n<span class="token punctuation">;</span> i<span class="token operator">++</span><span class="token punctuation">)</span> parent<span class="token punctuation">[</span>i<span class="token punctuation">]</span> <span class="token operator">=</span> i<span class="token punctuation">;</span></pre></td></tr><tr><td data-num="7"></td><td><pre>    <span class="token punctuation">&#125;</span></pre></td></tr><tr><td data-num="8"></td><td><pre></pre></td></tr><tr><td data-num="9"></td><td><pre>    <span class="token keyword">int</span> <span class="token function">find</span> <span class="token punctuation">(</span><span class="token keyword">int</span> x<span class="token punctuation">)</span> <span class="token punctuation">&#123;</span></pre></td></tr><tr><td data-num="10"></td><td><pre>        <span class="token keyword">if</span> <span class="token punctuation">(</span>x <span class="token operator">==</span> parent<span class="token punctuation">[</span>x<span class="token punctuation">]</span><span class="token punctuation">)</span> <span class="token keyword">return</span> x<span class="token punctuation">;</span></pre></td></tr><tr><td data-num="11"></td><td><pre>        <span class="token keyword">return</span> parent<span class="token punctuation">[</span>x<span class="token punctuation">]</span> <span class="token operator">=</span> <span class="token function">find</span><span class="token punctuation">(</span>parent<span class="token punctuation">[</span>x<span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token punctuation">;</span></pre></td></tr><tr><td data-num="12"></td><td><pre>    <span class="token punctuation">&#125;</span></pre></td></tr><tr><td data-num="13"></td><td><pre></pre></td></tr><tr><td data-num="14"></td><td><pre>    <span class="token keyword">bool</span> <span class="token function">union_</span><span class="token punctuation">(</span><span class="token keyword">int</span> x<span class="token punctuation">,</span> <span class="token keyword">int</span> y<span class="token punctuation">)</span> <span class="token punctuation">&#123;</span></pre></td></tr><tr><td data-num="15"></td><td><pre>        <span class="token keyword">int</span> px <span class="token operator">=</span> <span class="token function">find</span><span class="token punctuation">(</span>x<span class="token punctuation">)</span><span class="token punctuation">;</span></pre></td></tr><tr><td data-num="16"></td><td><pre>        <span class="token keyword">int</span> py <span class="token operator">=</span> <span class="token function">find</span><span class="token punctuation">(</span>y<span class="token punctuation">)</span><span class="token punctuation">;</span></pre></td></tr><tr><td data-num="17"></td><td><pre>        <span class="token keyword">if</span> <span class="token punctuation">(</span>px <span class="token operator">==</span> py<span class="token punctuation">)</span> <span class="token keyword">return</span> <span class="token boolean">false</span><span class="token punctuation">;</span></pre></td></tr><tr><td data-num="18"></td><td><pre>        <span class="token keyword">if</span> <span class="token punctuation">(</span>rank<span class="token punctuation">[</span>px<span class="token punctuation">]</span> <span class="token operator">></span> rank<span class="token punctuation">[</span>py<span class="token punctuation">]</span><span class="token punctuation">)</span> parent<span class="token punctuation">[</span>py<span class="token punctuation">]</span> <span class="token operator">=</span> px<span class="token punctuation">;</span></pre></td></tr><tr><td data-num="19"></td><td><pre>        <span class="token keyword">else</span> <span class="token keyword">if</span> <span class="token punctuation">(</span>rank<span class="token punctuation">[</span>px<span class="token punctuation">]</span> <span class="token operator">&lt;</span> rank<span class="token punctuation">[</span>py<span class="token punctuation">]</span><span class="token punctuation">)</span> parent<span class="token punctuation">[</span>px<span class="token punctuation">]</span> <span class="token operator">=</span> py<span class="token punctuation">;</span></pre></td></tr><tr><td data-num="20"></td><td><pre>        <span class="token keyword">else</span> <span class="token punctuation">&#123;</span></pre></td></tr><tr><td data-num="21"></td><td><pre>            parent<span class="token punctuation">[</span>py<span class="token punctuation">]</span> <span class="token operator">=</span> px<span class="token punctuation">;</span></pre></td></tr><tr><td data-num="22"></td><td><pre>            rank<span class="token punctuation">[</span>px<span class="token punctuation">]</span><span class="token operator">++</span><span class="token punctuation">;</span></pre></td></tr><tr><td data-num="23"></td><td><pre>        <span class="token punctuation">&#125;</span></pre></td></tr><tr><td data-num="24"></td><td><pre>        <span class="token keyword">return</span> <span class="token boolean">true</span><span class="token punctuation">;</span></pre></td></tr><tr><td data-num="25"></td><td><pre>    <span class="token punctuation">&#125;</span></pre></td></tr><tr><td data-num="26"></td><td><pre><span class="token punctuation">&#125;</span><span class="token punctuation">;</span></pre></td></tr><tr><td data-num="27"></td><td><pre></pre></td></tr><tr><td data-num="28"></td><td><pre><span class="token keyword">class</span> <span class="token class-name">Solution</span> <span class="token punctuation">&#123;</span></pre></td></tr><tr><td data-num="29"></td><td><pre><span class="token keyword">public</span><span class="token operator">:</span></pre></td></tr><tr><td data-num="30"></td><td><pre>    <span class="token keyword">int</span> <span class="token function">maxNumEdgesToRemove</span><span class="token punctuation">(</span><span class="token keyword">int</span> n<span class="token punctuation">,</span> vector<span class="token operator">&lt;</span>vector<span class="token operator">&lt;</span><span class="token keyword">int</span><span class="token operator">>></span><span class="token operator">&amp;</span> edges<span class="token punctuation">)</span> <span class="token punctuation">&#123;</span></pre></td></tr><tr><td data-num="31"></td><td><pre>        UnionFind <span class="token function">Alice</span><span class="token punctuation">(</span>n<span class="token punctuation">)</span><span class="token punctuation">;</span></pre></td></tr><tr><td data-num="32"></td><td><pre>        UnionFind <span class="token function">Bob</span><span class="token punctuation">(</span>n<span class="token punctuation">)</span><span class="token punctuation">;</span></pre></td></tr><tr><td data-num="33"></td><td><pre></pre></td></tr><tr><td data-num="34"></td><td><pre>        <span class="token keyword">int</span> res <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span></pre></td></tr><tr><td data-num="35"></td><td><pre>        <span class="token keyword">for</span> <span class="token punctuation">(</span>vector<span class="token operator">&lt;</span><span class="token keyword">int</span><span class="token operator">></span><span class="token operator">&amp;</span> edge <span class="token operator">:</span> edges<span class="token punctuation">)</span> <span class="token punctuation">&#123;</span></pre></td></tr><tr><td data-num="36"></td><td><pre>            <span class="token keyword">if</span> <span class="token punctuation">(</span>edge<span class="token punctuation">[</span><span class="token number">0</span><span class="token punctuation">]</span> <span class="token operator">==</span> <span class="token number">3</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span></pre></td></tr><tr><td data-num="37"></td><td><pre>                <span class="token keyword">if</span> <span class="token punctuation">(</span>Alice<span class="token punctuation">.</span><span class="token function">union_</span><span class="token punctuation">(</span>edge<span class="token punctuation">[</span><span class="token number">1</span><span class="token punctuation">]</span><span class="token punctuation">,</span> edge<span class="token punctuation">[</span><span class="token number">2</span><span class="token punctuation">]</span><span class="token punctuation">)</span> <span class="token operator">&amp;&amp;</span> Bob<span class="token punctuation">.</span><span class="token function">union_</span><span class="token punctuation">(</span>edge<span class="token punctuation">[</span><span class="token number">1</span><span class="token punctuation">]</span><span class="token punctuation">,</span> edge<span class="token punctuation">[</span><span class="token number">2</span><span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span></pre></td></tr><tr><td data-num="38"></td><td><pre>                    Alice<span class="token punctuation">.</span>nodes <span class="token operator">+=</span> <span class="token number">1</span><span class="token punctuation">;</span></pre></td></tr><tr><td data-num="39"></td><td><pre>                    Bob<span class="token punctuation">.</span>nodes <span class="token operator">+=</span> <span class="token number">1</span><span class="token punctuation">;</span></pre></td></tr><tr><td data-num="40"></td><td><pre>                <span class="token punctuation">&#125;</span> <span class="token keyword">else</span> <span class="token punctuation">&#123;</span></pre></td></tr><tr><td data-num="41"></td><td><pre>                    res <span class="token operator">+=</span> <span class="token number">1</span><span class="token punctuation">;</span></pre></td></tr><tr><td data-num="42"></td><td><pre>                <span class="token punctuation">&#125;</span></pre></td></tr><tr><td data-num="43"></td><td><pre>            <span class="token punctuation">&#125;</span></pre></td></tr><tr><td data-num="44"></td><td><pre>        <span class="token punctuation">&#125;</span></pre></td></tr><tr><td data-num="45"></td><td><pre></pre></td></tr><tr><td data-num="46"></td><td><pre>        <span class="token keyword">for</span> <span class="token punctuation">(</span><span class="token keyword">auto</span><span class="token operator">&amp;</span> edge <span class="token operator">:</span> edges<span class="token punctuation">)</span> <span class="token punctuation">&#123;</span></pre></td></tr><tr><td data-num="47"></td><td><pre>            <span class="token keyword">if</span> <span class="token punctuation">(</span>edge<span class="token punctuation">[</span><span class="token number">0</span><span class="token punctuation">]</span> <span class="token operator">==</span> <span class="token number">1</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span></pre></td></tr><tr><td data-num="48"></td><td><pre>                <span class="token keyword">if</span> <span class="token punctuation">(</span>Alice<span class="token punctuation">.</span><span class="token function">union_</span><span class="token punctuation">(</span>edge<span class="token punctuation">[</span><span class="token number">1</span><span class="token punctuation">]</span><span class="token punctuation">,</span> edge<span class="token punctuation">[</span><span class="token number">2</span><span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token punctuation">)</span> Alice<span class="token punctuation">.</span>nodes <span class="token operator">+=</span> <span class="token number">1</span><span class="token punctuation">;</span></pre></td></tr><tr><td data-num="49"></td><td><pre>                <span class="token keyword">else</span> res <span class="token operator">+=</span> <span class="token number">1</span><span class="token punctuation">;</span></pre></td></tr><tr><td data-num="50"></td><td><pre>            <span class="token punctuation">&#125;</span></pre></td></tr><tr><td data-num="51"></td><td><pre></pre></td></tr><tr><td data-num="52"></td><td><pre>            <span class="token keyword">if</span> <span class="token punctuation">(</span>edge<span class="token punctuation">[</span><span class="token number">0</span><span class="token punctuation">]</span> <span class="token operator">==</span> <span class="token number">2</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span></pre></td></tr><tr><td data-num="53"></td><td><pre>                <span class="token keyword">if</span> <span class="token punctuation">(</span>Bob<span class="token punctuation">.</span><span class="token function">union_</span><span class="token punctuation">(</span>edge<span class="token punctuation">[</span><span class="token number">1</span><span class="token punctuation">]</span><span class="token punctuation">,</span> edge<span class="token punctuation">[</span><span class="token number">2</span><span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token punctuation">)</span> Bob<span class="token punctuation">.</span>nodes <span class="token operator">+=</span> <span class="token number">1</span><span class="token punctuation">;</span></pre></td></tr><tr><td data-num="54"></td><td><pre>                <span class="token keyword">else</span> res <span class="token operator">+=</span> <span class="token number">1</span><span class="token punctuation">;</span></pre></td></tr><tr><td data-num="55"></td><td><pre>            <span class="token punctuation">&#125;</span></pre></td></tr><tr><td data-num="56"></td><td><pre>        <span class="token punctuation">&#125;</span></pre></td></tr><tr><td data-num="57"></td><td><pre>        <span class="token keyword">return</span> <span class="token punctuation">(</span>Alice<span class="token punctuation">.</span>nodes <span class="token operator">==</span> Bob<span class="token punctuation">.</span>nodes <span class="token operator">&amp;&amp;</span> Alice<span class="token punctuation">.</span>nodes <span class="token operator">==</span> n<span class="token punctuation">)</span> <span class="token operator">?</span> res <span class="token operator">:</span> <span class="token operator">-</span><span class="token number">1</span><span class="token punctuation">;</span></pre></td></tr><tr><td data-num="58"></td><td><pre>    <span class="token punctuation">&#125;</span></pre></td></tr><tr><td data-num="59"></td><td><pre><span class="token punctuation">&#125;</span><span class="token punctuation">;</span></pre></td></tr></table></figure></div><div class="tab" data-id="code" data-title="Java"><figure class="highlight java"><figcaption data-lang="java"></figcaption><table><tr><td data-num="1"></td><td><pre><span class="token keyword">class</span> <span class="token class-name">Solution</span> <span class="token punctuation">&#123;</span></pre></td></tr><tr><td data-num="2"></td><td><pre>    <span class="token keyword">class</span> <span class="token class-name">UnionFind</span> <span class="token punctuation">&#123;</span></pre></td></tr><tr><td data-num="3"></td><td><pre>        <span class="token keyword">int</span><span class="token punctuation">[</span><span class="token punctuation">]</span> parent<span class="token punctuation">,</span> rank<span class="token punctuation">;</span></pre></td></tr><tr><td data-num="4"></td><td><pre>        <span class="token keyword">int</span> nodes<span class="token punctuation">;</span></pre></td></tr><tr><td data-num="5"></td><td><pre></pre></td></tr><tr><td data-num="6"></td><td><pre>        <span class="token keyword">public</span> <span class="token class-name">UnionFind</span><span class="token punctuation">(</span><span class="token keyword">int</span> n<span class="token punctuation">)</span> <span class="token punctuation">&#123;</span></pre></td></tr><tr><td data-num="7"></td><td><pre>            parent <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token keyword">int</span><span class="token punctuation">[</span>n<span class="token operator">+</span><span class="token number">1</span><span class="token punctuation">]</span><span class="token punctuation">;</span></pre></td></tr><tr><td data-num="8"></td><td><pre>            rank <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token keyword">int</span><span class="token punctuation">[</span>n<span class="token operator">+</span><span class="token number">1</span><span class="token punctuation">]</span><span class="token punctuation">;</span></pre></td></tr><tr><td data-num="9"></td><td><pre>            nodes <span class="token operator">=</span> <span class="token number">1</span><span class="token punctuation">;</span></pre></td></tr><tr><td data-num="10"></td><td><pre>            <span class="token keyword">for</span> <span class="token punctuation">(</span><span class="token keyword">int</span> i<span class="token operator">=</span><span class="token number">1</span><span class="token punctuation">;</span> i<span class="token operator">&lt;=</span>n<span class="token punctuation">;</span> i<span class="token operator">++</span><span class="token punctuation">)</span> parent<span class="token punctuation">[</span>i<span class="token punctuation">]</span> <span class="token operator">=</span> i<span class="token punctuation">;</span></pre></td></tr><tr><td data-num="11"></td><td><pre>        <span class="token punctuation">&#125;</span></pre></td></tr><tr><td data-num="12"></td><td><pre></pre></td></tr><tr><td data-num="13"></td><td><pre>        <span class="token keyword">public</span> <span class="token keyword">int</span> <span class="token function">find</span><span class="token punctuation">(</span><span class="token keyword">int</span> x<span class="token punctuation">)</span> <span class="token punctuation">&#123;</span></pre></td></tr><tr><td data-num="14"></td><td><pre>            <span class="token keyword">if</span> <span class="token punctuation">(</span>parent<span class="token punctuation">[</span>x<span class="token punctuation">]</span> <span class="token operator">!=</span> x<span class="token punctuation">)</span> parent<span class="token punctuation">[</span>x<span class="token punctuation">]</span> <span class="token operator">=</span> <span class="token function">find</span><span class="token punctuation">(</span>parent<span class="token punctuation">[</span>x<span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token punctuation">;</span></pre></td></tr><tr><td data-num="15"></td><td><pre>            <span class="token keyword">return</span> parent<span class="token punctuation">[</span>x<span class="token punctuation">]</span><span class="token punctuation">;</span></pre></td></tr><tr><td data-num="16"></td><td><pre>        <span class="token punctuation">&#125;</span></pre></td></tr><tr><td data-num="17"></td><td><pre></pre></td></tr><tr><td data-num="18"></td><td><pre>        <span class="token keyword">public</span> <span class="token keyword">boolean</span> <span class="token function">union_</span><span class="token punctuation">(</span><span class="token keyword">int</span> x<span class="token punctuation">,</span> <span class="token keyword">int</span> y<span class="token punctuation">)</span> <span class="token punctuation">&#123;</span></pre></td></tr><tr><td data-num="19"></td><td><pre>            <span class="token keyword">int</span> px <span class="token operator">=</span> <span class="token function">find</span><span class="token punctuation">(</span>x<span class="token punctuation">)</span><span class="token punctuation">;</span></pre></td></tr><tr><td data-num="20"></td><td><pre>            <span class="token keyword">int</span> py <span class="token operator">=</span> <span class="token function">find</span><span class="token punctuation">(</span>y<span class="token punctuation">)</span><span class="token punctuation">;</span></pre></td></tr><tr><td data-num="21"></td><td><pre>            <span class="token keyword">if</span> <span class="token punctuation">(</span>px <span class="token operator">==</span> py<span class="token punctuation">)</span> <span class="token keyword">return</span> <span class="token boolean">false</span><span class="token punctuation">;</span></pre></td></tr><tr><td data-num="22"></td><td><pre>            <span class="token keyword">if</span> <span class="token punctuation">(</span>rank<span class="token punctuation">[</span>px<span class="token punctuation">]</span> <span class="token operator">></span> rank<span class="token punctuation">[</span>py<span class="token punctuation">]</span><span class="token punctuation">)</span> parent<span class="token punctuation">[</span>py<span class="token punctuation">]</span> <span class="token operator">=</span> px<span class="token punctuation">;</span></pre></td></tr><tr><td data-num="23"></td><td><pre>            <span class="token keyword">else</span> <span class="token keyword">if</span> <span class="token punctuation">(</span>rank<span class="token punctuation">[</span>px<span class="token punctuation">]</span> <span class="token operator">&lt;</span> rank<span class="token punctuation">[</span>py<span class="token punctuation">]</span><span class="token punctuation">)</span> parent<span class="token punctuation">[</span>px<span class="token punctuation">]</span> <span class="token operator">=</span> py<span class="token punctuation">;</span></pre></td></tr><tr><td data-num="24"></td><td><pre>            <span class="token keyword">else</span> <span class="token punctuation">&#123;</span></pre></td></tr><tr><td data-num="25"></td><td><pre>                parent<span class="token punctuation">[</span>py<span class="token punctuation">]</span> <span class="token operator">=</span> px<span class="token punctuation">;</span></pre></td></tr><tr><td data-num="26"></td><td><pre>                rank<span class="token punctuation">[</span>px<span class="token punctuation">]</span> <span class="token operator">+=</span> <span class="token number">1</span><span class="token punctuation">;</span></pre></td></tr><tr><td data-num="27"></td><td><pre>            <span class="token punctuation">&#125;</span></pre></td></tr><tr><td data-num="28"></td><td><pre>            <span class="token keyword">return</span> <span class="token boolean">true</span><span class="token punctuation">;</span></pre></td></tr><tr><td data-num="29"></td><td><pre>        <span class="token punctuation">&#125;</span></pre></td></tr><tr><td data-num="30"></td><td><pre>    <span class="token punctuation">&#125;</span></pre></td></tr><tr><td data-num="31"></td><td><pre></pre></td></tr><tr><td data-num="32"></td><td><pre>    <span class="token keyword">public</span> <span class="token keyword">int</span> <span class="token function">maxNumEdgesToRemove</span><span class="token punctuation">(</span><span class="token keyword">int</span> n<span class="token punctuation">,</span> <span class="token keyword">int</span><span class="token punctuation">[</span><span class="token punctuation">]</span><span class="token punctuation">[</span><span class="token punctuation">]</span> edges<span class="token punctuation">)</span> <span class="token punctuation">&#123;</span></pre></td></tr><tr><td data-num="33"></td><td><pre>        <span class="token class-name">UnionFind</span> <span class="token class-name">Alice</span> <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">UnionFind</span><span class="token punctuation">(</span>n<span class="token punctuation">)</span><span class="token punctuation">;</span></pre></td></tr><tr><td data-num="34"></td><td><pre>        <span class="token class-name">UnionFind</span> <span class="token class-name">Bob</span> <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">UnionFind</span><span class="token punctuation">(</span>n<span class="token punctuation">)</span><span class="token punctuation">;</span></pre></td></tr><tr><td data-num="35"></td><td><pre>        <span class="token keyword">int</span> res <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span></pre></td></tr><tr><td data-num="36"></td><td><pre>        <span class="token keyword">for</span> <span class="token punctuation">(</span><span class="token keyword">int</span><span class="token punctuation">[</span><span class="token punctuation">]</span> edge <span class="token operator">:</span> edges<span class="token punctuation">)</span> <span class="token punctuation">&#123;</span></pre></td></tr><tr><td data-num="37"></td><td><pre>            <span class="token keyword">if</span> <span class="token punctuation">(</span>edge<span class="token punctuation">[</span><span class="token number">0</span><span class="token punctuation">]</span> <span class="token operator">==</span> <span class="token number">3</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span></pre></td></tr><tr><td data-num="38"></td><td><pre>                <span class="token keyword">if</span> <span class="token punctuation">(</span><span class="token class-name">Alice</span><span class="token punctuation">.</span><span class="token function">union_</span><span class="token punctuation">(</span>edge<span class="token punctuation">[</span><span class="token number">1</span><span class="token punctuation">]</span><span class="token punctuation">,</span> edge<span class="token punctuation">[</span><span class="token number">2</span><span class="token punctuation">]</span><span class="token punctuation">)</span> <span class="token operator">&amp;&amp;</span> <span class="token class-name">Bob</span><span class="token punctuation">.</span><span class="token function">union_</span><span class="token punctuation">(</span>edge<span class="token punctuation">[</span><span class="token number">1</span><span class="token punctuation">]</span><span class="token punctuation">,</span> edge<span class="token punctuation">[</span><span class="token number">2</span><span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span></pre></td></tr><tr><td data-num="39"></td><td><pre>                    <span class="token class-name">Alice</span><span class="token punctuation">.</span>nodes <span class="token operator">+=</span> <span class="token number">1</span><span class="token punctuation">;</span></pre></td></tr><tr><td data-num="40"></td><td><pre>                    <span class="token class-name">Bob</span><span class="token punctuation">.</span>nodes <span class="token operator">+=</span> <span class="token number">1</span><span class="token punctuation">;</span></pre></td></tr><tr><td data-num="41"></td><td><pre>                <span class="token punctuation">&#125;</span> <span class="token keyword">else</span> res <span class="token operator">+=</span> <span class="token number">1</span><span class="token punctuation">;</span></pre></td></tr><tr><td data-num="42"></td><td><pre>            <span class="token punctuation">&#125;</span> </pre></td></tr><tr><td data-num="43"></td><td><pre>        <span class="token punctuation">&#125;</span></pre></td></tr><tr><td data-num="44"></td><td><pre></pre></td></tr><tr><td data-num="45"></td><td><pre>        <span class="token keyword">for</span> <span class="token punctuation">(</span><span class="token keyword">int</span><span class="token punctuation">[</span><span class="token punctuation">]</span> edge <span class="token operator">:</span> edges<span class="token punctuation">)</span> <span class="token punctuation">&#123;</span></pre></td></tr><tr><td data-num="46"></td><td><pre>            <span class="token keyword">if</span> <span class="token punctuation">(</span>edge<span class="token punctuation">[</span><span class="token number">0</span><span class="token punctuation">]</span> <span class="token operator">==</span> <span class="token number">1</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span></pre></td></tr><tr><td data-num="47"></td><td><pre>                <span class="token keyword">if</span> <span class="token punctuation">(</span><span class="token class-name">Alice</span><span class="token punctuation">.</span><span class="token function">union_</span><span class="token punctuation">(</span>edge<span class="token punctuation">[</span><span class="token number">1</span><span class="token punctuation">]</span><span class="token punctuation">,</span> edge<span class="token punctuation">[</span><span class="token number">2</span><span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token class-name">Alice</span><span class="token punctuation">.</span>nodes <span class="token operator">+=</span> <span class="token number">1</span><span class="token punctuation">;</span></pre></td></tr><tr><td data-num="48"></td><td><pre>                <span class="token keyword">else</span> res <span class="token operator">+=</span> <span class="token number">1</span><span class="token punctuation">;</span></pre></td></tr><tr><td data-num="49"></td><td><pre>            <span class="token punctuation">&#125;</span></pre></td></tr><tr><td data-num="50"></td><td><pre>            <span class="token keyword">if</span> <span class="token punctuation">(</span>edge<span class="token punctuation">[</span><span class="token number">0</span><span class="token punctuation">]</span> <span class="token operator">==</span> <span class="token number">2</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span></pre></td></tr><tr><td data-num="51"></td><td><pre>                <span class="token keyword">if</span> <span class="token punctuation">(</span><span class="token class-name">Bob</span><span class="token punctuation">.</span><span class="token function">union_</span><span class="token punctuation">(</span>edge<span class="token punctuation">[</span><span class="token number">1</span><span class="token punctuation">]</span><span class="token punctuation">,</span> edge<span class="token punctuation">[</span><span class="token number">2</span><span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token class-name">Bob</span><span class="token punctuation">.</span>nodes <span class="token operator">+=</span> <span class="token number">1</span><span class="token punctuation">;</span></pre></td></tr><tr><td data-num="52"></td><td><pre>                <span class="token keyword">else</span> res <span class="token operator">+=</span> <span class="token number">1</span><span class="token punctuation">;</span></pre></td></tr><tr><td data-num="53"></td><td><pre>            <span class="token punctuation">&#125;</span></pre></td></tr><tr><td data-num="54"></td><td><pre>        <span class="token punctuation">&#125;</span></pre></td></tr><tr><td data-num="55"></td><td><pre>        <span class="token keyword">return</span> <span class="token class-name">Alice</span><span class="token punctuation">.</span>nodes <span class="token operator">==</span> <span class="token class-name">Bob</span><span class="token punctuation">.</span>nodes <span class="token operator">&amp;&amp;</span> <span class="token class-name">Alice</span><span class="token punctuation">.</span>nodes <span class="token operator">==</span> n <span class="token operator">?</span> res <span class="token operator">:</span> <span class="token operator">-</span><span class="token number">1</span><span class="token punctuation">;</span></pre></td></tr><tr><td data-num="56"></td><td><pre>    <span class="token punctuation">&#125;</span></pre></td></tr><tr><td data-num="57"></td><td><pre><span class="token punctuation">&#125;</span></pre></td></tr></table></figure></div><div class="tab" data-id="code" data-title="Python"><figure class="highlight python"><figcaption data-lang="python"></figcaption><table><tr><td data-num="1"></td><td><pre><span class="token keyword">class</span> <span class="token class-name">UnionFind</span><span class="token punctuation">:</span></pre></td></tr><tr><td data-num="2"></td><td><pre>    <span class="token keyword">def</span> <span class="token function">__init__</span><span class="token punctuation">(</span>self<span class="token punctuation">,</span> n<span class="token punctuation">)</span><span class="token punctuation">:</span></pre></td></tr><tr><td data-num="3"></td><td><pre>        self<span class="token punctuation">.</span>parent <span class="token operator">=</span> <span class="token builtin">list</span><span class="token punctuation">(</span><span class="token builtin">range</span><span class="token punctuation">(</span>n<span class="token operator">+</span><span class="token number">1</span><span class="token punctuation">)</span><span class="token punctuation">)</span></pre></td></tr><tr><td data-num="4"></td><td><pre>        self<span class="token punctuation">.</span>rank <span class="token operator">=</span> <span class="token punctuation">[</span><span class="token number">0</span><span class="token punctuation">]</span> <span class="token operator">*</span> <span class="token punctuation">(</span>n<span class="token operator">+</span><span class="token number">1</span><span class="token punctuation">)</span></pre></td></tr><tr><td data-num="5"></td><td><pre>        self<span class="token punctuation">.</span>nodes <span class="token operator">=</span> <span class="token number">1</span></pre></td></tr><tr><td data-num="6"></td><td><pre></pre></td></tr><tr><td data-num="7"></td><td><pre>    <span class="token keyword">def</span> <span class="token function">find</span><span class="token punctuation">(</span>self<span class="token punctuation">,</span> x<span class="token punctuation">)</span><span class="token punctuation">:</span></pre></td></tr><tr><td data-num="8"></td><td><pre>        <span class="token keyword">if</span> self<span class="token punctuation">.</span>parent<span class="token punctuation">[</span>x<span class="token punctuation">]</span> <span class="token operator">!=</span> x<span class="token punctuation">:</span></pre></td></tr><tr><td data-num="9"></td><td><pre>            self<span class="token punctuation">.</span>parent<span class="token punctuation">[</span>x<span class="token punctuation">]</span> <span class="token operator">=</span> self<span class="token punctuation">.</span>find<span class="token punctuation">(</span>self<span class="token punctuation">.</span>parent<span class="token punctuation">[</span>x<span class="token punctuation">]</span><span class="token punctuation">)</span></pre></td></tr><tr><td data-num="10"></td><td><pre>        <span class="token keyword">return</span> self<span class="token punctuation">.</span>parent<span class="token punctuation">[</span>x<span class="token punctuation">]</span></pre></td></tr><tr><td data-num="11"></td><td><pre></pre></td></tr><tr><td data-num="12"></td><td><pre>    <span class="token keyword">def</span> <span class="token function">union_</span><span class="token punctuation">(</span>self<span class="token punctuation">,</span> x<span class="token punctuation">,</span> y<span class="token punctuation">)</span><span class="token punctuation">:</span></pre></td></tr><tr><td data-num="13"></td><td><pre>        px <span class="token operator">=</span> self<span class="token punctuation">.</span>find<span class="token punctuation">(</span>x<span class="token punctuation">)</span></pre></td></tr><tr><td data-num="14"></td><td><pre>        py <span class="token operator">=</span> self<span class="token punctuation">.</span>find<span class="token punctuation">(</span>y<span class="token punctuation">)</span></pre></td></tr><tr><td data-num="15"></td><td><pre>        <span class="token keyword">if</span> px <span class="token operator">==</span> py<span class="token punctuation">:</span> <span class="token keyword">return</span> <span class="token boolean">False</span></pre></td></tr><tr><td data-num="16"></td><td><pre>        <span class="token keyword">if</span> self<span class="token punctuation">.</span>rank<span class="token punctuation">[</span>px<span class="token punctuation">]</span> <span class="token operator">></span> self<span class="token punctuation">.</span>rank<span class="token punctuation">[</span>py<span class="token punctuation">]</span><span class="token punctuation">:</span> self<span class="token punctuation">.</span>parent<span class="token punctuation">[</span>py<span class="token punctuation">]</span> <span class="token operator">=</span> px</pre></td></tr><tr><td data-num="17"></td><td><pre>        <span class="token keyword">elif</span> self<span class="token punctuation">.</span>rank<span class="token punctuation">[</span>px<span class="token punctuation">]</span> <span class="token operator">&lt;</span> self<span class="token punctuation">.</span>rank<span class="token punctuation">[</span>py<span class="token punctuation">]</span><span class="token punctuation">:</span> self<span class="token punctuation">.</span>parent<span class="token punctuation">[</span>px<span class="token punctuation">]</span> <span class="token operator">=</span> py</pre></td></tr><tr><td data-num="18"></td><td><pre>        <span class="token keyword">else</span><span class="token punctuation">:</span></pre></td></tr><tr><td data-num="19"></td><td><pre>            self<span class="token punctuation">.</span>parent<span class="token punctuation">[</span>py<span class="token punctuation">]</span> <span class="token operator">=</span> px</pre></td></tr><tr><td data-num="20"></td><td><pre>            self<span class="token punctuation">.</span>rank<span class="token punctuation">[</span>px<span class="token punctuation">]</span> <span class="token operator">+=</span> <span class="token number">1</span></pre></td></tr><tr><td data-num="21"></td><td><pre>        <span class="token keyword">return</span> <span class="token boolean">True</span></pre></td></tr><tr><td data-num="22"></td><td><pre></pre></td></tr><tr><td data-num="23"></td><td><pre><span class="token keyword">class</span> <span class="token class-name">Solution</span><span class="token punctuation">:</span></pre></td></tr><tr><td data-num="24"></td><td><pre>    <span class="token keyword">def</span> <span class="token function">maxNumEdgesToRemove</span><span class="token punctuation">(</span>self<span class="token punctuation">,</span> n<span class="token punctuation">:</span> <span class="token builtin">int</span><span class="token punctuation">,</span> edges<span class="token punctuation">:</span> List<span class="token punctuation">[</span>List<span class="token punctuation">[</span><span class="token builtin">int</span><span class="token punctuation">]</span><span class="token punctuation">]</span><span class="token punctuation">)</span> <span class="token operator">-</span><span class="token operator">></span> <span class="token builtin">int</span><span class="token punctuation">:</span></pre></td></tr><tr><td data-num="25"></td><td><pre>        Alice <span class="token operator">=</span> UnionFind<span class="token punctuation">(</span>n<span class="token punctuation">)</span></pre></td></tr><tr><td data-num="26"></td><td><pre>        Bob <span class="token operator">=</span> UnionFind<span class="token punctuation">(</span>n<span class="token punctuation">)</span></pre></td></tr><tr><td data-num="27"></td><td><pre></pre></td></tr><tr><td data-num="28"></td><td><pre>        res <span class="token operator">=</span> <span class="token number">0</span></pre></td></tr><tr><td data-num="29"></td><td><pre>        <span class="token keyword">for</span> t<span class="token punctuation">,</span> i<span class="token punctuation">,</span> j <span class="token keyword">in</span> edges<span class="token punctuation">:</span></pre></td></tr><tr><td data-num="30"></td><td><pre>            <span class="token keyword">if</span> t <span class="token operator">==</span> <span class="token number">3</span><span class="token punctuation">:</span></pre></td></tr><tr><td data-num="31"></td><td><pre>                <span class="token keyword">if</span> Alice<span class="token punctuation">.</span>union_<span class="token punctuation">(</span>i<span class="token punctuation">,</span> j<span class="token punctuation">)</span> <span class="token keyword">and</span> Bob<span class="token punctuation">.</span>union_<span class="token punctuation">(</span>i<span class="token punctuation">,</span> j<span class="token punctuation">)</span><span class="token punctuation">:</span></pre></td></tr><tr><td data-num="32"></td><td><pre>                    Alice<span class="token punctuation">.</span>nodes <span class="token operator">+=</span> <span class="token number">1</span></pre></td></tr><tr><td data-num="33"></td><td><pre>                    Bob<span class="token punctuation">.</span>nodes <span class="token operator">+=</span> <span class="token number">1</span></pre></td></tr><tr><td data-num="34"></td><td><pre>                <span class="token keyword">else</span><span class="token punctuation">:</span> res <span class="token operator">+=</span> <span class="token number">1</span></pre></td></tr><tr><td data-num="35"></td><td><pre>        </pre></td></tr><tr><td data-num="36"></td><td><pre>        <span class="token keyword">for</span> t<span class="token punctuation">,</span> i<span class="token punctuation">,</span> j <span class="token keyword">in</span> edges<span class="token punctuation">:</span></pre></td></tr><tr><td data-num="37"></td><td><pre>            <span class="token keyword">if</span> t <span class="token operator">==</span> <span class="token number">1</span><span class="token punctuation">:</span></pre></td></tr><tr><td data-num="38"></td><td><pre>                <span class="token keyword">if</span> Alice<span class="token punctuation">.</span>union_<span class="token punctuation">(</span>i<span class="token punctuation">,</span> j<span class="token punctuation">)</span><span class="token punctuation">:</span> Alice<span class="token punctuation">.</span>nodes <span class="token operator">+=</span> <span class="token number">1</span></pre></td></tr><tr><td data-num="39"></td><td><pre>                <span class="token keyword">else</span><span class="token punctuation">:</span> res <span class="token operator">+=</span> <span class="token number">1</span></pre></td></tr><tr><td data-num="40"></td><td><pre>            <span class="token keyword">if</span> t <span class="token operator">==</span> <span class="token number">2</span><span class="token punctuation">:</span></pre></td></tr><tr><td data-num="41"></td><td><pre>                <span class="token keyword">if</span> Bob<span class="token punctuation">.</span>union_<span class="token punctuation">(</span>i<span class="token punctuation">,</span> j<span class="token punctuation">)</span><span class="token punctuation">:</span> Bob<span class="token punctuation">.</span>nodes <span class="token operator">+=</span> <span class="token number">1</span></pre></td></tr><tr><td data-num="42"></td><td><pre>                <span class="token keyword">else</span><span class="token punctuation">:</span> res <span class="token operator">+=</span> <span class="token number">1</span></pre></td></tr><tr><td data-num="43"></td><td><pre>        </pre></td></tr><tr><td data-num="44"></td><td><pre>        <span class="token keyword">return</span> res <span class="token keyword">if</span> Alice<span class="token punctuation">.</span>nodes <span class="token operator">==</span> Bob<span class="token punctuation">.</span>nodes <span class="token operator">==</span> n <span class="token keyword">else</span> <span class="token operator">-</span><span class="token number">1</span></pre></td></tr></table></figure></div>]]></content>
      
      
      <categories>
          
          <category> Coding </category>
          
          <category> Leetcode </category>
          
          <category> Hard </category>
          
      </categories>
      
      
        <tags>
            
            <tag> Union Find </tag>
            
            <tag> Leetcode </tag>
            
            <tag> Hard </tag>
            
            <tag> Graph </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>Union Find</title>
      <link href="/2023/04/28/Algorithm/Union%20Find/"/>
      <url>/2023/04/28/Algorithm/Union%20Find/</url>
      
        <content type="html"><![CDATA[<p><strong>Union-Find data structure</strong> 又稱 <strong>Disjoint-set data structure</strong>，用於<strong>處理不相交集合 (disjoint set) 的合併 (Union) 與查詢 (Find) 問題。</strong></p><h2 id="disjoint-set"><a class="anchor" href="#disjoint-set">#</a> Disjoint Set</h2><p><em><strong>Disjoint set</strong></em> 表示數個 set 之間，擁有的元素都不相同，彼此<strong>互斥 (disjoint)</strong>。</p><p>可以去看看這篇文章 - <span class="exturl" data-url="aHR0cHM6Ly9oYWNrbWQuaW8vQENMS08vcmtSVlNfby00P3R5cGU9dmlldw==">disjoint set</span></p><h2 id="union-find-algorithm"><a class="anchor" href="#union-find-algorithm">#</a> Union Find Algorithm</h2><!-- 補forest資料結構 --><p>Union-Find Data Structure 是一種 <a href=""><strong>forest</strong></a> 結構，forest 是一種 N-way Tree 結構，互相連通的節點放在同一個 set，任意選擇其中一個節點作為 root。</p><p><img data-src="https://i.imgur.com/606kd33.png" alt=""></p><p>Union Find 提供以下兩種操作:</p><ul><li><p><strong>Find:</strong> 找到 input 節點的 root，可以藉此確定 input 節點屬於哪個子集。</p><ul><li>Find 函數能夠找到節點的 root。</li><li>如果要確認兩個節點是否為同一子集，只要分別找兩個節點的 root ，如果一樣，即屬於同一子集 (為 connected component)。</li><li>Find 的時間複雜度最差就是遍歷整棵樹，時間複雜度為 O (n)。</li></ul></li><li><p><strong>Union:</strong> 將兩個子集合併為同一子集。</p><ul><li>Union 能夠將兩個所屬的子集進行合併。</li><li>最簡單的方法就是將一個子集的 root 直接作為另一子集 root 的子節點即可</li></ul><p><img data-src="https://i.imgur.com/Z3V1vnw.png" alt=""></p><ul><li>Union 的實踐需要依靠 find，因此時間複雜度最差為 O (n)。</li></ul></li></ul><p>以上圖的兩個樹來說，以 0 為 root 的樹大於以 2 為 root 的樹，如果將後者合併到前者下，合併過後的樹高度會比較小，根據這個觀察可以歸納出，如果兩個子集要合併，應該讓<strong>高度較小的子集合併到高度比較大的子集下</strong>，可以避免樹的不平衡。</p><h2 id="find-with-path-compression"><a class="anchor" href="#find-with-path-compression">#</a> Find with Path Compression</h2><p>Path compression 是一個優化技巧，也有人稱為 set collapsing, <strong>讓每個節點直接連到它的 root 節點</strong>，這樣 Find 跟 Union 操作的時間複雜度可以降到 O (1)。</p><p><img data-src="https://i.imgur.com/0Nl0hMt.png" alt=""></p><p>但要如何有效地讓所有節點 parent node 都指向 root 呢？<br> 答案就是透過<strong>遞迴</strong>，透過遞迴找到 root， 再依序回傳更新為每個走訪過的 parent。</p><figure class="highlight cpp"><figcaption data-lang="C++"></figcaption><table><tr><td data-num="1"></td><td><pre><span class="token keyword">int</span> <span class="token function">find</span><span class="token punctuation">(</span><span class="token keyword">int</span> x<span class="token punctuation">)</span> <span class="token punctuation">&#123;</span></pre></td></tr><tr><td data-num="2"></td><td><pre>    <span class="token keyword">if</span> <span class="token punctuation">(</span>x <span class="token operator">==</span> root<span class="token punctuation">[</span>x<span class="token punctuation">]</span><span class="token punctuation">)</span> <span class="token keyword">return</span> x<span class="token punctuation">;</span></pre></td></tr><tr><td data-num="3"></td><td><pre>    <span class="token keyword">return</span> root<span class="token punctuation">[</span>x<span class="token punctuation">]</span> <span class="token operator">=</span> <span class="token function">find</span><span class="token punctuation">(</span>root<span class="token punctuation">[</span>x<span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token punctuation">;</span></pre></td></tr><tr><td data-num="4"></td><td><pre><span class="token punctuation">&#125;</span></pre></td></tr></table></figure><h2 id="union-by-sizerank"><a class="anchor" href="#union-by-sizerank">#</a> Union by Size/Rank</h2><p>應用 <em><strong>path compression</strong></em> 後的樹可以盡可能縮減樹的高度 ，若要再 Union 兩個壓縮後的子集，可以採取 <em><strong>union by size</strong></em> 技巧，<strong>將子節點比較少的 root 加入比較大的子集。</strong></p><p>依照 rank 來排序，起初每個點的 rank 均為 0 ，依據 rank 大小來決定如何合併，<strong>rank 大的子集合併小的，合併別人的子集其 rank 往上增加。</strong></p><figure class="highlight cpp"><figcaption data-lang="C++"></figcaption><table><tr><td data-num="1"></td><td><pre><span class="token keyword">void</span> <span class="token function">unionSet</span><span class="token punctuation">(</span><span class="token keyword">int</span> x<span class="token punctuation">,</span> <span class="token keyword">int</span> y<span class="token punctuation">)</span> <span class="token punctuation">&#123;</span></pre></td></tr><tr><td data-num="2"></td><td><pre>    <span class="token keyword">int</span> root_x <span class="token operator">=</span> <span class="token function">find</span><span class="token punctuation">(</span>x<span class="token punctuation">)</span><span class="token punctuation">;</span></pre></td></tr><tr><td data-num="3"></td><td><pre>    <span class="token keyword">int</span> root_y <span class="token operator">=</span> <span class="token function">find</span><span class="token punctuation">(</span>y<span class="token punctuation">)</span><span class="token punctuation">;</span></pre></td></tr><tr><td data-num="4"></td><td><pre>    <span class="token keyword">if</span> <span class="token punctuation">(</span>root_x <span class="token operator">==</span> root_y<span class="token punctuation">)</span> <span class="token keyword">return</span> <span class="token punctuation">;</span></pre></td></tr><tr><td data-num="5"></td><td><pre>    <span class="token keyword">if</span> <span class="token punctuation">(</span>rank<span class="token punctuation">[</span>root_x<span class="token punctuation">]</span> <span class="token operator">></span> rank<span class="token punctuation">[</span>root_y<span class="token punctuation">]</span><span class="token punctuation">)</span> root<span class="token punctuation">[</span>root_y<span class="token punctuation">]</span> <span class="token operator">=</span> root_x<span class="token punctuation">;</span></pre></td></tr><tr><td data-num="6"></td><td><pre>    <span class="token keyword">else</span> <span class="token keyword">if</span> <span class="token punctuation">(</span>rank<span class="token punctuation">[</span>root_x<span class="token punctuation">]</span> <span class="token operator">&lt;</span> rank<span class="token punctuation">[</span>root_y<span class="token punctuation">]</span><span class="token punctuation">)</span> root<span class="token punctuation">[</span>root_x<span class="token punctuation">]</span> <span class="token operator">=</span> root_y<span class="token punctuation">;</span></pre></td></tr><tr><td data-num="7"></td><td><pre>    <span class="token keyword">else</span> <span class="token punctuation">&#123;</span></pre></td></tr><tr><td data-num="8"></td><td><pre>        root<span class="token punctuation">[</span>root_y<span class="token punctuation">]</span> <span class="token operator">=</span> root_x<span class="token punctuation">;</span></pre></td></tr><tr><td data-num="9"></td><td><pre>        rank<span class="token punctuation">[</span>root_x<span class="token punctuation">]</span><span class="token operator">++</span><span class="token punctuation">;</span></pre></td></tr><tr><td data-num="10"></td><td><pre>    <span class="token punctuation">&#125;</span>  </pre></td></tr><tr><td data-num="11"></td><td><pre><span class="token punctuation">&#125;</span></pre></td></tr></table></figure><p>一開始每個點的  <code>rank</code>  都為 0 ，有一點特別容易寫出 bug ，在比較彼此  <code>rank</code>  或是更新  <code>rank</code>  時候，需要以  <code>find()</code>  所找出的  <code>root</code>  來比，不是各個節點本身的  <code>rank</code>  。</p>]]></content>
      
      
      <categories>
          
          <category> Algorithm </category>
          
      </categories>
      
      
        <tags>
            
            <tag> Algorithm </tag>
            
            <tag> Union Find </tag>
            
            <tag> Data Structure </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>839. Similar String Groups</title>
      <link href="/2023/04/28/Coding/leetcode/Hard/839%20Similar%20String%20Groups/"/>
      <url>/2023/04/28/Coding/leetcode/Hard/839%20Similar%20String%20Groups/</url>
      
        <content type="html"><![CDATA[<p>⭐️⭐️⭐️</p><h2 id="題目敘述"><a class="anchor" href="#題目敘述">#</a> <span class="exturl" data-url="aHR0cHM6Ly9sZWV0Y29kZS5jb20vcHJvYmxlbXMvc2ltaWxhci1zdHJpbmctZ3JvdXBzL2Rlc2NyaXB0aW9uLw==">題目敘述</span></h2><p>Two strings  <code>X</code>  and  <code>Y</code>  are similar if we can swap two letters (in different positions) of  <code>X</code> , so that it equals  <code>Y</code> . Also two strings  <code>X</code>  and  <code>Y</code>  are similar if they are equal.</p><p>For example,  <code>&quot;tars&quot;</code>  and  <code>&quot;rats&quot;</code>  are similar (swapping at positions 0 and 2), and  <code>&quot;rats&quot;</code>  and  <code>&quot;arts&quot;</code>  are similar, but  <code>&quot;star&quot;</code>  is not similar to  <code>&quot;tars&quot;</code> ,  <code>&quot;rats&quot;</code> , or  <code>&quot;arts&quot;</code> .</p><p>Together, these form two connected groups by similarity:  <code>&#123;&quot;tars&quot;, &quot;rats&quot;, &quot;arts&quot;&#125;</code>  and  <code>&#123;&quot;star&quot;&#125;</code> .  Notice that  <code>&quot;tars&quot;</code>  and  <code>&quot;arts&quot;</code>  are in the same group even though they are not similar.  Formally, each group is such that a word is in the group if and only if it is similar to at least one other word in the group.</p><p>We are given a list  <code>strs</code>  of strings where every string in  <code>strs</code>  is an anagram of every other string in  <code>strs</code> . How many groups are there?</p><h3 id="example-1"><a class="anchor" href="#example-1">#</a> Example 1</h3><blockquote><p><strong>Input</strong>: strs = [“tars”,“rats”,“arts”,“star”]<br><strong>Output</strong>: 2</p></blockquote><h3 id="example-2"><a class="anchor" href="#example-2">#</a> Example 2</h3><blockquote><p><strong>Input</strong>: strs = [“omv”,“ovm”]<br><strong>Output</strong>: 1</p></blockquote><h2 id="解題思路"><a class="anchor" href="#解題思路">#</a> 解題思路</h2><p>遍歷整個陣列將相似的字串組合為群組，最後輸出群組的數量。</p><p>比對字串相似的方法，如果差異的字元數量大於 2，則兩字串不相似。</p><p>Union Find 的部分可以參考這個文章 <a href="https://chienikao.github.io/2023/04/28/Algorithm/Union%20Find/">連結</a></p><h2 id="solution"><a class="anchor" href="#solution">#</a> Solution</h2><div class="tab" data-id="code" data-title="C++"><figure class="highlight cpp"><figcaption data-lang="C++"></figcaption><table><tr><td data-num="1"></td><td><pre><span class="token keyword">class</span> <span class="token class-name">Solution</span> <span class="token punctuation">&#123;</span></pre></td></tr><tr><td data-num="2"></td><td><pre><span class="token keyword">public</span><span class="token operator">:</span></pre></td></tr><tr><td data-num="3"></td><td><pre>    vector<span class="token operator">&lt;</span><span class="token keyword">int</span><span class="token operator">></span> parent<span class="token punctuation">,</span> rank<span class="token punctuation">;</span></pre></td></tr><tr><td data-num="4"></td><td><pre>    <span class="token keyword">int</span> res<span class="token punctuation">;</span></pre></td></tr><tr><td data-num="5"></td><td><pre>    <span class="token keyword">bool</span> <span class="token function">similar</span><span class="token punctuation">(</span>string<span class="token operator">&amp;</span> s1<span class="token punctuation">,</span> string<span class="token operator">&amp;</span> s2<span class="token punctuation">)</span> <span class="token punctuation">&#123;</span></pre></td></tr><tr><td data-num="6"></td><td><pre>        <span class="token keyword">if</span> <span class="token punctuation">(</span>s1 <span class="token operator">==</span> s2<span class="token punctuation">)</span> <span class="token keyword">return</span> <span class="token boolean">true</span><span class="token punctuation">;</span></pre></td></tr><tr><td data-num="7"></td><td><pre>        <span class="token keyword">int</span> diff <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span></pre></td></tr><tr><td data-num="8"></td><td><pre>        <span class="token keyword">for</span> <span class="token punctuation">(</span><span class="token keyword">int</span> i<span class="token operator">=</span><span class="token number">0</span><span class="token punctuation">;</span> i<span class="token operator">&lt;</span>s1<span class="token punctuation">.</span><span class="token function">size</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span> i<span class="token operator">++</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span></pre></td></tr><tr><td data-num="9"></td><td><pre>            <span class="token keyword">if</span> <span class="token punctuation">(</span>s1<span class="token punctuation">[</span>i<span class="token punctuation">]</span> <span class="token operator">!=</span> s2<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span></pre></td></tr><tr><td data-num="10"></td><td><pre>                diff<span class="token operator">++</span><span class="token punctuation">;</span></pre></td></tr><tr><td data-num="11"></td><td><pre>                <span class="token keyword">if</span> <span class="token punctuation">(</span>diff <span class="token operator">></span> <span class="token number">2</span><span class="token punctuation">)</span> <span class="token keyword">return</span> <span class="token boolean">false</span><span class="token punctuation">;</span></pre></td></tr><tr><td data-num="12"></td><td><pre>            <span class="token punctuation">&#125;</span></pre></td></tr><tr><td data-num="13"></td><td><pre>        <span class="token punctuation">&#125;</span></pre></td></tr><tr><td data-num="14"></td><td><pre>        <span class="token keyword">return</span> diff <span class="token operator">==</span> <span class="token number">2</span><span class="token punctuation">;</span></pre></td></tr><tr><td data-num="15"></td><td><pre>    <span class="token punctuation">&#125;</span></pre></td></tr><tr><td data-num="16"></td><td><pre></pre></td></tr><tr><td data-num="17"></td><td><pre>    <span class="token keyword">int</span> <span class="token function">find</span><span class="token punctuation">(</span><span class="token keyword">int</span> x<span class="token punctuation">)</span> <span class="token punctuation">&#123;</span></pre></td></tr><tr><td data-num="18"></td><td><pre>        <span class="token keyword">if</span> <span class="token punctuation">(</span>x <span class="token operator">==</span> parent<span class="token punctuation">[</span>x<span class="token punctuation">]</span><span class="token punctuation">)</span> <span class="token keyword">return</span> x<span class="token punctuation">;</span></pre></td></tr><tr><td data-num="19"></td><td><pre>        <span class="token keyword">return</span> parent<span class="token punctuation">[</span>x<span class="token punctuation">]</span> <span class="token operator">=</span> <span class="token function">find</span><span class="token punctuation">(</span>parent<span class="token punctuation">[</span>x<span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token punctuation">;</span></pre></td></tr><tr><td data-num="20"></td><td><pre>    <span class="token punctuation">&#125;</span></pre></td></tr><tr><td data-num="21"></td><td><pre></pre></td></tr><tr><td data-num="22"></td><td><pre>    <span class="token keyword">void</span> <span class="token function">unionSet</span><span class="token punctuation">(</span><span class="token keyword">int</span> x<span class="token punctuation">,</span> <span class="token keyword">int</span> y<span class="token punctuation">)</span> <span class="token punctuation">&#123;</span></pre></td></tr><tr><td data-num="23"></td><td><pre>        <span class="token keyword">int</span> px <span class="token operator">=</span> <span class="token function">find</span><span class="token punctuation">(</span>x<span class="token punctuation">)</span><span class="token punctuation">,</span> py <span class="token operator">=</span> <span class="token function">find</span><span class="token punctuation">(</span>y<span class="token punctuation">)</span><span class="token punctuation">;</span></pre></td></tr><tr><td data-num="24"></td><td><pre>        <span class="token keyword">if</span> <span class="token punctuation">(</span>px <span class="token operator">==</span> py<span class="token punctuation">)</span> <span class="token keyword">return</span><span class="token punctuation">;</span></pre></td></tr><tr><td data-num="25"></td><td><pre>        <span class="token keyword">if</span> <span class="token punctuation">(</span>rank<span class="token punctuation">[</span>px<span class="token punctuation">]</span> <span class="token operator">></span> rank<span class="token punctuation">[</span>py<span class="token punctuation">]</span><span class="token punctuation">)</span> parent<span class="token punctuation">[</span>py<span class="token punctuation">]</span> <span class="token operator">=</span> px<span class="token punctuation">;</span></pre></td></tr><tr><td data-num="26"></td><td><pre>        <span class="token keyword">else</span> <span class="token keyword">if</span> <span class="token punctuation">(</span>rank<span class="token punctuation">[</span>px<span class="token punctuation">]</span> <span class="token operator">&lt;</span> rank<span class="token punctuation">[</span>py<span class="token punctuation">]</span><span class="token punctuation">)</span> parent<span class="token punctuation">[</span>px<span class="token punctuation">]</span> <span class="token operator">=</span> py<span class="token punctuation">;</span></pre></td></tr><tr><td data-num="27"></td><td><pre>        <span class="token keyword">else</span> <span class="token punctuation">&#123;</span></pre></td></tr><tr><td data-num="28"></td><td><pre>            parent<span class="token punctuation">[</span>py<span class="token punctuation">]</span> <span class="token operator">=</span> px<span class="token punctuation">;</span></pre></td></tr><tr><td data-num="29"></td><td><pre>            rank<span class="token punctuation">[</span>px<span class="token punctuation">]</span> <span class="token operator">++</span><span class="token punctuation">;</span></pre></td></tr><tr><td data-num="30"></td><td><pre>        <span class="token punctuation">&#125;</span></pre></td></tr><tr><td data-num="31"></td><td><pre>        res<span class="token operator">--</span><span class="token punctuation">;</span></pre></td></tr><tr><td data-num="32"></td><td><pre>    <span class="token punctuation">&#125;</span></pre></td></tr><tr><td data-num="33"></td><td><pre></pre></td></tr><tr><td data-num="34"></td><td><pre>    <span class="token keyword">int</span> <span class="token function">numSimilarGroups</span><span class="token punctuation">(</span>vector<span class="token operator">&lt;</span>string<span class="token operator">></span><span class="token operator">&amp;</span> strs<span class="token punctuation">)</span> <span class="token punctuation">&#123;</span></pre></td></tr><tr><td data-num="35"></td><td><pre>        <span class="token keyword">int</span> n <span class="token operator">=</span> strs<span class="token punctuation">.</span><span class="token function">size</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span></pre></td></tr><tr><td data-num="36"></td><td><pre>        res <span class="token operator">=</span> n<span class="token punctuation">;</span></pre></td></tr><tr><td data-num="37"></td><td><pre>        parent<span class="token punctuation">.</span><span class="token function">resize</span><span class="token punctuation">(</span>n<span class="token punctuation">)</span><span class="token punctuation">;</span></pre></td></tr><tr><td data-num="38"></td><td><pre>        rank<span class="token punctuation">.</span><span class="token function">resize</span><span class="token punctuation">(</span>n<span class="token punctuation">)</span><span class="token punctuation">;</span></pre></td></tr><tr><td data-num="39"></td><td><pre>        <span class="token keyword">for</span> <span class="token punctuation">(</span><span class="token keyword">int</span> i<span class="token operator">=</span><span class="token number">0</span><span class="token punctuation">;</span> i<span class="token operator">&lt;</span>n<span class="token punctuation">;</span> i<span class="token operator">++</span><span class="token punctuation">)</span> parent<span class="token punctuation">[</span>i<span class="token punctuation">]</span> <span class="token operator">=</span> i<span class="token punctuation">;</span></pre></td></tr><tr><td data-num="40"></td><td><pre>        <span class="token keyword">for</span> <span class="token punctuation">(</span><span class="token keyword">int</span> i<span class="token operator">=</span><span class="token number">0</span><span class="token punctuation">;</span> i<span class="token operator">&lt;</span>n<span class="token punctuation">;</span> i<span class="token operator">++</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span></pre></td></tr><tr><td data-num="41"></td><td><pre>            <span class="token keyword">for</span> <span class="token punctuation">(</span><span class="token keyword">int</span> j<span class="token operator">=</span>i<span class="token operator">+</span><span class="token number">1</span><span class="token punctuation">;</span> j<span class="token operator">&lt;</span>n<span class="token punctuation">;</span> j<span class="token operator">++</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span></pre></td></tr><tr><td data-num="42"></td><td><pre>                <span class="token keyword">if</span> <span class="token punctuation">(</span><span class="token function">similar</span><span class="token punctuation">(</span>strs<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">,</span> strs<span class="token punctuation">[</span>j<span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token function">unionSet</span><span class="token punctuation">(</span>i<span class="token punctuation">,</span> j<span class="token punctuation">)</span><span class="token punctuation">;</span></pre></td></tr><tr><td data-num="43"></td><td><pre>            <span class="token punctuation">&#125;</span></pre></td></tr><tr><td data-num="44"></td><td><pre>        <span class="token punctuation">&#125;</span></pre></td></tr><tr><td data-num="45"></td><td><pre>        <span class="token keyword">return</span> res<span class="token punctuation">;</span></pre></td></tr><tr><td data-num="46"></td><td><pre>    <span class="token punctuation">&#125;</span></pre></td></tr><tr><td data-num="47"></td><td><pre><span class="token punctuation">&#125;</span><span class="token punctuation">;</span></pre></td></tr></table></figure></div><div class="tab" data-id="code" data-title="Java"><figure class="highlight java"><figcaption data-lang="java"></figcaption><table><tr><td data-num="1"></td><td><pre><span class="token keyword">class</span> <span class="token class-name">Solution</span> <span class="token punctuation">&#123;</span></pre></td></tr><tr><td data-num="2"></td><td><pre>    <span class="token keyword">class</span> <span class="token class-name">UnionFind</span> <span class="token punctuation">&#123;</span></pre></td></tr><tr><td data-num="3"></td><td><pre>        <span class="token keyword">int</span><span class="token punctuation">[</span><span class="token punctuation">]</span> parent<span class="token punctuation">,</span> rank<span class="token punctuation">;</span></pre></td></tr><tr><td data-num="4"></td><td><pre>        <span class="token keyword">int</span> count<span class="token punctuation">;</span></pre></td></tr><tr><td data-num="5"></td><td><pre></pre></td></tr><tr><td data-num="6"></td><td><pre>        <span class="token keyword">public</span> <span class="token class-name">UnionFind</span><span class="token punctuation">(</span><span class="token keyword">int</span> n<span class="token punctuation">)</span> <span class="token punctuation">&#123;</span></pre></td></tr><tr><td data-num="7"></td><td><pre>            parent <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token keyword">int</span><span class="token punctuation">[</span>n<span class="token punctuation">]</span><span class="token punctuation">;</span></pre></td></tr><tr><td data-num="8"></td><td><pre>            rank <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token keyword">int</span><span class="token punctuation">[</span>n<span class="token punctuation">]</span><span class="token punctuation">;</span></pre></td></tr><tr><td data-num="9"></td><td><pre>            count <span class="token operator">=</span> n<span class="token punctuation">;</span></pre></td></tr><tr><td data-num="10"></td><td><pre></pre></td></tr><tr><td data-num="11"></td><td><pre>            <span class="token keyword">for</span> <span class="token punctuation">(</span><span class="token keyword">int</span> i <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span> i <span class="token operator">&lt;</span> n<span class="token punctuation">;</span> i<span class="token operator">++</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span></pre></td></tr><tr><td data-num="12"></td><td><pre>                parent<span class="token punctuation">[</span>i<span class="token punctuation">]</span> <span class="token operator">=</span> i<span class="token punctuation">;</span></pre></td></tr><tr><td data-num="13"></td><td><pre>            <span class="token punctuation">&#125;</span></pre></td></tr><tr><td data-num="14"></td><td><pre>        <span class="token punctuation">&#125;</span></pre></td></tr><tr><td data-num="15"></td><td><pre></pre></td></tr><tr><td data-num="16"></td><td><pre>        <span class="token keyword">public</span> <span class="token keyword">int</span> <span class="token function">find</span><span class="token punctuation">(</span><span class="token keyword">int</span> x<span class="token punctuation">)</span> <span class="token punctuation">&#123;</span></pre></td></tr><tr><td data-num="17"></td><td><pre>            <span class="token keyword">if</span> <span class="token punctuation">(</span>parent<span class="token punctuation">[</span>x<span class="token punctuation">]</span> <span class="token operator">!=</span> x<span class="token punctuation">)</span> <span class="token punctuation">&#123;</span></pre></td></tr><tr><td data-num="18"></td><td><pre>                parent<span class="token punctuation">[</span>x<span class="token punctuation">]</span> <span class="token operator">=</span> <span class="token function">find</span><span class="token punctuation">(</span>parent<span class="token punctuation">[</span>x<span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token punctuation">;</span></pre></td></tr><tr><td data-num="19"></td><td><pre>            <span class="token punctuation">&#125;</span></pre></td></tr><tr><td data-num="20"></td><td><pre>            <span class="token keyword">return</span> parent<span class="token punctuation">[</span>x<span class="token punctuation">]</span><span class="token punctuation">;</span></pre></td></tr><tr><td data-num="21"></td><td><pre>        <span class="token punctuation">&#125;</span></pre></td></tr><tr><td data-num="22"></td><td><pre></pre></td></tr><tr><td data-num="23"></td><td><pre>        <span class="token keyword">public</span> <span class="token keyword">boolean</span> <span class="token function">union</span><span class="token punctuation">(</span><span class="token keyword">int</span> x<span class="token punctuation">,</span> <span class="token keyword">int</span> y<span class="token punctuation">)</span> <span class="token punctuation">&#123;</span></pre></td></tr><tr><td data-num="24"></td><td><pre>            <span class="token keyword">int</span> rootX <span class="token operator">=</span> <span class="token function">find</span><span class="token punctuation">(</span>x<span class="token punctuation">)</span><span class="token punctuation">;</span></pre></td></tr><tr><td data-num="25"></td><td><pre>            <span class="token keyword">int</span> rootY <span class="token operator">=</span> <span class="token function">find</span><span class="token punctuation">(</span>y<span class="token punctuation">)</span><span class="token punctuation">;</span></pre></td></tr><tr><td data-num="26"></td><td><pre></pre></td></tr><tr><td data-num="27"></td><td><pre>            <span class="token keyword">if</span> <span class="token punctuation">(</span>rootX <span class="token operator">==</span> rootY<span class="token punctuation">)</span> <span class="token punctuation">&#123;</span></pre></td></tr><tr><td data-num="28"></td><td><pre>                <span class="token keyword">return</span> <span class="token boolean">false</span><span class="token punctuation">;</span></pre></td></tr><tr><td data-num="29"></td><td><pre>            <span class="token punctuation">&#125;</span></pre></td></tr><tr><td data-num="30"></td><td><pre></pre></td></tr><tr><td data-num="31"></td><td><pre>            <span class="token keyword">if</span> <span class="token punctuation">(</span>rank<span class="token punctuation">[</span>rootX<span class="token punctuation">]</span> <span class="token operator">&lt;</span> rank<span class="token punctuation">[</span>rootY<span class="token punctuation">]</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span></pre></td></tr><tr><td data-num="32"></td><td><pre>                <span class="token keyword">int</span> temp <span class="token operator">=</span> rootX<span class="token punctuation">;</span></pre></td></tr><tr><td data-num="33"></td><td><pre>                rootX <span class="token operator">=</span> rootY<span class="token punctuation">;</span></pre></td></tr><tr><td data-num="34"></td><td><pre>                rootY <span class="token operator">=</span> temp<span class="token punctuation">;</span></pre></td></tr><tr><td data-num="35"></td><td><pre>            <span class="token punctuation">&#125;</span></pre></td></tr><tr><td data-num="36"></td><td><pre></pre></td></tr><tr><td data-num="37"></td><td><pre>            parent<span class="token punctuation">[</span>rootY<span class="token punctuation">]</span> <span class="token operator">=</span> rootX<span class="token punctuation">;</span></pre></td></tr><tr><td data-num="38"></td><td><pre></pre></td></tr><tr><td data-num="39"></td><td><pre>            <span class="token keyword">if</span> <span class="token punctuation">(</span>rank<span class="token punctuation">[</span>rootX<span class="token punctuation">]</span> <span class="token operator">==</span> rank<span class="token punctuation">[</span>rootY<span class="token punctuation">]</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span></pre></td></tr><tr><td data-num="40"></td><td><pre>                rank<span class="token punctuation">[</span>rootX<span class="token punctuation">]</span><span class="token operator">++</span><span class="token punctuation">;</span></pre></td></tr><tr><td data-num="41"></td><td><pre>            <span class="token punctuation">&#125;</span></pre></td></tr><tr><td data-num="42"></td><td><pre></pre></td></tr><tr><td data-num="43"></td><td><pre>            count<span class="token operator">--</span><span class="token punctuation">;</span></pre></td></tr><tr><td data-num="44"></td><td><pre></pre></td></tr><tr><td data-num="45"></td><td><pre>            <span class="token keyword">return</span> <span class="token boolean">true</span><span class="token punctuation">;</span></pre></td></tr><tr><td data-num="46"></td><td><pre>        <span class="token punctuation">&#125;</span></pre></td></tr><tr><td data-num="47"></td><td><pre></pre></td></tr><tr><td data-num="48"></td><td><pre>        <span class="token keyword">public</span> <span class="token keyword">int</span> <span class="token function">getCount</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span></pre></td></tr><tr><td data-num="49"></td><td><pre>            <span class="token keyword">return</span> count<span class="token punctuation">;</span></pre></td></tr><tr><td data-num="50"></td><td><pre>        <span class="token punctuation">&#125;</span></pre></td></tr><tr><td data-num="51"></td><td><pre>    <span class="token punctuation">&#125;</span></pre></td></tr><tr><td data-num="52"></td><td><pre></pre></td></tr><tr><td data-num="53"></td><td><pre>    <span class="token keyword">public</span> <span class="token keyword">int</span> <span class="token function">numSimilarGroups</span><span class="token punctuation">(</span><span class="token class-name">String</span><span class="token punctuation">[</span><span class="token punctuation">]</span> strs<span class="token punctuation">)</span> <span class="token punctuation">&#123;</span></pre></td></tr><tr><td data-num="54"></td><td><pre>        <span class="token keyword">int</span> n <span class="token operator">=</span> strs<span class="token punctuation">.</span>length<span class="token punctuation">;</span></pre></td></tr><tr><td data-num="55"></td><td><pre>        <span class="token class-name">UnionFind</span> uf <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">UnionFind</span><span class="token punctuation">(</span>n<span class="token punctuation">)</span><span class="token punctuation">;</span></pre></td></tr><tr><td data-num="56"></td><td><pre></pre></td></tr><tr><td data-num="57"></td><td><pre>        <span class="token keyword">for</span> <span class="token punctuation">(</span><span class="token keyword">int</span> i <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span> i <span class="token operator">&lt;</span> n<span class="token punctuation">;</span> i<span class="token operator">++</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span></pre></td></tr><tr><td data-num="58"></td><td><pre>            <span class="token keyword">for</span> <span class="token punctuation">(</span><span class="token keyword">int</span> j <span class="token operator">=</span> i <span class="token operator">+</span> <span class="token number">1</span><span class="token punctuation">;</span> j <span class="token operator">&lt;</span> n<span class="token punctuation">;</span> j<span class="token operator">++</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span></pre></td></tr><tr><td data-num="59"></td><td><pre>                <span class="token keyword">if</span> <span class="token punctuation">(</span><span class="token function">isSimilar</span><span class="token punctuation">(</span>strs<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">,</span> strs<span class="token punctuation">[</span>j<span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span></pre></td></tr><tr><td data-num="60"></td><td><pre>                    uf<span class="token punctuation">.</span><span class="token function">union</span><span class="token punctuation">(</span>i<span class="token punctuation">,</span> j<span class="token punctuation">)</span><span class="token punctuation">;</span></pre></td></tr><tr><td data-num="61"></td><td><pre>                <span class="token punctuation">&#125;</span></pre></td></tr><tr><td data-num="62"></td><td><pre>            <span class="token punctuation">&#125;</span></pre></td></tr><tr><td data-num="63"></td><td><pre>        <span class="token punctuation">&#125;</span></pre></td></tr><tr><td data-num="64"></td><td><pre></pre></td></tr><tr><td data-num="65"></td><td><pre>        <span class="token keyword">return</span> uf<span class="token punctuation">.</span><span class="token function">getCount</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span></pre></td></tr><tr><td data-num="66"></td><td><pre>    <span class="token punctuation">&#125;</span></pre></td></tr><tr><td data-num="67"></td><td><pre></pre></td></tr><tr><td data-num="68"></td><td><pre>    <span class="token keyword">private</span> <span class="token keyword">boolean</span> <span class="token function">isSimilar</span><span class="token punctuation">(</span><span class="token class-name">String</span> s1<span class="token punctuation">,</span> <span class="token class-name">String</span> s2<span class="token punctuation">)</span> <span class="token punctuation">&#123;</span></pre></td></tr><tr><td data-num="69"></td><td><pre>        <span class="token keyword">if</span> <span class="token punctuation">(</span>s1<span class="token punctuation">.</span><span class="token function">equals</span><span class="token punctuation">(</span>s2<span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span></pre></td></tr><tr><td data-num="70"></td><td><pre>            <span class="token keyword">return</span> <span class="token boolean">true</span><span class="token punctuation">;</span></pre></td></tr><tr><td data-num="71"></td><td><pre>        <span class="token punctuation">&#125;</span></pre></td></tr><tr><td data-num="72"></td><td><pre></pre></td></tr><tr><td data-num="73"></td><td><pre>        <span class="token keyword">int</span> diff <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span></pre></td></tr><tr><td data-num="74"></td><td><pre>        <span class="token keyword">for</span> <span class="token punctuation">(</span><span class="token keyword">int</span> i <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span> i <span class="token operator">&lt;</span> s1<span class="token punctuation">.</span><span class="token function">length</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span> i<span class="token operator">++</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span></pre></td></tr><tr><td data-num="75"></td><td><pre>            <span class="token keyword">if</span> <span class="token punctuation">(</span>s1<span class="token punctuation">.</span><span class="token function">charAt</span><span class="token punctuation">(</span>i<span class="token punctuation">)</span> <span class="token operator">!=</span> s2<span class="token punctuation">.</span><span class="token function">charAt</span><span class="token punctuation">(</span>i<span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span></pre></td></tr><tr><td data-num="76"></td><td><pre>                diff<span class="token operator">++</span><span class="token punctuation">;</span></pre></td></tr><tr><td data-num="77"></td><td><pre>                <span class="token keyword">if</span> <span class="token punctuation">(</span>diff <span class="token operator">></span> <span class="token number">2</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span></pre></td></tr><tr><td data-num="78"></td><td><pre>                    <span class="token keyword">return</span> <span class="token boolean">false</span><span class="token punctuation">;</span></pre></td></tr><tr><td data-num="79"></td><td><pre>                <span class="token punctuation">&#125;</span></pre></td></tr><tr><td data-num="80"></td><td><pre>            <span class="token punctuation">&#125;</span></pre></td></tr><tr><td data-num="81"></td><td><pre>        <span class="token punctuation">&#125;</span></pre></td></tr><tr><td data-num="82"></td><td><pre></pre></td></tr><tr><td data-num="83"></td><td><pre>        <span class="token keyword">return</span> diff <span class="token operator">==</span> <span class="token number">2</span><span class="token punctuation">;</span></pre></td></tr><tr><td data-num="84"></td><td><pre>    <span class="token punctuation">&#125;</span></pre></td></tr><tr><td data-num="85"></td><td><pre><span class="token punctuation">&#125;</span></pre></td></tr></table></figure></div><div class="tab" data-id="code" data-title="Python"><figure class="highlight python"><figcaption data-lang="python"></figcaption><table><tr><td data-num="1"></td><td><pre><span class="token keyword">class</span> <span class="token class-name">UnionFind</span><span class="token punctuation">:</span></pre></td></tr><tr><td data-num="2"></td><td><pre>    <span class="token keyword">def</span> <span class="token function">__init__</span><span class="token punctuation">(</span>self<span class="token punctuation">,</span> n<span class="token punctuation">)</span><span class="token punctuation">:</span></pre></td></tr><tr><td data-num="3"></td><td><pre>        self<span class="token punctuation">.</span>parent <span class="token operator">=</span> <span class="token builtin">list</span><span class="token punctuation">(</span><span class="token builtin">range</span><span class="token punctuation">(</span>n<span class="token punctuation">)</span><span class="token punctuation">)</span></pre></td></tr><tr><td data-num="4"></td><td><pre>        self<span class="token punctuation">.</span>rank <span class="token operator">=</span> <span class="token punctuation">[</span><span class="token number">0</span><span class="token punctuation">]</span> <span class="token operator">*</span> n</pre></td></tr><tr><td data-num="5"></td><td><pre>        self<span class="token punctuation">.</span>count <span class="token operator">=</span> n</pre></td></tr><tr><td data-num="6"></td><td><pre></pre></td></tr><tr><td data-num="7"></td><td><pre>    <span class="token keyword">def</span> <span class="token function">find</span><span class="token punctuation">(</span>self<span class="token punctuation">,</span> x<span class="token punctuation">)</span><span class="token punctuation">:</span></pre></td></tr><tr><td data-num="8"></td><td><pre>        <span class="token keyword">if</span> self<span class="token punctuation">.</span>parent<span class="token punctuation">[</span>x<span class="token punctuation">]</span> <span class="token operator">!=</span> x<span class="token punctuation">:</span></pre></td></tr><tr><td data-num="9"></td><td><pre>            self<span class="token punctuation">.</span>parent<span class="token punctuation">[</span>x<span class="token punctuation">]</span> <span class="token operator">=</span> self<span class="token punctuation">.</span>find<span class="token punctuation">(</span>self<span class="token punctuation">.</span>parent<span class="token punctuation">[</span>x<span class="token punctuation">]</span><span class="token punctuation">)</span></pre></td></tr><tr><td data-num="10"></td><td><pre>        <span class="token keyword">return</span> self<span class="token punctuation">.</span>parent<span class="token punctuation">[</span>x<span class="token punctuation">]</span></pre></td></tr><tr><td data-num="11"></td><td><pre></pre></td></tr><tr><td data-num="12"></td><td><pre>    <span class="token keyword">def</span> <span class="token function">union</span><span class="token punctuation">(</span>self<span class="token punctuation">,</span> x<span class="token punctuation">,</span> y<span class="token punctuation">)</span><span class="token punctuation">:</span></pre></td></tr><tr><td data-num="13"></td><td><pre>        root_x <span class="token operator">=</span> self<span class="token punctuation">.</span>find<span class="token punctuation">(</span>x<span class="token punctuation">)</span></pre></td></tr><tr><td data-num="14"></td><td><pre>        root_y <span class="token operator">=</span> self<span class="token punctuation">.</span>find<span class="token punctuation">(</span>y<span class="token punctuation">)</span></pre></td></tr><tr><td data-num="15"></td><td><pre></pre></td></tr><tr><td data-num="16"></td><td><pre>        <span class="token keyword">if</span> root_x <span class="token operator">==</span> root_y<span class="token punctuation">:</span></pre></td></tr><tr><td data-num="17"></td><td><pre>            <span class="token keyword">return</span> <span class="token boolean">False</span></pre></td></tr><tr><td data-num="18"></td><td><pre></pre></td></tr><tr><td data-num="19"></td><td><pre>        <span class="token keyword">if</span> self<span class="token punctuation">.</span>rank<span class="token punctuation">[</span>root_x<span class="token punctuation">]</span> <span class="token operator">&lt;</span> self<span class="token punctuation">.</span>rank<span class="token punctuation">[</span>root_y<span class="token punctuation">]</span><span class="token punctuation">:</span></pre></td></tr><tr><td data-num="20"></td><td><pre>            root_x<span class="token punctuation">,</span> root_y <span class="token operator">=</span> root_y<span class="token punctuation">,</span> root_x</pre></td></tr><tr><td data-num="21"></td><td><pre></pre></td></tr><tr><td data-num="22"></td><td><pre>        self<span class="token punctuation">.</span>parent<span class="token punctuation">[</span>root_y<span class="token punctuation">]</span> <span class="token operator">=</span> root_x</pre></td></tr><tr><td data-num="23"></td><td><pre></pre></td></tr><tr><td data-num="24"></td><td><pre>        <span class="token keyword">if</span> self<span class="token punctuation">.</span>rank<span class="token punctuation">[</span>root_x<span class="token punctuation">]</span> <span class="token operator">==</span> self<span class="token punctuation">.</span>rank<span class="token punctuation">[</span>root_y<span class="token punctuation">]</span><span class="token punctuation">:</span></pre></td></tr><tr><td data-num="25"></td><td><pre>            self<span class="token punctuation">.</span>rank<span class="token punctuation">[</span>root_x<span class="token punctuation">]</span> <span class="token operator">+=</span> <span class="token number">1</span></pre></td></tr><tr><td data-num="26"></td><td><pre></pre></td></tr><tr><td data-num="27"></td><td><pre>        self<span class="token punctuation">.</span>count <span class="token operator">-=</span> <span class="token number">1</span></pre></td></tr><tr><td data-num="28"></td><td><pre></pre></td></tr><tr><td data-num="29"></td><td><pre>        <span class="token keyword">return</span> <span class="token boolean">True</span></pre></td></tr><tr><td data-num="30"></td><td><pre></pre></td></tr><tr><td data-num="31"></td><td><pre><span class="token keyword">class</span> <span class="token class-name">Solution</span><span class="token punctuation">:</span></pre></td></tr><tr><td data-num="32"></td><td><pre>    <span class="token keyword">def</span> <span class="token function">numSimilarGroups</span><span class="token punctuation">(</span>self<span class="token punctuation">,</span> strs<span class="token punctuation">:</span> List<span class="token punctuation">[</span><span class="token builtin">str</span><span class="token punctuation">]</span><span class="token punctuation">)</span> <span class="token operator">-</span><span class="token operator">></span> <span class="token builtin">int</span><span class="token punctuation">:</span></pre></td></tr><tr><td data-num="33"></td><td><pre>        <span class="token keyword">def</span> <span class="token function">is_similar</span><span class="token punctuation">(</span>s1<span class="token punctuation">,</span> s2<span class="token punctuation">)</span><span class="token punctuation">:</span></pre></td></tr><tr><td data-num="34"></td><td><pre>            <span class="token keyword">if</span> s1 <span class="token operator">==</span> s2<span class="token punctuation">:</span></pre></td></tr><tr><td data-num="35"></td><td><pre>                <span class="token keyword">return</span> <span class="token boolean">True</span></pre></td></tr><tr><td data-num="36"></td><td><pre></pre></td></tr><tr><td data-num="37"></td><td><pre>            diff <span class="token operator">=</span> <span class="token number">0</span></pre></td></tr><tr><td data-num="38"></td><td><pre>            <span class="token keyword">for</span> c1<span class="token punctuation">,</span> c2 <span class="token keyword">in</span> <span class="token builtin">zip</span><span class="token punctuation">(</span>s1<span class="token punctuation">,</span> s2<span class="token punctuation">)</span><span class="token punctuation">:</span></pre></td></tr><tr><td data-num="39"></td><td><pre>                <span class="token keyword">if</span> c1 <span class="token operator">!=</span> c2<span class="token punctuation">:</span></pre></td></tr><tr><td data-num="40"></td><td><pre>                    diff <span class="token operator">+=</span> <span class="token number">1</span></pre></td></tr><tr><td data-num="41"></td><td><pre>                    <span class="token keyword">if</span> diff <span class="token operator">></span> <span class="token number">2</span><span class="token punctuation">:</span></pre></td></tr><tr><td data-num="42"></td><td><pre>                        <span class="token keyword">return</span> <span class="token boolean">False</span></pre></td></tr><tr><td data-num="43"></td><td><pre></pre></td></tr><tr><td data-num="44"></td><td><pre>            <span class="token keyword">return</span> diff <span class="token operator">==</span> <span class="token number">2</span></pre></td></tr><tr><td data-num="45"></td><td><pre></pre></td></tr><tr><td data-num="46"></td><td><pre>        n <span class="token operator">=</span> <span class="token builtin">len</span><span class="token punctuation">(</span>strs<span class="token punctuation">)</span></pre></td></tr><tr><td data-num="47"></td><td><pre>        uf <span class="token operator">=</span> UnionFind<span class="token punctuation">(</span>n<span class="token punctuation">)</span></pre></td></tr><tr><td data-num="48"></td><td><pre></pre></td></tr><tr><td data-num="49"></td><td><pre>        <span class="token keyword">for</span> i <span class="token keyword">in</span> <span class="token builtin">range</span><span class="token punctuation">(</span>n<span class="token punctuation">)</span><span class="token punctuation">:</span></pre></td></tr><tr><td data-num="50"></td><td><pre>            <span class="token keyword">for</span> j <span class="token keyword">in</span> <span class="token builtin">range</span><span class="token punctuation">(</span>i <span class="token operator">+</span> <span class="token number">1</span><span class="token punctuation">,</span> n<span class="token punctuation">)</span><span class="token punctuation">:</span></pre></td></tr><tr><td data-num="51"></td><td><pre>                <span class="token keyword">if</span> is_similar<span class="token punctuation">(</span>strs<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">,</span> strs<span class="token punctuation">[</span>j<span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token punctuation">:</span></pre></td></tr><tr><td data-num="52"></td><td><pre>                    uf<span class="token punctuation">.</span>union<span class="token punctuation">(</span>i<span class="token punctuation">,</span> j<span class="token punctuation">)</span></pre></td></tr><tr><td data-num="53"></td><td><pre></pre></td></tr><tr><td data-num="54"></td><td><pre>        <span class="token keyword">return</span> uf<span class="token punctuation">.</span>count</pre></td></tr></table></figure></div>]]></content>
      
      
      <categories>
          
          <category> Coding </category>
          
          <category> Leetcode </category>
          
          <category> Hard </category>
          
      </categories>
      
      
        <tags>
            
            <tag> Union Find </tag>
            
            <tag> String </tag>
            
            <tag> Leetcode </tag>
            
            <tag> Array </tag>
            
            <tag> Hard </tag>
            
            <tag> Depth-First Search </tag>
            
            <tag> Breadth-First Search </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>319. Bulb Switcher</title>
      <link href="/2023/04/27/Coding/leetcode/Medium/319%20Bulb%20Switcher/"/>
      <url>/2023/04/27/Coding/leetcode/Medium/319%20Bulb%20Switcher/</url>
      
        <content type="html"><![CDATA[<p>⭐️⭐️</p><h2 id="題目敘述"><a class="anchor" href="#題目敘述">#</a> <span class="exturl" data-url="aHR0cHM6Ly9sZWV0Y29kZS5jb20vcHJvYmxlbXMvYnVsYi1zd2l0Y2hlci8=">題目敘述</span></h2><p>There are  <code>n</code>  bulbs that are initially off. You first turn on all the bulbs, then you turn off every second bulb.</p><p>On the third round, you toggle every third bulb (turning on if it’s off or turning off if it’s on). For the  <code>ith</code>  round, you toggle every  <code>i</code>  bulb. For the  <code>nth</code>  round, you only toggle the last bulb.</p><p>Return <em>the number of bulbs that are on after  <code>n</code>  rounds</em>.</p><h3 id="example-1"><a class="anchor" href="#example-1">#</a> Example 1</h3><p><img data-src="https://i.imgur.com/JSh0QO5.png" alt=""></p><blockquote><p><strong>Input:</strong> n = 3<br><strong>Output:</strong> 1<br><strong>Explanation:</strong> At first, the three bulbs are [off, off, off].<br>After the first round, the three bulbs are [on, on, on].<br>After the second round, the three bulbs are [on, off, on].<br>After the third round, the three bulbs are [on, off, off].<br>So you should return 1 because there is only one bulb is on.</p></blockquote><h3 id="example-2"><a class="anchor" href="#example-2">#</a> Example 2</h3><blockquote><p><strong>Input:</strong> n = 0<br><strong>Output:</strong> 0</p></blockquote><h3 id="example-3"><a class="anchor" href="#example-3">#</a> Example 3</h3><blockquote><p><strong>Input:</strong> n = 1<br><strong>Output:</strong> 1</p></blockquote><h2 id="solution"><a class="anchor" href="#solution">#</a> Solution</h2><div class="tab" data-id="code" data-title="C++"><figure class="highlight cpp"><figcaption data-lang="C++"></figcaption><table><tr><td data-num="1"></td><td><pre><span class="token keyword">class</span> <span class="token class-name">Solution</span> <span class="token punctuation">&#123;</span></pre></td></tr><tr><td data-num="2"></td><td><pre><span class="token keyword">public</span><span class="token operator">:</span></pre></td></tr><tr><td data-num="3"></td><td><pre>    <span class="token keyword">int</span> <span class="token function">bulbSwitch</span><span class="token punctuation">(</span><span class="token keyword">int</span> n<span class="token punctuation">)</span> <span class="token punctuation">&#123;</span></pre></td></tr><tr><td data-num="4"></td><td><pre>        <span class="token keyword">return</span> <span class="token punctuation">(</span><span class="token keyword">int</span><span class="token punctuation">)</span> <span class="token function">sqrt</span><span class="token punctuation">(</span>n<span class="token punctuation">)</span><span class="token punctuation">;</span></pre></td></tr><tr><td data-num="5"></td><td><pre>    <span class="token punctuation">&#125;</span></pre></td></tr><tr><td data-num="6"></td><td><pre><span class="token punctuation">&#125;</span><span class="token punctuation">;</span></pre></td></tr></table></figure></div><div class="tab" data-id="code" data-title="Java"><figure class="highlight java"><figcaption data-lang="java"></figcaption><table><tr><td data-num="1"></td><td><pre><span class="token keyword">class</span> <span class="token class-name">Solution</span> <span class="token punctuation">&#123;</span></pre></td></tr><tr><td data-num="2"></td><td><pre>    <span class="token keyword">public</span> <span class="token keyword">int</span> <span class="token function">bulbSwitch</span><span class="token punctuation">(</span><span class="token keyword">int</span> n<span class="token punctuation">)</span> <span class="token punctuation">&#123;</span></pre></td></tr><tr><td data-num="3"></td><td><pre>        <span class="token keyword">return</span> <span class="token punctuation">(</span><span class="token keyword">int</span><span class="token punctuation">)</span><span class="token class-name">Math</span><span class="token punctuation">.</span><span class="token function">sqrt</span><span class="token punctuation">(</span>n<span class="token punctuation">)</span><span class="token punctuation">;</span></pre></td></tr><tr><td data-num="4"></td><td><pre>    <span class="token punctuation">&#125;</span></pre></td></tr><tr><td data-num="5"></td><td><pre><span class="token punctuation">&#125;</span></pre></td></tr></table></figure></div><div class="tab" data-id="code" data-title="Python"><figure class="highlight python"><figcaption data-lang="python"></figcaption><table><tr><td data-num="1"></td><td><pre><span class="token keyword">class</span> <span class="token class-name">Solution</span><span class="token punctuation">:</span></pre></td></tr><tr><td data-num="2"></td><td><pre>    <span class="token keyword">def</span> <span class="token function">bulbSwitch</span><span class="token punctuation">(</span>self<span class="token punctuation">,</span> n<span class="token punctuation">:</span> <span class="token builtin">int</span><span class="token punctuation">)</span> <span class="token operator">-</span><span class="token operator">></span> <span class="token builtin">int</span><span class="token punctuation">:</span> <span class="token keyword">return</span> <span class="token builtin">int</span><span class="token punctuation">(</span>sqrt<span class="token punctuation">(</span>n<span class="token punctuation">)</span><span class="token punctuation">)</span></pre></td></tr></table></figure></div>]]></content>
      
      
      <categories>
          
          <category> Coding </category>
          
          <category> Leetcode </category>
          
      </categories>
      
      
        <tags>
            
            <tag> Leetcode </tag>
            
            <tag> Math </tag>
            
            <tag> Medium </tag>
            
            <tag> Brainteaser </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>Ch02 - Example</title>
      <link href="/2023/04/27/SystemSoftware/Ch02_example/"/>
      <url>/2023/04/27/SystemSoftware/Ch02_example/</url>
      
        <content type="html"><![CDATA[<h2 id="example-of-sic-program"><a class="anchor" href="#example-of-sic-program">#</a> Example of SIC Program</h2><ul><li><strong> <code>,X</code> </strong> modifier: <strong>indexed</strong> addressing mode (Line 160, 225)</li><li>Lines <strong>beginning with  <code>.</code> </strong> contain <strong>comments</strong> only (Line 110~120, 195~205)</li></ul><h3 id="copy-subroutine"><a class="anchor" href="#copy-subroutine">#</a>  <code>COPY</code>  Subroutine</h3><ul><li>相當於整個程式的主函式<ul><li>因為  <code>FIRST</code>  包含在此 Subroutine 中</li></ul></li><li>用來把 input device 的檔案複製到 output device<ul><li>透過  <code>RDREC</code>  讀取檔案中的 record 並存到 buffer</li><li>透過  <code>WRREC</code>  把 buffer 中的 record 寫入檔案</li></ul></li><li>檔案由多個 records 組成，但不確定有幾個 record…<ul><li>所以用迴圈把 record 一個一個讀進來，每讀一個 record 就進行寫入</li><li>讀到檔案結尾就結束迴圈</li><li>並且把 ‘E’, ‘O’, ‘F’ <strong>三個字元</strong>寫入檔案</li></ul></li></ul><pre><code>Line Loc Source statement Object code 5 1000 COPY START 1000 10 1000 FIRST STL RETADR 141033 15 1003 CLOOP JSUB RDREC 482039 20 1006 LDA  LENGTH 001036 25 1009 COMP ZERO 281030 30 100C JEQ  ENDFIL 301015 35 100F JSUB WRREC 482061 40 1012 J  CLOOP 3C1003 45 1015 ENDFIL LDA  EOF 00102A 50 1018 STA  BUFFER 0C1039 55 101B LDA  THREE 00102D 60 101E STA LENGTH 0C1036 65 1021 JSUB  WRREC 482061 70 1024 LDL  RETADR081033 75 1027 RSUB 4C0000 80 102A EOF BYTE  C'EOF' 454F46 85 102D THREE WORD  3 000003 90 1030 ZERO WORD  0 000000 95 1033 RETADR RESW  1 100 1036 LENGTH RESW  1 105 1039 BUFFER RESB  4096 </code></pre><ul><li><p><strong>Buffer</strong></p><ul><li>Is <strong>necessary</strong> because the <strong>I/O rates</strong> for the two devices may be very different.<ul><li>such as a disk and a slow printing terminal</li></ul></li><li>宣告在 Line 105，共有 4096 bytes</li></ul></li><li><p><strong>The end of the file to be copied</strong> ( <code>RDREC</code>  在讀的檔案的結尾)<br><span class="katex"><span class="katex-mathml"><math xmlns="http://www.w3.org/1998/Math/MathML"><semantics><mrow><mo>⇒</mo></mrow><annotation encoding="application/x-tex">\Rightarrow</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:0.36687em;vertical-align:0em;"></span><span class="mrel">⇒</span></span></span></span> is indicated by a <strong>zero-length record</strong></p><ul><li><code>RDREC</code>  會把這次讀取到的 record 的長度存在變數  <code>LENGTH</code></li><li>Line 20~30: 如果  <code>LENGTH</code>  等於 0 就結束迴圈<br><span class="katex"><span class="katex-mathml"><math xmlns="http://www.w3.org/1998/Math/MathML"><semantics><mrow><mo>⇒</mo></mrow><annotation encoding="application/x-tex">\Rightarrow</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:0.36687em;vertical-align:0em;"></span><span class="mrel">⇒</span></span></span></span> 如果讀到長度 0 的 record 就停止讀取<br><span class="katex"><span class="katex-mathml"><math xmlns="http://www.w3.org/1998/Math/MathML"><semantics><mrow><mo>⇒</mo></mrow><annotation encoding="application/x-tex">\Rightarrow</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:0.36687em;vertical-align:0em;"></span><span class="mrel">⇒</span></span></span></span> 如果讀到檔案結尾就停止讀取</li></ul></li><li><p>When the <strong>end of file is detected</strong></p><ul><li>The program writes <strong> <code>&quot;EOF&quot;</code> </strong> on the output device (Line 45~50)</li></ul></li><li><p>Terminates by executing an <strong> <code>RSUB</code> </strong> instruction (Line 75)</p></li></ul><div class="note info"><ul><li>Line 80 宣告的  <code>EOF</code>  是三個字元  <code>'E'</code> ,  <code>'O'</code> ,  <code>'F'</code> ，共占用 3 bytes</li><li>所以可以用  <code>LDA EOF</code>  一次把三個字元存在 register A 中 (Line 45)</li><li><code>STA BUFFER</code>  會一次把 register A 中 3 bytes 的資料寫入  <code>BUFFER</code>  的位置中，等同:<ul><li>把 register A 中的三個字元依序放到記憶體  <code>BUFFER</code> ,  <code>BUFFER+1</code> ,  <code>BUFFER+2</code>  的三個位置中</li><li><code>BUFFER[0] = 'E'</code> ,  <code>BUFFER[1] = 'O'</code> ,  <code>BUFFER[2] = 'F'</code></li></ul></li><li>因為最後還要把  <code>BUFFER</code>  中的三個字元寫到 Output device 中<ul><li><code>LENGTH</code>  要設為 3 (Line 55~60)</li></ul></li></ul></div><h4 id="high-level-pseudo-code"><a class="anchor" href="#high-level-pseudo-code">#</a> High-Level Pseudo Code</h4><figure class="highlight java"><figcaption data-lang="java"></figcaption><table><tr><td data-num="1"></td><td><pre><span class="token keyword">byte</span> <span class="token constant">BUFFER</span><span class="token punctuation">[</span><span class="token number">4096</span><span class="token punctuation">]</span><span class="token punctuation">;</span></pre></td></tr><tr><td data-num="2"></td><td><pre><span class="token keyword">int</span> <span class="token constant">LENGTH</span><span class="token punctuation">;</span></pre></td></tr><tr><td data-num="3"></td><td><pre></pre></td></tr><tr><td data-num="4"></td><td><pre><span class="token keyword">void</span> <span class="token function">COPY</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span></pre></td></tr><tr><td data-num="5"></td><td><pre>    <span class="token keyword">while</span><span class="token punctuation">(</span><span class="token number">1</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span></pre></td></tr><tr><td data-num="6"></td><td><pre>        <span class="token function">RDREC</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span></pre></td></tr><tr><td data-num="7"></td><td><pre>        <span class="token keyword">if</span> <span class="token punctuation">(</span><span class="token constant">LENGTH</span> <span class="token operator">==</span> <span class="token number">0</span><span class="token punctuation">)</span></pre></td></tr><tr><td data-num="8"></td><td><pre>            <span class="token keyword">break</span><span class="token punctuation">;</span></pre></td></tr><tr><td data-num="9"></td><td><pre>        <span class="token function">WRREC</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span></pre></td></tr><tr><td data-num="10"></td><td><pre>    <span class="token punctuation">&#125;</span></pre></td></tr><tr><td data-num="11"></td><td><pre>    </pre></td></tr><tr><td data-num="12"></td><td><pre>    <span class="token constant">BUFFER</span><span class="token punctuation">[</span><span class="token number">0</span><span class="token punctuation">]</span> <span class="token operator">=</span> <span class="token char">'E'</span><span class="token punctuation">;</span></pre></td></tr><tr><td data-num="13"></td><td><pre>    <span class="token constant">BUFFER</span><span class="token punctuation">[</span><span class="token number">1</span><span class="token punctuation">]</span> <span class="token operator">=</span> <span class="token char">'O'</span><span class="token punctuation">;</span></pre></td></tr><tr><td data-num="14"></td><td><pre>    <span class="token constant">BUFFER</span><span class="token punctuation">[</span><span class="token number">2</span><span class="token punctuation">]</span> <span class="token operator">=</span> <span class="token char">'F'</span><span class="token punctuation">;</span></pre></td></tr><tr><td data-num="15"></td><td><pre>    <span class="token constant">LENGTH</span> <span class="token operator">=</span> <span class="token number">3</span><span class="token punctuation">;</span></pre></td></tr><tr><td data-num="16"></td><td><pre>    <span class="token function">WRREC</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span></pre></td></tr><tr><td data-num="17"></td><td><pre>    <span class="token keyword">return</span><span class="token punctuation">;</span></pre></td></tr><tr><td data-num="18"></td><td><pre><span class="token punctuation">&#125;</span></pre></td></tr></table></figure><h3 id="rdrec-read-records-subroutine"><a class="anchor" href="#rdrec-read-records-subroutine">#</a>  <code>RDREC</code>  - Read Records Subroutine</h3><pre><code>Line Loc Source statement Object code 110 .115 .SUBROUTINE TO READ RECORD INTO BUFFER 120 .125 2039 RDREC LDX  ZERO 041030 130 203C LDA  ZERO 001030 135 203F RLOOP TD   INPUT E0205D 140 2042 JEQ  RLOOP 30203F 145 2045 RD  INPUT D8205D 150 2048 COMP  ZERO 281030 155 204B JEQ   EXIT 302057 160 204E STCH  BUFFER,X       549039 165 2051 TIX  MAXLEN 2C205E 170 2054 JLT  RLOOP 38203F 175 2057 EXIT STX  LENGTH 101036 180 205A RSUB 4C0000 185 205D INPUT BYTE X'F1'F1 190 205E MAXLEN WORD  4096 001000 </code></pre><ul><li>If a record is longer than the length of the buffer (4096 bytes)<br><span class="katex"><span class="katex-mathml"><math xmlns="http://www.w3.org/1998/Math/MathML"><semantics><mrow><mo>⇒</mo></mrow><annotation encoding="application/x-tex">\Rightarrow</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:0.36687em;vertical-align:0em;"></span><span class="mrel">⇒</span></span></span></span> only the first 4096 bytes are copied.</li></ul><div class="note info"><ul><li>Line 135~140<ul><li>迴圈不斷測試 device，直到可以進行 IO</li></ul></li><li>Line 145<ul><li>讀入一個 byte 的資料</li></ul></li><li>Line 150~155<ul><li>如果讀入的資料等於 0 就跳出迴圈</li></ul></li><li>Line 160<ul><li>把讀入的資料存在  <code>BUFFER+X</code></li></ul></li><li>Line 165~170<ul><li>如果讀到的資料超過 4096 bytes 就跳出迴圈</li></ul></li><li>Line 175<ul><li>把讀到的資料長度存在  <code>LENGTH</code></li></ul></li></ul></div><h4 id="high-level-pseudo-code-2"><a class="anchor" href="#high-level-pseudo-code-2">#</a> High-Level Pseudo Code</h4><figure class="highlight java"><figcaption data-lang="java"></figcaption><table><tr><td data-num="1"></td><td><pre><span class="token keyword">void</span> <span class="token function">RDREC</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span></pre></td></tr><tr><td data-num="2"></td><td><pre>    <span class="token class-name">Device</span> <span class="token constant">INPUT</span> <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">Device</span><span class="token punctuation">(</span><span class="token string">"F1"</span><span class="token punctuation">)</span><span class="token punctuation">;</span></pre></td></tr><tr><td data-num="3"></td><td><pre>    <span class="token keyword">int</span> <span class="token constant">MAXLEN</span> <span class="token operator">=</span> <span class="token number">4096</span><span class="token punctuation">;</span></pre></td></tr><tr><td data-num="4"></td><td><pre>    <span class="token class-name">X</span> <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span></pre></td></tr><tr><td data-num="5"></td><td><pre>    <span class="token constant">LENGTH</span> <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span></pre></td></tr><tr><td data-num="6"></td><td><pre>    <span class="token keyword">while</span> <span class="token punctuation">(</span><span class="token number">1</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span></pre></td></tr><tr><td data-num="7"></td><td><pre>        <span class="token keyword">while</span> <span class="token punctuation">(</span><span class="token operator">!</span> <span class="token constant">INPUT</span><span class="token punctuation">.</span><span class="token function">isReady</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span></pre></td></tr><tr><td data-num="8"></td><td><pre>        <span class="token punctuation">&#125;</span></pre></td></tr><tr><td data-num="9"></td><td><pre>        </pre></td></tr><tr><td data-num="10"></td><td><pre>        <span class="token keyword">char</span> c <span class="token operator">=</span> <span class="token constant">INPUT</span><span class="token punctuation">.</span><span class="token function">read</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span></pre></td></tr><tr><td data-num="11"></td><td><pre>        <span class="token keyword">if</span> <span class="token punctuation">(</span>c <span class="token operator">==</span> <span class="token number">0</span><span class="token punctuation">)</span></pre></td></tr><tr><td data-num="12"></td><td><pre>            <span class="token keyword">break</span><span class="token punctuation">;</span></pre></td></tr><tr><td data-num="13"></td><td><pre>        <span class="token constant">BUFFER</span><span class="token punctuation">[</span><span class="token class-name">X</span><span class="token punctuation">]</span> <span class="token operator">=</span> c<span class="token punctuation">;</span></pre></td></tr><tr><td data-num="14"></td><td><pre>        </pre></td></tr><tr><td data-num="15"></td><td><pre>        <span class="token class-name">X</span><span class="token operator">++</span><span class="token punctuation">;</span></pre></td></tr><tr><td data-num="16"></td><td><pre>        <span class="token keyword">if</span><span class="token punctuation">(</span><span class="token class-name">X</span> <span class="token operator">==</span> <span class="token constant">MAXLEN</span><span class="token punctuation">)</span></pre></td></tr><tr><td data-num="17"></td><td><pre>            <span class="token keyword">break</span><span class="token punctuation">;</span></pre></td></tr><tr><td data-num="18"></td><td><pre>    <span class="token punctuation">&#125;</span></pre></td></tr><tr><td data-num="19"></td><td><pre>    <span class="token constant">LENGTH</span> <span class="token operator">=</span> <span class="token class-name">X</span><span class="token punctuation">;</span></pre></td></tr><tr><td data-num="20"></td><td><pre>    <span class="token keyword">return</span><span class="token punctuation">;</span></pre></td></tr><tr><td data-num="21"></td><td><pre><span class="token punctuation">&#125;</span></pre></td></tr></table></figure><h3 id="wrrec-write-records-subroutine"><a class="anchor" href="#wrrec-write-records-subroutine">#</a>  <code>WRREC</code>  - Write Records Subroutine</h3><pre><code>Line Loc Source statement Object code 195 .200 .SUBROUTINE TO WRITE RECORD FROM BUFFER 205 .210 2061 WRREC LDX  ZERO 041030 215 2064 WLOOP TD  OUTPUT E02079 220 2067 JEQ  WLOOP 302064 225 206A LDCH  BUFFER,X 509039 230 206D WD  OUTPUT DC2079 235 2070 TIX  LENGTH 2C1036 240 2073 JLT  WLOOP 382064 245 2076 RSUB 4C0000 250 2079 OUTPUT BYTE  X'05' 05 255 END  FIRST </code></pre><div class="note info"><ul><li>Line 215~220<ul><li>迴圈不斷測試 device，直到可以進行 IO</li></ul></li><li>Line 225~20<ul><li>把  <code>BUFFER[X]</code>  寫入 device</li></ul></li><li>Line 235~240<ul><li>判斷迴圈條件</li></ul></li></ul></div><h4 id="high-level-pseudo-code-3"><a class="anchor" href="#high-level-pseudo-code-3">#</a> High-Level Pseudo Code</h4><figure class="highlight java"><figcaption data-lang="java"></figcaption><table><tr><td data-num="1"></td><td><pre><span class="token keyword">void</span> <span class="token function">WRREC</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span></pre></td></tr><tr><td data-num="2"></td><td><pre>    <span class="token class-name">Device</span> <span class="token constant">OUTPUT</span> <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">Device</span><span class="token punctuation">(</span><span class="token string">"05"</span><span class="token punctuation">)</span><span class="token punctuation">;</span></pre></td></tr><tr><td data-num="3"></td><td><pre>    <span class="token keyword">for</span><span class="token punctuation">(</span><span class="token class-name">X</span> <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span> <span class="token class-name">X</span> <span class="token operator">!=</span> <span class="token constant">LENGTH</span><span class="token punctuation">;</span> <span class="token class-name">X</span><span class="token operator">++</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span></pre></td></tr><tr><td data-num="4"></td><td><pre>        <span class="token keyword">while</span> <span class="token punctuation">(</span><span class="token operator">!</span> <span class="token constant">OUTPUT</span><span class="token punctuation">.</span><span class="token function">isReady</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span></pre></td></tr><tr><td data-num="5"></td><td><pre>        <span class="token punctuation">&#125;</span></pre></td></tr><tr><td data-num="6"></td><td><pre>        </pre></td></tr><tr><td data-num="7"></td><td><pre>        <span class="token keyword">char</span> c <span class="token operator">=</span> <span class="token constant">BUFFER</span><span class="token punctuation">[</span><span class="token class-name">X</span><span class="token punctuation">]</span><span class="token punctuation">;</span></pre></td></tr><tr><td data-num="8"></td><td><pre>        <span class="token constant">OUTPUT</span><span class="token punctuation">.</span><span class="token function">write</span><span class="token punctuation">(</span>c<span class="token punctuation">)</span><span class="token punctuation">;</span></pre></td></tr><tr><td data-num="9"></td><td><pre>    <span class="token punctuation">&#125;</span></pre></td></tr><tr><td data-num="10"></td><td><pre>    <span class="token keyword">return</span><span class="token punctuation">;</span></pre></td></tr><tr><td data-num="11"></td><td><pre><span class="token punctuation">&#125;</span></pre></td></tr></table></figure><h2 id="example-of-sicxe-program"><a class="anchor" href="#example-of-sicxe-program">#</a> Example of SIC/XE Program</h2><ul><li><strong>prefix  <code>@</code> </strong>: <span class="red">Indirect</span> addressing</li><li><strong>prefix  <code>#</code> </strong>: <span class="red">Immediate</span> operands</li><li><strong>prefix #&lt;LABEL&gt;</strong>: operands = the <strong>address</strong> of the LABEL</li></ul><pre><code>Line Loc    Source statement Object code  5 0000 COPY START 0  10 0000 FIRST STL RETADR 17202D  12 0003 LDB    #LENGTH 69202D  13 BASE LENGTH  15 0006 CLOOP  +JSUB RDREC 4B101036  20 000A LDA LENGTH 032026  25 000D COMP   #0 290000  30 0010 JEQ ENDFIL 332007  35 0013        +JSUB WRREC 4B10105D  40 0017 J CLOOP 3F2FEC  45 001A ENDFIL LDA EOF 032010  50 001D STA BUFFER 0F2016  55 0020 LDA    #3 010003  60 0023 STA LENGTH 0F200D  65 0026        +JSUBWRREC 4B10105D  70 002A J      @RETADR 3E2003  80 002D EOF BYTEC'EOF' 454F46  95 0030 RETADR RESW 1  100 0033 LENGTH RESW1  105 0036 BUFFER RESB4096  110 . 115 .SUBROUTINE TO READ RECORD INTO BUFFER  120 . 125 1036 RDREC CLEAR X B410  130 1038 CLEAR A B400  132 103A CLEAR S B440  133 103C        +LDT    #409675101000  135 1040 RLOOP TD INPUT E32019  140 1043 JEQ RLOOP 332FFA  145 1046 RD INPUT DB2013  150 1049 COMPR A,S A004  155 104B JEQ EXIT 332008  160 104E STCHBUFFER,X 57C003  165 1051 TIXR T B850  170 1053 JLT RLOOP 3B2FEA  175 1056 EXIT STX LENGTH 134000  180 1059 RSUB 4F0000  185 105C INPUT BYTE X'F1' F1  195 . 200 .SUBROUTINE TO WRITE RECORD FROM BUFFER  205 . 210 105D WRREC CLEAR X B410  212 105F LDT LENGTH 774000  215 1062 WLOOP TD OUTPUT E32011  220 1065 JEQ WLOOP 332FFA  225 1068 LDCH BUFFER,X 53C003  230 106B WD OUTPUT DF2008  235 106E TIXR T B850  240 1070 JLT WLOOP 3B2FEF  245 1073 RSUB 4F0000  250  1076    OUTPUT BYTE  X'05'  05  255                    END     FIRST</code></pre>]]></content>
      
      
      <categories>
          
          <category> SystemSoftware </category>
          
      </categories>
      
      
        <tags>
            
            <tag> System Software </tag>
            
            <tag> Assembler </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>uva 706 - LC-Display</title>
      <link href="/2023/04/26/Coding/uva/Star1/uva%20706/"/>
      <url>/2023/04/26/Coding/uva/Star1/uva%20706/</url>
      
        <content type="html"><![CDATA[<p>⭐️</p><h2 id="題目連結"><a class="anchor" href="#題目連結">#</a> 題目連結</h2><ul><li><span class="exturl" data-url="aHR0cHM6Ly96ZXJvanVkZ2UudHcvU2hvd1Byb2JsZW0/cHJvYmxlbWlkPWMxMzU=">ZeroJudge</span></li><li><span class="exturl" data-url="aHR0cHM6Ly9vbmxpbmVqdWRnZS5vcmcvZXh0ZXJuYWwvNy9wNzA2LnBkZg==">題目連結</span></li><li><span class="exturl" data-url="aHR0cHM6Ly9vbmxpbmVqdWRnZS5vcmcvaW5kZXgucGhwP29wdGlvbj1jb21fb25saW5lanVkZ2UmYW1wO0l0ZW1pZD04JmFtcDtjYXRlZ29yeT05JmFtcDtwYWdlPXNob3dfcHJvYmxlbSZhbXA7cHJvYmxlbT02NDc=">Online Judge</span></li><li><span class="exturl" data-url="aHR0cHM6Ly93d3cudWRlYnVnLmNvbS9VVmEvNzA2">uDebug</span></li></ul><h2 id="題目敘述"><a class="anchor" href="#題目敘述">#</a> 題目敘述</h2><p>A friend of you has just bought a new computer. Until now, the most powerful computer he ever used has been a pocket calculator. Now, looking at his new computer, he is a bit disappointed, because he liked the LC-display of his calculator so much. So you decide to write a program that displays numbers in an LC-display-like style on his computer.</p><h2 id="input"><a class="anchor" href="#input">#</a> Input</h2><p>The input file contains several lines, one for each number to be displayed. Each line contains two integers  <code>s</code> ,  <code>n</code>  ( <code>1 ≤ s ≤ 10</code> ,  <code>0 ≤ n ≤ 99 999 999</code> ), where  <code>n</code>  is the number to be displayed and  <code>s</code>  is the size in which it shall be displayed.</p><p>The input file will be terminated by a line containing two zeros. This line should not be processed.</p><h2 id="output"><a class="anchor" href="#output">#</a> Output</h2><p>Output the numbers given in the input file in an LC-display-style using  <code>s</code>  ‘-’ signs for the horizontal segments and  <code>s</code>  ‘|’ signs for the vertical ones. Each digit occupies exactly  <code>s + 2</code>  columns and  <code>2s + 3</code>  rows. (Be sure to fill all the white space occupied by the digits with blanks, also for the last digit.) <em>There has to be exactly one column of blanks between two digits</em>.</p><p><em>Output a blank line after each number</em>. (You will find a sample of each digit in the sample output.)</p><h2 id="sample-input"><a class="anchor" href="#sample-input">#</a> Sample Input</h2><blockquote><p>2 12345<br>3 67890<br>0 0</p></blockquote><h2 id="sample-output"><a class="anchor" href="#sample-output">#</a> Sample Output</h2><p><img data-src="https://i.imgur.com/1yA2BuX.png" alt=""></p><h2 id="solution"><a class="anchor" href="#solution">#</a> Solution</h2><figure class="highlight c"><figcaption data-lang="c"></figcaption><table><tr><td data-num="1"></td><td><pre><span class="token macro property"><span class="token directive-hash">#</span><span class="token directive keyword">include</span> <span class="token string">&lt;bits/stdc++.h></span></span></pre></td></tr><tr><td data-num="2"></td><td><pre></pre></td></tr><tr><td data-num="3"></td><td><pre>using namespace std<span class="token punctuation">;</span></pre></td></tr><tr><td data-num="4"></td><td><pre></pre></td></tr><tr><td data-num="5"></td><td><pre><span class="token keyword">int</span> <span class="token function">main</span> <span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span></pre></td></tr><tr><td data-num="6"></td><td><pre>    <span class="token keyword">int</span> s<span class="token punctuation">;</span></pre></td></tr><tr><td data-num="7"></td><td><pre>    string str<span class="token punctuation">;</span></pre></td></tr><tr><td data-num="8"></td><td><pre>    map<span class="token operator">&lt;</span><span class="token keyword">char</span><span class="token punctuation">,</span> vector<span class="token operator">&lt;</span>bool<span class="token operator">>></span> mp<span class="token punctuation">;</span></pre></td></tr><tr><td data-num="9"></td><td><pre>    mp<span class="token punctuation">[</span><span class="token char">'0'</span><span class="token punctuation">]</span> <span class="token operator">=</span> <span class="token punctuation">&#123;</span>true<span class="token punctuation">,</span> true<span class="token punctuation">,</span> true<span class="token punctuation">,</span> false<span class="token punctuation">,</span> true<span class="token punctuation">,</span> true<span class="token punctuation">,</span> true<span class="token punctuation">&#125;</span><span class="token punctuation">;</span></pre></td></tr><tr><td data-num="10"></td><td><pre>    mp<span class="token punctuation">[</span><span class="token char">'1'</span><span class="token punctuation">]</span> <span class="token operator">=</span> <span class="token punctuation">&#123;</span>false<span class="token punctuation">,</span> false<span class="token punctuation">,</span> true<span class="token punctuation">,</span> false<span class="token punctuation">,</span> false<span class="token punctuation">,</span> true<span class="token punctuation">,</span> false<span class="token punctuation">&#125;</span><span class="token punctuation">;</span></pre></td></tr><tr><td data-num="11"></td><td><pre>    mp<span class="token punctuation">[</span><span class="token char">'2'</span><span class="token punctuation">]</span> <span class="token operator">=</span> <span class="token punctuation">&#123;</span>true<span class="token punctuation">,</span> false<span class="token punctuation">,</span> true<span class="token punctuation">,</span> true<span class="token punctuation">,</span> true<span class="token punctuation">,</span> false<span class="token punctuation">,</span> true<span class="token punctuation">&#125;</span><span class="token punctuation">;</span></pre></td></tr><tr><td data-num="12"></td><td><pre>    mp<span class="token punctuation">[</span><span class="token char">'3'</span><span class="token punctuation">]</span> <span class="token operator">=</span> <span class="token punctuation">&#123;</span>true<span class="token punctuation">,</span> false<span class="token punctuation">,</span> true<span class="token punctuation">,</span> true<span class="token punctuation">,</span> false<span class="token punctuation">,</span> true<span class="token punctuation">,</span> true<span class="token punctuation">&#125;</span><span class="token punctuation">;</span></pre></td></tr><tr><td data-num="13"></td><td><pre>    mp<span class="token punctuation">[</span><span class="token char">'4'</span><span class="token punctuation">]</span> <span class="token operator">=</span> <span class="token punctuation">&#123;</span>false<span class="token punctuation">,</span> true<span class="token punctuation">,</span> true<span class="token punctuation">,</span> true<span class="token punctuation">,</span> false<span class="token punctuation">,</span> true<span class="token punctuation">,</span> false<span class="token punctuation">&#125;</span><span class="token punctuation">;</span></pre></td></tr><tr><td data-num="14"></td><td><pre>    mp<span class="token punctuation">[</span><span class="token char">'5'</span><span class="token punctuation">]</span> <span class="token operator">=</span> <span class="token punctuation">&#123;</span>true<span class="token punctuation">,</span> true<span class="token punctuation">,</span> false<span class="token punctuation">,</span> true<span class="token punctuation">,</span> false<span class="token punctuation">,</span> true<span class="token punctuation">,</span> true<span class="token punctuation">&#125;</span><span class="token punctuation">;</span></pre></td></tr><tr><td data-num="15"></td><td><pre>    mp<span class="token punctuation">[</span><span class="token char">'6'</span><span class="token punctuation">]</span> <span class="token operator">=</span> <span class="token punctuation">&#123;</span>true<span class="token punctuation">,</span> true<span class="token punctuation">,</span> false<span class="token punctuation">,</span> true<span class="token punctuation">,</span> true<span class="token punctuation">,</span> true<span class="token punctuation">,</span> true<span class="token punctuation">&#125;</span><span class="token punctuation">;</span></pre></td></tr><tr><td data-num="16"></td><td><pre>    mp<span class="token punctuation">[</span><span class="token char">'7'</span><span class="token punctuation">]</span> <span class="token operator">=</span> <span class="token punctuation">&#123;</span>true<span class="token punctuation">,</span> false<span class="token punctuation">,</span> true<span class="token punctuation">,</span> false<span class="token punctuation">,</span> false<span class="token punctuation">,</span> true<span class="token punctuation">,</span> false<span class="token punctuation">&#125;</span><span class="token punctuation">;</span></pre></td></tr><tr><td data-num="17"></td><td><pre>    mp<span class="token punctuation">[</span><span class="token char">'8'</span><span class="token punctuation">]</span> <span class="token operator">=</span> <span class="token punctuation">&#123;</span>true<span class="token punctuation">,</span> true<span class="token punctuation">,</span> true<span class="token punctuation">,</span> true<span class="token punctuation">,</span> true<span class="token punctuation">,</span> true<span class="token punctuation">,</span> true<span class="token punctuation">&#125;</span><span class="token punctuation">;</span></pre></td></tr><tr><td data-num="18"></td><td><pre>    mp<span class="token punctuation">[</span><span class="token char">'9'</span><span class="token punctuation">]</span> <span class="token operator">=</span> <span class="token punctuation">&#123;</span>true<span class="token punctuation">,</span> true<span class="token punctuation">,</span> true<span class="token punctuation">,</span> true<span class="token punctuation">,</span> false<span class="token punctuation">,</span> true<span class="token punctuation">,</span> true<span class="token punctuation">&#125;</span><span class="token punctuation">;</span></pre></td></tr><tr><td data-num="19"></td><td><pre>    <span class="token keyword">while</span> <span class="token punctuation">(</span>cin <span class="token operator">>></span> s <span class="token operator">>></span> str<span class="token punctuation">)</span> <span class="token punctuation">&#123;</span></pre></td></tr><tr><td data-num="20"></td><td><pre>        <span class="token keyword">if</span> <span class="token punctuation">(</span>s <span class="token operator">==</span> <span class="token number">0</span> <span class="token operator">&amp;&amp;</span> str <span class="token operator">==</span> <span class="token string">"0"</span><span class="token punctuation">)</span> <span class="token keyword">break</span><span class="token punctuation">;</span></pre></td></tr><tr><td data-num="21"></td><td><pre>        string l1 <span class="token operator">=</span> <span class="token string">""</span><span class="token punctuation">,</span> l2 <span class="token operator">=</span> <span class="token string">""</span><span class="token punctuation">,</span> l3 <span class="token operator">=</span> <span class="token string">""</span><span class="token punctuation">,</span> l4 <span class="token operator">=</span> <span class="token string">""</span><span class="token punctuation">,</span> l5 <span class="token operator">=</span> <span class="token string">""</span><span class="token punctuation">;</span></pre></td></tr><tr><td data-num="22"></td><td><pre>        <span class="token keyword">for</span> <span class="token punctuation">(</span><span class="token keyword">int</span> j<span class="token operator">=</span><span class="token number">0</span><span class="token punctuation">;</span> j<span class="token operator">&lt;</span>str<span class="token punctuation">.</span><span class="token function">size</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span> j<span class="token operator">++</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span></pre></td></tr><tr><td data-num="23"></td><td><pre>            <span class="token keyword">char</span> c <span class="token operator">=</span> str<span class="token punctuation">[</span>j<span class="token punctuation">]</span><span class="token punctuation">;</span></pre></td></tr><tr><td data-num="24"></td><td><pre>            vector<span class="token operator">&lt;</span>bool<span class="token operator">></span> tmp <span class="token operator">=</span> mp<span class="token punctuation">[</span>c<span class="token punctuation">]</span><span class="token punctuation">;</span></pre></td></tr><tr><td data-num="25"></td><td><pre>            l1 <span class="token operator">+=</span> <span class="token string">" "</span><span class="token punctuation">;</span></pre></td></tr><tr><td data-num="26"></td><td><pre>            <span class="token keyword">if</span> <span class="token punctuation">(</span>tmp<span class="token punctuation">[</span><span class="token number">0</span><span class="token punctuation">]</span> <span class="token operator">==</span> true<span class="token punctuation">)</span> <span class="token keyword">for</span> <span class="token punctuation">(</span><span class="token keyword">int</span> i<span class="token operator">=</span><span class="token number">1</span><span class="token punctuation">;</span> i<span class="token operator">&lt;=</span>s<span class="token punctuation">;</span> i<span class="token operator">++</span><span class="token punctuation">)</span> l1 <span class="token operator">+=</span> <span class="token string">"-"</span><span class="token punctuation">;</span></pre></td></tr><tr><td data-num="27"></td><td><pre>            <span class="token keyword">else</span> <span class="token keyword">for</span> <span class="token punctuation">(</span><span class="token keyword">int</span> i<span class="token operator">=</span><span class="token number">1</span><span class="token punctuation">;</span> i<span class="token operator">&lt;=</span>s<span class="token punctuation">;</span> i<span class="token operator">++</span><span class="token punctuation">)</span> l1 <span class="token operator">+=</span> <span class="token string">" "</span><span class="token punctuation">;</span></pre></td></tr><tr><td data-num="28"></td><td><pre>            l1 <span class="token operator">+=</span> <span class="token string">" "</span><span class="token punctuation">;</span></pre></td></tr><tr><td data-num="29"></td><td><pre></pre></td></tr><tr><td data-num="30"></td><td><pre>            <span class="token keyword">if</span> <span class="token punctuation">(</span>tmp<span class="token punctuation">[</span><span class="token number">1</span><span class="token punctuation">]</span> <span class="token operator">==</span> true<span class="token punctuation">)</span> l2 <span class="token operator">+=</span> <span class="token string">"|"</span><span class="token punctuation">;</span></pre></td></tr><tr><td data-num="31"></td><td><pre>            <span class="token keyword">else</span> l2 <span class="token operator">+=</span> <span class="token string">" "</span><span class="token punctuation">;</span></pre></td></tr><tr><td data-num="32"></td><td><pre>            <span class="token keyword">for</span> <span class="token punctuation">(</span><span class="token keyword">int</span> i<span class="token operator">=</span><span class="token number">1</span><span class="token punctuation">;</span> i<span class="token operator">&lt;=</span>s<span class="token punctuation">;</span> i<span class="token operator">++</span><span class="token punctuation">)</span> l2 <span class="token operator">+=</span> <span class="token string">" "</span><span class="token punctuation">;</span></pre></td></tr><tr><td data-num="33"></td><td><pre>            <span class="token keyword">if</span> <span class="token punctuation">(</span>tmp<span class="token punctuation">[</span><span class="token number">2</span><span class="token punctuation">]</span> <span class="token operator">==</span> true<span class="token punctuation">)</span> l2 <span class="token operator">+=</span> <span class="token string">"|"</span><span class="token punctuation">;</span></pre></td></tr><tr><td data-num="34"></td><td><pre>            <span class="token keyword">else</span> l2 <span class="token operator">+=</span> <span class="token string">" "</span><span class="token punctuation">;</span></pre></td></tr><tr><td data-num="35"></td><td><pre></pre></td></tr><tr><td data-num="36"></td><td><pre>            l3 <span class="token operator">+=</span> <span class="token string">" "</span><span class="token punctuation">;</span></pre></td></tr><tr><td data-num="37"></td><td><pre>            <span class="token keyword">if</span> <span class="token punctuation">(</span>tmp<span class="token punctuation">[</span><span class="token number">3</span><span class="token punctuation">]</span> <span class="token operator">==</span> true<span class="token punctuation">)</span> <span class="token keyword">for</span> <span class="token punctuation">(</span><span class="token keyword">int</span> i<span class="token operator">=</span><span class="token number">1</span><span class="token punctuation">;</span> i<span class="token operator">&lt;=</span>s<span class="token punctuation">;</span> i<span class="token operator">++</span><span class="token punctuation">)</span> l3 <span class="token operator">+=</span> <span class="token string">"-"</span><span class="token punctuation">;</span></pre></td></tr><tr><td data-num="38"></td><td><pre>            <span class="token keyword">else</span> <span class="token keyword">for</span> <span class="token punctuation">(</span><span class="token keyword">int</span> i<span class="token operator">=</span><span class="token number">1</span><span class="token punctuation">;</span> i<span class="token operator">&lt;=</span>s<span class="token punctuation">;</span> i<span class="token operator">++</span><span class="token punctuation">)</span> l3 <span class="token operator">+=</span> <span class="token string">" "</span><span class="token punctuation">;</span></pre></td></tr><tr><td data-num="39"></td><td><pre>            l3 <span class="token operator">+=</span> <span class="token string">" "</span><span class="token punctuation">;</span></pre></td></tr><tr><td data-num="40"></td><td><pre></pre></td></tr><tr><td data-num="41"></td><td><pre>            <span class="token keyword">if</span> <span class="token punctuation">(</span>tmp<span class="token punctuation">[</span><span class="token number">4</span><span class="token punctuation">]</span> <span class="token operator">==</span> true<span class="token punctuation">)</span> l4 <span class="token operator">+=</span> <span class="token string">"|"</span><span class="token punctuation">;</span></pre></td></tr><tr><td data-num="42"></td><td><pre>            <span class="token keyword">else</span> l4 <span class="token operator">+=</span> <span class="token string">" "</span><span class="token punctuation">;</span></pre></td></tr><tr><td data-num="43"></td><td><pre>            <span class="token keyword">for</span> <span class="token punctuation">(</span><span class="token keyword">int</span> i<span class="token operator">=</span><span class="token number">1</span><span class="token punctuation">;</span> i<span class="token operator">&lt;=</span>s<span class="token punctuation">;</span> i<span class="token operator">++</span><span class="token punctuation">)</span> l4 <span class="token operator">+=</span> <span class="token string">" "</span><span class="token punctuation">;</span></pre></td></tr><tr><td data-num="44"></td><td><pre>            <span class="token keyword">if</span> <span class="token punctuation">(</span>tmp<span class="token punctuation">[</span><span class="token number">5</span><span class="token punctuation">]</span> <span class="token operator">==</span> true<span class="token punctuation">)</span> l4 <span class="token operator">+=</span> <span class="token string">"|"</span><span class="token punctuation">;</span></pre></td></tr><tr><td data-num="45"></td><td><pre>            <span class="token keyword">else</span> l4 <span class="token operator">+=</span> <span class="token string">" "</span><span class="token punctuation">;</span></pre></td></tr><tr><td data-num="46"></td><td><pre></pre></td></tr><tr><td data-num="47"></td><td><pre>            l5 <span class="token operator">+=</span> <span class="token string">" "</span><span class="token punctuation">;</span></pre></td></tr><tr><td data-num="48"></td><td><pre>            <span class="token keyword">if</span> <span class="token punctuation">(</span>tmp<span class="token punctuation">[</span><span class="token number">6</span><span class="token punctuation">]</span> <span class="token operator">==</span> true<span class="token punctuation">)</span> <span class="token keyword">for</span> <span class="token punctuation">(</span><span class="token keyword">int</span> i<span class="token operator">=</span><span class="token number">1</span><span class="token punctuation">;</span> i<span class="token operator">&lt;=</span>s<span class="token punctuation">;</span> i<span class="token operator">++</span><span class="token punctuation">)</span> l5 <span class="token operator">+=</span> <span class="token string">"-"</span><span class="token punctuation">;</span></pre></td></tr><tr><td data-num="49"></td><td><pre>            <span class="token keyword">else</span> <span class="token keyword">for</span> <span class="token punctuation">(</span><span class="token keyword">int</span> i<span class="token operator">=</span><span class="token number">1</span><span class="token punctuation">;</span> i<span class="token operator">&lt;=</span>s<span class="token punctuation">;</span> i<span class="token operator">++</span><span class="token punctuation">)</span> l5 <span class="token operator">+=</span> <span class="token string">" "</span><span class="token punctuation">;</span></pre></td></tr><tr><td data-num="50"></td><td><pre>            l5 <span class="token operator">+=</span> <span class="token string">" "</span><span class="token punctuation">;</span></pre></td></tr><tr><td data-num="51"></td><td><pre></pre></td></tr><tr><td data-num="52"></td><td><pre>            <span class="token keyword">if</span> <span class="token punctuation">(</span>j <span class="token operator">!=</span> str<span class="token punctuation">.</span><span class="token function">size</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">-</span> <span class="token number">1</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span></pre></td></tr><tr><td data-num="53"></td><td><pre>                l1 <span class="token operator">+=</span> <span class="token string">" "</span><span class="token punctuation">;</span> l2 <span class="token operator">+=</span> <span class="token string">" "</span><span class="token punctuation">;</span> l3 <span class="token operator">+=</span> <span class="token string">" "</span><span class="token punctuation">;</span> l4 <span class="token operator">+=</span> <span class="token string">" "</span><span class="token punctuation">;</span> l5 <span class="token operator">+=</span> <span class="token string">" "</span><span class="token punctuation">;</span></pre></td></tr><tr><td data-num="54"></td><td><pre>            <span class="token punctuation">&#125;</span> </pre></td></tr><tr><td data-num="55"></td><td><pre>                </pre></td></tr><tr><td data-num="56"></td><td><pre>        <span class="token punctuation">&#125;</span></pre></td></tr><tr><td data-num="57"></td><td><pre></pre></td></tr><tr><td data-num="58"></td><td><pre>        cout <span class="token operator">&lt;&lt;</span> l1 <span class="token operator">&lt;&lt;</span> endl<span class="token punctuation">;</span></pre></td></tr><tr><td data-num="59"></td><td><pre>        <span class="token keyword">for</span> <span class="token punctuation">(</span><span class="token keyword">int</span> i<span class="token operator">=</span><span class="token number">1</span><span class="token punctuation">;</span> i<span class="token operator">&lt;=</span>s<span class="token punctuation">;</span> i<span class="token operator">++</span><span class="token punctuation">)</span> cout <span class="token operator">&lt;&lt;</span> l2 <span class="token operator">&lt;&lt;</span> endl<span class="token punctuation">;</span></pre></td></tr><tr><td data-num="60"></td><td><pre>        cout <span class="token operator">&lt;&lt;</span> l3 <span class="token operator">&lt;&lt;</span> endl<span class="token punctuation">;</span></pre></td></tr><tr><td data-num="61"></td><td><pre>        <span class="token keyword">for</span> <span class="token punctuation">(</span><span class="token keyword">int</span> i<span class="token operator">=</span><span class="token number">1</span><span class="token punctuation">;</span> i<span class="token operator">&lt;=</span>s<span class="token punctuation">;</span> i<span class="token operator">++</span><span class="token punctuation">)</span> cout <span class="token operator">&lt;&lt;</span> l4 <span class="token operator">&lt;&lt;</span> endl<span class="token punctuation">;</span></pre></td></tr><tr><td data-num="62"></td><td><pre>        cout <span class="token operator">&lt;&lt;</span> l5 <span class="token operator">&lt;&lt;</span> endl <span class="token operator">&lt;&lt;</span> endl<span class="token punctuation">;</span></pre></td></tr><tr><td data-num="63"></td><td><pre>    <span class="token punctuation">&#125;</span></pre></td></tr><tr><td data-num="64"></td><td><pre>    <span class="token keyword">return</span> <span class="token number">0</span><span class="token punctuation">;</span></pre></td></tr><tr><td data-num="65"></td><td><pre><span class="token punctuation">&#125;</span></pre></td></tr></table></figure>]]></content>
      
      
      <categories>
          
          <category> Coding </category>
          
          <category> UVA </category>
          
          <category> Star1 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> Star1 </tag>
            
            <tag> CPE </tag>
            
            <tag> UVA </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>Ch02 - Assemblers</title>
      <link href="/2023/04/26/SystemSoftware/Ch02_Assembler/"/>
      <url>/2023/04/26/SystemSoftware/Ch02_Assembler/</url>
      
        <content type="html"><![CDATA[<p><img data-src="https://i.imgur.com/hSiRp3g.png" alt=""></p><h2 id="introduction"><a class="anchor" href="#introduction">#</a> Introduction</h2><p>Design and implementation of assemblers</p><ul><li>Some <strong>common fundamental functions</strong> such as:<ul><li>translating <strong>mnemonic operation codes</strong> to their <strong>machine language</strong> equivalents</li><li>assigning machine <strong>addresses</strong> to <strong>symbolic labels</strong> used by the programmer.</li></ul></li><li>The features and design of an assembler depend heavily upon the source language it translates and the machine language it produces.</li><li><strong>Machine dependent/independent features</strong></li></ul><h2 id="basic-assembler-functions"><a class="anchor" href="#basic-assembler-functions">#</a> Basic Assembler Functions</h2><ul><li><p><a href="http://localhost:4000/2023/04/26/System%20Software/Ch02/Ch02_example/"><strong>Example of SIC assembler language program</strong></a></p></li><li><p><strong>Assembler Directive</strong>: 在組語程式中，用來告訴 Assembler 某些資訊或是該做哪些動作，不屬於 CPU 的指令</p><ul><li><code>START</code> : specify <strong>name</strong> and <strong>starting address</strong> for the program.</li><li><code>END</code> : indicate the <strong>end of the source program</strong> and (optionally) specify the first executable instruction in the program.</li><li><strong>Variable/Constant Declaration</strong><ul><li><code>BYTE</code></li><li><code>WORD</code></li><li><code>RESB</code></li><li><code>RESW</code></li></ul></li></ul></li><li><p>The line numbers are for reference only and are not part of the program</p></li></ul><h3 id="a-simple-sic-assembler"><a class="anchor" href="#a-simple-sic-assembler">#</a> A Simple SIC Assembler</h3><ul><li>The translation of source program to object code requires us to accomplish the following functions<br>(not necessarily in the order given)<ol><li>Convert <strong>mnemonic operation codes</strong> to their machine <strong>language equivalents</strong><ul><li>translate STL to 14 (line 10)</li></ul></li><li>Convert <strong>symbolic operands</strong> to their equivalent <strong>machine addresses</strong><ul><li>translate RETADR to 1033 (line 10)</li></ul></li><li>Build the <strong>machine instruction</strong> in the <strong>proper format</strong>.</li><li>Convert the <strong>data constants</strong> specified in the source program into their <strong>internal machine representations</strong><ul><li>translate EOF to 454F46 (line 80)</li></ul></li><li><strong>Write the object program</strong> and the <strong>assembly listing</strong>.</li></ol></li></ul><h3 id="forward-reference-two-passes"><a class="anchor" href="#forward-reference-two-passes">#</a> Forward Reference &amp; Two Passes</h3><ul><li>The instruction at line 10 contains a <span class="red">forward reference</span>.<ul><li>Line 10 存取  <code>RETADR</code> ，但  <code>RETADR</code>  在 line 95 才定義</li></ul></li><li>Because of forward reference, most assemblers make <strong>two passes</strong> over the source program.<ul><li><strong>The first pass</strong>:<ul><li>does little more than scan the source program for <strong>label definitions</strong> and <strong>assign addresses</strong>.</li></ul></li><li><strong>The second pass</strong>:<ul><li>performs most of the <strong>actual translation</strong> previously described.</li></ul></li></ul></li><li>In addition, the assembler must <strong>process statements</strong> called <span class="red">assembler directives</span> (or <span class="red">pseudo-instructions</span>).</li></ul><h3 id="simple-object-program"><a class="anchor" href="#simple-object-program">#</a> Simple Object Program</h3><ul><li>The simple object program format we use contains <strong>three types of records</strong>.<ul><li><strong>Header</strong><ul><li>program name</li><li>starting address</li><li>length</li></ul></li><li><strong>Text</strong><ul><li>translated instructions</li><li>data</li><li>indication of the addresses where these are to be loaded</li></ul></li><li><strong>End</strong><ul><li>marks the end of the object program</li><li>specifies the address in the program where execution is to begin</li></ul></li></ul></li></ul><p><strong>Header record</strong>:</p><ul><li>Col. 1: H</li><li>Col. 2-7: Program name</li><li>Col. 8-13: starting address of object program</li><li>Col. 14-19: length of object program in bytes</li></ul><p><strong>Text record</strong>:</p><ul><li>Col. 1: T</li><li>Col. 2-7: starting address for object code in this record</li><li>Col. 8-9: length of object code in this record in bytes</li><li>Col. 10-69: object code, represented in <strong>hexadecimal</strong></li></ul><div class="note info"><ul><li>Object code 的部分可以容納 60 個 <strong>symbol</strong>（每個 4 bit），若以 byte 計算就是 30 bytes。</li><li>一個 instruction 長 3 bytes，所以可以放 10 個 instructions</li><li>在指令不連續時（通常是中間有宣告變數），會在沒填滿的情況下使用新的 text record。</li></ul></div><p><strong>End record</strong>:</p><ul><li>Col.1: E</li><li>Col. 2-7: address of first executable instruction in object program</li></ul><p><img data-src="https://i.imgur.com/K3uyzDu.jpg" alt=""></p><ul><li>There is no object code corresponding to addresses 1033-2038.</li><li>This storage is simply reserved by the loader for use by the program during execution.</li></ul><h3 id="two-passes"><a class="anchor" href="#two-passes">#</a> Two Passes</h3><p><strong>Pass 1</strong> (define symbols):</p><ul><li><strong>Assign addresses</strong> to all <strong>statements</strong> in the program.</li><li>Save the values (addresses) assigned to all <strong>labels</strong> for use in Pass 2.</li><li>Perform some <strong>processing of assembler directives</strong>.<ul><li>e.g., <strong>determining the length of data areas</strong> defined by BYTE, RESW, etc.)</li></ul></li></ul><p><strong>Pass 2</strong> (assemble instructions and generate object program):</p><ul><li>Assemble <strong>instructions</strong> (translating operation codes and looking up addresses)</li><li>Generate <strong>data values</strong> defined by BYTE, WORD, etc.</li><li>Perform processing of assembler directives not done during Pass 1.</li><li>Write the object program and the assembly listing.</li></ul><h2 id="assembler-algorithm-and-data-structures"><a class="anchor" href="#assembler-algorithm-and-data-structures">#</a> Assembler Algorithm and Data Structures</h2><p>Major internal data structures of simple assembler:</p><ul><li><strong>Operation code table</strong> (OPTAB)</li><li>Symbol table (SYMTAB)</li><li>Location Counter (LOCCTR)<ul><li><strong>Initialized to the beginning address</strong> specified in the START statement.</li></ul></li></ul><h3 id="operation-code-table-optab"><a class="anchor" href="#operation-code-table-optab">#</a> Operation Code Table (OPTAB)</h3><ul><li>Contains (at least) the <strong>mnemonic operation code</strong> and its <strong>machine language equivalents</strong><ul><li>In more complex assemblers, this table also contains information about instruction format and length.</li></ul></li><li>OPTAB is usually organized as a <strong>hash table</strong>, with <strong>mnemonic operation code as the <span class="red">key</span></strong>.<ul><li>The information in OPTAB is <strong>predefined</strong> when the assembler itself is written.</li></ul></li></ul><p><strong>Example of OPTAB</strong></p><table><thead><tr><th style="text-align:left">Mnemonic</th><th style="text-align:left">Machine Language</th></tr></thead><tbody><tr><td style="text-align:left"><code>ADD</code></td><td style="text-align:left">18</td></tr><tr><td style="text-align:left"><code>ADDF</code></td><td style="text-align:left">58</td></tr><tr><td style="text-align:left"><code>ADDR</code></td><td style="text-align:left">90</td></tr><tr><td style="text-align:left">…</td><td style="text-align:left">…</td></tr></tbody></table><div class="note info"><ul><li>Operation code table 的內容不太會變動</li><li>使用目的是用來加快 mnemonic <span class="katex"><span class="katex-mathml"><math xmlns="http://www.w3.org/1998/Math/MathML"><semantics><mrow><mo>⇒</mo></mrow><annotation encoding="application/x-tex">\Rightarrow</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:0.36687em;vertical-align:0em;"></span><span class="mrel">⇒</span></span></span></span> machine language 的速度<ul><li>需要使用<strong>查詢</strong>速度很快的資料結構</li></ul></li><li>所以會使用 Hash Table 來實作 OPTAB<ul><li>查詢的平均複雜度是 <span class="katex"><span class="katex-mathml"><math xmlns="http://www.w3.org/1998/Math/MathML"><semantics><mrow><mi>O</mi><mo stretchy="false">(</mo><mn>1</mn><mo stretchy="false">)</mo></mrow><annotation encoding="application/x-tex">O(1)</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:1em;vertical-align:-0.25em;"></span><span class="mord mathnormal" style="margin-right:0.02778em;">O</span><span class="mopen">(</span><span class="mord">1</span><span class="mclose">)</span></span></span></span></li></ul></li></ul></div><h3 id="symbol-table-symtab"><a class="anchor" href="#symbol-table-symtab">#</a> Symbol Table (SYMTAB)</h3><ul><li>Includes the <strong>name</strong> and <strong>value (address)</strong> for each <strong>label</strong> in the source program<ul><li>together with <strong>flags</strong> to indicate <span class="red">error conditions</span><ul><li>e.g., a symbol defined in two different places</li></ul></li></ul></li><li>It may also contain other information about the data area or instruction labeled<ul><li>for example, its <strong>type</strong> or <strong>length</strong>.</li></ul></li><li>During <span class="red">Pass 1</span><ul><li><strong>labels</strong> are entered into SYMTAB as they are encountered in the source program</li><li>along with their <strong>assigned addresses</strong>.</li></ul></li><li>During <span class="red">Pass 2</span><ul><li>symbols used as <strong>operands</strong> are <strong>looked up in SYMTAB</strong><br><span class="katex"><span class="katex-mathml"><math xmlns="http://www.w3.org/1998/Math/MathML"><semantics><mrow><mo>⇒</mo></mrow><annotation encoding="application/x-tex">\Rightarrow</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:0.36687em;vertical-align:0em;"></span><span class="mrel">⇒</span></span></span></span> <strong>the addresses</strong> to be inserted in the assembled instructions.</li></ul></li><li>SYMTAB is usually organized as a <strong>hash table</strong><ul><li>for <strong>efficiency</strong> of <span class="red">insertion</span> and <span class="red">retrieval</span>.</li></ul></li><li>Since entries are rarely deleted from this table, efficiency of deletion is not an important consideration.</li></ul><p><strong>Example: SYMTAB of <a href="./Ch02%20-%20%E7%AF%84%E4%BE%8B%E7%A8%8B%E5%BC%8F.md">SIC Program</a></strong></p><table><thead><tr><th style="text-align:left">Label</th><th style="text-align:left">Location</th></tr></thead><tbody><tr><td style="text-align:left"><code>COPY</code></td><td style="text-align:left">1000</td></tr><tr><td style="text-align:left"><code>FIRST</code></td><td style="text-align:left">1000</td></tr><tr><td style="text-align:left"><code>CLOOP</code></td><td style="text-align:left">1003</td></tr><tr><td style="text-align:left"><code>ENDFIL</code></td><td style="text-align:left">1015</td></tr><tr><td style="text-align:left"><code>EOF</code></td><td style="text-align:left">102A</td></tr><tr><td style="text-align:left"><code>THREE</code></td><td style="text-align:left">102D</td></tr><tr><td style="text-align:left">…</td><td style="text-align:left">…</td></tr></tbody></table><div class="note info"><p>對 hash table 來說，<strong>insertion</strong> (插入) 和 <strong>retrieval</strong> (查詢)，平均複雜度都是 <span class="katex"><span class="katex-mathml"><math xmlns="http://www.w3.org/1998/Math/MathML"><semantics><mrow><mi>O</mi><mo stretchy="false">(</mo><mn>1</mn><mo stretchy="false">)</mo></mrow><annotation encoding="application/x-tex">O(1)</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:1em;vertical-align:-0.25em;"></span><span class="mord mathnormal" style="margin-right:0.02778em;">O</span><span class="mopen">(</span><span class="mord">1</span><span class="mclose">)</span></span></span></span></p></div><h3 id="hash-table"><a class="anchor" href="#hash-table">#</a> Hash Table</h3><ul><li>Care should be taken in the selection of a hashing function.<ul><li>Programmers often select many <strong>labels</strong> that have <strong>similar characteristics</strong><ul><li>for example, labels that start or end with the same characters (like LOOP1, LOOP2, LOOPA).</li></ul></li><li>It is important that the hashing function used perform well with such non-random keys.<ul><li>對於任意的 key，hash 的結果越不容易重複越好</li></ul></li><li>Division of the entire key by a <strong>prime table length</strong> often gives good results.</li></ul></li></ul><h3 id="algorithms-of-passes"><a class="anchor" href="#algorithms-of-passes">#</a> Algorithms of Passes</h3><p>Pass 1 usually writes an <span class="red">intermediate file</span></p><ul><li>contains each <strong>source statement</strong> together with its <strong>assigned addresses</strong>, <strong>error indicators</strong>, etc.</li><li>This file is used <strong>as the input to Pass 2</strong>.</li></ul><p><strong>Pseudo Code of Pass1</strong></p><figure class="highlight vhdl"><figcaption data-lang="VHDL"></figcaption><table><tr><td data-num="1"></td><td><pre><span class="token keyword">begin</span></pre></td></tr><tr><td data-num="2"></td><td><pre>    read first input line</pre></td></tr><tr><td data-num="3"></td><td><pre>    <span class="token keyword">if</span> OPCODE <span class="token operator">=</span> 'START' <span class="token keyword">then</span></pre></td></tr><tr><td data-num="4"></td><td><pre>        <span class="token keyword">begin</span></pre></td></tr><tr><td data-num="5"></td><td><pre>            save #<span class="token punctuation">[</span>OPERAND<span class="token punctuation">]</span> as starting address</pre></td></tr><tr><td data-num="6"></td><td><pre>            initialize LOCCTR <span class="token keyword">to</span> starting address</pre></td></tr><tr><td data-num="7"></td><td><pre>            write line <span class="token keyword">to</span> intermediate <span class="token keyword">file</span></pre></td></tr><tr><td data-num="8"></td><td><pre>            read <span class="token keyword">next</span> input line</pre></td></tr><tr><td data-num="9"></td><td><pre>        <span class="token keyword">end</span> <span class="token punctuation">&#123;</span><span class="token keyword">if</span> START<span class="token punctuation">&#125;</span></pre></td></tr><tr><td data-num="10"></td><td><pre>    <span class="token keyword">else</span></pre></td></tr><tr><td data-num="11"></td><td><pre>        initialize LOCCTR <span class="token keyword">to</span> <span class="token number">0</span></pre></td></tr><tr><td data-num="12"></td><td><pre>    <span class="token keyword">while</span> OPCODE !<span class="token operator">=</span> '<span class="token keyword">END</span>' do</pre></td></tr><tr><td data-num="13"></td><td><pre>        <span class="token keyword">begin</span></pre></td></tr><tr><td data-num="14"></td><td><pre>            <span class="token keyword">if</span> this <span class="token keyword">is</span> <span class="token operator">not</span> a comment line <span class="token keyword">then</span></pre></td></tr><tr><td data-num="15"></td><td><pre>                <span class="token keyword">begin</span></pre></td></tr><tr><td data-num="16"></td><td><pre>                    <span class="token keyword">if</span> there <span class="token keyword">is</span> a symbol <span class="token keyword">in</span> the <span class="token keyword">LABEL</span> field <span class="token keyword">then</span></pre></td></tr><tr><td data-num="17"></td><td><pre>                        <span class="token keyword">begin</span></pre></td></tr><tr><td data-num="18"></td><td><pre>                            search SYMTAB <span class="token keyword">for</span> <span class="token keyword">LABEL</span></pre></td></tr><tr><td data-num="19"></td><td><pre>                            <span class="token keyword">if</span> found <span class="token keyword">then</span></pre></td></tr><tr><td data-num="20"></td><td><pre>                                set error flag <span class="token punctuation">(</span>duplicate symbol<span class="token punctuation">)</span></pre></td></tr><tr><td data-num="21"></td><td><pre>                            <span class="token keyword">else</span></pre></td></tr><tr><td data-num="22"></td><td><pre>                                insert <span class="token punctuation">(</span><span class="token keyword">LABEL</span><span class="token punctuation">,</span> LOCCTR<span class="token punctuation">)</span> into SYMTAB</pre></td></tr><tr><td data-num="23"></td><td><pre>                        <span class="token keyword">end</span> <span class="token punctuation">&#123;</span><span class="token keyword">if</span> symbol<span class="token punctuation">&#125;</span></pre></td></tr><tr><td data-num="24"></td><td><pre>                    search OPTAB <span class="token keyword">for</span> OPCODE</pre></td></tr><tr><td data-num="25"></td><td><pre>                    <span class="token keyword">if</span> found <span class="token keyword">then</span></pre></td></tr><tr><td data-num="26"></td><td><pre>                        add <span class="token number">3</span> <span class="token punctuation">&#123;</span>instruction length<span class="token punctuation">&#125;</span> <span class="token keyword">to</span> LOCCTR</pre></td></tr><tr><td data-num="27"></td><td><pre>                    <span class="token keyword">else</span> <span class="token keyword">if</span> OPCODE <span class="token operator">=</span> 'WORD ' <span class="token keyword">then</span></pre></td></tr><tr><td data-num="28"></td><td><pre>                        add <span class="token number">3</span> <span class="token keyword">to</span> LOCCTR</pre></td></tr><tr><td data-num="29"></td><td><pre>                    <span class="token keyword">else</span> <span class="token keyword">if</span> OPCODE <span class="token operator">=</span> 'RESW' <span class="token keyword">then</span></pre></td></tr><tr><td data-num="30"></td><td><pre>                        add <span class="token number">3</span> <span class="token operator">*</span> #<span class="token punctuation">[</span>OPERAND<span class="token punctuation">]</span> <span class="token keyword">to</span> LOCCTR</pre></td></tr><tr><td data-num="31"></td><td><pre>                    <span class="token keyword">else</span> <span class="token keyword">if</span> OPCODE <span class="token operator">=</span> 'RESB' <span class="token keyword">then</span></pre></td></tr><tr><td data-num="32"></td><td><pre>                        add #<span class="token punctuation">[</span>OPERAND<span class="token punctuation">]</span> <span class="token keyword">to</span> LOCCTR</pre></td></tr><tr><td data-num="33"></td><td><pre>                    <span class="token keyword">else</span> <span class="token keyword">if</span> OPCODE <span class="token operator">=</span> 'BYTE' <span class="token keyword">then</span></pre></td></tr><tr><td data-num="34"></td><td><pre>                        <span class="token keyword">begin</span></pre></td></tr><tr><td data-num="35"></td><td><pre>                            find length <span class="token keyword">of</span> <span class="token keyword">constant</span> <span class="token keyword">in</span> bytes</pre></td></tr><tr><td data-num="36"></td><td><pre>                            add length <span class="token keyword">to</span> LOCCTR</pre></td></tr><tr><td data-num="37"></td><td><pre>                        <span class="token keyword">end</span> <span class="token punctuation">&#123;</span><span class="token keyword">if</span> BYTE<span class="token punctuation">&#125;</span></pre></td></tr><tr><td data-num="38"></td><td><pre>                    <span class="token keyword">else</span></pre></td></tr><tr><td data-num="39"></td><td><pre>                        set error flag <span class="token punctuation">(</span>invalid operation code<span class="token punctuation">)</span></pre></td></tr><tr><td data-num="40"></td><td><pre>                <span class="token keyword">end</span> <span class="token punctuation">&#123;</span><span class="token keyword">if</span> <span class="token operator">not</span> a comment<span class="token punctuation">&#125;</span></pre></td></tr><tr><td data-num="41"></td><td><pre>            write line <span class="token keyword">to</span> intermediate <span class="token keyword">file</span></pre></td></tr><tr><td data-num="42"></td><td><pre>            read <span class="token keyword">next</span> input line</pre></td></tr><tr><td data-num="43"></td><td><pre>        <span class="token keyword">end</span> <span class="token punctuation">&#123;</span><span class="token keyword">while</span> <span class="token operator">not</span> <span class="token keyword">END</span><span class="token punctuation">&#125;</span></pre></td></tr><tr><td data-num="44"></td><td><pre>    write last line <span class="token keyword">to</span> intermediate <span class="token keyword">file</span></pre></td></tr><tr><td data-num="45"></td><td><pre>    save <span class="token punctuation">(</span>LOCCTR <span class="token operator">-</span> starting address<span class="token punctuation">)</span> as program length</pre></td></tr><tr><td data-num="46"></td><td><pre><span class="token keyword">end</span> <span class="token punctuation">&#123;</span>Pass <span class="token number">1</span><span class="token punctuation">&#125;</span></pre></td></tr></table></figure><p><strong>Presudo Code of Pass2</strong></p><figure class="highlight vhdl"><figcaption data-lang="VHDL"></figcaption><table><tr><td data-num="1"></td><td><pre><span class="token keyword">begin</span></pre></td></tr><tr><td data-num="2"></td><td><pre>    read first input line <span class="token punctuation">&#123;</span>from intermediate <span class="token keyword">file</span><span class="token punctuation">&#125;</span></pre></td></tr><tr><td data-num="3"></td><td><pre>    <span class="token keyword">if</span> OPCODE <span class="token operator">=</span> 'START' <span class="token keyword">then</span></pre></td></tr><tr><td data-num="4"></td><td><pre>        <span class="token keyword">begin</span></pre></td></tr><tr><td data-num="5"></td><td><pre>            Write listing line</pre></td></tr><tr><td data-num="6"></td><td><pre>            read <span class="token keyword">next</span> input line</pre></td></tr><tr><td data-num="7"></td><td><pre>        <span class="token keyword">end</span> <span class="token punctuation">&#123;</span><span class="token keyword">if</span> START<span class="token punctuation">&#125;</span></pre></td></tr><tr><td data-num="8"></td><td><pre>    write Header <span class="token keyword">record</span> <span class="token keyword">to</span> object program</pre></td></tr><tr><td data-num="9"></td><td><pre>    initialize first Text <span class="token keyword">record</span></pre></td></tr><tr><td data-num="10"></td><td><pre>    <span class="token keyword">while</span> OPCODE !<span class="token operator">=</span> '<span class="token keyword">END</span>' do</pre></td></tr><tr><td data-num="11"></td><td><pre>        <span class="token keyword">begin</span></pre></td></tr><tr><td data-num="12"></td><td><pre>            <span class="token keyword">if</span> this <span class="token keyword">is</span> <span class="token operator">not</span> a comment line <span class="token keyword">then</span></pre></td></tr><tr><td data-num="13"></td><td><pre>                <span class="token keyword">begin</span></pre></td></tr><tr><td data-num="14"></td><td><pre>                    search OPTAB <span class="token keyword">for</span> OPCODE</pre></td></tr><tr><td data-num="15"></td><td><pre>                    <span class="token keyword">if</span> found <span class="token keyword">then</span></pre></td></tr><tr><td data-num="16"></td><td><pre>                        <span class="token keyword">begin</span></pre></td></tr><tr><td data-num="17"></td><td><pre>                            <span class="token keyword">if</span> there <span class="token keyword">is</span> a symbol <span class="token keyword">in</span> OPERAND field <span class="token keyword">then</span></pre></td></tr><tr><td data-num="18"></td><td><pre>                                <span class="token keyword">begin</span></pre></td></tr><tr><td data-num="19"></td><td><pre>                                    search SYMTAB <span class="token keyword">for</span> OPERAND</pre></td></tr><tr><td data-num="20"></td><td><pre>                                    <span class="token keyword">if</span> found <span class="token keyword">then</span></pre></td></tr><tr><td data-num="21"></td><td><pre>                                        store symbol value as operand address</pre></td></tr><tr><td data-num="22"></td><td><pre>                                    <span class="token keyword">else</span></pre></td></tr><tr><td data-num="23"></td><td><pre>                                        <span class="token keyword">begin</span></pre></td></tr><tr><td data-num="24"></td><td><pre>                                            store <span class="token number">0</span> as operand address</pre></td></tr><tr><td data-num="25"></td><td><pre>                                            set error flag <span class="token punctuation">(</span>undefined symbol<span class="token punctuation">)</span></pre></td></tr><tr><td data-num="26"></td><td><pre>                                        <span class="token keyword">end</span></pre></td></tr><tr><td data-num="27"></td><td><pre>                                <span class="token keyword">end</span> <span class="token punctuation">&#123;</span><span class="token keyword">if</span> symbol<span class="token punctuation">&#125;</span></pre></td></tr><tr><td data-num="28"></td><td><pre>                            <span class="token keyword">else</span></pre></td></tr><tr><td data-num="29"></td><td><pre>                                store <span class="token number">0</span> as operand address</pre></td></tr><tr><td data-num="30"></td><td><pre>                            assemble the object code instruction</pre></td></tr><tr><td data-num="31"></td><td><pre>                        <span class="token keyword">end</span> <span class="token punctuation">&#123;</span><span class="token keyword">if</span> opcode found<span class="token punctuation">&#125;</span></pre></td></tr><tr><td data-num="32"></td><td><pre>                    <span class="token keyword">else</span> <span class="token keyword">if</span> OPCODE <span class="token operator">=</span> 'BYTE' <span class="token operator">or</span> 'WORD' <span class="token keyword">then</span></pre></td></tr><tr><td data-num="33"></td><td><pre>                        convert <span class="token keyword">constant</span> <span class="token keyword">to</span> object code</pre></td></tr><tr><td data-num="34"></td><td><pre>                    <span class="token keyword">if</span> object code will <span class="token operator">not</span> fit into the current Text <span class="token keyword">record</span> <span class="token keyword">then</span></pre></td></tr><tr><td data-num="35"></td><td><pre>                        <span class="token keyword">begin</span></pre></td></tr><tr><td data-num="36"></td><td><pre>                            write Text <span class="token keyword">record</span> <span class="token keyword">to</span> object program</pre></td></tr><tr><td data-num="37"></td><td><pre>                            initialize <span class="token keyword">new</span> Text <span class="token keyword">record</span></pre></td></tr><tr><td data-num="38"></td><td><pre>                        <span class="token keyword">end</span></pre></td></tr><tr><td data-num="39"></td><td><pre>                    add object code <span class="token keyword">to</span> Text <span class="token keyword">record</span></pre></td></tr><tr><td data-num="40"></td><td><pre>                <span class="token keyword">end</span> <span class="token punctuation">&#123;</span><span class="token keyword">if</span> <span class="token operator">not</span> comment <span class="token punctuation">&#125;</span></pre></td></tr><tr><td data-num="41"></td><td><pre>            write listing line</pre></td></tr><tr><td data-num="42"></td><td><pre>            read <span class="token keyword">next</span> input line</pre></td></tr><tr><td data-num="43"></td><td><pre>        <span class="token keyword">end</span> <span class="token punctuation">&#123;</span><span class="token keyword">while</span> <span class="token operator">not</span> <span class="token keyword">END</span><span class="token punctuation">&#125;</span></pre></td></tr><tr><td data-num="44"></td><td><pre>    write last Text <span class="token keyword">record</span> <span class="token keyword">to</span> object program</pre></td></tr><tr><td data-num="45"></td><td><pre>    write <span class="token keyword">End</span> <span class="token keyword">record</span> <span class="token keyword">to</span> object program</pre></td></tr><tr><td data-num="46"></td><td><pre>    write last listing line</pre></td></tr><tr><td data-num="47"></td><td><pre><span class="token keyword">end</span> <span class="token punctuation">&#123;</span>Pass <span class="token number">2</span><span class="token punctuation">&#125;</span></pre></td></tr></table></figure><h2 id="machine-dependent-assembler-features"><a class="anchor" href="#machine-dependent-assembler-features">#</a> Machine-Dependent Assembler Features</h2><ul><li><p><a href="http://localhost:4000/2023/04/26/System%20Software/Ch02/Ch02_example/"><strong>Example of SIC/XE Program</strong></a></p></li><li><p>The <strong>assembler directive</strong>  <code>BASE</code>  is used in conjunction with <strong>base relative addressing</strong>.</p><ul><li>用  <code>BASE</code>  讓 assembler 知道 base register 的值</li><li>Assembler 必須知道 base 的值，才能計算指令中的 displacement</li></ul></li><li><p>If the <strong>displacements</strong> required for relative addressing are <strong>too large</strong> to fit into a <strong>3-byte instruction</strong><br><span class="katex"><span class="katex-mathml"><math xmlns="http://www.w3.org/1998/Math/MathML"><semantics><mrow><mo>⇒</mo></mrow><annotation encoding="application/x-tex">\Rightarrow</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:0.36687em;vertical-align:0em;"></span><span class="mrel">⇒</span></span></span></span> the <strong>4-byte extended format</strong> (Format 4) must be used.</p><ul><li>The <strong>bit e is set to 1</strong> to indicate extended instruction format.</li><li>The extended instruction format is <strong>specified with the prefix +</strong> added to the <strong>operation code</strong> in the <span class="red">source statement</span>.</li><li>It is the <strong>programmer’s responsibility to specify</strong> this form of addressing when it is required.</li></ul></li><li><p>Advantages of the more advanced SIC/XE architecture to improve the execution speed of the program</p><ul><li><strong>Register-to-register instructions</strong> are faster than register-to-memory operations.</li><li>When using <strong>immediate addressing</strong>, the operand is already present as part of the instruction and <strong>need not be fetched from anywhere</strong>.</li><li>The use of <strong>indirect addressing</strong> often <strong>avoids the need for another instruction</strong>.</li></ul></li></ul><h3 id="instruction-formats-and-addressing-modes"><a class="anchor" href="#instruction-formats-and-addressing-modes">#</a> Instruction Formats and Addressing Modes</h3><ul><li><p>The conversion of <strong>register mnemonics</strong> to numbers can be done with a separate table</p><ul><li>however, it is often convenient to use the <strong>symbol table</strong> for this purpose.</li><li>To do this, SYMTAB would <strong>be preloaded with the register names</strong> and their values.</li></ul></li><li><p>If extended format is not specified, the assembler <strong>first</strong> attempts to translate the instruction using <strong>program-counter relative addressing</strong>.</p><ul><li>If this is not possible (because the required displacement is out of range), the assembler then attempts to use <strong>base relative addressing</strong>.</li><li>If neither form of relative addressing is applicable and extended format is not specified, then the instruction cannot be properly assembled.<ul><li>In this case, the assembler must generate an <span class="red">error message</span>.</li></ul></li></ul></li></ul><h3 id="displacement-calculation"><a class="anchor" href="#displacement-calculation">#</a> Displacement Calculation</h3><ul><li>The computation that the assembler needs to perform is essentially the target address calculation in reverse.<ul><li><span class="katex"><span class="katex-mathml"><math xmlns="http://www.w3.org/1998/Math/MathML"><semantics><mrow><mi>d</mi><mi>i</mi><mi>s</mi><mi>p</mi><mo>=</mo><mi>T</mi><mi>A</mi><mo>−</mo><mo stretchy="false">(</mo><mi>B</mi><mo stretchy="false">)</mo></mrow><annotation encoding="application/x-tex">disp = TA - (B)</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:0.8888799999999999em;vertical-align:-0.19444em;"></span><span class="mord mathnormal">d</span><span class="mord mathnormal">i</span><span class="mord mathnormal">s</span><span class="mord mathnormal">p</span><span class="mspace" style="margin-right:0.2777777777777778em;"></span><span class="mrel">=</span><span class="mspace" style="margin-right:0.2777777777777778em;"></span></span><span class="base"><span class="strut" style="height:0.76666em;vertical-align:-0.08333em;"></span><span class="mord mathnormal" style="margin-right:0.13889em;">T</span><span class="mord mathnormal">A</span><span class="mspace" style="margin-right:0.2222222222222222em;"></span><span class="mbin">−</span><span class="mspace" style="margin-right:0.2222222222222222em;"></span></span><span class="base"><span class="strut" style="height:1em;vertical-align:-0.25em;"></span><span class="mopen">(</span><span class="mord mathnormal" style="margin-right:0.05017em;">B</span><span class="mclose">)</span></span></span></span></li><li><span class="katex"><span class="katex-mathml"><math xmlns="http://www.w3.org/1998/Math/MathML"><semantics><mrow><mi>d</mi><mi>i</mi><mi>s</mi><mi>p</mi><mo>=</mo><mi>T</mi><mi>A</mi><mo>−</mo><mo stretchy="false">(</mo><mi>P</mi><mi>C</mi><mo stretchy="false">)</mo></mrow><annotation encoding="application/x-tex">disp = TA - (PC)</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:0.8888799999999999em;vertical-align:-0.19444em;"></span><span class="mord mathnormal">d</span><span class="mord mathnormal">i</span><span class="mord mathnormal">s</span><span class="mord mathnormal">p</span><span class="mspace" style="margin-right:0.2777777777777778em;"></span><span class="mrel">=</span><span class="mspace" style="margin-right:0.2777777777777778em;"></span></span><span class="base"><span class="strut" style="height:0.76666em;vertical-align:-0.08333em;"></span><span class="mord mathnormal" style="margin-right:0.13889em;">T</span><span class="mord mathnormal">A</span><span class="mspace" style="margin-right:0.2222222222222222em;"></span><span class="mbin">−</span><span class="mspace" style="margin-right:0.2222222222222222em;"></span></span><span class="base"><span class="strut" style="height:1em;vertical-align:-0.25em;"></span><span class="mopen">(</span><span class="mord mathnormal" style="margin-right:0.13889em;">P</span><span class="mord mathnormal" style="margin-right:0.07153em;">C</span><span class="mclose">)</span></span></span></span></li></ul></li></ul><p><strong>PC Relative</strong></p><ul><li>The program counter is advanced after each instruction is fetched and before it is executed.<ul><li>Thus during the execution of an instruction, program counter will contain <strong>the address of the next instruction</strong>.</li></ul></li><li>The assembler knows what the contents of the program counter will be at execution time.</li></ul><p><strong>Base Relative</strong></p><ul><li>The base register is under control of the programmer.</li><li>The programmer must tell the assembler what the base register will contain during execution<br><span class="katex"><span class="katex-mathml"><math xmlns="http://www.w3.org/1998/Math/MathML"><semantics><mrow><mo>⇒</mo></mrow><annotation encoding="application/x-tex">\Rightarrow</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:0.36687em;vertical-align:0em;"></span><span class="mrel">⇒</span></span></span></span> so that the assembler can compute displacements.<ul><li>This is done with the <strong>assembler directive  <code>BASE</code> </strong>.</li><li><code>NOBASE</code></li><li>These assembler directives produce no executable code.</li><li>The programmer must provide instructions that load the proper value into the base register during execution.</li></ul></li></ul><h3 id="program-relocation"><a class="anchor" href="#program-relocation">#</a> Program Relocation</h3><ul><li>It is often desirable to have <strong>more than one</strong> program at a time sharing the memory and other resources of the machine.<ul><li>In such situation the actual starting address of the program is not known until load time.</li><li><strong>Some address protions of the program need to be changed, while some parts (such as constants) should remain the same regardless of where the program is loaded.</strong></li><li>Looking at the object code alone, it is in general <strong>not possible</strong> to tell which values represent addresses and which represent constant data items.</li></ul></li><li>Since <strong>the assembler does not know the actual location</strong> where the program will be loaded, <strong>it cannot make the necessary changes</strong> in the addresses used by the program.</li><li>However, <strong>the assembler can identify for the loader those parts of the object program that need modification</strong>.</li></ul><p><strong>Example</strong></p><ul><li>We assembled this program using a starting address of  <code>0000</code> .<ul><li>The  <code>JSUB</code>  instruction from line 15 is loaded at address  <code>0006</code> .<br>The address field of this instruction contains  <code>01036</code> , which is the address of the instruction labeled  <code>RDREC</code> .</li><li>Now, suppose we want to load this program beginning at address  <code>5000</code> .<br>The address of the instruction labeled  <code>RDREC</code>  is then  <code>6036</code> .<br>Thus the  <code>JSUB</code>  instruction must be modified as shown to contain this new address.</li></ul></li></ul><p><img data-src="https://i.imgur.com/w3yW6U3.png" alt=""></p><ul><li><p>We can solve the relocation problem in the following way:</p><ul><li>When the assembler generates the object code, it will insert the address of <em>relative to the start of the program</em>.</li><li>The assembler will also produce a command for the loader, instructing it to <em>add</em> <strong>the beginning address</strong> of the program to the address field at load time.</li></ul></li><li><p><strong>Modification record</strong></p><ul><li>Col. 1: M</li><li>Col. 2-7: Starting location of the address field to be modified, relative to the beginning of the program.</li><li>Col. 8-9: Length of the address field to be modified, in <span class="red">half-bytes</span></li></ul></li><li><p>The length is stored in half-bytes (rather than bytes) because the address field to be modified may not occupy an integral number of bytes. (ex. the address field in the  <code>JSUB</code>  we considered above occupies 20 bits, which is 5 half-bytes)</p></li><li><p>If this field occupied an odd number of half-bytes, it is assumed to begin in the middle of the first byte at the starting location.</p></li></ul><p><img data-src="https://i.imgur.com/iSkmAdF.jpg" alt=""></p><ul><li><code>M00000705</code>  for line 15</li></ul><h2 id="machine-independent-assembler-features"><a class="anchor" href="#machine-independent-assembler-features">#</a> Machine-Independent Assembler Features</h2><h3 id="literal-字定"><a class="anchor" href="#literal-字定">#</a> Literal (字定)</h3><!--https://hackmd.io/@NTNUCSIE112/SP110-1_2#23-Machine-Independent-Assembler-Features--><ul><li>A literal is identified with the prefix  <code>=</code> , which is followed by a specification of the literal value, using the same notation as in the <em>BYTE</em> statement.</li><li>The effect of using a literal is exactly the same as if the programmer had defined the <strong>constant</strong> explicitly and used the label assigned to the constant as the instruction operand.</li><li>Difference between a literal and an immediate operand<ul><li>With <strong>immediate</strong> addressing, the operand value is assembled as part of the machine instruction.</li><li>With a <strong>literal</strong>, the assembler generates the specified value as a constant at some other memory location.</li></ul></li><li>All of the literal operands used in a program are gathered together into one or more <span class="red"><em>literal pools</em></span>. Normally literals are placed into a pool at the end of the program.</li><li>In some case, it is desirable to place literals into a pool at some other location in the object program. We use the assembler directive  <code>LTORG</code> .<ul><li>When the assembler encounters a  <code>LTORG</code>  statement, <strong>it creates a literal pool that contains all of the literal operands used since the previous  <code>LTORG</code> </strong> (or the beginning of the program).</li><li>This literal pool is placed in the object program at the location where the  <code>LTORG</code>  directive was encountered.</li></ul></li><li>If we had <strong>not used</strong>  <code>LTORG</code>  statement, literals would be placed in the pool at the end of the program. This means that <strong>the literal operand would be placed too far away from the instruction</strong> referencing it to allow program-counter relative addressing.</li><li><strong>Most assemblers recognize duplicate literals</strong> — that is, the same literal used in more than one place in the program — and store only one copy of the specified data value.</li></ul><p><strong>Literal Table LITTAB</strong></p><ul><li>This table contains the <strong>literal name, the operand value and length, and the address</strong> assigned to the operand when it is placed in a literal pool.</li><li><code>LITTAB</code>  is often organized as a hash table, using the literal name or value as the key.</li><li>Pass 1:<ul><li>The assembler searches  <code>LITTAB</code>  for the specified literal name (or value). If the literal is already present in the table, no action is needed; if it is not present, the literal is added to  <code>LITTAB</code>  (<strong>leaving the address unassigned</strong>)</li><li>When pass 1 encounters a  <code>LTORG</code>  statement or the end of the program, the assembler makes a scan of the literal table. At this time each literal currently in the table is assigned an address (unless such an address has already been fill in).</li><li>As these addresses are assigned, the location counter is updated to reflect the number of bytes occupied by each literal.</li></ul></li><li>Pass 2:<ul><li>The operand address for use in generating object code is obtained by searching  <code>LITTAB</code>  for each literal operand encountered.</li></ul></li></ul><h3 id="symbol-defining-statements"><a class="anchor" href="#symbol-defining-statements">#</a> Symbol-Defining Statements</h3><p><strong>Symbol <span class="red"> <code>EQU</code> </span> value</strong><br>The value may be given as a constant or as any expression involving constants and previously defined symbols.</p><ul><li><p>One common use of EQU is to establish symbolic names that can be used for improved readability in place of numeric values.</p><ol><li><pre><code>+LDT  #4096</code></pre></li><li><pre><code>MAXLEN  EQU  4096+LDT   #MAXLEN</code></pre></li></ol></li><li><p>The resulting object code is exactly the same as in the original version of the instruction; however, the source statement is easier to understand. It is also much easier to find and change the value of MAXLEN.</p></li><li><p>Another common use of EQU is in defining mnemonic names for registers.</p><pre><code>A  EQU 0X  EQU 1L  EQU 2</code></pre></li></ul><h4 id="fontorgfont-value"><a class="anchor" href="#fontorgfont-value">#</a> <strong><font> <code>ORG</code> </font> value</strong></h4><p>Where value is a constant or an expression involving constants and previously defined symbols.</p><p>When this statement is encountered during assembly of a program, the assembler resets its location counter to the specified value.</p><ul><li><p>Consider a symbol table STAB with 100 entries, the SYMBOL field contains a 6-byte user-defined symbol; VALUE is a one-word representation of the value assigned to the symbol; FLAGS is a 2-byte field that specifies symbol type and other information.</p><ul><li><pre><code>STAB  RESB  1100SYMBOL   EQU  STABVALUE    EQU   STAB+6FLAGS   EQU   STAB+9LDA   VALUE, X</code></pre></li><li>However, this method of definition simply defines the labels; it does not make the structure of the table as clear as it might be.</li><li><pre><code>STAB   RESB   1100       ORG    STABSYMBOL   RESB  6VALUE    RESW  1FLAGS    RESB  2       ORG    STAB+1100</code></pre></li><li>The last  <code>ORG</code>  statement is very important. It sets LOCCTR back to its previous value.</li><li>In some assemblers the previous value of LOCCTR is automatically remembered, so we can simply write<pre><code>ORG</code></pre></li></ul></li><li><p>All symbols used on the right-hand side of the statement—that is, all terms used to specify the value of the new symbol—must have been defined previously in the program. (e.g., the following example would not be allowed)</p><ul><li><pre><code>BETA   EQU   ALPHAALPHA  RESW  1 </code></pre></li></ul></li></ul><h3 id="expressions"><a class="anchor" href="#expressions">#</a> Expressions</h3><ul><li>Individual terms in the expression may be constants, user-defined symbols, or special terms (e.g., the value of the location counter)</li><li>The values of terms and expressions are either <font>relative</font> or <font>absolute</font>.<ul><li>A constant is, of course, an absolute term.</li><li>Labels on instructions and data areas, and references to the location counter value, are relative terms.</li></ul></li><li>An expression that contains only absolute terms is, of course, an absolute expression.</li><li>Absolute expressions may also contain relative terms provided the relative terms occur in pairs and the terms in each such pair have opposite signs.<ul><li>None of the relative terms may enter into a multiplication or division operation.</li></ul></li><li>A relative expression is one in which all of the relative terms except one can be paired as described above; the remaining unpaired relative term must have a positive sign.</li><li>Absolute, relative, or error? (in Figure 2.10)<pre><code>RETADR            // AbsoluteBUFFER            // AbsoluteBUFFEND           // RelativeMAXLEN            // AbsoluteBUFEND+BUFFER     // Error100-BUFFER        // Error3*BUFFER          // Error</code></pre></li><li>We need a flag in the symbol table to indicate type of value (absolute or relative) in addition to the value itself.</li></ul><h3 id="program-blocks"><a class="anchor" href="#program-blocks">#</a> Program Blocks</h3><ul><li>We use the term <font>program blocks</font> to refer to segments of code that are rearranged within a single object program unit.</li><li>The assembler directive USE indicates which portions of the source program belong to the various blocks.</li><li><strong>Figure 2.11</strong><ul><li>The first (unnamed) program block contains the executable instructions of the program.</li><li>The second (named CDATA) contains all data areas that are a few words or less in length.</li><li>The third (named CBLKS) contains all data areas that consist of larger blocks of memory.</li></ul></li><li>The assembler will (logically) rearrange these segments to gather together the pieces of each block. These blocks will then be assigned addresses in the object program, with the blocks appearing in the same order in which they were first begun in the source program.</li><li>The assembler accomplishes this logical rearrangement of code by maintaining, during Pass 1, a separate location counter for each program block.</li><li>When labels are entered into the symbol table, the block name or number is stored along with the assigned relative address.</li><li>At the end of Pass 1 the latest value of the location counter for each block indicates the length of that block. The assembler can then assign to each block a starting address in the object program.</li><li>For code generation during Pass 2, the assembler simply adds the location of the symbol, relative to the start of its block, to the assigned block starting address.</li><li><strong>Figure 2.12</strong><ul><li>Notice that the value of the symbol MAXLEN (line 107) is shown without a block number. This indicates that MAXLEN is an absolute symbol, whose value is not relative to the start of any program block.</li><li>Line 20</li></ul></li><li>We can immediately see that the separation of the program into blocks has considerably reduced the addressing problems. Because the large buffer area is moved to the end of the object program, we no longer need to use extended format instructions on lines 15, 35, and 65.</li><li>Program <font>readability</font> is often improved if the definitions of data areas are placed in the source program close to the statements that reference them.</li><li>The use of program blocks is one way of satisfying both of these requirements, with the assembler providing the required reorganization.</li><li>It is not necessary to physically rearrange the generated code in the object program to place the pieces of each program block together. The assembler can simply write the object code as it is generated during Pass 2 and insert the proper load address in each Text record. The loader will simply load the object code from each record at the indicated address.<ul><li><p>Figure 2.13, Figure 2.14</p><p><img data-src="https://i.imgur.com/hmGOUb6.jpg" alt=""></p><p><img data-src="https://i.imgur.com/Sp87SNz.jpg" alt=""></p></li></ul></li></ul><h2 id="control-sections-and-program-linking"><a class="anchor" href="#control-sections-and-program-linking">#</a> Control Sections and Program Linking</h2><ul><li>A <font>control section</font> is a part of the program that maintains its identity after assembly; each such control section can be loaded and relocated independently of the others.</li><li>When control sections form logically related parts of a program, it is necessary to provide some means for <font>linking</font> them together.</li><li>Instructions in one control section might need to refer to instructions or data located in another section. The assembler is unable to process these references in the usual way. The assembler has no idea where any other control section will be located at execution. Such references between control sections are called <font>external references</font>.</li></ul><h3 id="figure-215"><a class="anchor" href="#figure-215">#</a> Figure 2.15</h3><ul><li><font>CSECT</font></li><li>Three control sections:  <code>COPY</code> ,  <code>RDREC</code> ,  <code>WRREC</code></li><li>The assembler establishes a separate location counter for each control section, just as it does for program blocks.</li><li><font>EXTDEF</font> (external definition for external symbol)</li><li><font>EXTREF</font> (external reference)</li></ul><h3 id="figure-216"><a class="anchor" href="#figure-216">#</a> Figure 2.16</h3><ul><li><strong>Line 15:</strong><pre><code>15    0003    CLOOP     +JSUBRDREC4B100000</code></pre></li><li><strong>Line 160</strong><pre><code>160   0017              +STCHBUFFER,X57900000</code></pre></li><li><strong>Line 190</strong><pre><code>190   0028    MAXLEN    WORDBUFEND-BUFFER000000</code></pre><ul><li>The assembler has no idea where the control section containing  <code>RDREC</code>  will be loaded, so it cannot assemble the address for this instruction. Instead the assembler inserts an address of zero and passes information to the loader, which will cause the proper address to be inserted at load time.</li><li>The address of  <code>RDREC</code>  will have no predictable relationship to anything in this control section therefore relative addressing is not possible. Thus an extended format instruction must be used to provide room for the actual address to be inserted.</li></ul></li><li>The assembler must also allow the same symbol to be used in different control sections.</li></ul><p><strong>Define record</strong></p><ul><li><strong>Col. 1:</strong> D</li><li><strong>Col. 2-7:</strong> name of external symbol defined in this control section</li><li><strong>Col. 8-13:</strong> relative address of symbol within this control section</li><li><strong>Col. 14-73:</strong> Repeat information in Col. 2-13 for other external symbols.</li></ul><p><strong>Refer record</strong></p><ul><li><strong>Col. 1:</strong> R</li><li><strong>Col. 2-7:</strong> name of external symbol referred to in this control section</li><li><strong>Col. 8-73:</strong> names of other external reference symbols</li></ul><p><strong>New format of the Modification record type</strong></p><ul><li><strong>Col. 1:</strong> M</li><li><strong>Col. 2-7:</strong> starting address of the field to be modified</li><li><strong>Col. 8-9:</strong> length of the field to be modified, in half-bytes</li><li><strong>Col. 10:</strong> Modification flag (+ or -)</li><li><strong>Col. 11-16:</strong> External symbol whose value is to be added to or subtracted from the indicated field.</li></ul><h3 id="figure-217"><a class="anchor" href="#figure-217">#</a> Figure 2.17</h3><ul><li>Our earlier definitions required that all of the relative terms in an expression be paired (for an absolute expression), or that all except one be paired (for a relative expression). We must now extend this restriction to specify that both terms in each pair must be relative within the same control section.</li><li>When an expression involves external references, the assembler cannot in general determine whether or not the expression is legal. Whether the terms occur in the same control section is unknown at assembly time. In such a case, the assembler generates Modification records so the loader can  check the expression for errors.</li></ul>]]></content>
      
      
      <categories>
          
          <category> SystemSoftware </category>
          
      </categories>
      
      
        <tags>
            
            <tag> System Software </tag>
            
            <tag> Assembler </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>258. Add Digits</title>
      <link href="/2023/04/26/Coding/leetcode/Easy/258%20Add%20Digits/"/>
      <url>/2023/04/26/Coding/leetcode/Easy/258%20Add%20Digits/</url>
      
        <content type="html"><![CDATA[<h2 id="題目敘述"><a class="anchor" href="#題目敘述">#</a> <span class="exturl" data-url="aHR0cHM6Ly9sZWV0Y29kZS5jb20vcHJvYmxlbXMvYWRkLWRpZ2l0cy9kZXNjcmlwdGlvbi8=">題目敘述</span></h2><p>Given an integer  <code>num</code> , repeatedly add all its digits until the result has only one digit, and return it.</p><h3 id="example-1"><a class="anchor" href="#example-1">#</a> Example 1</h3><blockquote><p><strong>Input</strong>: num = 38<br><strong>Output</strong>: 2<br><strong>Explanation</strong>: The process is<br>38 --&gt; 3 + 8 --&gt; 11<br>11 --&gt; 1 + 1 --&gt; 2<br>Since 2 has only one digit, return it.</p></blockquote><h3 id="example-2"><a class="anchor" href="#example-2">#</a> Example 2</h3><blockquote><p><strong>Input</strong>: num = 0<br><strong>Output</strong>: 0</p></blockquote><h2 id="solution"><a class="anchor" href="#solution">#</a> Solution</h2><div class="tab" data-id="code" data-title="C++"><figure class="highlight cpp"><figcaption data-lang="C++"></figcaption><table><tr><td data-num="1"></td><td><pre><span class="token keyword">class</span> <span class="token class-name">Solution</span> <span class="token punctuation">&#123;</span></pre></td></tr><tr><td data-num="2"></td><td><pre><span class="token keyword">public</span><span class="token operator">:</span></pre></td></tr><tr><td data-num="3"></td><td><pre>    <span class="token keyword">int</span> <span class="token function">addDigits</span><span class="token punctuation">(</span><span class="token keyword">int</span> num<span class="token punctuation">)</span> <span class="token punctuation">&#123;</span></pre></td></tr><tr><td data-num="4"></td><td><pre>        <span class="token keyword">int</span> res <span class="token operator">=</span> num<span class="token punctuation">;</span></pre></td></tr><tr><td data-num="5"></td><td><pre>        <span class="token keyword">while</span> <span class="token punctuation">(</span>num <span class="token operator">></span> <span class="token number">9</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span></pre></td></tr><tr><td data-num="6"></td><td><pre>            res <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span></pre></td></tr><tr><td data-num="7"></td><td><pre>            <span class="token keyword">while</span> <span class="token punctuation">(</span>num <span class="token operator">!=</span> <span class="token number">0</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span></pre></td></tr><tr><td data-num="8"></td><td><pre>                res <span class="token operator">+=</span> num <span class="token operator">%</span> <span class="token number">10</span><span class="token punctuation">;</span></pre></td></tr><tr><td data-num="9"></td><td><pre>                num <span class="token operator">/=</span> <span class="token number">10</span><span class="token punctuation">;</span></pre></td></tr><tr><td data-num="10"></td><td><pre>            <span class="token punctuation">&#125;</span></pre></td></tr><tr><td data-num="11"></td><td><pre>            num <span class="token operator">=</span> res<span class="token punctuation">;</span></pre></td></tr><tr><td data-num="12"></td><td><pre>        <span class="token punctuation">&#125;</span></pre></td></tr><tr><td data-num="13"></td><td><pre>        <span class="token keyword">return</span> res<span class="token punctuation">;</span></pre></td></tr><tr><td data-num="14"></td><td><pre>    <span class="token punctuation">&#125;</span></pre></td></tr><tr><td data-num="15"></td><td><pre><span class="token punctuation">&#125;</span><span class="token punctuation">;</span></pre></td></tr></table></figure></div><div class="tab" data-id="code" data-title="Java"><figure class="highlight java"><figcaption data-lang="java"></figcaption><table><tr><td data-num="1"></td><td><pre><span class="token keyword">class</span> <span class="token class-name">Solution</span> <span class="token punctuation">&#123;</span></pre></td></tr><tr><td data-num="2"></td><td><pre>    <span class="token keyword">public</span> <span class="token keyword">int</span> <span class="token function">addDigits</span><span class="token punctuation">(</span><span class="token keyword">int</span> num<span class="token punctuation">)</span> <span class="token punctuation">&#123;</span></pre></td></tr><tr><td data-num="3"></td><td><pre>        <span class="token keyword">int</span> res <span class="token operator">=</span> num<span class="token punctuation">;</span></pre></td></tr><tr><td data-num="4"></td><td><pre>        <span class="token keyword">while</span> <span class="token punctuation">(</span>num <span class="token operator">></span> <span class="token number">9</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span></pre></td></tr><tr><td data-num="5"></td><td><pre>            res <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span></pre></td></tr><tr><td data-num="6"></td><td><pre>            <span class="token keyword">while</span> <span class="token punctuation">(</span>num <span class="token operator">!=</span> <span class="token number">0</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span></pre></td></tr><tr><td data-num="7"></td><td><pre>                res <span class="token operator">+=</span> num <span class="token operator">%</span> <span class="token number">10</span><span class="token punctuation">;</span></pre></td></tr><tr><td data-num="8"></td><td><pre>                num <span class="token operator">/=</span> <span class="token number">10</span><span class="token punctuation">;</span></pre></td></tr><tr><td data-num="9"></td><td><pre>            <span class="token punctuation">&#125;</span></pre></td></tr><tr><td data-num="10"></td><td><pre>            num <span class="token operator">=</span> res<span class="token punctuation">;</span></pre></td></tr><tr><td data-num="11"></td><td><pre>        <span class="token punctuation">&#125;</span></pre></td></tr><tr><td data-num="12"></td><td><pre>        <span class="token keyword">return</span> res<span class="token punctuation">;</span></pre></td></tr><tr><td data-num="13"></td><td><pre>    <span class="token punctuation">&#125;</span></pre></td></tr><tr><td data-num="14"></td><td><pre><span class="token punctuation">&#125;</span></pre></td></tr></table></figure></div><div class="tab" data-id="code" data-title="Python"><figure class="highlight python"><figcaption data-lang="python"></figcaption><table><tr><td data-num="1"></td><td><pre><span class="token keyword">class</span> <span class="token class-name">Solution</span><span class="token punctuation">:</span></pre></td></tr><tr><td data-num="2"></td><td><pre>    <span class="token keyword">def</span> <span class="token function">addDigits</span><span class="token punctuation">(</span>self<span class="token punctuation">,</span> num<span class="token punctuation">:</span> <span class="token builtin">int</span><span class="token punctuation">)</span> <span class="token operator">-</span><span class="token operator">></span> <span class="token builtin">int</span><span class="token punctuation">:</span></pre></td></tr><tr><td data-num="3"></td><td><pre>        res <span class="token operator">=</span> num</pre></td></tr><tr><td data-num="4"></td><td><pre>        <span class="token keyword">while</span> num <span class="token operator">></span> <span class="token number">9</span><span class="token punctuation">:</span></pre></td></tr><tr><td data-num="5"></td><td><pre>            res <span class="token operator">=</span> <span class="token number">0</span></pre></td></tr><tr><td data-num="6"></td><td><pre>            <span class="token keyword">while</span> num <span class="token operator">!=</span> <span class="token number">0</span><span class="token punctuation">:</span></pre></td></tr><tr><td data-num="7"></td><td><pre>                res <span class="token operator">+=</span> num <span class="token operator">%</span> <span class="token number">10</span></pre></td></tr><tr><td data-num="8"></td><td><pre>                num <span class="token operator">//=</span> <span class="token number">10</span></pre></td></tr><tr><td data-num="9"></td><td><pre>            num <span class="token operator">=</span> res</pre></td></tr><tr><td data-num="10"></td><td><pre>        <span class="token keyword">return</span> res</pre></td></tr></table></figure></div>]]></content>
      
      
      <categories>
          
          <category> Coding </category>
          
          <category> Leetcode </category>
          
          <category> Easy </category>
          
      </categories>
      
      
        <tags>
            
            <tag> Leetcode </tag>
            
            <tag> Easy </tag>
            
            <tag> Math </tag>
            
            <tag> Simulation </tag>
            
            <tag> Number Theory </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>Ch05. Backtracking</title>
      <link href="/2023/04/25/Algorithm/Ch06%20Backtracking/"/>
      <url>/2023/04/25/Algorithm/Ch06%20Backtracking/</url>
      
        <content type="html"><![CDATA[<h2 id="backtracking"><a class="anchor" href="#backtracking">#</a> Backtracking</h2><p>Backtracking，枚舉多維度數值的方法。<br>運用遞迴依序窮舉各個維度的數值，製作所有可能的多維度數值，並且在遞迴途中避免枚舉不正確的多維度數值。<br>Backtracking is a <span class="red">modified depth-first search of a tree (DFS)</span>.</p><h3 id="promising"><a class="anchor" href="#promising">#</a> <a href="#%E8%A8%BB%E8%A7%A3">Promising<sub>1</sub></a> &amp; Nonpromising</h3><ul><li>A node is <span class="red"><strong>Nonpromising</strong></span> if it cannot possibly lead to a solution.</li><li>Otherwise, <span class="red"><strong>Promising</strong></span>.</li></ul><h3 id="pruning"><a class="anchor" href="#pruning">#</a> <a href="#%E8%A8%BB%E8%A7%A3">Pruning<sub>2</sub></a></h3><ul><li>Backtracking consists of<ul><li>doing a <strong>DFS</strong> of a State Space Tree</li><li>checking whether each node is promising</li><li>if it is nonpromising, backtracking to the node’s parent.</li></ul></li><li><em>Pruned State Space Tree</em>: the subtree consisting of the visited nodes (after pruning).</li></ul><h2 id="n-queens-problem-n-皇后問題"><a class="anchor" href="#n-queens-problem-n-皇后問題">#</a> n-Queens Problem (n 皇后問題)</h2><p>n 皇后問題的目標在於，在一個 n*n 大小的棋盤上擺放 n 個皇后，要讓他們恰好無法互相攻擊對方 (no two queens threaten each other)。也就是說，<strong>任何一個皇后都要在不同行 (row)、不同列 (column) 且不同斜線 (diagonal) 上</strong>。</p><h3 id="想法"><a class="anchor" href="#想法">#</a> 想法</h3><ul><li>以 4*4 的棋盤為例:</li></ul><p>我們可以很直覺地想到，任何一個皇后不會在同一個列上 (row)。<br>因此，這個問題可以簡化成，什麼樣的行 (column) 組合能符合題目的要求。<br>因為每個皇后都有 4 個選擇，所以我們總共有 <span class="katex"><span class="katex-mathml"><math xmlns="http://www.w3.org/1998/Math/MathML"><semantics><mrow><mn>4</mn><mo>×</mo><mn>4</mn><mo>×</mo><mn>4</mn><mo>×</mo><mn>4</mn><mo>=</mo><mn>256</mn></mrow><annotation encoding="application/x-tex">4 \times 4 \times 4 \times 4 = 256</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:0.72777em;vertical-align:-0.08333em;"></span><span class="mord">4</span><span class="mspace" style="margin-right:0.2222222222222222em;"></span><span class="mbin">×</span><span class="mspace" style="margin-right:0.2222222222222222em;"></span></span><span class="base"><span class="strut" style="height:0.72777em;vertical-align:-0.08333em;"></span><span class="mord">4</span><span class="mspace" style="margin-right:0.2222222222222222em;"></span><span class="mbin">×</span><span class="mspace" style="margin-right:0.2222222222222222em;"></span></span><span class="base"><span class="strut" style="height:0.72777em;vertical-align:-0.08333em;"></span><span class="mord">4</span><span class="mspace" style="margin-right:0.2222222222222222em;"></span><span class="mbin">×</span><span class="mspace" style="margin-right:0.2222222222222222em;"></span></span><span class="base"><span class="strut" style="height:0.64444em;vertical-align:0em;"></span><span class="mord">4</span><span class="mspace" style="margin-right:0.2777777777777778em;"></span><span class="mrel">=</span><span class="mspace" style="margin-right:0.2777777777777778em;"></span></span><span class="base"><span class="strut" style="height:0.64444em;vertical-align:0em;"></span><span class="mord">2</span><span class="mord">5</span><span class="mord">6</span></span></span></span> 種可能的組合。我們可以建立一個樹來表達所有的組合。</p><div class="note info"><p>The column choices for the first queen (the queen in row 1) are stored in level-1 nodes in the tree (recall that the root is at level 0), the column choices for the second queen (the queen in row 2) are stored in level-2 nodes, and so on.</p><p><img data-src="https://i.imgur.com/rKk7YPL.png" alt=""></p><p>A <span class="red">path</span> from the <span class="red">root to leaf</span> is a <span class="red">candidate solution</span>. This tree is called a <strong><a href="#%E8%A8%BB%E8%A7%A3">state space tree<sub>2</sub></a></strong>.<br>The entire tree has 256 leaves, one for each candidate solution.</p></div><p>為了更有效率的搜尋解答，我們可以設置一些條件來篩選掉那些不可能的路徑。<br>同上例子:</p><ul><li>我們知道，<em>沒有兩個皇后可以在同一行上</em>。假設我們已將  <code>皇后1</code>  放在第一行上 (<em>&lt;1, 1&gt;</em>)，之後就不可再有人可以放在第一行上，因此當我們遇到 <em>&lt;2, 1&gt;</em> 時就可以直接跳過。</li><li>同樣的，<em>沒有兩個皇后可以在同一個對角線上</em>。所以遇到 <em>&lt;2, 2&gt;</em> 時，我們就可以不用再去管它後面的路徑了。</li></ul><div class="note success"><p>An ordered pair  <code>&lt;i, j&gt;</code>  is stored at each node.<br>This ordered pair means that the queen in the  <code>ith</code>  row is placed in the  <code>jth</code>  column.</p></div><div class="note danger"><p><strong>NOTE:</strong> The nodes are visited according to a <strong>depth-first search (DFS)</strong> in which the children of a node are visited <strong>from left to right</strong>.</p></div><p><img data-src="https://i.imgur.com/QOH492o.png" alt=""></p><h3 id="pruning-2"><a class="anchor" href="#pruning-2">#</a> Pruning</h3><blockquote><ol><li because="" queen="" 1="" is="" the="" first="" queen="" positioned=""><em>&lt;1, 1&gt;</em> is promising.</li><li><em>&lt;2, 1&gt;</em> is nonpromising. {because queen 1 is in column 1}<br><em>&lt;2, 2&gt;</em> is  nonpromising. {because queen 1 is on left diagonal}<br><em>&lt;2, 3&gt;</em> is promising.</li><li because="" queen="" 2="" is="" on="" left="" diagonal=""><em>&lt; 3, 1&gt;</em> is nonpromising {because queen 1 is in column 1}<br><em>&lt; 3, 2&gt;</em> is nonpromising {because queen 2 is on right diagonal}<br><em>&lt; 3, 3&gt;</em> is nonpromising {because queen 2 is in column 3}<br><em>&lt; 3, 4&gt;</em> is nonpromising</li><li>Backtrack to <em>&lt;1, 1&gt;</em><br><em>&lt;2, 4&gt;</em> is promising</li><li><em>&lt; 3, 1&gt;</em> is nonpromising {because queen 1 is in column 1}<br><em>&lt; 3, 2&gt;</em> is promising {this is the second time we’ve tried <em>&lt; 3, 2&gt;</em>}</li></ol></blockquote><p><img data-src="https://i.imgur.com/29SDBun.png" alt=""></p><p>這裡顯示經過 backtracking 後部分的 pruned state space tree<br><img data-src="https://i.imgur.com/hqvoyOD.png" alt=""></p><h3 id="promising-function"><a class="anchor" href="#promising-function">#</a> Promising Function</h3><p>Check whether two queens are in the same column or diagonal.</p><ul><li>let  <code>col(i)</code>  be the column where the queen in the <em>i</em>th row is located, then to check whether the queen in the <em>k</em>th row is in the same column.</li></ul><div class="note danger no-icon"><p>we need to check  <code>col(i) = col(k)</code></p></div><ul><li>to check the diagonal, suppose  <code>n=8</code> . In the following figure, the queen in row 6 is being threatened in its left diagonal by the queen in row 3, and in its right diagonal by the queen in row 2.</li></ul><div class="note danger no-icon"><p>Notice that:</p><ul><li>left:  <code>col(6) - col(3) = 4 - 1 = 3 = 6 - 3</code></li><li>right:  <code>col(6) - col(2) = 4 - 8 = -4 = -(6 - 2)</code></li></ul><p><strong>The difference in the columns is the same as the difference in the rows</strong>.</p></div><p><img data-src="https://i.imgur.com/VO0CIbM.png" alt=""></p><h2 id="sum-of-subset-problem"><a class="anchor" href="#sum-of-subset-problem">#</a> Sum-of-Subset Problem</h2><p>There are  <code>n</code>  positive integers (weights)  <code>wi</code>  and a positive integer  <code>W</code> .<br>The goal is to <em>find all subsets of the integers that sum to  <code>W</code> </em>.</p><h3 id="promising-function-2"><a class="anchor" href="#promising-function-2">#</a> Promising Function</h3><p>If we sort the weights in ascending order before doing the search, then w<sub>i+1</sub> is the lightest weight remaining when we are at the <em>i</em>th level.</p><p>Let <strong><em>weight</em> be the sum of the weights that have been included up to a node at level <em>i</em></strong>.<br>If w<sub>i+1</sub> would bring the value of <em>weight</em> above <em>W</em>, then so would any other weight following it.</p><div class="note danger no-icon"><p>Therefore, unless <em>weight</em> <strong>equals</strong> <em>W</em> (one of a solution), a node at the <em>i</em>th level is nonpromising if</p><ul><li><code>weight + w_(i+1) &gt; W</code></li></ul></div><p>There is another, if, at a given node, adding all the weights of the remaining items to <em>weight</em> does not make <em>weight</em> at least equal to <em>W</em>, then <em>weight</em> could never become equal to <em>W</em> by expanding beyond the node.</p><div class="note danger no-icon"><p>This means that if <strong><em>total</em> is the total weight of the remaining weights</strong>, a node is nonpromising if</p><ul><li><code>weight + total &lt; W</code></li></ul></div><h3 id="pruned-state-space-tree"><a class="anchor" href="#pruned-state-space-tree">#</a> Pruned State Space Tree</h3><p>Supppose that  <code>n = 4</code> ,  <code>W = 13</code> , and  <code>w1 = 3</code> ,  <code>w2 = 4</code> ,  <code>w3 = 5</code> ,  <code>w4 = 6</code> .<br><img data-src="https://i.imgur.com/1lk7Qdy.png" alt=""></p><blockquote><ul><li><code>weight + w_(i+1) &gt; W</code> : The nodes containing 12, 8, and 9 are nonpromising because adding the next weight (6) would make the value of <em>weight</em> exceed <em>W</em>.</li><li><code>weight + total &lt; W</code> : The nodes containing 7, 3, 4 and 0 are nonpromising because there is not enough total weight remaining to bring the value of <em>weight</em> up to <em>W</em>.</li></ul></blockquote><h2 id="graph-coloring"><a class="anchor" href="#graph-coloring">#</a> Graph Coloring</h2><p>Find <strong>all</strong> ways to color an undireccted graph using <em>at most  <code>m</code> </em> different colors so that <strong>no two adjacent vertices are the same color</strong>.</p><h3 id="example"><a class="anchor" href="#example">#</a> Example</h3><p><img data-src="https://i.imgur.com/qjcuChb.png" alt=""></p><blockquote><ul><li>There is no solution to the 2-Coloring graph problem.</li><li>One solution to the 3-Coloring graph problem for this graph is following:</li></ul><table><thead><tr><th style="text-align:center"><em><strong>Vertex</strong></em></th><th style="text-align:center"><em><strong>Color</strong></em></th></tr></thead><tbody><tr><td style="text-align:center">v1</td><td style="text-align:center">color 1</td></tr><tr><td style="text-align:center">v2</td><td style="text-align:center">color 2</td></tr><tr><td style="text-align:center">v3</td><td style="text-align:center">color 3</td></tr><tr><td style="text-align:center">v4</td><td style="text-align:center">color 2</td></tr></tbody></table></blockquote><h3 id="planar-graph"><a class="anchor" href="#planar-graph">#</a> Planar Graph</h3><p>A graph is called <span class="red">planar</span> if it can be drawn in a plane in such a way that no two edges cross each other.</p><ul><li>For every map, there corresponds a planar graph.<br><img data-src="https://i.imgur.com/51wJ24y.png" alt=""></li></ul><h3 id="pruned-state-space-tree-2"><a class="anchor" href="#pruned-state-space-tree-2">#</a> Pruned State Space Tree</h3><p><img data-src="https://i.imgur.com/66KwqZt.png" alt=""></p><h2 id="hamiltonian-circuit"><a class="anchor" href="#hamiltonian-circuit">#</a> Hamiltonian Circuit</h2><p>Find a path that visits each vertex exactly once and then return to the starting vertex.</p><ul><li><p>Similar to <em>TSP</em> (Traveling Salesman Problem) except that Hamiltonian Circuits Problem is only to find all tours in an <strong>undirected</strong> and <strong>unweighted</strong> graph.</p></li><li><p>DP is inefficient for large TSP instance.</p></li></ul><h3 id="example-2"><a class="anchor" href="#example-2">#</a> Example</h3><p><img data-src="https://i.imgur.com/1OQ6swJ.png" alt=""></p><ul><li>(a) contains the Hamiltoniac Circuit [v1, v2, v8, v7, v6, v5, v4, v3, v1]</li><li>(b) does not contain a Hamiltonian Circuit</li></ul><h3 id="promising-function-3"><a class="anchor" href="#promising-function-3">#</a> Promising Function</h3><ul><li>the <em>i</em>th node is adjacent to the (<em>i</em>+1)th node</li><li>the (<em>n</em>-1)th node is adjacent to the <em>0</em>th node</li><li>the <em>i</em>th node cannot be in the first <em>i</em>-1 nodes</li></ul><h2 id="0-1-knapsack-problem"><a class="anchor" href="#0-1-knapsack-problem">#</a> 0-1 Knapsack Problem</h2><ul><li><em><strong>profit</strong></em>: the sum of the profits of the items included up to the node.</li><li><em><strong>weight</strong></em>: the sum of the weights of those items.</li><li>Suppose the node is at level <em>i</em>, and the node at level <span class="red"><em>k</em> is the one that would bring the sum of the weights above <em>W</em></span>. Then,<div class="note danger no-icon"><ul><li><em><strong>totweight</strong></em> = <em>weight</em> + <span class="katex"><span class="katex-mathml"><math xmlns="http://www.w3.org/1998/Math/MathML"><semantics><mrow><msubsup><mo>∑</mo><mrow><mi>j</mi><mo>=</mo><mi>i</mi><mo>+</mo><mn>1</mn></mrow><mrow><mi>k</mi><mo>−</mo><mn>1</mn></mrow></msubsup><msub><mi>w</mi><mi>j</mi></msub></mrow><annotation encoding="application/x-tex">\sum_{j=i+1}^{k-1}w_j</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:1.424826em;vertical-align:-0.43581800000000004em;"></span><span class="mop"><span class="mop op-symbol small-op" style="position:relative;top:-0.0000050000000000050004em;">∑</span><span class="msupsub"><span class="vlist-t vlist-t2"><span class="vlist-r"><span class="vlist" style="height:0.9890079999999999em;"><span style="top:-2.40029em;margin-left:0em;margin-right:0.05em;"><span class="pstrut" style="height:2.7em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mtight"><span class="mord mathnormal mtight" style="margin-right:0.05724em;">j</span><span class="mrel mtight">=</span><span class="mord mathnormal mtight">i</span><span class="mbin mtight">+</span><span class="mord mtight">1</span></span></span></span><span style="top:-3.2029em;margin-right:0.05em;"><span class="pstrut" style="height:2.7em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mtight"><span class="mord mathnormal mtight" style="margin-right:0.03148em;">k</span><span class="mbin mtight">−</span><span class="mord mtight">1</span></span></span></span></span><span class="vlist-s">​</span></span><span class="vlist-r"><span class="vlist" style="height:0.43581800000000004em;"><span></span></span></span></span></span></span><span class="mspace" style="margin-right:0.16666666666666666em;"></span><span class="mord"><span class="mord mathnormal" style="margin-right:0.02691em;">w</span><span class="msupsub"><span class="vlist-t vlist-t2"><span class="vlist-r"><span class="vlist" style="height:0.311664em;"><span style="top:-2.5500000000000003em;margin-left:-0.02691em;margin-right:0.05em;"><span class="pstrut" style="height:2.7em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mathnormal mtight" style="margin-right:0.05724em;">j</span></span></span></span><span class="vlist-s">​</span></span><span class="vlist-r"><span class="vlist" style="height:0.286108em;"><span></span></span></span></span></span></span></span></span></span></li><li><em><strong>bound</strong></em> = (<em>profit</em> + <span class="katex"><span class="katex-mathml"><math xmlns="http://www.w3.org/1998/Math/MathML"><semantics><mrow><msubsup><mo>∑</mo><mrow><mi>j</mi><mo>=</mo><mi>i</mi><mo>+</mo><mn>1</mn></mrow><mrow><mi>k</mi><mo>−</mo><mn>1</mn></mrow></msubsup><msub><mi>p</mi><mi>j</mi></msub></mrow><annotation encoding="application/x-tex">\sum_{j=i+1}^{k-1}p_j</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:1.424826em;vertical-align:-0.43581800000000004em;"></span><span class="mop"><span class="mop op-symbol small-op" style="position:relative;top:-0.0000050000000000050004em;">∑</span><span class="msupsub"><span class="vlist-t vlist-t2"><span class="vlist-r"><span class="vlist" style="height:0.9890079999999999em;"><span style="top:-2.40029em;margin-left:0em;margin-right:0.05em;"><span class="pstrut" style="height:2.7em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mtight"><span class="mord mathnormal mtight" style="margin-right:0.05724em;">j</span><span class="mrel mtight">=</span><span class="mord mathnormal mtight">i</span><span class="mbin mtight">+</span><span class="mord mtight">1</span></span></span></span><span style="top:-3.2029em;margin-right:0.05em;"><span class="pstrut" style="height:2.7em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mtight"><span class="mord mathnormal mtight" style="margin-right:0.03148em;">k</span><span class="mbin mtight">−</span><span class="mord mtight">1</span></span></span></span></span><span class="vlist-s">​</span></span><span class="vlist-r"><span class="vlist" style="height:0.43581800000000004em;"><span></span></span></span></span></span></span><span class="mspace" style="margin-right:0.16666666666666666em;"></span><span class="mord"><span class="mord mathnormal">p</span><span class="msupsub"><span class="vlist-t vlist-t2"><span class="vlist-r"><span class="vlist" style="height:0.311664em;"><span style="top:-2.5500000000000003em;margin-left:0em;margin-right:0.05em;"><span class="pstrut" style="height:2.7em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mathnormal mtight" style="margin-right:0.05724em;">j</span></span></span></span><span class="vlist-s">​</span></span><span class="vlist-r"><span class="vlist" style="height:0.286108em;"><span></span></span></span></span></span></span></span></span></span>) + (W - <em>totweight</em>) <span class="katex"><span class="katex-mathml"><math xmlns="http://www.w3.org/1998/Math/MathML"><semantics><mrow><mo>×</mo></mrow><annotation encoding="application/x-tex">\times</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:0.66666em;vertical-align:-0.08333em;"></span><span class="mord">×</span></span></span></span> <span class="katex"><span class="katex-mathml"><math xmlns="http://www.w3.org/1998/Math/MathML"><semantics><mrow><msub><mi>p</mi><mi>k</mi></msub><mi mathvariant="normal">/</mi><msub><mi>w</mi><mi>k</mi></msub></mrow><annotation encoding="application/x-tex">p_k/w_k</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:1em;vertical-align:-0.25em;"></span><span class="mord"><span class="mord mathnormal">p</span><span class="msupsub"><span class="vlist-t vlist-t2"><span class="vlist-r"><span class="vlist" style="height:0.33610799999999996em;"><span style="top:-2.5500000000000003em;margin-left:0em;margin-right:0.05em;"><span class="pstrut" style="height:2.7em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mathnormal mtight" style="margin-right:0.03148em;">k</span></span></span></span><span class="vlist-s">​</span></span><span class="vlist-r"><span class="vlist" style="height:0.15em;"><span></span></span></span></span></span></span><span class="mord">/</span><span class="mord"><span class="mord mathnormal" style="margin-right:0.02691em;">w</span><span class="msupsub"><span class="vlist-t vlist-t2"><span class="vlist-r"><span class="vlist" style="height:0.33610799999999996em;"><span style="top:-2.5500000000000003em;margin-left:-0.02691em;margin-right:0.05em;"><span class="pstrut" style="height:2.7em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mathnormal mtight" style="margin-right:0.03148em;">k</span></span></span></span><span class="vlist-s">​</span></span><span class="vlist-r"><span class="vlist" style="height:0.15em;"><span></span></span></span></span></span></span></span></span></span></li></ul></div></li></ul><h3 id="promising-function-4"><a class="anchor" href="#promising-function-4">#</a> Promising Function</h3><p>If <em>maxprofit</em> is the value of the profit in the best solution found so far, then a node at level <em>i</em> is <strong>nonpromising</strong> if <span class="red"><span class="katex"><span class="katex-mathml"><math xmlns="http://www.w3.org/1998/Math/MathML"><semantics><mrow><mi>b</mi><mi>o</mi><mi>u</mi><mi>n</mi><mi>d</mi><mo>≤</mo><mi>m</mi><mi>a</mi><mi>x</mi><mi>p</mi><mi>r</mi><mi>o</mi><mi>f</mi><mi>i</mi><mi>t</mi></mrow><annotation encoding="application/x-tex">bound \le maxprofit</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:0.83041em;vertical-align:-0.13597em;"></span><span class="mord mathnormal">b</span><span class="mord mathnormal">o</span><span class="mord mathnormal">u</span><span class="mord mathnormal">n</span><span class="mord mathnormal">d</span><span class="mspace" style="margin-right:0.2777777777777778em;"></span><span class="mrel">≤</span><span class="mspace" style="margin-right:0.2777777777777778em;"></span></span><span class="base"><span class="strut" style="height:0.8888799999999999em;vertical-align:-0.19444em;"></span><span class="mord mathnormal">m</span><span class="mord mathnormal">a</span><span class="mord mathnormal">x</span><span class="mord mathnormal">p</span><span class="mord mathnormal" style="margin-right:0.02778em;">r</span><span class="mord mathnormal">o</span><span class="mord mathnormal" style="margin-right:0.10764em;">f</span><span class="mord mathnormal">i</span><span class="mord mathnormal">t</span></span></span></span></span>.</p><h3 id="example-3"><a class="anchor" href="#example-3">#</a> Example</h3><p>Suppose that  <code>n = 4</code> ,  <code>W = 16</code> , and we have the following:</p><table><thead><tr><th style="text-align:center">i</th><th style="text-align:center">pi</th><th style="text-align:center">wi</th><th style="text-align:center">pi/wi</th></tr></thead><tbody><tr><td style="text-align:center">1</td><td style="text-align:center">$40</td><td style="text-align:center">2</td><td style="text-align:center">$20</td></tr><tr><td style="text-align:center">2</td><td style="text-align:center">$30</td><td style="text-align:center">5</td><td style="text-align:center">$6</td></tr><tr><td style="text-align:center">3</td><td style="text-align:center">$50</td><td style="text-align:center">10</td><td style="text-align:center">$5</td></tr><tr><td style="text-align:center">4</td><td style="text-align:center">$10</td><td style="text-align:center">5</td><td style="text-align:center">$2</td></tr></tbody></table><p><img data-src="https://i.imgur.com/HhtCw0C.png" alt=""></p><p><strong>Nonpromising node</strong>:<br><mark><strong>node(3, 1)</strong></mark></p><ol><li>Compute its  <code>profit</code>  and  <code>weight</code> .<ul><li><code>profit = 70 + 50 = 120</code></li><li><code>weight = 7 + 10 = 17</code></li></ul></li><li>Because its  <code>weight = 17</code>  is greater than  <code>W = 16</code> ,  <code>maxprofit</code>  does not change.</li><li>Determine that it is <strong>nonpromising</strong> because its  <code>weight = 17</code>  is greater than or equal to  <code>W = 16</code> .</li><li>The  <code>bound</code>  for this node is <strong>not computed</strong>, because its  <code>weight</code>  has determined it to be <strong>nonpromising</strong></li><li>Backtrack to node(2, 1).</li></ol><p><mark><strong>node(4, 1)</strong></mark></p><ol><li>Compute its  <code>profit</code>  and  <code>weight</code> .<ul><li><code>profit = 80 + 0 = 80</code></li><li><code>weight = 7 + 5 = 12</code></li></ul></li><li>Because its  <code>weight = 12</code>  is <strong>less</strong> than  <code>W = 16</code> , and its  <code>profit = 80</code>  is <strong>greater</strong> than  <code>maxprofit = 70</code> , set  <code>maxprofit = 80</code>  .</li><li>Compute its  <code>bound</code> . The fourth weight would not bring the sum of the items above  <code>W</code> , and there are only four items. Therefore,  <code>k = 5</code> , and  <code>bound = 80 + 0 = 80</code> .</li><li>Determine that it is <strong>nonpromising</strong> because its  <code>bound = 80</code>  <strong>equal</strong> to  <code>maxprofit = 80</code> .</li><li>Backtrack to node(3, 2).</li></ol><p><mark><strong>node(4, 2)</strong></mark></p><ol><li>Compute its  <code>profit</code>  and  <code>weight</code> .<ul><li><code>profit = 70 + 0 = 70</code></li><li><code>weight = 7 + 0 = 7</code></li></ul></li><li><code>k = 5</code> ,  <code>bound = 70 + 0 = 70</code> .</li><li>Determine that the node is <strong>nonpromising</strong> because its  <code>bound = 70</code>  is <strong>less</strong> than  <code>maxprofit = 80</code> .</li><li>Backtrack to node(1, 1)</li></ol><h2 id="註解"><a class="anchor" href="#註解">#</a> 註解</h2><ol><li><a href="#backtracking">promising <em>有希望的；有出息的；有前途的</em></a></li></ol><blockquote><p>Something that is promising shows signs that it is going to be successful or enjoyable.<br><strong>ex.</strong> <em>They won the award for the most promising new band of the year.</em></p></blockquote><ol start="2"><li><a href="#pruning2">prune <em>v.</em></a></li></ol><blockquote><ul><li><em>修剪（樹枝）</em><br>To cut off branches from a tree, bush, or plant, especially so that it will grow better in the future.<br><strong>ex.</strong> <em>She spent the afternoon pruning roses.</em></li><li><em>刪除，刪節</em><br> To reduce something by removing things that are not necessary.<br><strong>ex.</strong> <em>I felt his essay needed a little pruning.</em></li></ul></blockquote><ol start="3"><li><a href="#%E6%83%B3%E6%B3%95">state space tree <em>狀態空間樹</em></a></li></ol><blockquote><p>選定一個狀態，衍生各式各樣的狀態，形成一棵樹。狀態空間樹無窮無盡。狀態可能重複出現、四處散布。</p></blockquote>]]></content>
      
      
      <categories>
          
          <category> Algorithm </category>
          
      </categories>
      
      
        <tags>
            
            <tag> Algorithm </tag>
            
            <tag> Backtracking </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>01 - 環境設定</title>
      <link href="/2023/04/25/%E7%B6%B2%E8%B7%AF%E7%88%AC%E8%9F%B2%E8%88%87%E8%B3%87%E6%96%99%E5%88%86%E6%9E%90/Ch01%20%E7%92%B0%E5%A2%83%E8%A8%AD%E5%AE%9A/"/>
      <url>/2023/04/25/%E7%B6%B2%E8%B7%AF%E7%88%AC%E8%9F%B2%E8%88%87%E8%B3%87%E6%96%99%E5%88%86%E6%9E%90/Ch01%20%E7%92%B0%E5%A2%83%E8%A8%AD%E5%AE%9A/</url>
      
        <content type="html"><![CDATA[<h2 id="環境設定及套件安裝-anaconda"><a class="anchor" href="#環境設定及套件安裝-anaconda">#</a> 環境設定及套件安裝 : Anaconda</h2><p>Anaconda 是適合資料科學工作者的開發套件管理系統，針對 Python 使用者提供簡單的安裝與豐富的套件。</p><p>Anaconda 包含了 Python 的實作環境，以及與網路爬蟲、資料分析、資料視覺化、機器學習相關的多種套件，如網路爬蟲最常使用到的套件 <em><strong>Requests</strong></em> 與 <em><strong>BeautifulSoup</strong></em> ，資料分析與視覺化套件 <em><strong>Pandas</strong></em> 與 <em><strong>Matplotlib</strong></em> ，自然語言處理套件 <em><strong>nltk</strong></em> 與 <em><strong>spaCy</strong></em> ，機器學習與深度學習套件 <em><strong>scikit-learn</strong></em> 與 <em><strong>TensorFlow</strong></em> 等，都可以透過 Anaconda 的圖形環境來安裝。</p><p>其自帶的 IDE 如 <em><strong>Jupyter Notebook</strong></em> 與 <em><strong>Sypder</strong></em> 等也提供了整合開發環境，讓開發者可以更簡便地逐行執行或分享程式碼內容。</p><h3 id="下載-anaconda"><a class="anchor" href="#下載-anaconda">#</a> 下載 Anaconda</h3><p>首先到以下網址下載 Anaconda:<br><span class="exturl" data-url="aHR0cHM6Ly93d3cuYW5hY29uZGEuY29tL2Rvd25sb2FkLw==">https://www.anaconda.com/download/</span></p><p><img data-src="https://i.imgur.com/3zbvesT.png" alt=""></p>]]></content>
      
      
      <categories>
          
          <category> Programming </category>
          
          <category> Python </category>
          
          <category> 網路爬蟲與資料分析 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> Python </tag>
            
            <tag> Web Scraping </tag>
            
            <tag> Data Analysis </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>2336. Smallest Number in Infinite Set</title>
      <link href="/2023/04/25/Coding/leetcode/Medium/2336%20Smallest%20Number%20in%20Infinite%20Set/"/>
      <url>/2023/04/25/Coding/leetcode/Medium/2336%20Smallest%20Number%20in%20Infinite%20Set/</url>
      
        <content type="html"><![CDATA[<p>⭐️⭐️</p><h2 id="題目敘述"><a class="anchor" href="#題目敘述">#</a> <span class="exturl" data-url="aHR0cHM6Ly9sZWV0Y29kZS5jb20vcHJvYmxlbXMvc21hbGxlc3QtbnVtYmVyLWluLWluZmluaXRlLXNldC8=">題目敘述</span></h2><p>You have a set which contains all positive integers  <code>[1, 2, 3, 4, 5, ...]</code> .</p><p>Implement the  <code>SmallestInfiniteSet</code>  class:</p><ul><li><code>SmallestInfiniteSet()</code>  Initializes the <strong>SmallestInfiniteSet</strong> object to contain <strong>all</strong> positive integers.</li><li><code>int popSmallest()</code>  <strong>Removes</strong> and returns the smallest integer contained in the infinite set.</li><li><code>void addBack(int num)</code>  <strong>Adds</strong> a positive integer  <code>num</code>  back into the infinite set, if it is <strong>not</strong> already in the infinite set.</li></ul><h3 id="example-1"><a class="anchor" href="#example-1">#</a> Example 1</h3><blockquote><p><strong>Input</strong><br>[“SmallestInfiniteSet”, “addBack”, “popSmallest”, “popSmallest”, “popSmallest”, “addBack”, “popSmallest”, “popSmallest”, “popSmallest”]<br>[[], [2], [], [], [], [1], [], [], []]<br><strong>Output</strong><br>[null, null, 1, 2, 3, null, 1, 4, 5]</p><p><strong>Explanation</strong><br>SmallestInfiniteSet smallestInfiniteSet = new SmallestInfiniteSet();<br>smallestInfiniteSet.addBack(2);    // 2 is already in the set, so no change is made.<br>smallestInfiniteSet.popSmallest(); // return 1, since 1 is the smallest number, and remove it from the set.<br>smallestInfiniteSet.popSmallest(); // return 2, and remove it from the set.<br>smallestInfiniteSet.popSmallest(); // return 3, and remove it from the set.<br>smallestInfiniteSet.addBack(1);    // 1 is added back to the set.<br>smallestInfiniteSet.popSmallest(); // return 1, since 1 was added back to the set and<br>// is the smallest number, and remove it from the set.<br>smallestInfiniteSet.popSmallest(); // return 4, and remove it from the set.<br>smallestInfiniteSet.popSmallest(); // return 5, and remove it from the set.</p></blockquote><h2 id="solution"><a class="anchor" href="#solution">#</a> Solution</h2><div class="tab" data-id="code" data-title="C++"><figure class="highlight cpp"><figcaption data-lang="C++"></figcaption><table><tr><td data-num="1"></td><td><pre><span class="token keyword">class</span> <span class="token class-name">SmallestInfiniteSet</span> <span class="token punctuation">&#123;</span></pre></td></tr><tr><td data-num="2"></td><td><pre><span class="token keyword">private</span><span class="token operator">:</span></pre></td></tr><tr><td data-num="3"></td><td><pre>    <span class="token keyword">int</span> min_num <span class="token operator">=</span> <span class="token number">1</span><span class="token punctuation">;</span></pre></td></tr><tr><td data-num="4"></td><td><pre>    priority_queue<span class="token operator">&lt;</span><span class="token keyword">int</span><span class="token punctuation">,</span> vector<span class="token operator">&lt;</span><span class="token keyword">int</span><span class="token operator">></span><span class="token punctuation">,</span> greater<span class="token operator">&lt;</span><span class="token keyword">int</span><span class="token operator">>></span> pq<span class="token punctuation">;</span></pre></td></tr><tr><td data-num="5"></td><td><pre>    unordered_set<span class="token operator">&lt;</span><span class="token keyword">int</span><span class="token operator">></span> nums<span class="token punctuation">;</span></pre></td></tr><tr><td data-num="6"></td><td><pre><span class="token keyword">public</span><span class="token operator">:</span></pre></td></tr><tr><td data-num="7"></td><td><pre>    <span class="token function">SmallestInfiniteSet</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span></pre></td></tr><tr><td data-num="8"></td><td><pre>        pq <span class="token operator">=</span> <span class="token generic-function"><span class="token function">priority_queue</span><span class="token generic class-name"><span class="token operator">&lt;</span><span class="token keyword">int</span><span class="token punctuation">,</span> vector<span class="token operator">&lt;</span><span class="token keyword">int</span><span class="token operator">></span><span class="token punctuation">,</span> greater<span class="token operator">&lt;</span><span class="token keyword">int</span><span class="token operator">>></span></span></span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span></pre></td></tr><tr><td data-num="9"></td><td><pre>        nums <span class="token operator">=</span> <span class="token generic-function"><span class="token function">unordered_set</span><span class="token generic class-name"><span class="token operator">&lt;</span><span class="token keyword">int</span><span class="token operator">></span></span></span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span></pre></td></tr><tr><td data-num="10"></td><td><pre>    <span class="token punctuation">&#125;</span></pre></td></tr><tr><td data-num="11"></td><td><pre>    </pre></td></tr><tr><td data-num="12"></td><td><pre>    <span class="token keyword">int</span> <span class="token function">popSmallest</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span></pre></td></tr><tr><td data-num="13"></td><td><pre>        <span class="token keyword">if</span> <span class="token punctuation">(</span><span class="token operator">!</span>pq<span class="token punctuation">.</span><span class="token function">empty</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span></pre></td></tr><tr><td data-num="14"></td><td><pre>            <span class="token keyword">int</span> res <span class="token operator">=</span> pq<span class="token punctuation">.</span><span class="token function">top</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span></pre></td></tr><tr><td data-num="15"></td><td><pre>            pq<span class="token punctuation">.</span><span class="token function">pop</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span></pre></td></tr><tr><td data-num="16"></td><td><pre>            nums<span class="token punctuation">.</span><span class="token function">erase</span><span class="token punctuation">(</span>res<span class="token punctuation">)</span><span class="token punctuation">;</span></pre></td></tr><tr><td data-num="17"></td><td><pre>            <span class="token keyword">return</span> res<span class="token punctuation">;</span></pre></td></tr><tr><td data-num="18"></td><td><pre>        <span class="token punctuation">&#125;</span></pre></td></tr><tr><td data-num="19"></td><td><pre>        min_num<span class="token operator">++</span><span class="token punctuation">;</span></pre></td></tr><tr><td data-num="20"></td><td><pre>        <span class="token keyword">return</span> min_num <span class="token operator">-</span> <span class="token number">1</span><span class="token punctuation">;</span></pre></td></tr><tr><td data-num="21"></td><td><pre>    <span class="token punctuation">&#125;</span></pre></td></tr><tr><td data-num="22"></td><td><pre>    </pre></td></tr><tr><td data-num="23"></td><td><pre>    <span class="token keyword">void</span> <span class="token function">addBack</span><span class="token punctuation">(</span><span class="token keyword">int</span> num<span class="token punctuation">)</span> <span class="token punctuation">&#123;</span></pre></td></tr><tr><td data-num="24"></td><td><pre>        <span class="token keyword">if</span> <span class="token punctuation">(</span>min_num <span class="token operator">></span> num <span class="token operator">&amp;&amp;</span> nums<span class="token punctuation">.</span><span class="token function">find</span><span class="token punctuation">(</span>num<span class="token punctuation">)</span> <span class="token operator">==</span> nums<span class="token punctuation">.</span><span class="token function">end</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span></pre></td></tr><tr><td data-num="25"></td><td><pre>            pq<span class="token punctuation">.</span><span class="token function">push</span><span class="token punctuation">(</span>num<span class="token punctuation">)</span><span class="token punctuation">;</span></pre></td></tr><tr><td data-num="26"></td><td><pre>            nums<span class="token punctuation">.</span><span class="token function">insert</span><span class="token punctuation">(</span>num<span class="token punctuation">)</span><span class="token punctuation">;</span></pre></td></tr><tr><td data-num="27"></td><td><pre>        <span class="token punctuation">&#125;</span></pre></td></tr><tr><td data-num="28"></td><td><pre>    <span class="token punctuation">&#125;</span></pre></td></tr><tr><td data-num="29"></td><td><pre><span class="token punctuation">&#125;</span><span class="token punctuation">;</span></pre></td></tr></table></figure></div><div class="tab" data-id="code" data-title="Java"><figure class="highlight java"><figcaption data-lang="java"></figcaption><table><tr><td data-num="1"></td><td><pre><span class="token keyword">import</span> <span class="token import"><span class="token namespace">java<span class="token punctuation">.</span>util<span class="token punctuation">.</span></span><span class="token class-name">PriorityQueue</span></span><span class="token punctuation">;</span></pre></td></tr><tr><td data-num="2"></td><td><pre></pre></td></tr><tr><td data-num="3"></td><td><pre><span class="token keyword">class</span> <span class="token class-name">SmallestInfiniteSet</span> <span class="token punctuation">&#123;</span></pre></td></tr><tr><td data-num="4"></td><td><pre>    <span class="token class-name">PriorityQueue</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token class-name">Integer</span><span class="token punctuation">></span></span> pQ<span class="token punctuation">;</span></pre></td></tr><tr><td data-num="5"></td><td><pre></pre></td></tr><tr><td data-num="6"></td><td><pre>    <span class="token keyword">public</span> <span class="token class-name">SmallestInfiniteSet</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span></pre></td></tr><tr><td data-num="7"></td><td><pre>        pQ <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">PriorityQueue</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token punctuation">></span></span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span></pre></td></tr><tr><td data-num="8"></td><td><pre>        <span class="token keyword">for</span><span class="token punctuation">(</span><span class="token keyword">int</span> i <span class="token operator">=</span> <span class="token number">1</span><span class="token punctuation">;</span> i <span class="token operator">&lt;=</span> <span class="token number">1000</span><span class="token punctuation">;</span> i<span class="token operator">++</span><span class="token punctuation">)</span><span class="token punctuation">&#123;</span></pre></td></tr><tr><td data-num="9"></td><td><pre>            pQ<span class="token punctuation">.</span><span class="token function">add</span><span class="token punctuation">(</span>i<span class="token punctuation">)</span><span class="token punctuation">;</span></pre></td></tr><tr><td data-num="10"></td><td><pre>        <span class="token punctuation">&#125;</span></pre></td></tr><tr><td data-num="11"></td><td><pre>    <span class="token punctuation">&#125;</span></pre></td></tr><tr><td data-num="12"></td><td><pre>    </pre></td></tr><tr><td data-num="13"></td><td><pre>    <span class="token keyword">public</span> <span class="token keyword">int</span> <span class="token function">popSmallest</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span></pre></td></tr><tr><td data-num="14"></td><td><pre>        <span class="token keyword">int</span> num <span class="token operator">=</span> pQ<span class="token punctuation">.</span><span class="token function">poll</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span></pre></td></tr><tr><td data-num="15"></td><td><pre>        <span class="token keyword">return</span> num<span class="token punctuation">;</span></pre></td></tr><tr><td data-num="16"></td><td><pre>    <span class="token punctuation">&#125;</span></pre></td></tr><tr><td data-num="17"></td><td><pre>    </pre></td></tr><tr><td data-num="18"></td><td><pre>    <span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">addBack</span><span class="token punctuation">(</span><span class="token keyword">int</span> num<span class="token punctuation">)</span> <span class="token punctuation">&#123;</span></pre></td></tr><tr><td data-num="19"></td><td><pre>        <span class="token keyword">if</span><span class="token punctuation">(</span><span class="token operator">!</span>pQ<span class="token punctuation">.</span><span class="token function">contains</span><span class="token punctuation">(</span>num<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">&#123;</span></pre></td></tr><tr><td data-num="20"></td><td><pre>            pQ<span class="token punctuation">.</span><span class="token function">add</span><span class="token punctuation">(</span>num<span class="token punctuation">)</span><span class="token punctuation">;</span></pre></td></tr><tr><td data-num="21"></td><td><pre>        <span class="token punctuation">&#125;</span></pre></td></tr><tr><td data-num="22"></td><td><pre>    <span class="token punctuation">&#125;</span></pre></td></tr><tr><td data-num="23"></td><td><pre><span class="token punctuation">&#125;</span></pre></td></tr></table></figure></div><div class="tab" data-id="code" data-title="Python"><figure class="highlight python"><figcaption data-lang="python"></figcaption><table><tr><td data-num="1"></td><td><pre><span class="token keyword">class</span> <span class="token class-name">SmallestInfiniteSet</span><span class="token punctuation">:</span></pre></td></tr><tr><td data-num="2"></td><td><pre></pre></td></tr><tr><td data-num="3"></td><td><pre>    <span class="token keyword">def</span> <span class="token function">__init__</span><span class="token punctuation">(</span>self<span class="token punctuation">)</span><span class="token punctuation">:</span></pre></td></tr><tr><td data-num="4"></td><td><pre>        self<span class="token punctuation">.</span>min_num <span class="token operator">=</span> <span class="token number">1</span></pre></td></tr><tr><td data-num="5"></td><td><pre>        self<span class="token punctuation">.</span>pq <span class="token operator">=</span> <span class="token punctuation">[</span><span class="token punctuation">]</span>        </pre></td></tr><tr><td data-num="6"></td><td><pre></pre></td></tr><tr><td data-num="7"></td><td><pre>    <span class="token keyword">def</span> <span class="token function">popSmallest</span><span class="token punctuation">(</span>self<span class="token punctuation">)</span> <span class="token operator">-</span><span class="token operator">></span> <span class="token builtin">int</span><span class="token punctuation">:</span></pre></td></tr><tr><td data-num="8"></td><td><pre>        <span class="token keyword">if</span> self<span class="token punctuation">.</span>pq<span class="token punctuation">:</span></pre></td></tr><tr><td data-num="9"></td><td><pre>            <span class="token keyword">return</span> heapq<span class="token punctuation">.</span>heappop<span class="token punctuation">(</span>self<span class="token punctuation">.</span>pq<span class="token punctuation">)</span></pre></td></tr><tr><td data-num="10"></td><td><pre>        self<span class="token punctuation">.</span>min_num <span class="token operator">+=</span> <span class="token number">1</span></pre></td></tr><tr><td data-num="11"></td><td><pre>        <span class="token keyword">return</span> self<span class="token punctuation">.</span>min_num <span class="token operator">-</span> <span class="token number">1</span></pre></td></tr><tr><td data-num="12"></td><td><pre></pre></td></tr><tr><td data-num="13"></td><td><pre>    <span class="token keyword">def</span> <span class="token function">addBack</span><span class="token punctuation">(</span>self<span class="token punctuation">,</span> num<span class="token punctuation">:</span> <span class="token builtin">int</span><span class="token punctuation">)</span> <span class="token operator">-</span><span class="token operator">></span> <span class="token boolean">None</span><span class="token punctuation">:</span></pre></td></tr><tr><td data-num="14"></td><td><pre>        <span class="token keyword">if</span> self<span class="token punctuation">.</span>min_num <span class="token operator">></span> num <span class="token keyword">and</span> num <span class="token keyword">not</span> <span class="token keyword">in</span> self<span class="token punctuation">.</span>pq<span class="token punctuation">:</span></pre></td></tr><tr><td data-num="15"></td><td><pre>            heapq<span class="token punctuation">.</span>heappush<span class="token punctuation">(</span>self<span class="token punctuation">.</span>pq<span class="token punctuation">,</span> num<span class="token punctuation">)</span></pre></td></tr></table></figure></div>]]></content>
      
      
      <categories>
          
          <category> Coding </category>
          
          <category> Leetcode </category>
          
          <category> Medium </category>
          
      </categories>
      
      
        <tags>
            
            <tag> Leetcode </tag>
            
            <tag> Heap (Priority Queue) </tag>
            
            <tag> Hash Table </tag>
            
            <tag> Medium </tag>
            
            <tag> Design </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>Ch01 - Example</title>
      <link href="/2023/04/25/SystemSoftware/Ch01_example/"/>
      <url>/2023/04/25/SystemSoftware/Ch01_example/</url>
      
        <content type="html"><![CDATA[<ul><li><a href="./Appendix%20A.md">Appendix A</a></li><li>High Level Language 的部分是 pseudo-code<ul><li>僅能代表大概相同的邏輯</li><li>不保證這段 code 編譯成組合語言會和範例完全一樣</li></ul></li></ul><div class="note info"><p><strong>判斷 format 的方法</strong></p><ul><li><strong>Relative Addressing</strong>: 必為 format 3</li><li><strong>Immediate Addressing</strong>: 看常數大小<ul><li>因為 format 3 的 disp 欄位有 12 bits，僅能表示 <span class="katex"><span class="katex-mathml"><math xmlns="http://www.w3.org/1998/Math/MathML"><semantics><mrow><mo>−</mo><msup><mn>2</mn><mn>12</mn></msup></mrow><annotation encoding="application/x-tex">-2^{12}</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:0.897438em;vertical-align:-0.08333em;"></span><span class="mord">−</span><span class="mord"><span class="mord">2</span><span class="msupsub"><span class="vlist-t"><span class="vlist-r"><span class="vlist" style="height:0.8141079999999999em;"><span style="top:-3.063em;margin-right:0.05em;"><span class="pstrut" style="height:2.7em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mtight"><span class="mord mtight">1</span><span class="mord mtight">2</span></span></span></span></span></span></span></span></span></span></span></span> ~ <span class="katex"><span class="katex-mathml"><math xmlns="http://www.w3.org/1998/Math/MathML"><semantics><mrow><msup><mn>2</mn><mn>12</mn></msup><mo>−</mo><mn>1</mn></mrow><annotation encoding="application/x-tex">2^{12}-1</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:0.897438em;vertical-align:-0.08333em;"></span><span class="mord"><span class="mord">2</span><span class="msupsub"><span class="vlist-t"><span class="vlist-r"><span class="vlist" style="height:0.8141079999999999em;"><span style="top:-3.063em;margin-right:0.05em;"><span class="pstrut" style="height:2.7em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mtight"><span class="mord mtight">1</span><span class="mord mtight">2</span></span></span></span></span></span></span></span></span><span class="mspace" style="margin-right:0.2222222222222222em;"></span><span class="mbin">−</span><span class="mspace" style="margin-right:0.2222222222222222em;"></span></span><span class="base"><span class="strut" style="height:0.64444em;vertical-align:0em;"></span><span class="mord">1</span></span></span></span></li></ul></li><li><strong>Memory Access</strong>:  通常是 format 3</li><li><strong>Operation 前有加號</strong>：通常是 format 4</li></ul></div><div class="note info"><p><strong>判斷是否存取記憶體的方法</strong></p><ul><li>在語法描述中， <code>m</code>  表記憶體位置， <code>(m)</code>  是此位置的資料<ul><li>所以如果描述中有  <code>(m)</code>  表示有 memory access</li></ul></li></ul></div><h2 id="12-simple-data-movement"><a class="anchor" href="#12-simple-data-movement">#</a> 1.2 Simple Data Movement</h2><ul><li>There are <strong>no memory-to-memory move instructions</strong></li><li>All data movement must be <strong>done using registers</strong>.<ul><li>先用 Load 指令把資料從某段記憶體寫入 register</li><li>再用 Store 指令把資料從 register 寫入目標記憶體位置</li></ul></li><li>There are four different ways of defining storage for data items in the SIC assembler language:  <code>WORD</code> ,  <code>RESW</code> ,  <code>BYTE</code> ,  <code>RESB</code></li></ul><h3 id="sic"><a class="anchor" href="#sic">#</a> SIC</h3><pre><code class="language-=">LDA FIVESTA ALPHALDCHCHARZSTCHC1 . . .ALPHARESW1//宣告變數，長度沒有限制FIVEWORD5//宣告常數CHARZBYTEC'Z'//宣告byteC1RESB1</code></pre><ul><li><strong>Memory usage</strong>: // 記憶體使用多少 byte (空間)<ul><li><strong>Data</strong>: 2 words + 2 bytes = 6 + 2 bytes = 8 bytes</li><li><strong>Instruction</strong>: 4 * 3(24 bits) = 12 bytes</li><li><strong>Total</strong>: 8 + 12 bytes = 20 bytes</li></ul></li><li><strong># of memory access</strong>: // 記憶體存取幾次 (速度)<ul><li><strong>Data Access</strong>: 4</li><li><strong>Instruction Fetch</strong>: 4</li><li><strong>Total</strong>: 8</li></ul></li></ul><h3 id="sicxe"><a class="anchor" href="#sicxe">#</a> SIC/XE</h3><pre><code class="language-=">LDA #5STA ALPHALDA #90STCH C1 . . .ALPHARESW1C1RESB1</code></pre><ul><li><strong>Memory usage</strong>:<ul><li><strong>Data</strong>: 1 word + 1 bytes = 3 + 1 bytes = 4 bytes</li><li><strong>Instruction</strong>: 3 + 3 + 3 + 3 = 12 bytes</li><li><strong>Total</strong>: 16 bytes</li></ul></li><li><strong># of memory access</strong>:<ul><li><strong>Data Access</strong>: 2</li><li><strong>Instruction Fetch</strong>: 4</li><li><strong>Total</strong>: 6</li></ul></li></ul><h3 id="high-level-language"><a class="anchor" href="#high-level-language">#</a> High Level Language</h3><figure class="highlight c"><figcaption data-lang="c"></figcaption><table><tr><td data-num="1"></td><td><pre><span class="token keyword">int</span> ALPHA<span class="token punctuation">;</span></pre></td></tr><tr><td data-num="2"></td><td><pre><span class="token keyword">char</span> C1<span class="token punctuation">;</span></pre></td></tr><tr><td data-num="3"></td><td><pre></pre></td></tr><tr><td data-num="4"></td><td><pre>ALPHA <span class="token operator">=</span> <span class="token number">5</span><span class="token punctuation">;</span></pre></td></tr><tr><td data-num="5"></td><td><pre>C1 <span class="token operator">=</span> <span class="token char">'Z'</span><span class="token punctuation">;</span></pre></td></tr></table></figure><h2 id="13-simple-arithmetic-operation"><a class="anchor" href="#13-simple-arithmetic-operation">#</a> 1.3 Simple Arithmetic Operation</h2><h3 id="sic-2"><a class="anchor" href="#sic-2">#</a> SIC</h3><pre><code class="language-=">LDAALPHAADDINCRSUB ONESTABETALDAGAMMAADD INCRSUBONESTADELTA . . .ONEWORD1         .ALPHARESW1BETARESW1GAMMARESW1DELTARESW1INCRRESW1 </code></pre><ul><li><strong>Memory usage</strong>:<ul><li><strong>Data</strong>: 6 words(3 bytes) = 18 bytes</li><li><strong>Instruction</strong>: 8 * 3 = 24 bytes</li><li><strong>Total</strong>: 42 bytes</li></ul></li><li><strong># of memory access</strong>:<ul><li><strong>Data Access</strong>: 8</li><li><strong>Instruction Fetch</strong>: 8</li><li><strong>Total</strong>: 16</li></ul></li></ul><h3 id="sicxe-2"><a class="anchor" href="#sicxe-2">#</a> SIC/XE</h3><ul><li><font> <code>ADDR</code> </font> is used to <strong>avoid having to fetch</strong>  <code>INCR</code>  from memory each time it is used in a calculation, which may make the program more efficient.</li></ul><pre><code class="language-=">LDS INCRLDA ALPHAADDR S,ASUB #1STA  BETALDA GAMMAADDR S,ASUB #1STA DELTA . . . .ALPHARESW1BETARESW1GAMMARESW1DELTARESW1INCRRESW1 </code></pre><div class="note success"><p><strong>Q:</strong>  <code>LDS</code>  和  <code>LDA</code>  load 兩個變數存進 register 有沒有好處？</p><p><strong>A:</strong> 是有的，因為  <code>INCR</code>  在整個程式中使用超過一次，所以先 load 到 register 裡面可以減少 memory access 的次數</p></div><ul><li><strong>Memory usage</strong>:<ul><li><strong>Data</strong>: 5 words = 15 bytes</li><li><strong>Instruction</strong>: 2 byte( <code>ADDR</code> ) * 2 + 3 * 7 = 25 bytes</li><li><strong>Total</strong>: 40 bytes</li></ul></li><li><strong># of memory access</strong>:<ul><li><strong>Data Access</strong>: 5</li><li><strong>Instruction Fetch</strong>: 9</li><li><strong>Total</strong>: 14</li></ul></li></ul><h3 id="high-level-language-2"><a class="anchor" href="#high-level-language-2">#</a> High Level Language</h3><figure class="highlight c"><figcaption data-lang="c"></figcaption><table><tr><td data-num="1"></td><td><pre><span class="token keyword">int</span> BETA <span class="token operator">=</span> ALPHA <span class="token operator">+</span> INCR <span class="token operator">-</span> <span class="token number">1</span><span class="token punctuation">;</span></pre></td></tr><tr><td data-num="2"></td><td><pre><span class="token keyword">int</span> DELTA <span class="token operator">=</span> GAMMA <span class="token operator">+</span> INCR <span class="token operator">-</span> <span class="token number">1</span><span class="token punctuation">;</span></pre></td></tr></table></figure><h2 id="14-simple-looping-and-indexing-operations"><a class="anchor" href="#14-simple-looping-and-indexing-operations">#</a> 1.4 Simple Looping and Indexing Operations</h2><h3 id="sic-3"><a class="anchor" href="#sic-3">#</a> SIC</h3><pre><code class="language-=">LDXZEROMOVECHLDCHSTR1,XSTCHSTR2,XTIXELEVENJLTMOVECH . . .STR1BYTEC'TEST STRING'STR2 RESB11.ZEROWORD0ELEVENWORD11</code></pre><ul><li><strong>Memory usage</strong>:<ul><li><strong>Data</strong>: 2 words + 11 * 2 bytes = 6 + 22 bytes = 28 bytes</li><li><strong>Instruction</strong>: 3 * 5 = 15 bytes</li><li><strong>Total</strong>: 43 bytes</li></ul></li><li><strong># of memory access</strong>:<ul><li><strong>Data Access</strong>: 1 + 3 * 11 = 34</li><li><strong>Instruction Fetch</strong>: 1 + 4 * 11 = 45</li><li><strong>Total</strong>: 79</li></ul></li></ul><h3 id="sicxe-3"><a class="anchor" href="#sicxe-3">#</a> SIC/XE</h3><ul><li><code>TIXR</code>  makes the loop <strong>more efficient</strong></li><li>Because the value does not have to be fetched from memory each time the loop is executed.</li></ul><pre><code class="language-=">LDT#11LDX#0MOVECHLDCHSTR1,XSTCHSTR2,XTIXRTJLTMOVECH . . .STR1BYTEC'TEST STRING'STR2 RESB11</code></pre><ul><li><strong>Memory usage</strong>:<ul><li><strong>Data</strong>: 11 * 2 bytes = 22 bytes</li><li><strong>Instruction</strong>: <mark>2 ( <code>TIXR</code> )</mark> + 5 * 3 bytes= 17 bytes</li><li><strong>Total</strong>: 39 bytes</li></ul></li><li><strong># of memory access</strong>:<ul><li><strong>Data Access</strong>: 2 * 11 = 2 + 22 = 24</li><li><strong>Instruction Fetch</strong>: 4 * 11 = 44</li><li><strong>Total</strong>: 68</li></ul></li></ul><h3 id="high-level-language-3"><a class="anchor" href="#high-level-language-3">#</a> High Level Language</h3><figure class="highlight c"><figcaption data-lang="c"></figcaption><table><tr><td data-num="1"></td><td><pre><span class="token keyword">char</span> STR1 <span class="token operator">=</span> <span class="token string">"TEST STRING"</span><span class="token punctuation">;</span></pre></td></tr><tr><td data-num="2"></td><td><pre><span class="token keyword">char</span> STR2<span class="token punctuation">[</span><span class="token number">11</span><span class="token punctuation">]</span><span class="token punctuation">;</span></pre></td></tr><tr><td data-num="3"></td><td><pre><span class="token keyword">int</span> X <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span></pre></td></tr><tr><td data-num="4"></td><td><pre></pre></td></tr><tr><td data-num="5"></td><td><pre><span class="token keyword">do</span><span class="token punctuation">&#123;</span></pre></td></tr><tr><td data-num="6"></td><td><pre>    STR2<span class="token punctuation">[</span>X<span class="token punctuation">]</span> <span class="token operator">=</span> STR1<span class="token punctuation">[</span>X<span class="token punctuation">]</span><span class="token punctuation">;</span> </pre></td></tr><tr><td data-num="7"></td><td><pre>    X<span class="token operator">++</span><span class="token punctuation">;</span></pre></td></tr><tr><td data-num="8"></td><td><pre><span class="token punctuation">&#125;</span><span class="token keyword">while</span><span class="token punctuation">(</span>X <span class="token operator">&lt;</span> <span class="token number">11</span><span class="token punctuation">)</span><span class="token punctuation">;</span></pre></td></tr></table></figure><h2 id="15-sample-indexing-and-looping-operations"><a class="anchor" href="#15-sample-indexing-and-looping-operations">#</a> 1.5 Sample Indexing and Looping Operations</h2><ul><li>The value in the index register must be <strong>incremented by 3</strong> for each iteration of this loop<ul><li>Because each iteration <strong>processes a 3-byte element</strong> of the arrays</li></ul></li></ul><h3 id="sic-4"><a class="anchor" href="#sic-4">#</a> SIC</h3><ul><li><p>The  <code>TIX</code>  instruction always <strong>adds 1 to register X</strong>, so it is <font>not suitable</font> for this program fragment.</p></li><li><p>因為一個 word 占用 3bytes，所以 X 每次要跳三個位置 (X 每次加 3)，才能正確的讀取每一個 word</p></li></ul><pre><code class="language-=">LDAZEROSTAINDEXADDLPLDXINDEXLDAALPHA,XADDBETA,XSTAGAMMA,XLDAINDEXADDTHREESTAINDEXCOMPK300JLTADDLP . . .INDEXRESW1 .ALPHARESW100BETARESW100GAMMARESW100 .ZEROWORD0K300WORD300THREEWORD3</code></pre><div class="note danger"><p><strong>Q:</strong> 為什麼程式碼 7 ~ 10 不用  <code>TIX</code>  ?</p><p><strong>A:</strong> 因為這裡的變數宣告是 word，而不是 byte，要找到下一個資料位置，要加 3 bytes (one word)，而  <code>TIX</code>  裡面的內容是，加 1 並比較。</p></div><ul><li><strong>Memory usage</strong>:<ul><li><strong>Data</strong>: 1 + 100*3 + 3 words = 304 words = 912 bytes</li><li><strong>Instruction</strong>: 11 * 3 = 33 bytes</li><li><strong>Total</strong>: 945 bytes</li></ul></li><li><strong># of memory access</strong>:<ul><li><strong>Data Access</strong>: 2 + 8 * 100 = 802</li><li><strong>Instruction Fetch</strong>: 2 + 9 * 100 = 902</li><li><strong>Total</strong>: 1704</li></ul></li></ul><h3 id="sicxe-4"><a class="anchor" href="#sicxe-4">#</a> SIC/XE</h3><pre><code class="language-=">LDS#3LDT#300LDX#0ADDLPLDAALPHA,XADDBETA,XSTAGAMMA,XADDRS,XCOMPR X,TJLTADDLP . . . .ALPHARESW100BETARESW100GAMMARESW100</code></pre><ul><li><strong>Memory usage</strong>:<ul><li><strong>Data</strong>: 3 * 100 words = 300 words = 900 bytes</li><li><strong>Instruction</strong>: <mark>2( <code>ADDR</code> )</mark> + <mark>2( <code>COMPR</code> )</mark> + 7 * 3 = 25</li><li><strong>Total</strong>: 925 bytes</li></ul></li><li><strong># of memory access</strong>:<ul><li><strong>Data Access</strong>: 3 * 100 = 300</li><li><strong>Instruction Fetch</strong>: 3 + 6 * 100 = 603</li><li><strong>Total</strong>: 903</li></ul></li></ul><h3 id="high-level-language-4"><a class="anchor" href="#high-level-language-4">#</a> High Level Language</h3><figure class="highlight c"><figcaption data-lang="c"></figcaption><table><tr><td data-num="1"></td><td><pre><span class="token keyword">int</span> ALPHA<span class="token punctuation">[</span><span class="token number">100</span><span class="token punctuation">]</span><span class="token punctuation">;</span></pre></td></tr><tr><td data-num="2"></td><td><pre><span class="token keyword">int</span> BETA<span class="token punctuation">[</span><span class="token number">100</span><span class="token punctuation">]</span><span class="token punctuation">;</span></pre></td></tr><tr><td data-num="3"></td><td><pre><span class="token keyword">int</span> GAMMA<span class="token punctuation">[</span><span class="token number">100</span><span class="token punctuation">]</span><span class="token punctuation">;</span></pre></td></tr><tr><td data-num="4"></td><td><pre></pre></td></tr><tr><td data-num="5"></td><td><pre><span class="token keyword">for</span> <span class="token punctuation">(</span>X <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span> X <span class="token operator">&lt;</span> <span class="token number">100</span><span class="token punctuation">;</span> X<span class="token operator">++</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span></pre></td></tr><tr><td data-num="6"></td><td><pre>    GAMMA<span class="token punctuation">[</span>X<span class="token punctuation">]</span> <span class="token operator">=</span> ALPHA<span class="token punctuation">[</span>X<span class="token punctuation">]</span> <span class="token operator">+</span> BETA<span class="token punctuation">[</span>X<span class="token punctuation">]</span><span class="token punctuation">;</span></pre></td></tr><tr><td data-num="7"></td><td><pre><span class="token punctuation">&#125;</span></pre></td></tr></table></figure><h2 id="16-simple-io-operations"><a class="anchor" href="#16-simple-io-operations">#</a> 1.6 Simple I/O Operations</h2><h3 id="sic-5"><a class="anchor" href="#sic-5">#</a> SIC</h3><pre><code class="language-=">INLOOP TD INDEV JEQINLOOP RDINDEV STCHDATA  .  .  .OUTLP TDOUTDEV JEQOUTLP LDCHDATA WDOUTDEV  .  .  .INDEV BYTEX'F1'// X 代表使用16進位, 'F1' 是給此裝置的編號OUTDEV BYTEX'05'DATA RESB1</code></pre><ul><li><strong>Memory usage</strong>:<ul><li><strong>Data</strong>: 3 bytes</li><li><strong>Instruction</strong>: (4 + 4) * 3 = 24 bytes</li><li><strong>Total</strong>: 27 bytes</li></ul></li></ul><br><blockquote><p>國展表示這邊 access 不用算 //TD RD WD</p></blockquote><ul><li><strong># of memory access</strong>:<ul><li><strong>Data Access</strong>: 2</li><li><strong>Instruction Fetch</strong>: 2n + 2m + 4 (n, m: 測試 device 的次數)</li><li><strong>Total</strong>: 2n + 2m + 6</li></ul></li></ul><h3 id="high-level-language-5"><a class="anchor" href="#high-level-language-5">#</a> High Level Language</h3><figure class="highlight cpp"><figcaption data-lang="C++"></figcaption><table><tr><td data-num="1"></td><td><pre>Device INDEV <span class="token operator">=</span> <span class="token function">Device</span><span class="token punctuation">(</span><span class="token string">"F1"</span><span class="token punctuation">)</span><span class="token punctuation">;</span></pre></td></tr><tr><td data-num="2"></td><td><pre>Device OUTDEV <span class="token operator">=</span> <span class="token function">Device</span><span class="token punctuation">(</span><span class="token string">"05"</span><span class="token punctuation">)</span><span class="token punctuation">;</span></pre></td></tr><tr><td data-num="3"></td><td><pre></pre></td></tr><tr><td data-num="4"></td><td><pre><span class="token keyword">char</span> DATA<span class="token punctuation">;</span></pre></td></tr><tr><td data-num="5"></td><td><pre></pre></td></tr><tr><td data-num="6"></td><td><pre><span class="token comment">// 不能使用就繼續測試</span></pre></td></tr><tr><td data-num="7"></td><td><pre><span class="token keyword">while</span> <span class="token punctuation">(</span><span class="token operator">!</span> INDEV<span class="token punctuation">.</span><span class="token function">isReady</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span></pre></td></tr><tr><td data-num="8"></td><td><pre><span class="token punctuation">&#125;</span></pre></td></tr><tr><td data-num="9"></td><td><pre>DATA <span class="token operator">=</span> INDEV<span class="token punctuation">.</span><span class="token function">read</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span></pre></td></tr><tr><td data-num="10"></td><td><pre></pre></td></tr><tr><td data-num="11"></td><td><pre>    <span class="token punctuation">.</span></pre></td></tr><tr><td data-num="12"></td><td><pre>    <span class="token punctuation">.</span></pre></td></tr><tr><td data-num="13"></td><td><pre>    <span class="token punctuation">.</span></pre></td></tr><tr><td data-num="14"></td><td><pre></pre></td></tr><tr><td data-num="15"></td><td><pre><span class="token keyword">while</span> <span class="token punctuation">(</span><span class="token operator">!</span> OUTDEV<span class="token punctuation">.</span><span class="token function">isReady</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span></pre></td></tr><tr><td data-num="16"></td><td><pre><span class="token punctuation">&#125;</span></pre></td></tr><tr><td data-num="17"></td><td><pre>OUTDEV<span class="token punctuation">.</span><span class="token function">write</span><span class="token punctuation">(</span>DATA<span class="token punctuation">)</span><span class="token punctuation">;</span></pre></td></tr></table></figure><h2 id="17-sample-subroutine-call-and-record-input-operations"><a class="anchor" href="#17-sample-subroutine-call-and-record-input-operations">#</a> 1.7 Sample Subroutine Call and Record Input Operations</h2><h3 id="sic-6"><a class="anchor" href="#sic-6">#</a> SIC</h3><pre><code class="language-=">JSUBREAD . . .READLDXZERORLOOPTDINDEVJEQRLOOPRDINDEVSTCHRECORD,XTIXK100JLTRLOOPRSUB . . .INDEVBYTEX'F1'RECORDRESB100 .ZEROWORD0K100WORD100</code></pre><ul><li><strong>Memory usage</strong>:<ul><li><strong>Data</strong>: (1 + 100) bytes + 2 words = 107 bytes</li><li><strong>Instruction</strong>: 9 * 3 = 27 bytes</li><li><strong>Total</strong>: 134 bytes</li></ul></li></ul><blockquote><p>國展表示這邊 access 不用算 //TD RD WD</p></blockquote><ul><li><strong># of memory access</strong>:<ul><li><strong>Data Access</strong>: 1 + 2 * 100 = 201</li><li><strong>Instruction Fetch</strong>: 1 + 1 + 2n + 5 * 100 + 1 (n: 測試 device 的次數)</li><li><strong>Total</strong>: 2n + 704</li></ul></li></ul><h3 id="sicxe-5"><a class="anchor" href="#sicxe-5">#</a> SIC/XE</h3><pre><code class="language-=">JSUBREAD . . .READLDX#0LDT#100RLOOPTD INDEVJEQ RLOOPRD INDEVSTCH RECORD,XTIXR TJLT RLOOPRSUB . . .INDEVBYTEX'F1'RECORDRESB100</code></pre><ul><li><strong>Memory usage</strong>:<ul><li><strong>Data</strong>: (1 + 100) bytes = 101 bytes</li><li><strong>Instruction</strong>: <mark>2( <code>TIXR</code> )</mark> + 3 * 9 = 29 bytes</li><li><strong>Total</strong>: 130 bytes</li></ul></li></ul><blockquote><p>國展表示這邊 access 不用算 //TD RD WD</p></blockquote><ul><li><strong>Memory Access</strong></li></ul><h3 id="high-level-language-6"><a class="anchor" href="#high-level-language-6">#</a> High Level Language</h3><figure class="highlight cpp"><figcaption data-lang="C++"></figcaption><table><tr><td data-num="1"></td><td><pre>Device INDEV <span class="token operator">=</span> <span class="token function">Device</span><span class="token punctuation">(</span><span class="token string">"F1"</span><span class="token punctuation">)</span><span class="token punctuation">;</span></pre></td></tr><tr><td data-num="2"></td><td><pre><span class="token keyword">char</span> RECORD<span class="token punctuation">[</span><span class="token number">100</span><span class="token punctuation">]</span><span class="token punctuation">;</span></pre></td></tr><tr><td data-num="3"></td><td><pre></pre></td></tr><tr><td data-num="4"></td><td><pre><span class="token function">READ</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span></pre></td></tr><tr><td data-num="5"></td><td><pre></pre></td></tr><tr><td data-num="6"></td><td><pre><span class="token keyword">void</span> <span class="token function">READ</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span></pre></td></tr><tr><td data-num="7"></td><td><pre>    <span class="token keyword">for</span><span class="token punctuation">(</span>X <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span> X <span class="token operator">&lt;</span> <span class="token number">100</span><span class="token punctuation">;</span> X<span class="token operator">++</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span></pre></td></tr><tr><td data-num="8"></td><td><pre>        <span class="token keyword">while</span> <span class="token punctuation">(</span><span class="token operator">!</span> INDEV<span class="token punctuation">.</span><span class="token function">isReady</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span></pre></td></tr><tr><td data-num="9"></td><td><pre>        <span class="token punctuation">&#125;</span></pre></td></tr><tr><td data-num="10"></td><td><pre>        RECORD<span class="token punctuation">[</span>X<span class="token punctuation">]</span> <span class="token operator">=</span> INDEV<span class="token punctuation">.</span><span class="token function">read</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span></pre></td></tr><tr><td data-num="11"></td><td><pre>    <span class="token punctuation">&#125;</span></pre></td></tr><tr><td data-num="12"></td><td><pre><span class="token punctuation">&#125;</span></pre></td></tr></table></figure>]]></content>
      
      
      <categories>
          
          <category> SystemSoftware </category>
          
      </categories>
      
      
        <tags>
            
            <tag> System Software </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>1416. Restore The Array</title>
      <link href="/2023/04/24/Coding/leetcode/Hard/1416%20Restore%20The%20Array/"/>
      <url>/2023/04/24/Coding/leetcode/Hard/1416%20Restore%20The%20Array/</url>
      
        <content type="html"><![CDATA[<p>⭐️⭐️⭐️</p><h2 id="題目敘述"><a class="anchor" href="#題目敘述">#</a> <span class="exturl" data-url="aHR0cHM6Ly9sZWV0Y29kZS5jb20vcHJvYmxlbXMvcmVzdG9yZS10aGUtYXJyYXkv">題目敘述</span></h2><p>A program was supposed to print an array of integers. The program forgot to print whitespaces and the array is printed as a string of digits  <code>s</code>  and all we know is that all integers in the array were in the range  <code>[1, k]</code>  and there are no leading zeros in the array.</p><p>Given the string  <code>s</code>  and the integer  <code>k</code> , return <em>the number of the possible arrays that can be printed as  <code>s</code>  using the mentioned program</em>. Since the answer may be very large, return it <strong>modulo</strong>  <code>1e9 + 7</code> .</p><h3 id="example-1"><a class="anchor" href="#example-1">#</a> Example 1</h3><blockquote><p><strong>Input</strong>: s = “1000”, k = 10000<br><strong>Output</strong>: 1<br><strong>Explanation</strong>: The only possible array is [1000]</p></blockquote><h3 id="example-2"><a class="anchor" href="#example-2">#</a> Example 2</h3><blockquote><p><strong>Input</strong>: s = “1000”, k = 10<br><strong>Output</strong>: 0<br><strong>Explanation</strong>: There cannot be an array that was printed this way and has all integer &gt;= 1 and &lt;= 10.</p></blockquote><h3 id="example-3"><a class="anchor" href="#example-3">#</a> Example 3</h3><blockquote><p><strong>Input</strong>: s = “1317”, k = 2000<br><strong>Output</strong>: 8<br><strong>Explanation</strong>: Possible arrays are [1317],[131,7],[13,17],[1,317],[13,1,7],[1,31,7],[1,3,17],[1,3,1,7]</p></blockquote><h2 id="解題思路"><a class="anchor" href="#解題思路">#</a> 解題思路</h2><p>Let  <code>dp[i]</code>  denote <strong>the number of ways to partition the substring  <code>s[i:n]</code>  into valid numbers</strong>. The base case is  <code>dp[n] = 1</code> , since there is only one way to partition an empty string.</p><p>To compute  <code>dp[i]</code>  for a given index  <code>i</code> , we consider all possible substrings that can be formed starting from  <code>i</code> , such that the length of the substring is less than or equal to the number of digits in  <code>k</code> . We convert each substring to an integer and check if it is less than or equal to  <code>k</code> . If it is, we add the number of ways to partition the remaining string  <code>s[j+1:n]</code>  to  <code>dp[i]</code> , where  <code>j</code>  is the index of the last character in the substring. We sum up the values of  <code>dp[i]</code>  for all valid substrings to obtain the final value of  <code>dp[i]</code> .</p><h2 id="solution"><a class="anchor" href="#solution">#</a> Solution</h2><div class="tab" data-id="code" data-title="C++"><figure class="highlight cpp"><figcaption data-lang="C++"></figcaption><table><tr><td data-num="1"></td><td><pre><span class="token keyword">class</span> <span class="token class-name">Solution</span> <span class="token punctuation">&#123;</span></pre></td></tr><tr><td data-num="2"></td><td><pre><span class="token keyword">public</span><span class="token operator">:</span></pre></td></tr><tr><td data-num="3"></td><td><pre>    <span class="token keyword">int</span> <span class="token function">numberOfArrays</span><span class="token punctuation">(</span>string s<span class="token punctuation">,</span> <span class="token keyword">int</span> k<span class="token punctuation">)</span> <span class="token punctuation">&#123;</span></pre></td></tr><tr><td data-num="4"></td><td><pre>        <span class="token keyword">int</span> n <span class="token operator">=</span> s<span class="token punctuation">.</span><span class="token function">length</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span></pre></td></tr><tr><td data-num="5"></td><td><pre>        vector<span class="token operator">&lt;</span><span class="token keyword">long</span> <span class="token keyword">long</span><span class="token operator">></span> <span class="token function">dp</span><span class="token punctuation">(</span>n <span class="token operator">+</span> <span class="token number">1</span><span class="token punctuation">,</span> <span class="token number">0</span><span class="token punctuation">)</span><span class="token punctuation">;</span></pre></td></tr><tr><td data-num="6"></td><td><pre>        dp<span class="token punctuation">[</span>n<span class="token punctuation">]</span> <span class="token operator">=</span> <span class="token number">1</span><span class="token punctuation">;</span></pre></td></tr><tr><td data-num="7"></td><td><pre>        </pre></td></tr><tr><td data-num="8"></td><td><pre>        <span class="token keyword">for</span> <span class="token punctuation">(</span><span class="token keyword">int</span> i <span class="token operator">=</span> n <span class="token operator">-</span> <span class="token number">1</span><span class="token punctuation">;</span> i <span class="token operator">>=</span> <span class="token number">0</span><span class="token punctuation">;</span> i<span class="token operator">--</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span></pre></td></tr><tr><td data-num="9"></td><td><pre>            <span class="token keyword">if</span> <span class="token punctuation">(</span>s<span class="token punctuation">[</span>i<span class="token punctuation">]</span> <span class="token operator">==</span> <span class="token char">'0'</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span></pre></td></tr><tr><td data-num="10"></td><td><pre>                <span class="token keyword">continue</span><span class="token punctuation">;</span></pre></td></tr><tr><td data-num="11"></td><td><pre>            <span class="token punctuation">&#125;</span></pre></td></tr><tr><td data-num="12"></td><td><pre>            <span class="token keyword">long</span> <span class="token keyword">long</span> num <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span></pre></td></tr><tr><td data-num="13"></td><td><pre>            <span class="token keyword">int</span> j <span class="token operator">=</span> i<span class="token punctuation">;</span></pre></td></tr><tr><td data-num="14"></td><td><pre>            <span class="token keyword">while</span> <span class="token punctuation">(</span>j <span class="token operator">&lt;</span> n<span class="token punctuation">)</span> <span class="token punctuation">&#123;</span></pre></td></tr><tr><td data-num="15"></td><td><pre>                <span class="token keyword">try</span> <span class="token punctuation">&#123;</span></pre></td></tr><tr><td data-num="16"></td><td><pre>                    <span class="token keyword">int</span> x <span class="token operator">=</span> <span class="token function">stoi</span><span class="token punctuation">(</span>s<span class="token punctuation">.</span><span class="token function">substr</span><span class="token punctuation">(</span>i<span class="token punctuation">,</span> j<span class="token operator">-</span>i<span class="token operator">+</span><span class="token number">1</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span></pre></td></tr><tr><td data-num="17"></td><td><pre>                    <span class="token keyword">if</span> <span class="token punctuation">(</span>x <span class="token operator">></span> k<span class="token punctuation">)</span> <span class="token punctuation">&#123;</span></pre></td></tr><tr><td data-num="18"></td><td><pre>                        <span class="token keyword">break</span><span class="token punctuation">;</span></pre></td></tr><tr><td data-num="19"></td><td><pre>                    <span class="token punctuation">&#125;</span></pre></td></tr><tr><td data-num="20"></td><td><pre>                    num <span class="token operator">+=</span> dp<span class="token punctuation">[</span>j<span class="token operator">+</span><span class="token number">1</span><span class="token punctuation">]</span><span class="token punctuation">;</span></pre></td></tr><tr><td data-num="21"></td><td><pre>                <span class="token punctuation">&#125;</span></pre></td></tr><tr><td data-num="22"></td><td><pre>                <span class="token keyword">catch</span> <span class="token punctuation">(</span>std<span class="token double-colon punctuation">::</span>out_of_range<span class="token operator">&amp;</span> e<span class="token punctuation">)</span> <span class="token punctuation">&#123;</span></pre></td></tr><tr><td data-num="23"></td><td><pre>                    <span class="token keyword">break</span><span class="token punctuation">;</span></pre></td></tr><tr><td data-num="24"></td><td><pre>                <span class="token punctuation">&#125;</span></pre></td></tr><tr><td data-num="25"></td><td><pre>                j<span class="token operator">++</span><span class="token punctuation">;</span></pre></td></tr><tr><td data-num="26"></td><td><pre>            <span class="token punctuation">&#125;</span></pre></td></tr><tr><td data-num="27"></td><td><pre>            dp<span class="token punctuation">[</span>i<span class="token punctuation">]</span> <span class="token operator">=</span> num <span class="token operator">%</span> <span class="token number">1000000007</span><span class="token punctuation">;</span></pre></td></tr><tr><td data-num="28"></td><td><pre>        <span class="token punctuation">&#125;</span></pre></td></tr><tr><td data-num="29"></td><td><pre>        </pre></td></tr><tr><td data-num="30"></td><td><pre>        <span class="token keyword">return</span> dp<span class="token punctuation">[</span><span class="token number">0</span><span class="token punctuation">]</span><span class="token punctuation">;</span></pre></td></tr><tr><td data-num="31"></td><td><pre>    <span class="token punctuation">&#125;</span></pre></td></tr><tr><td data-num="32"></td><td><pre><span class="token punctuation">&#125;</span><span class="token punctuation">;</span></pre></td></tr></table></figure></div><div class="tab" data-id="code" data-title="Java"><pre><code class="language-java"></code></pre></div><div class="tab" data-id="code" data-title="Python"><figure class="highlight python"><figcaption data-lang="python"></figcaption><table><tr><td data-num="1"></td><td><pre><span class="token keyword">class</span> <span class="token class-name">Solution</span><span class="token punctuation">:</span></pre></td></tr><tr><td data-num="2"></td><td><pre>    <span class="token keyword">def</span> <span class="token function">numberOfArrays</span><span class="token punctuation">(</span>self<span class="token punctuation">,</span> s<span class="token punctuation">:</span> <span class="token builtin">str</span><span class="token punctuation">,</span> k<span class="token punctuation">:</span> <span class="token builtin">int</span><span class="token punctuation">)</span> <span class="token operator">-</span><span class="token operator">></span> <span class="token builtin">int</span><span class="token punctuation">:</span></pre></td></tr><tr><td data-num="3"></td><td><pre>        n <span class="token operator">=</span> <span class="token builtin">len</span><span class="token punctuation">(</span>s<span class="token punctuation">)</span></pre></td></tr><tr><td data-num="4"></td><td><pre>        dp <span class="token operator">=</span> <span class="token punctuation">[</span><span class="token number">0</span><span class="token punctuation">]</span> <span class="token operator">*</span> <span class="token punctuation">(</span>n <span class="token operator">+</span> <span class="token number">1</span><span class="token punctuation">)</span></pre></td></tr><tr><td data-num="5"></td><td><pre>        dp<span class="token punctuation">[</span><span class="token operator">-</span><span class="token number">1</span><span class="token punctuation">]</span> <span class="token operator">=</span> <span class="token number">1</span></pre></td></tr><tr><td data-num="6"></td><td><pre>        </pre></td></tr><tr><td data-num="7"></td><td><pre>        <span class="token keyword">for</span> i <span class="token keyword">in</span> <span class="token builtin">range</span><span class="token punctuation">(</span>n <span class="token operator">-</span> <span class="token number">1</span><span class="token punctuation">,</span> <span class="token operator">-</span><span class="token number">1</span><span class="token punctuation">,</span> <span class="token operator">-</span><span class="token number">1</span><span class="token punctuation">)</span><span class="token punctuation">:</span></pre></td></tr><tr><td data-num="8"></td><td><pre>            <span class="token keyword">if</span> s<span class="token punctuation">[</span>i<span class="token punctuation">]</span> <span class="token operator">==</span> <span class="token string">'0'</span><span class="token punctuation">:</span></pre></td></tr><tr><td data-num="9"></td><td><pre>                <span class="token keyword">continue</span></pre></td></tr><tr><td data-num="10"></td><td><pre>            num <span class="token operator">=</span> <span class="token number">0</span></pre></td></tr><tr><td data-num="11"></td><td><pre>            j <span class="token operator">=</span> i</pre></td></tr><tr><td data-num="12"></td><td><pre>            <span class="token keyword">while</span> j <span class="token operator">&lt;</span> n <span class="token keyword">and</span> <span class="token builtin">int</span><span class="token punctuation">(</span>s<span class="token punctuation">[</span>i<span class="token punctuation">:</span>j<span class="token operator">+</span><span class="token number">1</span><span class="token punctuation">]</span><span class="token punctuation">)</span> <span class="token operator">&lt;=</span> k<span class="token punctuation">:</span></pre></td></tr><tr><td data-num="13"></td><td><pre>                num <span class="token operator">+=</span> dp<span class="token punctuation">[</span>j<span class="token operator">+</span><span class="token number">1</span><span class="token punctuation">]</span></pre></td></tr><tr><td data-num="14"></td><td><pre>                j <span class="token operator">+=</span> <span class="token number">1</span></pre></td></tr><tr><td data-num="15"></td><td><pre>            dp<span class="token punctuation">[</span>i<span class="token punctuation">]</span> <span class="token operator">=</span> num <span class="token operator">%</span> <span class="token punctuation">(</span><span class="token number">10</span> <span class="token operator">**</span> <span class="token number">9</span> <span class="token operator">+</span> <span class="token number">7</span><span class="token punctuation">)</span></pre></td></tr><tr><td data-num="16"></td><td><pre>        </pre></td></tr><tr><td data-num="17"></td><td><pre>        <span class="token keyword">return</span> dp<span class="token punctuation">[</span><span class="token number">0</span><span class="token punctuation">]</span></pre></td></tr></table></figure></div>]]></content>
      
      
      <categories>
          
          <category> Coding </category>
          
          <category> Leetcode </category>
          
          <category> Hard </category>
          
      </categories>
      
      
        <tags>
            
            <tag> String </tag>
            
            <tag> Leetcode </tag>
            
            <tag> Dynamic Programming </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>1046. Last Stone Weight</title>
      <link href="/2023/04/24/Coding/leetcode/Easy/1046%20Last%20Stone%20Weight/"/>
      <url>/2023/04/24/Coding/leetcode/Easy/1046%20Last%20Stone%20Weight/</url>
      
        <content type="html"><![CDATA[<p>⭐️</p><h2 id="題目敘述"><a class="anchor" href="#題目敘述">#</a> <span class="exturl" data-url="aHR0cHM6Ly9sZWV0Y29kZS5jb20vcHJvYmxlbXMvbGFzdC1zdG9uZS13ZWlnaHQv">題目敘述</span></h2><p>You are given an array of integers  <code>stones</code>  where  <code>stones[i]</code>  is the weight of the  <code>ith</code>  stone.</p><p>We are playing a game with the stones. On each turn, we choose the heaviest two stones and smash them together. Suppose the heaviest two stones have weights  <code>x</code>  and  <code>y</code>  with  <code>x &lt;= y</code> . The result of this smash is:</p><ul><li>If  <code>x == y</code> , both stones are destroyed, and</li><li>If  <code>x != y</code> , the stone of weight  <code>x</code>  is destroyed, and the stone of weight y has new weight  <code>y - x</code> .</li></ul><p>At the end of the game, there is <strong>at most one</strong> stone left.</p><p>Return <em>the weight of the last remaining stone</em>. If there are no stones left, return  <code>0</code> .</p><h3 id="example-1"><a class="anchor" href="#example-1">#</a> Example 1</h3><blockquote><p><strong>Input:</strong> stones = [2,7,4,1,8,1]<br><strong>Output:</strong> 1<br><strong>Explanation:</strong><br>We combine 7 and 8 to get 1 so the array converts to [2,4,1,1,1] then,<br>we combine 2 and 4 to get 2 so the array converts to [2,1,1,1] then,<br>we combine 2 and 1 to get 1 so the array converts to [1,1,1] then,<br>we combine 1 and 1 to get 0 so the array converts to [1] then that’s the value of the last stone.</p></blockquote><h3 id="example-2"><a class="anchor" href="#example-2">#</a> Example 2</h3><blockquote><p><strong>Input:</strong> stones = [1]<br><strong>Output:</strong> 1</p></blockquote><h2 id="解題思路"><a class="anchor" href="#解題思路">#</a> 解題思路</h2><h2 id="solution"><a class="anchor" href="#solution">#</a> Solution</h2><div class="tab" data-id="code" data-title="C++"><figure class="highlight cpp"><figcaption data-lang="C++"></figcaption><table><tr><td data-num="1"></td><td><pre><span class="token keyword">class</span> <span class="token class-name">Solution</span> <span class="token punctuation">&#123;</span></pre></td></tr><tr><td data-num="2"></td><td><pre><span class="token keyword">public</span><span class="token operator">:</span></pre></td></tr><tr><td data-num="3"></td><td><pre>    <span class="token keyword">int</span> <span class="token function">lastStoneWeight</span><span class="token punctuation">(</span>vector<span class="token operator">&lt;</span><span class="token keyword">int</span><span class="token operator">></span><span class="token operator">&amp;</span> stones<span class="token punctuation">)</span> <span class="token punctuation">&#123;</span></pre></td></tr><tr><td data-num="4"></td><td><pre>        priority_queue<span class="token operator">&lt;</span><span class="token keyword">int</span><span class="token operator">></span> pq<span class="token punctuation">;</span></pre></td></tr><tr><td data-num="5"></td><td><pre>        <span class="token keyword">for</span> <span class="token punctuation">(</span><span class="token keyword">int</span> stone <span class="token operator">:</span> stones<span class="token punctuation">)</span> pq<span class="token punctuation">.</span><span class="token function">push</span><span class="token punctuation">(</span>stone<span class="token punctuation">)</span><span class="token punctuation">;</span></pre></td></tr><tr><td data-num="6"></td><td><pre>        <span class="token keyword">while</span> <span class="token punctuation">(</span>pq<span class="token punctuation">.</span><span class="token function">size</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">!=</span> <span class="token number">1</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span></pre></td></tr><tr><td data-num="7"></td><td><pre>            <span class="token keyword">int</span> x <span class="token operator">=</span> pq<span class="token punctuation">.</span><span class="token function">top</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span></pre></td></tr><tr><td data-num="8"></td><td><pre>            pq<span class="token punctuation">.</span><span class="token function">pop</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span></pre></td></tr><tr><td data-num="9"></td><td><pre>            <span class="token keyword">int</span> y <span class="token operator">=</span> pq<span class="token punctuation">.</span><span class="token function">top</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span></pre></td></tr><tr><td data-num="10"></td><td><pre>            pq<span class="token punctuation">.</span><span class="token function">pop</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span></pre></td></tr><tr><td data-num="11"></td><td><pre>            pq<span class="token punctuation">.</span><span class="token function">push</span><span class="token punctuation">(</span><span class="token function">max</span><span class="token punctuation">(</span>x<span class="token punctuation">,</span> y<span class="token punctuation">)</span> <span class="token operator">-</span> <span class="token function">min</span><span class="token punctuation">(</span>x<span class="token punctuation">,</span> y<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span></pre></td></tr><tr><td data-num="12"></td><td><pre>        <span class="token punctuation">&#125;</span></pre></td></tr><tr><td data-num="13"></td><td><pre>        <span class="token keyword">return</span> pq<span class="token punctuation">.</span><span class="token function">top</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span></pre></td></tr><tr><td data-num="14"></td><td><pre>    <span class="token punctuation">&#125;</span></pre></td></tr><tr><td data-num="15"></td><td><pre><span class="token punctuation">&#125;</span><span class="token punctuation">;</span></pre></td></tr></table></figure></div><div class="tab" data-id="code" data-title="Java"><figure class="highlight java"><figcaption data-lang="java"></figcaption><table><tr><td data-num="1"></td><td><pre><span class="token keyword">import</span> <span class="token import"><span class="token namespace">java<span class="token punctuation">.</span>util<span class="token punctuation">.</span></span><span class="token class-name">Comparator</span></span><span class="token punctuation">;</span></pre></td></tr><tr><td data-num="2"></td><td><pre><span class="token keyword">import</span> <span class="token import"><span class="token namespace">java<span class="token punctuation">.</span>util<span class="token punctuation">.</span></span><span class="token class-name">PriorityQueue</span></span><span class="token punctuation">;</span></pre></td></tr><tr><td data-num="3"></td><td><pre></pre></td></tr><tr><td data-num="4"></td><td><pre><span class="token keyword">class</span> <span class="token class-name">Solution</span> <span class="token punctuation">&#123;</span></pre></td></tr><tr><td data-num="5"></td><td><pre>    <span class="token keyword">public</span> <span class="token keyword">int</span> <span class="token function">lastStoneWeight</span><span class="token punctuation">(</span><span class="token keyword">int</span><span class="token punctuation">[</span><span class="token punctuation">]</span> stones<span class="token punctuation">)</span> <span class="token punctuation">&#123;</span></pre></td></tr><tr><td data-num="6"></td><td><pre>        <span class="token keyword">if</span><span class="token punctuation">(</span>stones<span class="token punctuation">.</span>length <span class="token operator">==</span> <span class="token number">0</span><span class="token punctuation">)</span> <span class="token keyword">return</span> <span class="token number">0</span><span class="token punctuation">;</span></pre></td></tr><tr><td data-num="7"></td><td><pre></pre></td></tr><tr><td data-num="8"></td><td><pre>        <span class="token class-name">PriorityQueue</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token class-name">Integer</span><span class="token punctuation">></span></span> pQ <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">PriorityQueue</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token punctuation">></span></span><span class="token punctuation">(</span><span class="token class-name">Comparator</span><span class="token punctuation">.</span><span class="token function">reverseOrder</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span></pre></td></tr><tr><td data-num="9"></td><td><pre>        <span class="token keyword">for</span><span class="token punctuation">(</span><span class="token keyword">int</span> s <span class="token operator">:</span> stones<span class="token punctuation">)</span><span class="token punctuation">&#123;</span></pre></td></tr><tr><td data-num="10"></td><td><pre>            pQ<span class="token punctuation">.</span><span class="token function">add</span><span class="token punctuation">(</span>s<span class="token punctuation">)</span><span class="token punctuation">;</span></pre></td></tr><tr><td data-num="11"></td><td><pre>        <span class="token punctuation">&#125;</span></pre></td></tr><tr><td data-num="12"></td><td><pre></pre></td></tr><tr><td data-num="13"></td><td><pre>        <span class="token keyword">while</span><span class="token punctuation">(</span>pQ<span class="token punctuation">.</span><span class="token function">size</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">>=</span> <span class="token number">2</span><span class="token punctuation">)</span><span class="token punctuation">&#123;</span></pre></td></tr><tr><td data-num="14"></td><td><pre>            <span class="token keyword">int</span> first <span class="token operator">=</span> pQ<span class="token punctuation">.</span><span class="token function">poll</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span></pre></td></tr><tr><td data-num="15"></td><td><pre>            <span class="token keyword">int</span> second <span class="token operator">=</span> pQ<span class="token punctuation">.</span><span class="token function">poll</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span></pre></td></tr><tr><td data-num="16"></td><td><pre></pre></td></tr><tr><td data-num="17"></td><td><pre>            pQ<span class="token punctuation">.</span><span class="token function">add</span><span class="token punctuation">(</span>first <span class="token operator">-</span> second<span class="token punctuation">)</span><span class="token punctuation">;</span></pre></td></tr><tr><td data-num="18"></td><td><pre>        <span class="token punctuation">&#125;</span></pre></td></tr><tr><td data-num="19"></td><td><pre></pre></td></tr><tr><td data-num="20"></td><td><pre>        <span class="token keyword">return</span> pQ<span class="token punctuation">.</span><span class="token function">peek</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span></pre></td></tr><tr><td data-num="21"></td><td><pre>    <span class="token punctuation">&#125;</span></pre></td></tr><tr><td data-num="22"></td><td><pre><span class="token punctuation">&#125;</span></pre></td></tr></table></figure></div><div class="tab" data-id="code" data-title="Python"><figure class="highlight python"><figcaption data-lang="python"></figcaption><table><tr><td data-num="1"></td><td><pre><span class="token keyword">class</span> <span class="token class-name">Solution</span><span class="token punctuation">:</span></pre></td></tr><tr><td data-num="2"></td><td><pre>    <span class="token keyword">def</span> <span class="token function">lastStoneWeight</span><span class="token punctuation">(</span>self<span class="token punctuation">,</span> stones<span class="token punctuation">:</span> List<span class="token punctuation">[</span><span class="token builtin">int</span><span class="token punctuation">]</span><span class="token punctuation">)</span> <span class="token operator">-</span><span class="token operator">></span> <span class="token builtin">int</span><span class="token punctuation">:</span></pre></td></tr><tr><td data-num="3"></td><td><pre>        max_heap <span class="token operator">=</span> <span class="token punctuation">[</span><span class="token operator">-</span>stone <span class="token keyword">for</span> stone <span class="token keyword">in</span> stones<span class="token punctuation">]</span></pre></td></tr><tr><td data-num="4"></td><td><pre>        heapq<span class="token punctuation">.</span>heapify<span class="token punctuation">(</span>max_heap<span class="token punctuation">)</span></pre></td></tr><tr><td data-num="5"></td><td><pre>        <span class="token keyword">while</span> <span class="token builtin">len</span><span class="token punctuation">(</span>max_heap<span class="token punctuation">)</span> <span class="token operator">></span> <span class="token number">1</span><span class="token punctuation">:</span></pre></td></tr><tr><td data-num="6"></td><td><pre>            x <span class="token operator">=</span> heapq<span class="token punctuation">.</span>heappop<span class="token punctuation">(</span>max_heap<span class="token punctuation">)</span></pre></td></tr><tr><td data-num="7"></td><td><pre>            y <span class="token operator">=</span> heapq<span class="token punctuation">.</span>heappop<span class="token punctuation">(</span>max_heap<span class="token punctuation">)</span></pre></td></tr><tr><td data-num="8"></td><td><pre>            <span class="token keyword">if</span> x <span class="token operator">!=</span> y<span class="token punctuation">:</span> heapq<span class="token punctuation">.</span>heappush<span class="token punctuation">(</span>max_heap<span class="token punctuation">,</span> x <span class="token operator">-</span> y<span class="token punctuation">)</span></pre></td></tr><tr><td data-num="9"></td><td><pre>        <span class="token keyword">if</span> max_heap<span class="token punctuation">:</span> <span class="token keyword">return</span> <span class="token operator">-</span>max_heap<span class="token punctuation">[</span><span class="token number">0</span><span class="token punctuation">]</span></pre></td></tr><tr><td data-num="10"></td><td><pre>        <span class="token keyword">else</span><span class="token punctuation">:</span> <span class="token keyword">return</span> <span class="token number">0</span></pre></td></tr></table></figure></div>]]></content>
      
      
      <categories>
          
          <category> Coding </category>
          
          <category> Leetcode </category>
          
          <category> Easy </category>
          
      </categories>
      
      
        <tags>
            
            <tag> Leetcode </tag>
            
            <tag> Easy </tag>
            
            <tag> Array </tag>
            
            <tag> Heap (Priority Queue) </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>Ch01 - Background</title>
      <link href="/2023/04/24/SystemSoftware/Ch01_Background/"/>
      <url>/2023/04/24/SystemSoftware/Ch01_Background/</url>
      
        <content type="html"><![CDATA[<h2 id="introduction"><a class="anchor" href="#introduction">#</a> Introduction</h2><ul><li><p><strong>Computer System</strong></p><ul><li><strong>Hardware</strong></li><li><strong>Software</strong></li></ul></li><li><p><strong>Software</strong></p><ul><li><strong>Application software</strong> (domain knowledge)</li><li><strong>System software</strong> (machine architecture)</li></ul><p><img data-src="https://i.imgur.com/WDd7TlA.png" alt=""></p></li><li><p>System software consists of a veriety of programs that support the operation of a computer.</p><ul><li>Text editor, assembler, macro processor, compiler, loader, linker, debugger, operating system.</li></ul></li></ul><h2 id="system-software-and-machine-architecture"><a class="anchor" href="#system-software-and-machine-architecture">#</a> System Software and Machine Architecture</h2><ul><li>System software 與 application software 的決定性差異：<ul><li><mark><font>Machine-dependent (MD) features</font></mark>.（在不同硬體環境需要改寫 source code）</li></ul></li><li>System software 有<strong>部分</strong> source code 是 machine-independent (MID)，application software 則<strong>全部</strong>都是 machine-independent。</li><li><font>SIC</font> (simplified instructional computer) with two versions:<ul><li><strong>The standard model</strong></li><li><strong>The XE (extra equipment) version</strong></li></ul></li><li>The two versions have designed to be <strong>upward compatible (向上兼容)</strong>.</li></ul><h2 id="sic-machine-architecture"><a class="anchor" href="#sic-machine-architecture">#</a> SIC Machine Architecture</h2><h3 id="memory"><a class="anchor" href="#memory">#</a> <span class="exturl" data-url="aHR0cHM6Ly93d3cueW91dHViZS5jb20vd2F0Y2g/dj0ybFN5SFpMek5ZQQ==">Memory</span></h3><ul><li><strong>Byte</strong>: <strong>8-bit</strong></li><li><strong>Word</strong>: consecutive <strong>3 bytes</strong> (24 bits).</li><li>All addresses are <strong>byte addresses</strong></li><li><strong>Words</strong> are <strong>addressed</strong> by the location of their <strong>lowest numbered byte</strong>.</li><li>There are a total of <strong>32768 (<span class="katex"><span class="katex-mathml"><math xmlns="http://www.w3.org/1998/Math/MathML"><semantics><mrow><msup><mn>2</mn><mn>15</mn></msup></mrow><annotation encoding="application/x-tex">2^{15}</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:0.8141079999999999em;vertical-align:0em;"></span><span class="mord"><span class="mord">2</span><span class="msupsub"><span class="vlist-t"><span class="vlist-r"><span class="vlist" style="height:0.8141079999999999em;"><span style="top:-3.063em;margin-right:0.05em;"><span class="pstrut" style="height:2.7em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mtight"><span class="mord mtight">1</span><span class="mord mtight">5</span></span></span></span></span></span></span></span></span></span></span></span>) bytes</strong> in the computer memory.<ul><li>Address 的範圍: <span class="katex"><span class="katex-mathml"><math xmlns="http://www.w3.org/1998/Math/MathML"><semantics><mrow><mn>0</mn></mrow><annotation encoding="application/x-tex">0</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:0.64444em;vertical-align:0em;"></span><span class="mord">0</span></span></span></span> ~ <span class="katex"><span class="katex-mathml"><math xmlns="http://www.w3.org/1998/Math/MathML"><semantics><mrow><msup><mn>2</mn><mn>15</mn></msup><mo>−</mo><mn>1</mn></mrow><annotation encoding="application/x-tex">2^{15} - 1</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:0.897438em;vertical-align:-0.08333em;"></span><span class="mord"><span class="mord">2</span><span class="msupsub"><span class="vlist-t"><span class="vlist-r"><span class="vlist" style="height:0.8141079999999999em;"><span style="top:-3.063em;margin-right:0.05em;"><span class="pstrut" style="height:2.7em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mtight"><span class="mord mtight">1</span><span class="mord mtight">5</span></span></span></span></span></span></span></span></span><span class="mspace" style="margin-right:0.2222222222222222em;"></span><span class="mbin">−</span><span class="mspace" style="margin-right:0.2222222222222222em;"></span></span><span class="base"><span class="strut" style="height:0.64444em;vertical-align:0em;"></span><span class="mord">1</span></span></span></span></li></ul></li></ul><h3 id="registers"><a class="anchor" href="#registers">#</a> <mark>Registers</mark></h3><div class="note danger"><p>Five registers, all of which have special uses. Each register is <strong>24 bits</strong> in length.</p><ul><li><strong>A:</strong> accumulator. 累加器</li><li><strong>X:</strong> index register</li><li><strong>L:</strong> linkage register; storing the return address after a funciton call.</li><li><strong>PC:</strong> program counter. 儲存下一條要執行的指令 (在機器語言中) 的記憶體位址</li><li><strong>SW:</strong> status word; including a <strong>Condition Code (CC)</strong></li></ul></div><h3 id="data-formats"><a class="anchor" href="#data-formats">#</a> Data formats</h3><ul><li><p><strong>Integers</strong> are stored as <strong>24-bit</strong> binary <strong>2’s complement</strong> representation is used for negative values.</p><ul><li>二補數相較於一補數沒有 +0 與 -0 的問題，可以多表達一個數。</li></ul></li><li><p><strong>Characters</strong> are stored using their <strong>8-bit ASCII codes</strong>.</p></li><li><p>There is <strong>no floating-point</strong> hardware on the standard version of SIC.</p></li></ul><h3 id="instruction-formats"><a class="anchor" href="#instruction-formats">#</a> Instruction formats</h3><p><img data-src="https://i.imgur.com/YzynDzE.png" alt=""></p><ul><li><mark><strong>24-bit</strong> format</mark><ul><li><p><em><strong>opcode (指令碼):</strong></em> 8bits, 代表要執行的是哪種指令</p></li><li><p><em><strong>x:</strong></em> 1bit, 用來表示是否為索引定址模式 (<strong>indicated indexed-addressing mode</strong>)</p></li><li><p><em><strong>address:</strong></em> 15bits, 因為記憶體大小為<span class="katex"><span class="katex-mathml"><math xmlns="http://www.w3.org/1998/Math/MathML"><semantics><mrow><msup><mn>2</mn><mn>15</mn></msup></mrow><annotation encoding="application/x-tex">2^{15}</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:0.8141079999999999em;vertical-align:0em;"></span><span class="mord"><span class="mord">2</span><span class="msupsub"><span class="vlist-t"><span class="vlist-r"><span class="vlist" style="height:0.8141079999999999em;"><span style="top:-3.063em;margin-right:0.05em;"><span class="pstrut" style="height:2.7em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mtight"><span class="mord mtight">1</span><span class="mord mtight">5</span></span></span></span></span></span></span></span></span></span></span></span> bytes, 因此 15 個 bits 就能表示所有記憶體位置，存在此位置的資料就是此指令要使用的資料</p></li></ul></li></ul><h3 id="addressing-modes"><a class="anchor" href="#addressing-modes">#</a> Addressing modes</h3><ul><li>There are two addressing mode avilable.</li><li><strong>Direct</strong>: x = 0; TA (target address) = address</li><li><strong>Indexed</strong>: x = 1; TA = address + (X)<ul><li>X is the <strong>index register</strong> (<em>X</em> register)</li></ul></li><li>Parentheses (小括號) are used to indicate the contents of a register or a memory location.</li></ul><h3 id="instruction-set"><a class="anchor" href="#instruction-set">#</a> Instruction set</h3><ul><li><p><strong>Load and store registers</strong></p><ul><li><code>LDA</code> ,  <code>LDX</code> , … : Load <em>A</em>, Load <em>X</em>, etc.</li><li><code>STA</code> ,  <code>STX</code> , … : Store <em>A</em>, Store <em>X</em>, etc.</li></ul></li><li><p><strong>Integer arithmetic</strong> operations</p><ul><li><code>ADD</code> ,  <code>SUB</code> ,  <code>MUL</code> ,  <code>DIV</code></li></ul></li><li><p><code>COMP</code> : <strong>Compares</strong> the <strong>value in register <em>A</em></strong> with a <strong>word in memory</strong></p><ul><li><font>Setting</font> a <strong>condition code</strong> (CC) to indicate the result (&lt;, =, or &gt;)</li><li>CC is stored in register <em>SW</em></li></ul></li><li><p><strong>Conditional jump instructions</strong></p><ul><li><code>JLT</code> : Jump if CC is set to &lt; (<strong>L</strong>ess <strong>T</strong>han)</li><li><code>JEQ</code> : Jump if CC is set to = (<strong>EQ</strong>uals to)</li><li><code>JGT</code> : Jump if CC is set to &gt; (<strong>G</strong>reater <strong>T</strong>han)</li></ul><div class="note info"><p>在高階語言中，下列的敘述是: <em>如果 a &gt; b，則向下執行 X 區段，<strong>否則跳到</strong> Y 區段</em></p><figure class="highlight cpp"><figcaption data-lang="C++"></figcaption><table><tr><td data-num="1"></td><td><pre><span class="token keyword">if</span> <span class="token punctuation">(</span>a <span class="token operator">></span> b<span class="token punctuation">)</span> <span class="token punctuation">&#123;</span></pre></td></tr><tr><td data-num="2"></td><td><pre>    <span class="token comment">/* ===== X 區段 ===== */</span></pre></td></tr><tr><td data-num="3"></td><td><pre>        <span class="token punctuation">.</span><span class="token punctuation">.</span><span class="token punctuation">.</span></pre></td></tr><tr><td data-num="4"></td><td><pre>    <span class="token comment">/* ===== X 區段 ===== */</span></pre></td></tr><tr><td data-num="5"></td><td><pre><span class="token punctuation">&#125;</span> <span class="token keyword">else</span> <span class="token punctuation">&#123;</span></pre></td></tr><tr><td data-num="6"></td><td><pre>    <span class="token comment">/* ===== Y 區段 ===== */</span></pre></td></tr><tr><td data-num="7"></td><td><pre>        <span class="token punctuation">.</span><span class="token punctuation">.</span><span class="token punctuation">.</span></pre></td></tr><tr><td data-num="8"></td><td><pre>    <span class="token comment">/* ===== Y 區段 ===== */</span></pre></td></tr><tr><td data-num="9"></td><td><pre><span class="token punctuation">&#125;</span></pre></td></tr></table></figure><p>但在低階語言中，JUMP 的指令 ( <code>JLE</code> ,  <code>JGT</code> ,  <code>JLT</code> ) 是<strong>滿足</strong>某些 condition 才會跳到指定區段，和高階語言的邏輯相反</p><p>所以編譯器把高階語言轉換成低階語言時，會把上面那段程式碼中，X 和 Y 區段對調，以便用低階語言實作相同的邏輯</p><p>即，<em>如果 a &gt; b，則跳到 X 區段，否則繼續下向執行 Y 區段</em></p><pre><code>COMP a, bJGT X/* ===== Y 區段 ===== */    .../* ===== Y 區段 ===== *//* ===== X 區段 ===== */    .../* ===== X 區段 ===== */</code></pre></div></li><li><p><code>JSUB</code> : jumping to a subroutine (function call)</p></li><li><p><code>RSUB</code> : returning from a subroutine to the address contained in register <em>L</em></p></li></ul><h3 id="input-output"><a class="anchor" href="#input-output">#</a> Input &amp; Output</h3><ul><li>在標準版本的 SIC 中，進行 I/O 時會<strong>從 regiter <em>A</em></strong> 的<strong>最右的 8 個 bits</strong> 開始 (rightmost 8 bits)，<strong>一次搬動一個 byte</strong></li><li>Each device is assigned a unique <strong>8-bit code</strong><ul><li>10 進位表示:  <code>0</code>  ~  <code>255</code></li><li>16 進位表示:  <code>00</code>  ~  <code>FF</code></li></ul></li><li>There are three I/O instructions:<ul><li>Test Device:  <code>TD</code></li><li>Read Data:  <code>RD</code></li><li>Write Data:  <code>WD</code></li></ul></li><li>On executing  <code>TD</code> , the <strong>condition code</strong> is set to indicate the <strong>result of test</strong><ul><li><strong>&lt;</strong> means device is <strong>ready</strong> to send or receive</li><li><strong>=</strong> means device is <strong>not ready</strong></li></ul></li></ul><h2 id="sicxe-machine-architecture"><a class="anchor" href="#sicxe-machine-architecture">#</a> SIC/XE Machine Architecture</h2><h3 id="memory-2"><a class="anchor" href="#memory-2">#</a> <span class="exturl" data-url="aHR0cHM6Ly93d3cueW91dHViZS5jb20vd2F0Y2g/dj1TbFBoTVBuUTU4aw==">Memory</span> 👍</h3><ul><li><strong>1 megabyte</strong> (<span class="katex"><span class="katex-mathml"><math xmlns="http://www.w3.org/1998/Math/MathML"><semantics><mrow><msup><mn>2</mn><mn>20</mn></msup></mrow><annotation encoding="application/x-tex">2^{20}</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:0.8141079999999999em;vertical-align:0em;"></span><span class="mord"><span class="mord">2</span><span class="msupsub"><span class="vlist-t"><span class="vlist-r"><span class="vlist" style="height:0.8141079999999999em;"><span style="top:-3.063em;margin-right:0.05em;"><span class="pstrut" style="height:2.7em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mtight"><span class="mord mtight">2</span><span class="mord mtight">0</span></span></span></span></span></span></span></span></span></span></span></span> bytes)</li><li>Larger memory <span class="katex"><span class="katex-mathml"><math xmlns="http://www.w3.org/1998/Math/MathML"><semantics><mrow><mo>⇒</mo></mrow><annotation encoding="application/x-tex">\Rightarrow</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:0.36687em;vertical-align:0em;"></span><span class="mrel">⇒</span></span></span></span> a change in <strong>instruction formats</strong> and <strong>addressing</strong> (需要更多的 bit 來表示記憶體位置)</li></ul><h3 id="registers-2"><a class="anchor" href="#registers-2">#</a> <mark>Registers</mark></h3><div class="note danger"><p>比標準版本<strong>增加</strong>以下四個暫存器:</p><ul><li><strong>B</strong>: base register for addressing，基底暫存器，用在定址</li><li><strong>S</strong>: general working register</li><li><strong>T</strong>: general working register</li><li><strong>F</strong>: floating-point accumulator，浮點累加器，用於浮點運算 (<strong>48 bits</strong>)</li></ul></div><p><strong>General Working/Purpose Register</strong></p><ul><li>沒有用在任何特殊目的的暫存器</li><li>可以儲存任意資料</li><li>用途由程式設計者自行決定</li></ul><h3 id="data-formats-2"><a class="anchor" href="#data-formats-2">#</a> Data Formats</h3><p>整數、字元的資料格式和和標準 SIC 相同</p><p><strong>In addition</strong>, there is a <strong>48-bit floating point</strong> data type:<br><img data-src="https://i.imgur.com/Qn9UxiC.png" alt=""></p><ul><li><strong>fraction</strong> (<span class="katex"><span class="katex-mathml"><math xmlns="http://www.w3.org/1998/Math/MathML"><semantics><mrow><mi>F</mi></mrow><annotation encoding="application/x-tex">F</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:0.68333em;vertical-align:0em;"></span><span class="mord mathnormal" style="margin-right:0.13889em;">F</span></span></span></span>)<ul><li>The fraction is interpreted as a value between 0 and 1</li><li>For <strong>normalized</strong> floating point number, the high-order bit (最左位) of the fraction must be 1</li></ul></li><li><strong>exponent</strong>: (<span class="katex"><span class="katex-mathml"><math xmlns="http://www.w3.org/1998/Math/MathML"><semantics><mrow><mi>e</mi></mrow><annotation encoding="application/x-tex">e</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:0.43056em;vertical-align:0em;"></span><span class="mord mathnormal">e</span></span></span></span>)<ul><li>the exponent is interpreted as an unsigned binary number between 0 and 2047</li></ul></li><li><strong>s</strong>: the sign of the value<ul><li>0: postive</li><li>1: negative</li></ul></li><li>The value of the floating-point number:<p><span class="katex-display"><span class="katex"><span class="katex-mathml"><math xmlns="http://www.w3.org/1998/Math/MathML" display="block"><semantics><mrow><mo stretchy="false">(</mo><mo>−</mo><mn>1</mn><msup><mo stretchy="false">)</mo><mi>s</mi></msup><mo>×</mo><mn>0.</mn><mi>F</mi><mo>×</mo><msup><mn>2</mn><mrow><mo stretchy="false">(</mo><mi>e</mi><mo>−</mo><mn>1024</mn><mo stretchy="false">)</mo></mrow></msup></mrow><annotation encoding="application/x-tex">(-1)^s \times 0.F \times 2^{(e-1024)}</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:1em;vertical-align:-0.25em;"></span><span class="mopen">(</span><span class="mord">−</span><span class="mord">1</span><span class="mclose"><span class="mclose">)</span><span class="msupsub"><span class="vlist-t"><span class="vlist-r"><span class="vlist" style="height:0.7143919999999999em;"><span style="top:-3.113em;margin-right:0.05em;"><span class="pstrut" style="height:2.7em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mathnormal mtight">s</span></span></span></span></span></span></span></span><span class="mspace" style="margin-right:0.2222222222222222em;"></span><span class="mbin">×</span><span class="mspace" style="margin-right:0.2222222222222222em;"></span></span><span class="base"><span class="strut" style="height:0.76666em;vertical-align:-0.08333em;"></span><span class="mord">0</span><span class="mord">.</span><span class="mord mathnormal" style="margin-right:0.13889em;">F</span><span class="mspace" style="margin-right:0.2222222222222222em;"></span><span class="mbin">×</span><span class="mspace" style="margin-right:0.2222222222222222em;"></span></span><span class="base"><span class="strut" style="height:0.938em;vertical-align:0em;"></span><span class="mord"><span class="mord">2</span><span class="msupsub"><span class="vlist-t"><span class="vlist-r"><span class="vlist" style="height:0.938em;"><span style="top:-3.113em;margin-right:0.05em;"><span class="pstrut" style="height:2.7em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mtight"><span class="mopen mtight">(</span><span class="mord mathnormal mtight">e</span><span class="mbin mtight">−</span><span class="mord mtight">1</span><span class="mord mtight">0</span><span class="mord mtight">2</span><span class="mord mtight">4</span><span class="mclose mtight">)</span></span></span></span></span></span></span></span></span></span></span></span></span></p></li><li>A value of 0 is represented by all 0</li></ul><div class="note info"><ul><li><strong>Bit string to value</strong><pre><code>| s |   exponent    |                  fraction                    |+---+---------------+----------------------------------------------+| 0 | 100 0000 0010 | 1010 0000 0000 0000 0000 0000 0000 0000 0000 |</code></pre><ul><li><span class="katex"><span class="katex-mathml"><math xmlns="http://www.w3.org/1998/Math/MathML"><semantics><mrow><mi>s</mi></mrow><annotation encoding="application/x-tex">s</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:0.43056em;vertical-align:0em;"></span><span class="mord mathnormal">s</span></span></span></span>: <span class="katex"><span class="katex-mathml"><math xmlns="http://www.w3.org/1998/Math/MathML"><semantics><mrow><mn>0</mn><mo>⇒</mo></mrow><annotation encoding="application/x-tex">0 \Rightarrow</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:0.64444em;vertical-align:0em;"></span><span class="mord">0</span><span class="mspace" style="margin-right:0.2777777777777778em;"></span><span class="mrel">⇒</span></span></span></span> postive</li><li><span class="katex"><span class="katex-mathml"><math xmlns="http://www.w3.org/1998/Math/MathML"><semantics><mrow><mi>e</mi></mrow><annotation encoding="application/x-tex">e</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:0.43056em;vertical-align:0em;"></span><span class="mord mathnormal">e</span></span></span></span>: <span class="katex"><span class="katex-mathml"><math xmlns="http://www.w3.org/1998/Math/MathML"><semantics><mrow><mn>1026</mn></mrow><annotation encoding="application/x-tex">1026</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:0.64444em;vertical-align:0em;"></span><span class="mord">1</span><span class="mord">0</span><span class="mord">2</span><span class="mord">6</span></span></span></span></li><li><span class="katex"><span class="katex-mathml"><math xmlns="http://www.w3.org/1998/Math/MathML"><semantics><mrow><mi>F</mi></mrow><annotation encoding="application/x-tex">F</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:0.68333em;vertical-align:0em;"></span><span class="mord mathnormal" style="margin-right:0.13889em;">F</span></span></span></span>: <span class="katex"><span class="katex-mathml"><math xmlns="http://www.w3.org/1998/Math/MathML"><semantics><mrow><mo stretchy="false">(</mo><mn>0.1010</mn><mtext> </mtext><mn>0000...</mn><msub><mo stretchy="false">)</mo><mn>2</mn></msub><mo>=</mo><msup><mn>2</mn><mrow><mo>−</mo><mn>1</mn></mrow></msup><mo>+</mo><msup><mn>2</mn><mrow><mo>−</mo><mn>3</mn></mrow></msup><mo>=</mo><mn>0.625</mn></mrow><annotation encoding="application/x-tex">(0.1010\ 0000...)_2 = 2^{-1} + 2^{-3} = 0.625</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:1em;vertical-align:-0.25em;"></span><span class="mopen">(</span><span class="mord">0</span><span class="mord">.</span><span class="mord">1</span><span class="mord">0</span><span class="mord">1</span><span class="mord">0</span><span class="mspace"> </span><span class="mord">0</span><span class="mord">0</span><span class="mord">0</span><span class="mord">0</span><span class="mord">.</span><span class="mord">.</span><span class="mord">.</span><span class="mclose"><span class="mclose">)</span><span class="msupsub"><span class="vlist-t vlist-t2"><span class="vlist-r"><span class="vlist" style="height:0.30110799999999993em;"><span style="top:-2.5500000000000003em;margin-left:0em;margin-right:0.05em;"><span class="pstrut" style="height:2.7em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mtight">2</span></span></span></span><span class="vlist-s">​</span></span><span class="vlist-r"><span class="vlist" style="height:0.15em;"><span></span></span></span></span></span></span><span class="mspace" style="margin-right:0.2777777777777778em;"></span><span class="mrel">=</span><span class="mspace" style="margin-right:0.2777777777777778em;"></span></span><span class="base"><span class="strut" style="height:0.897438em;vertical-align:-0.08333em;"></span><span class="mord"><span class="mord">2</span><span class="msupsub"><span class="vlist-t"><span class="vlist-r"><span class="vlist" style="height:0.8141079999999999em;"><span style="top:-3.063em;margin-right:0.05em;"><span class="pstrut" style="height:2.7em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mtight"><span class="mord mtight">−</span><span class="mord mtight">1</span></span></span></span></span></span></span></span></span><span class="mspace" style="margin-right:0.2222222222222222em;"></span><span class="mbin">+</span><span class="mspace" style="margin-right:0.2222222222222222em;"></span></span><span class="base"><span class="strut" style="height:0.8141079999999999em;vertical-align:0em;"></span><span class="mord"><span class="mord">2</span><span class="msupsub"><span class="vlist-t"><span class="vlist-r"><span class="vlist" style="height:0.8141079999999999em;"><span style="top:-3.063em;margin-right:0.05em;"><span class="pstrut" style="height:2.7em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mtight"><span class="mord mtight">−</span><span class="mord mtight">3</span></span></span></span></span></span></span></span></span><span class="mspace" style="margin-right:0.2777777777777778em;"></span><span class="mrel">=</span><span class="mspace" style="margin-right:0.2777777777777778em;"></span></span><span class="base"><span class="strut" style="height:0.64444em;vertical-align:0em;"></span><span class="mord">0</span><span class="mord">.</span><span class="mord">6</span><span class="mord">2</span><span class="mord">5</span></span></span></span></li><li>The value of the floating point number\begin{split}     &0.625 \times 2^{(1026-1024)} \\    =&0.625 \times 2^2 \\    =&2.5\end{split}</li></ul></li></ul></div><div class="note info"><ul><li><strong>Value to bit string</strong><ul><li>7.625 轉浮點數表示</li><li>轉二進制<p><span class="katex-display"><span class="katex"><span class="katex-mathml"><math xmlns="http://www.w3.org/1998/Math/MathML" display="block"><semantics><mrow><mn>7.625</mn><mo>=</mo><msup><mn>2</mn><mn>2</mn></msup><mo>+</mo><msup><mn>2</mn><mn>1</mn></msup><mo>+</mo><msup><mn>2</mn><mn>0</mn></msup><mo>+</mo><msup><mn>2</mn><mrow><mo>−</mo><mn>1</mn></mrow></msup><mo>+</mo><msup><mn>2</mn><mrow><mo>−</mo><mn>3</mn></mrow></msup><mo>=</mo><mo stretchy="false">(</mo><mn>111.101</mn><msub><mo stretchy="false">)</mo><mn>2</mn></msub></mrow><annotation encoding="application/x-tex">7.625 = 2^2 + 2^1 + 2^0 + 2^{-1} + 2^{-3} = (111.101)_2</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:0.64444em;vertical-align:0em;"></span><span class="mord">7</span><span class="mord">.</span><span class="mord">6</span><span class="mord">2</span><span class="mord">5</span><span class="mspace" style="margin-right:0.2777777777777778em;"></span><span class="mrel">=</span><span class="mspace" style="margin-right:0.2777777777777778em;"></span></span><span class="base"><span class="strut" style="height:0.9474379999999999em;vertical-align:-0.08333em;"></span><span class="mord"><span class="mord">2</span><span class="msupsub"><span class="vlist-t"><span class="vlist-r"><span class="vlist" style="height:0.8641079999999999em;"><span style="top:-3.113em;margin-right:0.05em;"><span class="pstrut" style="height:2.7em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mtight">2</span></span></span></span></span></span></span></span><span class="mspace" style="margin-right:0.2222222222222222em;"></span><span class="mbin">+</span><span class="mspace" style="margin-right:0.2222222222222222em;"></span></span><span class="base"><span class="strut" style="height:0.9474379999999999em;vertical-align:-0.08333em;"></span><span class="mord"><span class="mord">2</span><span class="msupsub"><span class="vlist-t"><span class="vlist-r"><span class="vlist" style="height:0.8641079999999999em;"><span style="top:-3.113em;margin-right:0.05em;"><span class="pstrut" style="height:2.7em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mtight">1</span></span></span></span></span></span></span></span><span class="mspace" style="margin-right:0.2222222222222222em;"></span><span class="mbin">+</span><span class="mspace" style="margin-right:0.2222222222222222em;"></span></span><span class="base"><span class="strut" style="height:0.9474379999999999em;vertical-align:-0.08333em;"></span><span class="mord"><span class="mord">2</span><span class="msupsub"><span class="vlist-t"><span class="vlist-r"><span class="vlist" style="height:0.8641079999999999em;"><span style="top:-3.113em;margin-right:0.05em;"><span class="pstrut" style="height:2.7em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mtight">0</span></span></span></span></span></span></span></span><span class="mspace" style="margin-right:0.2222222222222222em;"></span><span class="mbin">+</span><span class="mspace" style="margin-right:0.2222222222222222em;"></span></span><span class="base"><span class="strut" style="height:0.947438em;vertical-align:-0.08333em;"></span><span class="mord"><span class="mord">2</span><span class="msupsub"><span class="vlist-t"><span class="vlist-r"><span class="vlist" style="height:0.864108em;"><span style="top:-3.113em;margin-right:0.05em;"><span class="pstrut" style="height:2.7em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mtight"><span class="mord mtight">−</span><span class="mord mtight">1</span></span></span></span></span></span></span></span></span><span class="mspace" style="margin-right:0.2222222222222222em;"></span><span class="mbin">+</span><span class="mspace" style="margin-right:0.2222222222222222em;"></span></span><span class="base"><span class="strut" style="height:0.864108em;vertical-align:0em;"></span><span class="mord"><span class="mord">2</span><span class="msupsub"><span class="vlist-t"><span class="vlist-r"><span class="vlist" style="height:0.864108em;"><span style="top:-3.113em;margin-right:0.05em;"><span class="pstrut" style="height:2.7em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mtight"><span class="mord mtight">−</span><span class="mord mtight">3</span></span></span></span></span></span></span></span></span><span class="mspace" style="margin-right:0.2777777777777778em;"></span><span class="mrel">=</span><span class="mspace" style="margin-right:0.2777777777777778em;"></span></span><span class="base"><span class="strut" style="height:1em;vertical-align:-0.25em;"></span><span class="mopen">(</span><span class="mord">1</span><span class="mord">1</span><span class="mord">1</span><span class="mord">.</span><span class="mord">1</span><span class="mord">0</span><span class="mord">1</span><span class="mclose"><span class="mclose">)</span><span class="msupsub"><span class="vlist-t vlist-t2"><span class="vlist-r"><span class="vlist" style="height:0.30110799999999993em;"><span style="top:-2.5500000000000003em;margin-left:0em;margin-right:0.05em;"><span class="pstrut" style="height:2.7em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mtight">2</span></span></span></span><span class="vlist-s">​</span></span><span class="vlist-r"><span class="vlist" style="height:0.15em;"><span></span></span></span></span></span></span></span></span></span></span></p></li><li>normalize<p><span class="katex-display"><span class="katex"><span class="katex-mathml"><math xmlns="http://www.w3.org/1998/Math/MathML" display="block"><semantics><mrow><mo stretchy="false">(</mo><mn>111.101</mn><msub><mo stretchy="false">)</mo><mn>2</mn></msub><mo>=</mo><mo stretchy="false">(</mo><mn>0.111101</mn><msub><mo stretchy="false">)</mo><mn>2</mn></msub><mo>×</mo><msup><mn>2</mn><mn>3</mn></msup></mrow><annotation encoding="application/x-tex">(111.101)_2 = (0.111101)_2 \times 2^3</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:1em;vertical-align:-0.25em;"></span><span class="mopen">(</span><span class="mord">1</span><span class="mord">1</span><span class="mord">1</span><span class="mord">.</span><span class="mord">1</span><span class="mord">0</span><span class="mord">1</span><span class="mclose"><span class="mclose">)</span><span class="msupsub"><span class="vlist-t vlist-t2"><span class="vlist-r"><span class="vlist" style="height:0.30110799999999993em;"><span style="top:-2.5500000000000003em;margin-left:0em;margin-right:0.05em;"><span class="pstrut" style="height:2.7em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mtight">2</span></span></span></span><span class="vlist-s">​</span></span><span class="vlist-r"><span class="vlist" style="height:0.15em;"><span></span></span></span></span></span></span><span class="mspace" style="margin-right:0.2777777777777778em;"></span><span class="mrel">=</span><span class="mspace" style="margin-right:0.2777777777777778em;"></span></span><span class="base"><span class="strut" style="height:1em;vertical-align:-0.25em;"></span><span class="mopen">(</span><span class="mord">0</span><span class="mord">.</span><span class="mord">1</span><span class="mord">1</span><span class="mord">1</span><span class="mord">1</span><span class="mord">0</span><span class="mord">1</span><span class="mclose"><span class="mclose">)</span><span class="msupsub"><span class="vlist-t vlist-t2"><span class="vlist-r"><span class="vlist" style="height:0.30110799999999993em;"><span style="top:-2.5500000000000003em;margin-left:0em;margin-right:0.05em;"><span class="pstrut" style="height:2.7em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mtight">2</span></span></span></span><span class="vlist-s">​</span></span><span class="vlist-r"><span class="vlist" style="height:0.15em;"><span></span></span></span></span></span></span><span class="mspace" style="margin-right:0.2222222222222222em;"></span><span class="mbin">×</span><span class="mspace" style="margin-right:0.2222222222222222em;"></span></span><span class="base"><span class="strut" style="height:0.8641079999999999em;vertical-align:0em;"></span><span class="mord"><span class="mord">2</span><span class="msupsub"><span class="vlist-t"><span class="vlist-r"><span class="vlist" style="height:0.8641079999999999em;"><span style="top:-3.113em;margin-right:0.05em;"><span class="pstrut" style="height:2.7em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mtight">3</span></span></span></span></span></span></span></span></span></span></span></span></p></li><li><span class="katex"><span class="katex-mathml"><math xmlns="http://www.w3.org/1998/Math/MathML"><semantics><mrow><mi>s</mi></mrow><annotation encoding="application/x-tex">s</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:0.43056em;vertical-align:0em;"></span><span class="mord mathnormal">s</span></span></span></span>: Postive <span class="katex"><span class="katex-mathml"><math xmlns="http://www.w3.org/1998/Math/MathML"><semantics><mrow><mo>⇒</mo><mn>0</mn></mrow><annotation encoding="application/x-tex">\Rightarrow 0</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:0.36687em;vertical-align:0em;"></span><span class="mrel">⇒</span><span class="mspace" style="margin-right:0.2777777777777778em;"></span></span><span class="base"><span class="strut" style="height:0.64444em;vertical-align:0em;"></span><span class="mord">0</span></span></span></span></li><li><span class="katex"><span class="katex-mathml"><math xmlns="http://www.w3.org/1998/Math/MathML"><semantics><mrow><mi>f</mi></mrow><annotation encoding="application/x-tex">f</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:0.8888799999999999em;vertical-align:-0.19444em;"></span><span class="mord mathnormal" style="margin-right:0.10764em;">f</span></span></span></span>: 取小數點後的部分 <span class="katex"><span class="katex-mathml"><math xmlns="http://www.w3.org/1998/Math/MathML"><semantics><mrow><mo>⇒</mo><mn>1111</mn><mtext> </mtext><mn>0100</mn><mtext> </mtext><mn>0000...</mn></mrow><annotation encoding="application/x-tex">\Rightarrow 1111\ 0100\ 0000...</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:0.36687em;vertical-align:0em;"></span><span class="mrel">⇒</span><span class="mspace" style="margin-right:0.2777777777777778em;"></span></span><span class="base"><span class="strut" style="height:0.64444em;vertical-align:0em;"></span><span class="mord">1</span><span class="mord">1</span><span class="mord">1</span><span class="mord">1</span><span class="mspace"> </span><span class="mord">0</span><span class="mord">1</span><span class="mord">0</span><span class="mord">0</span><span class="mspace"> </span><span class="mord">0</span><span class="mord">0</span><span class="mord">0</span><span class="mord">0</span><span class="mord">.</span><span class="mord">.</span><span class="mord">.</span></span></span></span></li><li><span class="katex"><span class="katex-mathml"><math xmlns="http://www.w3.org/1998/Math/MathML"><semantics><mrow><mi>e</mi></mrow><annotation encoding="application/x-tex">e</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:0.43056em;vertical-align:0em;"></span><span class="mord mathnormal">e</span></span></span></span>: <span class="katex"><span class="katex-mathml"><math xmlns="http://www.w3.org/1998/Math/MathML"><semantics><mrow><mn>3</mn><mo>+</mo><mn>1024</mn><mo>=</mo><mn>1027</mn><mo>⇒</mo><mn>100</mn><mtext> </mtext><mn>0000</mn><mtext> </mtext><mn>0011</mn></mrow><annotation encoding="application/x-tex">3 + 1024=1027 \Rightarrow 100\ 0000\ 0011</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:0.72777em;vertical-align:-0.08333em;"></span><span class="mord">3</span><span class="mspace" style="margin-right:0.2222222222222222em;"></span><span class="mbin">+</span><span class="mspace" style="margin-right:0.2222222222222222em;"></span></span><span class="base"><span class="strut" style="height:0.64444em;vertical-align:0em;"></span><span class="mord">1</span><span class="mord">0</span><span class="mord">2</span><span class="mord">4</span><span class="mspace" style="margin-right:0.2777777777777778em;"></span><span class="mrel">=</span><span class="mspace" style="margin-right:0.2777777777777778em;"></span></span><span class="base"><span class="strut" style="height:0.64444em;vertical-align:0em;"></span><span class="mord">1</span><span class="mord">0</span><span class="mord">2</span><span class="mord">7</span><span class="mspace" style="margin-right:0.2777777777777778em;"></span><span class="mrel">⇒</span><span class="mspace" style="margin-right:0.2777777777777778em;"></span></span><span class="base"><span class="strut" style="height:0.64444em;vertical-align:0em;"></span><span class="mord">1</span><span class="mord">0</span><span class="mord">0</span><span class="mspace"> </span><span class="mord">0</span><span class="mord">0</span><span class="mord">0</span><span class="mord">0</span><span class="mspace"> </span><span class="mord">0</span><span class="mord">0</span><span class="mord">1</span><span class="mord">1</span></span></span></span></li></ul><pre><code>| s |   exponent    |                  fraction                    |+---+---------------+----------------------------------------------+| 0 | 100 0000 0011 | 1111 0100 0000 0000 0000 0000 0000 0000 0000 |</code></pre></li></ul></div><h3 id="instruction-formats-2"><a class="anchor" href="#instruction-formats-2">#</a> Instruction Formats</h3><ul><li><p><strong>Format 1</strong> (1 byte)</p><ul><li>不用指定運算元的指令，如特定暫存器 + 1<br><img data-src="https://i.imgur.com/Qfl6718.png" alt=""></li></ul></li><li><p><strong>Format 2</strong> (2 byte)</p><ul><li>指定暫存器 address 進行運算<br><img data-src="https://i.imgur.com/oeO2joD.png" alt=""></li></ul></li><li><p><strong>Format 3</strong> (3 byte)</p><ul><li>大多數指令為此格式</li><li>Relative addressing mode 一定是 format 3</li><li>Immediate/Directed addressing mode 時，如果數值 / 地址不超過 disp 的表示範圍 (12 bits)，則使用 format 3<br><img data-src="https://i.imgur.com/GUppSLD.png" alt=""><br><em>disp: <u>displacement</u></em></li></ul></li><li><p><strong>Format 4</strong> (4 byte)</p><ul><li>在 Immediate/Directed addressing mode，如果數值 / 地址無法用 12-bits 表示，則會使用 format 4<br><img data-src="https://i.imgur.com/qfjydIc.png" alt=""></li></ul></li></ul><p>Bit <em>e</em> is used to <strong>distinguish between Format 3 and 4</strong></p><ul><li>0: format 3</li><li>1: format 4</li></ul><hr><ul><li><strong>n</strong>: indirect addressing flag</li><li><strong>i</strong>: immediate addressing flag</li><li><strong>x</strong>: indexed addressing flag</li><li><strong>b</strong>: base address relative flag</li><li><strong>p</strong>: program counter relative flag</li><li><strong>e</strong>: format 4 instruction flag</li></ul><h3 id="addressing-modes-2"><a class="anchor" href="#addressing-modes-2">#</a> Addressing Modes</h3><p><strong>Format 3</strong></p><ul><li><p>Two new <strong>relative</strong> addressing modes</p><ul><li><p><strong>Base relative</strong>: <mark>b=1, p=0</mark>, TA=(B)+disp</p><ul><li><span class="katex"><span class="katex-mathml"><math xmlns="http://www.w3.org/1998/Math/MathML"><semantics><mrow><mn>0</mn><mo>≤</mo><mtext>disp</mtext><mo>≤</mo><mn>4095</mn></mrow><annotation encoding="application/x-tex">0 \le \text{disp} \le 4095</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:0.78041em;vertical-align:-0.13597em;"></span><span class="mord">0</span><span class="mspace" style="margin-right:0.2777777777777778em;"></span><span class="mrel">≤</span><span class="mspace" style="margin-right:0.2777777777777778em;"></span></span><span class="base"><span class="strut" style="height:0.8888799999999999em;vertical-align:-0.19444em;"></span><span class="mord text"><span class="mord">disp</span></span><span class="mspace" style="margin-right:0.2777777777777778em;"></span><span class="mrel">≤</span><span class="mspace" style="margin-right:0.2777777777777778em;"></span></span><span class="base"><span class="strut" style="height:0.64444em;vertical-align:0em;"></span><span class="mord">4</span><span class="mord">0</span><span class="mord">9</span><span class="mord">5</span></span></span></span></li></ul></li><li><p><strong>Program-Counter relative</strong>: <mark>b=0, p=1</mark>, TA=(PC)+disp</p><ul><li><span class="katex"><span class="katex-mathml"><math xmlns="http://www.w3.org/1998/Math/MathML"><semantics><mrow><mo>−</mo><mn>2048</mn><mo>≤</mo><mtext>disp</mtext><mo>≤</mo><mn>2047</mn></mrow><annotation encoding="application/x-tex">-2048 \le \text{disp} \le 2047</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:0.78041em;vertical-align:-0.13597em;"></span><span class="mord">−</span><span class="mord">2</span><span class="mord">0</span><span class="mord">4</span><span class="mord">8</span><span class="mspace" style="margin-right:0.2777777777777778em;"></span><span class="mrel">≤</span><span class="mspace" style="margin-right:0.2777777777777778em;"></span></span><span class="base"><span class="strut" style="height:0.8888799999999999em;vertical-align:-0.19444em;"></span><span class="mord text"><span class="mord">disp</span></span><span class="mspace" style="margin-right:0.2777777777777778em;"></span><span class="mrel">≤</span><span class="mspace" style="margin-right:0.2777777777777778em;"></span></span><span class="base"><span class="strut" style="height:0.64444em;vertical-align:0em;"></span><span class="mord">2</span><span class="mord">0</span><span class="mord">4</span><span class="mord">7</span></span></span></span> using 2’s complement notation</li><li>因為程式執行可能會有像迴圈要往回跳的狀況，所以需要負數</li></ul></li></ul></li><li><p><strong>Direct addressing</strong>: If <mark>b=0, p=0</mark>, TA=disp</p></li></ul><p><strong>Format 4</strong></p><ul><li>bits b and p are normally set to 0<ul><li><strong>Direct addressing</strong>: TA=address</li></ul></li></ul><p>Any of above addressing modes can also be combined with indexed addressing</p><hr><p><strong>Format 3/4 通用</strong></p><ul><li><p>If bit <mark>i=1, n=0</mark>, the <strong>target address</strong> itself is used as the <strong>operand value</strong></p><ul><li><font>Immediate addressing</font></li><li>算出來的 TA 本身就是資料，而不是地址</li><li>常用在<strong>資料是常數</strong>的時候</li><li>No memory reference is performed</li></ul></li><li><p>If bit <mark>i=0, n=1</mark>, word at the location given by the target address is fetched</p><ul><li><font>Indirect addressing</font></li><li><strong>The value</strong> contained in this word is then taken as <strong>the address of the operand value</strong></li><li>類似 C 語言裡面的對指標取值</li></ul></li><li><p>If bit <mark>i=0, n=0</mark> or <mark>i=1, b=1</mark>, the target address is taken as the location of the operand</p><ul><li><font>simple addressing</font></li><li>最一般的使用方法，存放在記憶體 TA 位置的資料即運算元</li><li>SIC/XE instructions that specify neither immediate nor indirect addressing are assembled with <strong>bits <em>n</em> and <em>i</em> both set to 1</strong>. (for upward compatibility)</li><li>Assemblers for the standard version of SIC will set the bits in both of these positions to 0. This is because the 8-bit binary codes for all the SIC instructions end in 00.</li></ul></li></ul><p>For SIC/XE, if bits n and i are both 0, then bits b, p, and e are considered to be part of the address field of the instruction.</p><ul><li>This makes Instruction Format 3 identical to the format used on the standard version of SIC, providing the desired compatibility.</li></ul><div class="note danger"><ul><li>當<strong> n = 0; i = 0:</strong><ul><li><strong>SIC/XE</strong> 為了向上相容，會改變為<strong> SIC</strong> 的形式，此時的<em><strong> b,p,e</strong></em> 會和<em><strong> disp</strong></em> 合併為 15 個 bits</li><li>因為會轉變為<strong> SIC</strong> 的形式，所以<strong> format 4</strong> 裡<em><strong> n, i</strong></em> 不會同時為 0</li></ul></li><li>當<strong> n = 1; i = 1:</strong><ul><li>仍會去判斷<em><strong> b,p,e</strong></em> 的樣式</li></ul></li></ul></div><div class="note info"><ul><li><strong>Relative</strong>/<strong>Direct</strong> Addressing Mode 定義如何求出 <em>TA</em></li><li><strong>Immediate</strong>/<strong>Indirect</strong>/<strong>Simple</strong> Addressing Mode 定義求出 <em>TA</em> 後，如何得到運算元</li><li>上面兩種模式是同時存在的，所以一共有 6 種組合，以下舉例三種<ul><li>一條 format3 指令是 Direct+Simple<ul><li>TA = disp</li><li>代表運算元是存在記憶體位置 disp 上的資料</li></ul></li><li>一條 format3 指令是 Direct+Immediate<ul><li>TA = disp</li><li>代表運算元是 disp</li></ul></li><li>一條 format3 指令是 Relative+Immediate<ul><li>TA = (B) + disp</li><li>代表運算元是 (B) + disp</li></ul></li></ul></li></ul></div><h3 id="instruction-set-2"><a class="anchor" href="#instruction-set-2">#</a> Instruction Set</h3><ul><li><strong>Load/Store</strong>:  <code>LDB</code> ,  <code>STB</code> , …</li><li><strong>Floating-Point Number Arithmetic</strong>:  <code>ADDF</code> ,  <code>SUBF</code> ,  <code>MULF</code> ,  <code>DIVF</code></li><li><strong>Register Move</strong>:  <code>RMO</code></li><li><strong>Register-to-Register Arithmetic</strong>:  <code>ADDR</code> ,  <code>SUBR</code> ,  <code>MULR</code> ,  <code>DIVR</code></li><li><strong>Supervisor call instruction</strong>:  <code>SVC</code><ul><li>generating an <strong>interrupt</strong> that can be used for <strong>communication with the OS</strong>.</li></ul></li></ul><h3 id="input-and-output"><a class="anchor" href="#input-and-output">#</a> Input and Output</h3><ul><li>There are <strong>I/O channels</strong> that can be used to perform input and output while the CPU is executing other instructions.</li><li>This allow overlap of computing and I/O, resulting in more efficient system operation.</li><li><strong>Instructions</strong>:<ul><li>Start I/O:  <code>SIO</code></li><li>Test I/O:  <code>TIO</code></li><li>Halt I/O:  <code>HIO</code></li></ul></li></ul><h2 id="sic-programming-examples"><a class="anchor" href="#sic-programming-examples">#</a> SIC Programming Examples</h2><h3 id=""><a class="anchor" href="#">#</a> <a href="./Appendix%20A.md"><strong>附錄 A - 組合語言補充</strong></a></h3><h3 id="-2"><a class="anchor" href="#-2">#</a> <a href="./Ch01%20-%20%E7%AF%84%E4%BE%8B%E7%A8%8B%E5%BC%8F%E5%88%86%E6%9E%90.md"><strong>範例程式分析</strong></a></h3><h2 id="cisc-複雜指令集架構"><a class="anchor" href="#cisc-複雜指令集架構">#</a> CISC (<span class="exturl" data-url="aHR0cHM6Ly96aC53aWtpcGVkaWEub3JnL3poLXR3LyVFOCVBNCU4NyVFOSU5QiU5QyVFNiU4QyU4NyVFNCVCQiVBNCVFOSU5QiU4NiVFOSU5QiVCQiVFOCU4NSVBNg==">複雜指令集架構</span>)</h2><ul><li><strong>CISC: Complex Instruction Set Computers</strong></li><li>Implementation of such an architecture in <strong>hardware tends to be complex</strong>.</li></ul><h2 id="vax-virtual-address-extension-architecture"><a class="anchor" href="#vax-virtual-address-extension-architecture">#</a> VAX (Virtual Address eXtension) Architecture</h2><h3 id="memory-3"><a class="anchor" href="#memory-3">#</a> Memory</h3><ul><li>8-bit bytes</li><li>Byte Addresses</li><li><font>Word</font>: 2 bytes</li><li><font>Long Word</font>: 4 bytes</li><li><font>Quadword</font>: 8 bytes</li><li><font>Octaword</font>: 16 bytes</li></ul><p>Some operations are more efficient when operands are <strong>aligned in a particular way</strong></p><ul><li>For example, a <strong>longword</strong> operand that <strong>begins at a byte address</strong> that is a <strong>multiple of 4</strong>.</li></ul><p><font>Virtual address space</font>: <span class="katex"><span class="katex-mathml"><math xmlns="http://www.w3.org/1998/Math/MathML"><semantics><mrow><msup><mn>2</mn><mn>32</mn></msup></mrow><annotation encoding="application/x-tex">2^{32}</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:0.8141079999999999em;vertical-align:0em;"></span><span class="mord"><span class="mord">2</span><span class="msupsub"><span class="vlist-t"><span class="vlist-r"><span class="vlist" style="height:0.8141079999999999em;"><span style="top:-3.063em;margin-right:0.05em;"><span class="pstrut" style="height:2.7em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mtight"><span class="mord mtight">3</span><span class="mord mtight">2</span></span></span></span></span></span></span></span></span></span></span></span> bytes</p><ul><li>One <strong>half</strong> of the VAX virtual address space is called <font>system space</font>, which <strong>contains the operating system</strong>, and is <strong>shared by all programs</strong>.</li><li>The other half of the address space is called <font>process space</font>, and is defined separately for each program.</li></ul><h3 id="registers-3"><a class="anchor" href="#registers-3">#</a> Registers</h3><ul><li>16 <strong>general-purpose registers</strong>: <em>R0</em>~<em>R15</em>, <strong>32 bits</strong> in length.</li><li><em>R15</em>: program counter</li><li><em>R14</em>: stack pointer</li><li><em>R13</em>: frame pointer</li><li><em>R12</em>: argument pointer</li><li><strong>Processor status longword</strong> (<em><strong>PSL</strong></em>), which contains state variables and flags associated with a process.</li></ul><h3 id="data-formats-3"><a class="anchor" href="#data-formats-3">#</a> Data Formats</h3><ul><li><strong>2’s complement</strong> representation is used for negative values.</li><li>Characters are stored using their <strong>8-bit ASCII codes</strong>.</li><li>There are four different <strong>floating-point</strong> data formats, ranging in length <strong>from 4 to 16 bytes</strong>.</li><li><strong>Packed decimal format</strong>: each byte represents two decimal digits.</li><li><strong>Numeric format</strong>: one digit per byte.</li><li>Support <strong>queues</strong> and <strong>variable-length bit strings</strong>.</li></ul><h3 id="instruction-formats-3"><a class="anchor" href="#instruction-formats-3">#</a> Instruction Formats</h3><ul><li>A <strong>variable-length instruction format</strong>.</li><li>Each instruction consists of <strong>an operation code</strong> (1 or 2 bytes) followed by <strong>up to six operand specifiers</strong>.</li></ul><h3 id="addressing-modes-3"><a class="anchor" href="#addressing-modes-3">#</a> Addressing Modes</h3><ul><li>Immediate mode</li><li>Register mode</li><li><strong>Register deferred</strong> mode</li><li>Autoincrement and autodecrement  modes (register content)</li><li>Several base relative addressing modes</li><li>May also include an index register</li></ul><h3 id="instruction-set-3"><a class="anchor" href="#instruction-set-3">#</a> Instruction Set</h3><ul><li>Instruction mnemonics are formed by combining the following elements:<ol><li>A <strong>prefix</strong> that specifies the <strong>type of operation</strong></li><li>A <strong>suffix</strong> that specifies the <strong>data type of the operands</strong></li><li>A <strong>modifier</strong> (on some instructions) that gives the <strong>number of operands</strong> involved.</li></ol></li><li>Examples:<ul><li><code>ADDW2</code> : <strong>ADD</strong> <strong>W</strong>ord, <strong>2</strong> operands</li><li><code>MULL3</code></li><li><code>CVTWL</code></li></ul></li></ul><p>There are number of operations that are much more complex than the machine instructions found on most computers.</p><p>These operations are hardware realizations of frequently occurring <strong>sequences of code</strong>. They are <strong>implemented as single instructions</strong> for efficiency and speed.</p><ul><li>Load and store multiple registers</li><li>Manipulate queues and variable-length bit fields.</li><li>Calling and returning from procedures: a single instruction saves a designated set of registers, passes a list of arguments to the procedure, <strong>maintains the stack, frame, and argument pointers</strong>, and sets a mask to enable error traps for arithmetic operations.</li></ul><h3 id="inputoutput"><a class="anchor" href="#inputoutput">#</a> Input/Output</h3><ul><li>Each I/O device controller has a set of <strong>control/status and data registers</strong>, which are <strong>assigned locations in the physical address space</strong>.</li><li>The portion of the address space into which the device controller registers are mapped is called <font>I/O space</font>.</li><li>No special instructions are required to access registers in I/O space.</li><li>An I/O device <strong>driver</strong> issues commands to the device controller by <strong>storing values into the appropriate registers</strong>.</li><li>Software routines may read these registers to obtain status information.</li></ul><h2 id="x86-architecture"><a class="anchor" href="#x86-architecture">#</a> x86 Architecture</h2><h3 id="memory-4"><a class="anchor" href="#memory-4">#</a> Memory</h3><ul><li>At the <strong>physical level</strong>, memory consists of 8-bit bytes.</li><li>Byte addresses.</li><li><strong>Word</strong>: two consecutive bytes</li><li><strong>Double-word (dword)</strong>: four bytes</li><li>Some operations are more efficient when operands are aligned in a particular way.</li><li>However, programmers usually view the x86 memory as a collection of <font>segments</font>.<ul><li>From this point of view, an <strong>address</strong> consists of two parts<ul><li>a <strong>segment number</strong></li><li>an <strong>offset</strong> that points to a byte within the segment.</li></ul></li><li>Segments can be of <strong>different sizes</strong>, and are often used for different purposes.<ul><li>For example, <strong>code segment</strong> and <strong>data segment</strong>.</li></ul></li><li>It is not necessary for all of the segments used by a program to be in physical memory.</li><li>A segment can also be <strong>divided into pages</strong>.</li></ul></li></ul><h3 id="registers-4"><a class="anchor" href="#registers-4">#</a> Registers</h3><ul><li>Each <strong>general-purpose register</strong> is <strong>32 bits</strong> long.</li><li><strong>EIP</strong>: program counter.</li><li><strong>FLAGS</strong></li><li><strong>16-bit segment registers</strong>:<ul><li><em>CS</em> for code segment</li><li>SS for stack segment</li><li><em>DS</em>, <em>ES</em>, <em>FS</em>, <em>GS</em> for data segments.</li></ul></li><li><strong>Floating-point unit</strong> (FPU) contains eight <strong>80-bit</strong> data registers.</li><li>There are also a number of registers that are <strong>used only by system programs</strong> such as the operating system.</li></ul><h3 id="data-formats-4"><a class="anchor" href="#data-formats-4">#</a> Data Formats</h3><ul><li>Integers, floating-point values, characters, and strings.</li><li>The least significant part of a numeric value is stored at the lowest-numbered address: <font>little-endian</font>.</li><li>Unpacked and packed <strong>BCD formats</strong>.</li><li>Three different floating-point data formats:<ul><li><strong>single-precision</strong> with 32 bits (24+7+1)</li><li><strong>double-precision</strong> with 64 bits (53+10+1)</li><li><strong>extended-precision</strong> with 80 bits (64+15+1)</li></ul></li></ul><h3 id="instruction-formats-4"><a class="anchor" href="#instruction-formats-4">#</a> Instruction Formats</h3><ul><li><strong>Prefix</strong>: containing <strong>flags</strong> that <strong>modify the operation</strong> of the instruction.<ul><li>For example, a repetition count of the instruction (e.g. string manipulation), specifying a segment register.</li></ul></li><li><strong>opcode</strong>: 1 or 2 bytes. Some operations have different opcodes, each specifying a different variant of the operation.</li><li>A number of bytes that specify the <strong>operands</strong> and <strong>addressing modes</strong> to be used.</li><li>The <strong>opcode</strong> is the only element that is <font>always present</font> in every instruction.</li></ul><h3 id="addressing-modes-4"><a class="anchor" href="#addressing-modes-4">#</a> Addressing Modes</h3><ul><li><strong>Immediate mode</strong>: data in the instruction</li><li><strong>Register mode</strong>: data in register</li><li><strong>Direct mode</strong>: address of data in the instruction</li><li><strong>Relative mode</strong>: displacement in the instruction, relative to EIP<ul><li>TA=(base register) + (index register)*(scale factor) + displacement</li></ul></li></ul><h3 id="instruction-set-4"><a class="anchor" href="#instruction-set-4">#</a> Instruction Set</h3><ul><li>More than 400 machine instructions.</li><li>An instruction may have <strong>0~3 operands</strong>.</li><li>There are:<ul><li><strong>register-to-register</strong> instructions</li><li><strong>register-to-memory</strong> instructions</li><li><strong>memory-to-memory</strong> instructions</li></ul></li><li>Some <strong>special-purpose instructions</strong> to perform operations <strong>frequently required in high-level programming languages</strong><ul><li>For example, entering and leaving procedures and checking subscript values against the bounds of an array.</li></ul></li></ul><h3 id="io"><a class="anchor" href="#io">#</a> I/O</h3><ul><li>Repetition prefixes allow I/O instructions to transfer an entire string in a single operation.</li></ul><h2 id="risc-machines"><a class="anchor" href="#risc-machines">#</a> RISC Machines</h2><ul><li><strong>Reduced Instruction Set Computer</strong></li><li>This <strong>simplified design</strong> can result in<ul><li>faster and less expensive processor development</li><li>greater reliability</li><li>faster instruction fetching, decoding, and execution times.</li></ul></li><li>In general, a RISC system is characterized by<ul><li>a standard, <strong>fixed instruction length</strong><ul><li>usually equal to <strong>one machine word</strong></li></ul></li><li><strong>single-cycle execution of most instructions</strong>.</li></ul></li><li>Memory access is usually done by <strong>load</strong> and <strong>store</strong> instructions only.</li><li>All instructions except for load and store are <strong>register-to-register operations</strong>.</li><li>There are typically a relatively <strong>large number of general-purpose registers</strong>.</li><li>The number of machine instructions, instruction formats, and addressing modes is relatively small.</li></ul><h2 id="ultrasparc-scalable-processor-architecture-architecture"><a class="anchor" href="#ultrasparc-scalable-processor-architecture-architecture">#</a> UltraSPARC (Scalable Processor ARChitecture) Architecture</h2><h3 id="memory-5"><a class="anchor" href="#memory-5">#</a> Memory</h3><ul><li><font>Halfword</font>: two consecutive bytes</li><li><font>Word</font>: four bytes</li><li><font>Doubleword</font>: eight bytes</li><li>Data are stored in memory with alignment</li><li>Virtual address space of <span class="katex"><span class="katex-mathml"><math xmlns="http://www.w3.org/1998/Math/MathML"><semantics><mrow><msup><mn>2</mn><mn>64</mn></msup></mrow><annotation encoding="application/x-tex">2^{64}</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:0.8141079999999999em;vertical-align:0em;"></span><span class="mord"><span class="mord">2</span><span class="msupsub"><span class="vlist-t"><span class="vlist-r"><span class="vlist" style="height:0.8141079999999999em;"><span style="top:-3.063em;margin-right:0.05em;"><span class="pstrut" style="height:2.7em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mtight"><span class="mord mtight">6</span><span class="mord mtight">4</span></span></span></span></span></span></span></span></span></span></span></span> bytes</li><li>The address space is divided into pages. Multiple page size are supported.</li></ul><h3 id="registers-5"><a class="anchor" href="#registers-5">#</a> Registers</h3><ul><li>A large <strong>register file</strong> that usually contains more than 100 general-purpose register.</li><li>However, any procedure can access only 32 registers.</li><li>The <strong>first eight</strong> of these registers are <strong>global</strong> — accessed by all procedures on the system.</li><li><strong>Register <em>r0</em> always contains the value zero.</strong></li><li>The other 24 registers available to a procedure can be visualized as a <strong>window</strong> through which part of the register file can be seen.</li><li>These windows overlap, so some registers in the register file are shared between procedures. This facilitates the passing of parameters.</li><li>If a set of concurrently running procedures needs more windows than are physically available, a “window overflow” interrupt occurs. The operating system must then save the contents of some registes in the file (and restore them later) to provide the additional windows that are needed.</li></ul><h3 id="data-format"><a class="anchor" href="#data-format">#</a> Data Format</h3><ul><li><strong>Integers</strong>, <strong>floating-point</strong> values, and <strong>characters</strong>.</li><li>Support both big-endian and little-endian byte orderings.</li><li>Three different floating-point data formats.</li></ul><h3 id="instruction-formats-5"><a class="anchor" href="#instruction-formats-5">#</a> Instruction Formats</h3><ul><li>There are three basic instruction formats. All of these formats are <strong>32 bits</strong> long. <strong>The first 2 bits of the instruction word identify which format is being used</strong>.</li><li><strong>Format 1</strong> is used for the <strong>Call instruction</strong>.</li><li><strong>Format 2</strong> is used for <strong>branch instruction</strong> (and one special instruction that enters a value into a register)</li><li><strong>Format 3</strong> is used by the <strong>remaining instructions</strong>, including <strong>register loads</strong> and <strong>stores</strong>, and <strong>three-operand arithmetic operations</strong>.</li></ul><h3 id="addressing-modes-5"><a class="anchor" href="#addressing-modes-5">#</a> Addressing Modes</h3><ul><li><strong>Immediate mode</strong></li><li><strong>Register direct mode</strong></li><li>Operands in memory are addressd using one of the following three modes:<ul><li><strong><em>PC-relative</em>: TA = (PC) + displacement {30 bits, signed}</strong></li><li><strong><em>Register indirect with displacement</em>: TA = (register) + displacement {13 bits, signed}</strong></li><li><strong><em>Register indirect indexed</em>: TA = (register1) + (register2)</strong></li></ul></li><li>PC-relative mode is used only for branch instructions.</li></ul><h3 id="instruction-set-5"><a class="anchor" href="#instruction-set-5">#</a> Instruction Set</h3><ul><li>The basic SPARC architechture has fewer than 100 machine instructions.</li><li>Instruction execution on a <strong>SPARC</strong> system is <font>pipeline</font>: fetching_and_decoding, execution</li><li>However, an ordinary branch instruction might cause the process to “stall”. The instruction following the branch would have to be dicarded without being executed.</li><li>To make the pipeline work more efficiently, SPARC branch instructions (including subroutine calls) are <font>delayed branch</font>. This means that the instruction immediately following the branch instruction is actually executed before the branch is taken.</li></ul><h2 id="powerpc-architecture"><a class="anchor" href="#powerpc-architecture">#</a> PowerPC Architecture</h2><ul><li>IBM first introduced the POWER architecture early in 1990 with the RS/6000.</li><li>POWER is an acronym for Performance Optimization With Enhanced RISC.</li><li>It was soon realized that this architecture could form the basis for a new family of powerful and low-cost microprocessors.</li><li>In October 1991, IBM, Apple, and Motorola formed an alliance to develop and market such microprocessors, which were named PowerPC.</li></ul><h3 id="memory-6"><a class="anchor" href="#memory-6">#</a> Memory</h3><ul><li>Two consecutive bytes: halfword</li><li>Four bytes: word</li><li>Eight bytes: doubleword</li><li>Sixteen bytes: quadword</li><li>Virtual address space: <span class="katex"><span class="katex-mathml"><math xmlns="http://www.w3.org/1998/Math/MathML"><semantics><mrow><msup><mn>2</mn><mn>64</mn></msup></mrow><annotation encoding="application/x-tex">2^{64}</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:0.8141079999999999em;vertical-align:0em;"></span><span class="mord"><span class="mord">2</span><span class="msupsub"><span class="vlist-t"><span class="vlist-r"><span class="vlist" style="height:0.8141079999999999em;"><span style="top:-3.063em;margin-right:0.05em;"><span class="pstrut" style="height:2.7em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mtight"><span class="mord mtight">6</span><span class="mord mtight">4</span></span></span></span></span></span></span></span></span></span></span></span> bytes</li><li>The address space is divided into fixed-length segments: 256 megabytes long.</li><li>Each segment is divided into pages: 4096 bytes long.</li></ul><h3 id="registers-6"><a class="anchor" href="#registers-6">#</a> Registers</h3><ul><li>32 general-purpose registers: 64 bits long.</li><li>32 floating-point registers for FPU: 64 bits</li><li>A 32-bit condition register</li><li>Link Register (LR) and Count Register (CR) used by some branch instructions</li></ul><h3 id="data-formats-5"><a class="anchor" href="#data-formats-5">#</a> Data formats</h3><ul><li>Integers are stored as 8-, 16-, 32-, or 64-bit binary numbers.</li><li>Big-endian byte ordering by default.</li><li>It is possible to select little-endian byte ordering by setting a bit in a control register.</li><li>There are two different floating-point data formats.</li><li>Single-precision format is 32 bits long (23+8+1)</li><li>Double-precision format is 64 bits long (52+11+1)</li></ul><h3 id="instruction-format"><a class="anchor" href="#instruction-format">#</a> Instruction format</h3><ul><li>There are seven basic instruction formats, some of which have subforms.</li><li>All of these formats are 32 bits long</li><li>Instructions must be aligned beginning at a word boundary</li><li>The first 6 bits of the instruction word always specify the opcode; some instruction formats also have an additional “extended code” field.</li><li>The fixed instruction length in the PowerPC architecture is typical of RISC systems, making instruction decoding faster and simpler than on CISC systems.</li></ul><h3 id="addressing-modes-6"><a class="anchor" href="#addressing-modes-6">#</a> Addressing modes</h3><ul><li>Immediate mode</li><li>Register direct mode</li><li>The only instructions that address memory are load and store operations, and branch instructions.</li><li>Load and store operations use one of the following three addressing modes.</li><li>Register indirect mode: TA=(register)</li><li>Register indirect with index: TA=(register1)+(register2)</li><li>Register indirect with immediate index: TA=(register)+displacement</li><li>The register numbers and displacement are encoded as part of the instruction.</li><li>Branch instructions use one of the following three addressing modes.</li><li>Absolute: TA = actual address</li><li>Relative: TA = current instruction address + displacement</li><li>Link Register: TA = (LR)</li><li>Count Register: TA = (CR)</li></ul><h3 id="instruction-set-6"><a class="anchor" href="#instruction-set-6">#</a> Instruction set</h3><ul><li>Approximately 200 machine instructions</li><li>Floating-point “multiply and add” instructions</li><li>Using more powerful instructions, so fewer instructions are required to perform a task vs. keeping instructions simple so they can be executed as fast as possible.</li><li>Instruction execution on a PowerPC system is pipelined. However, the pipelining is more sophisticated than on the original SPARC systems, with branch prediction used to speed execution. As a result, the delayed branch technique we described for SPARC is not used on PowerPC and most other modern architectures.</li></ul><h3 id="input-and-output-2"><a class="anchor" href="#input-and-output-2">#</a> Input and Output</h3><ul><li>Segments in the virtual address space are mapped onto an external address space (typically an I/O bus)</li></ul><h2 id="cray-t3e-architecture"><a class="anchor" href="#cray-t3e-architecture">#</a> Cray T3E Architecture</h2><ul><li>Supercomputer</li><li>A massively parallel processing (MPP) system</li><li>For use on technical applications in scientific computing.</li><li>Containing a large number of processing elements (PE), arranged in a three-dimensional network as illustrated in Fig. 1.8.<ul><li>The interconnection network is circular in each dimension.</li></ul></li><li>Each PE consists of a DEC Alpha EV5 RISC microprocessor, local memory, and performance-accelerating control logic developed by Cray.</li><li>A T3E system may contain from 16 to 2048 processing elements.</li></ul><h3 id="memory-7"><a class="anchor" href="#memory-7">#</a> Memory</h3><ul><li>Each PE in the T3E has its own local memory with a capacity of from 64 megabytes to 2 gigabytes.</li><li>The local memory within each PE is part of a physically distributed, logically shared memory system.</li><li>Two consecutive bytes: word</li><li>Four bytes: long word</li><li>Eight bytes: quadword</li><li>64-bit virtual address</li></ul><h3 id="registers-7"><a class="anchor" href="#registers-7">#</a> Registers</h3><ul><li>32 general-purpose registers: 64 bits long</li><li>32 floating-point registers: 64 bits long</li><li>64-bit program counter</li></ul><h3 id="data-formats-6"><a class="anchor" href="#data-formats-6">#</a> Data formats</h3><ul><li>Integers are stored as longwords or quadwords</li><li>There are two different types of floating-point data formats. One group of three formats is included for compatibility with the VAX architecture. The other group consists of four IEEE standard formats, which are compatible with those used on most modern systems.</li><li>There are no byte load or store operations. Only longwords and quadwords can be transferred between a register and memory. As a consequence, characters that are to be manipulated separately are usually stored one per longword.</li></ul><h3 id="instruction-formats-6"><a class="anchor" href="#instruction-formats-6">#</a> Instruction formats</h3><ul><li>There are five basic instruction formats, some of which have subforms.</li><li>All of these formats are 32 bits long.</li><li>The first 6 bits of the instruction word always specify the opcode; some instruction formats also have an additional “function” field.</li></ul><h3 id="addressing-modes-7"><a class="anchor" href="#addressing-modes-7">#</a> Addressing modes</h3><ul><li>Immediate mode</li><li>Register direct mode</li><li>PC-relative: TA = (PC) + displacement (for conditional and unconditional branches)</li><li>Register indirect with displacement: TA = (register) + displacement (for load and store operations and for subroutine jumps)</li></ul><h3 id="instruction-set-7"><a class="anchor" href="#instruction-set-7">#</a> Instruction Set</h3><ul><li>Approximately 130 machine instructions</li><li>The instruction set is designed so that an implementation of the architecture can be as fast as possible. For example, there are no byte or word load and store instructions. This means that the memory access interface does not need to include shift-and-mask operations.</li></ul><h3 id="input-and-output-3"><a class="anchor" href="#input-and-output-3">#</a> Input and Output</h3><ul><li>Performing I/O through multiple ports into one or more I/O channels.</li><li>These channels are integrated into the network that interconnects the processing nodes.</li><li>A system may be configured with up to one I/O channel for every eight PEs.</li><li>All channels are accessible and controllable from all PEs.</li></ul>]]></content>
      
      
      <categories>
          
          <category> SystemSoftware </category>
          
      </categories>
      
      
        <tags>
            
            <tag> System Software </tag>
            
            <tag> Assembler </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>Appendix A</title>
      <link href="/2023/04/23/SystemSoftware/Appendix_A/"/>
      <url>/2023/04/23/SystemSoftware/Appendix_A/</url>
      
        <content type="html"><![CDATA[<p><img data-src="https://i.imgur.com/Jg7aXIF.png" alt=""><br><img data-src="https://i.imgur.com/tgx79gp.png" alt=""><br><img data-src="https://i.imgur.com/FvmdzSQ.png" alt=""><br><img data-src="https://i.imgur.com/CVWEW1r.png" alt=""></p>]]></content>
      
      
      <categories>
          
          <category> SystemSoftware </category>
          
      </categories>
      
      
        <tags>
            
            <tag> System Software </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>1312. Minimum Insertion Steps to Make a String Palindrome</title>
      <link href="/2023/04/22/Coding/leetcode/Hard/1312%20Minimum%20Insertion%20Steps%20to%20Make%20a%20String%20Palindrome/"/>
      <url>/2023/04/22/Coding/leetcode/Hard/1312%20Minimum%20Insertion%20Steps%20to%20Make%20a%20String%20Palindrome/</url>
      
        <content type="html"><![CDATA[<p>⭐️⭐️⭐️</p><h2 id="題目敘述"><a class="anchor" href="#題目敘述">#</a> <span class="exturl" data-url="aHR0cHM6Ly9sZWV0Y29kZS5jb20vcHJvYmxlbXMvbWluaW11bS1pbnNlcnRpb24tc3RlcHMtdG8tbWFrZS1hLXN0cmluZy1wYWxpbmRyb21lLw==">題目敘述</span></h2><p>Given a string  <code>s</code> . In one step you can insert any character at any index of the string.</p><p>Return <em>the minimum number of steps</em> to make  <code>s</code>  palindrome.</p><p>A <strong>Palindrome String</strong> is one that reads the same backward as well as forward.</p><h3 id="example-1"><a class="anchor" href="#example-1">#</a> Example 1:</h3><blockquote><p><strong>Input</strong>: s = “zzazz”<br><strong>Output</strong>: 0<br><strong>Explanation</strong>: The string “zzazz” is already palindrome we do not need any insertions.</p></blockquote><h3 id="example-2"><a class="anchor" href="#example-2">#</a> Example 2:</h3><blockquote><p><strong>Input</strong>: s = “mbadm”<br><strong>Output</strong>: 2<br><strong>Explanation</strong>: String can be “mbdadbm” or “mdbabdm”.</p></blockquote><h3 id="example-3"><a class="anchor" href="#example-3">#</a> Example 3:</h3><blockquote><p><strong>Input</strong>: s = “leetcode”<br><strong>Output</strong>: 5<br><strong>Explanation</strong>: Inserting 5 characters the string becomes “leetcodocteel”.</p></blockquote><h2 id="解題思路"><a class="anchor" href="#解題思路">#</a> 解題思路</h2><p>We can create a 2D table dp, where <strong> <code>dp[i][j]</code>  represents the minimum number of insertions required to make the substring  <code>s[i:j+1]</code>  a palindrome</strong>.</p><p>The <strong>base case</strong> is when  <code>i=j</code> , where the substring is already a palindrome and no insertions are needed.</p><p>If  <code>s[i] == s[j]</code> , then the substring is already a palindrome and we can use the result of  <code>dp[i+1][j-1]</code> . Otherwise, we need to insert either a character at index  <code>i</code>  or  <code>j</code>  to make them equal, so we take the minimum of  <code>dp[i+1][j]</code>  and  <code>dp[i][j-1]</code>  and add 1 to it.</p><p>The final answer is stored in  <code>dp[0][n-1]</code> , where  <code>n</code>  is the length of the input string  <code>s</code> .</p><h2 id="solution"><a class="anchor" href="#solution">#</a> Solution</h2><div class="tab" data-id="code" data-title="C++"><figure class="highlight cpp"><figcaption data-lang="C++"></figcaption><table><tr><td data-num="1"></td><td><pre><span class="token keyword">class</span> <span class="token class-name">Solution</span> <span class="token punctuation">&#123;</span></pre></td></tr><tr><td data-num="2"></td><td><pre><span class="token keyword">public</span><span class="token operator">:</span></pre></td></tr><tr><td data-num="3"></td><td><pre>    <span class="token keyword">int</span> <span class="token function">minInsertions</span><span class="token punctuation">(</span>string s<span class="token punctuation">)</span> <span class="token punctuation">&#123;</span></pre></td></tr><tr><td data-num="4"></td><td><pre>        <span class="token keyword">int</span> n <span class="token operator">=</span> s<span class="token punctuation">.</span><span class="token function">size</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span></pre></td></tr><tr><td data-num="5"></td><td><pre>        vector<span class="token operator">&lt;</span>vector<span class="token operator">&lt;</span><span class="token keyword">int</span><span class="token operator">>></span> <span class="token function">dp</span><span class="token punctuation">(</span>n<span class="token punctuation">,</span> <span class="token generic-function"><span class="token function">vector</span><span class="token generic class-name"><span class="token operator">&lt;</span><span class="token keyword">int</span><span class="token operator">></span></span></span><span class="token punctuation">(</span>n<span class="token punctuation">,</span> <span class="token number">0</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span></pre></td></tr><tr><td data-num="6"></td><td><pre>        <span class="token keyword">for</span> <span class="token punctuation">(</span><span class="token keyword">int</span> i<span class="token operator">=</span>n<span class="token operator">-</span><span class="token number">2</span><span class="token punctuation">;</span> i<span class="token operator">>=</span><span class="token number">0</span><span class="token punctuation">;</span> i<span class="token operator">--</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span></pre></td></tr><tr><td data-num="7"></td><td><pre>            <span class="token keyword">for</span> <span class="token punctuation">(</span><span class="token keyword">int</span> j<span class="token operator">=</span>i<span class="token operator">+</span><span class="token number">1</span><span class="token punctuation">;</span> j<span class="token operator">&lt;</span>n<span class="token punctuation">;</span> j<span class="token operator">++</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span></pre></td></tr><tr><td data-num="8"></td><td><pre>                <span class="token keyword">if</span> <span class="token punctuation">(</span>s<span class="token punctuation">[</span>i<span class="token punctuation">]</span> <span class="token operator">==</span> s<span class="token punctuation">[</span>j<span class="token punctuation">]</span><span class="token punctuation">)</span> dp<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">[</span>j<span class="token punctuation">]</span> <span class="token operator">=</span> dp<span class="token punctuation">[</span>i<span class="token operator">+</span><span class="token number">1</span><span class="token punctuation">]</span><span class="token punctuation">[</span>j<span class="token operator">-</span><span class="token number">1</span><span class="token punctuation">]</span><span class="token punctuation">;</span></pre></td></tr><tr><td data-num="9"></td><td><pre>                <span class="token keyword">else</span> dp<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">[</span>j<span class="token punctuation">]</span> <span class="token operator">=</span> <span class="token function">min</span><span class="token punctuation">(</span>dp<span class="token punctuation">[</span>i<span class="token operator">+</span><span class="token number">1</span><span class="token punctuation">]</span><span class="token punctuation">[</span>j<span class="token punctuation">]</span><span class="token punctuation">,</span> dp<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">[</span>j<span class="token operator">-</span><span class="token number">1</span><span class="token punctuation">]</span><span class="token punctuation">)</span> <span class="token operator">+</span> <span class="token number">1</span><span class="token punctuation">;</span></pre></td></tr><tr><td data-num="10"></td><td><pre>            <span class="token punctuation">&#125;</span></pre></td></tr><tr><td data-num="11"></td><td><pre>        <span class="token punctuation">&#125;</span></pre></td></tr><tr><td data-num="12"></td><td><pre>        <span class="token keyword">return</span> dp<span class="token punctuation">[</span><span class="token number">0</span><span class="token punctuation">]</span><span class="token punctuation">[</span>n<span class="token operator">-</span><span class="token number">1</span><span class="token punctuation">]</span><span class="token punctuation">;</span></pre></td></tr><tr><td data-num="13"></td><td><pre>    <span class="token punctuation">&#125;</span></pre></td></tr><tr><td data-num="14"></td><td><pre><span class="token punctuation">&#125;</span><span class="token punctuation">;</span></pre></td></tr></table></figure></div><div class="tab" data-id="code" data-title="Java"><figure class="highlight java"><figcaption data-lang="java"></figcaption><table><tr><td data-num="1"></td><td><pre><span class="token keyword">class</span> <span class="token class-name">Solution</span> <span class="token punctuation">&#123;</span></pre></td></tr><tr><td data-num="2"></td><td><pre>    <span class="token keyword">public</span> <span class="token keyword">int</span> <span class="token function">minInsertions</span><span class="token punctuation">(</span><span class="token class-name">String</span> s<span class="token punctuation">)</span> <span class="token punctuation">&#123;</span></pre></td></tr><tr><td data-num="3"></td><td><pre>        <span class="token keyword">int</span> n <span class="token operator">=</span> s<span class="token punctuation">.</span><span class="token function">length</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span></pre></td></tr><tr><td data-num="4"></td><td><pre>        <span class="token keyword">int</span><span class="token punctuation">[</span><span class="token punctuation">]</span><span class="token punctuation">[</span><span class="token punctuation">]</span> dp <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token keyword">int</span><span class="token punctuation">[</span>n<span class="token punctuation">]</span><span class="token punctuation">[</span>n<span class="token punctuation">]</span><span class="token punctuation">;</span></pre></td></tr><tr><td data-num="5"></td><td><pre>        <span class="token keyword">for</span> <span class="token punctuation">(</span><span class="token keyword">int</span> i<span class="token operator">=</span>n<span class="token operator">-</span><span class="token number">1</span><span class="token punctuation">;</span> i<span class="token operator">>=</span><span class="token number">0</span><span class="token punctuation">;</span> i<span class="token operator">--</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span></pre></td></tr><tr><td data-num="6"></td><td><pre>            <span class="token keyword">for</span> <span class="token punctuation">(</span><span class="token keyword">int</span> j<span class="token operator">=</span>i<span class="token operator">+</span><span class="token number">1</span><span class="token punctuation">;</span> j<span class="token operator">&lt;</span>n<span class="token punctuation">;</span> j<span class="token operator">++</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span></pre></td></tr><tr><td data-num="7"></td><td><pre>                <span class="token keyword">if</span> <span class="token punctuation">(</span>s<span class="token punctuation">.</span><span class="token function">charAt</span><span class="token punctuation">(</span>i<span class="token punctuation">)</span> <span class="token operator">==</span> s<span class="token punctuation">.</span><span class="token function">charAt</span><span class="token punctuation">(</span>j<span class="token punctuation">)</span><span class="token punctuation">)</span> dp<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">[</span>j<span class="token punctuation">]</span> <span class="token operator">=</span> dp<span class="token punctuation">[</span>i<span class="token operator">+</span><span class="token number">1</span><span class="token punctuation">]</span><span class="token punctuation">[</span>j<span class="token operator">-</span><span class="token number">1</span><span class="token punctuation">]</span><span class="token punctuation">;</span></pre></td></tr><tr><td data-num="8"></td><td><pre>                <span class="token keyword">else</span> dp<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">[</span>j<span class="token punctuation">]</span> <span class="token operator">=</span> <span class="token class-name">Math</span><span class="token punctuation">.</span><span class="token function">min</span><span class="token punctuation">(</span>dp<span class="token punctuation">[</span>i<span class="token operator">+</span><span class="token number">1</span><span class="token punctuation">]</span><span class="token punctuation">[</span>j<span class="token punctuation">]</span><span class="token punctuation">,</span> dp<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">[</span>j<span class="token operator">-</span><span class="token number">1</span><span class="token punctuation">]</span><span class="token punctuation">)</span> <span class="token operator">+</span> <span class="token number">1</span><span class="token punctuation">;</span></pre></td></tr><tr><td data-num="9"></td><td><pre>            <span class="token punctuation">&#125;</span></pre></td></tr><tr><td data-num="10"></td><td><pre>        <span class="token punctuation">&#125;</span></pre></td></tr><tr><td data-num="11"></td><td><pre>        <span class="token keyword">return</span> dp<span class="token punctuation">[</span><span class="token number">0</span><span class="token punctuation">]</span><span class="token punctuation">[</span>n<span class="token operator">-</span><span class="token number">1</span><span class="token punctuation">]</span><span class="token punctuation">;</span></pre></td></tr><tr><td data-num="12"></td><td><pre>    <span class="token punctuation">&#125;</span></pre></td></tr><tr><td data-num="13"></td><td><pre><span class="token punctuation">&#125;</span></pre></td></tr></table></figure></div><div class="tab" data-id="code" data-title="Python"><figure class="highlight python"><figcaption data-lang="python"></figcaption><table><tr><td data-num="1"></td><td><pre><span class="token keyword">class</span> <span class="token class-name">Solution</span><span class="token punctuation">:</span></pre></td></tr><tr><td data-num="2"></td><td><pre>    <span class="token keyword">def</span> <span class="token function">minInsertions</span><span class="token punctuation">(</span>self<span class="token punctuation">,</span> s<span class="token punctuation">:</span> <span class="token builtin">str</span><span class="token punctuation">)</span> <span class="token operator">-</span><span class="token operator">></span> <span class="token builtin">int</span><span class="token punctuation">:</span></pre></td></tr><tr><td data-num="3"></td><td><pre>        n <span class="token operator">=</span> <span class="token builtin">len</span><span class="token punctuation">(</span>s<span class="token punctuation">)</span></pre></td></tr><tr><td data-num="4"></td><td><pre>        dp <span class="token operator">=</span> <span class="token punctuation">[</span><span class="token punctuation">[</span><span class="token number">0</span><span class="token punctuation">]</span> <span class="token operator">*</span> n <span class="token keyword">for</span> _ <span class="token keyword">in</span> <span class="token builtin">range</span><span class="token punctuation">(</span>n<span class="token punctuation">)</span><span class="token punctuation">]</span></pre></td></tr><tr><td data-num="5"></td><td><pre>        <span class="token keyword">for</span> i <span class="token keyword">in</span> <span class="token builtin">range</span><span class="token punctuation">(</span>n<span class="token operator">-</span><span class="token number">2</span><span class="token punctuation">,</span> <span class="token operator">-</span><span class="token number">1</span><span class="token punctuation">,</span> <span class="token operator">-</span><span class="token number">1</span><span class="token punctuation">)</span><span class="token punctuation">:</span></pre></td></tr><tr><td data-num="6"></td><td><pre>            <span class="token keyword">for</span> j <span class="token keyword">in</span> <span class="token builtin">range</span><span class="token punctuation">(</span>i<span class="token operator">+</span><span class="token number">1</span><span class="token punctuation">,</span> n<span class="token punctuation">)</span><span class="token punctuation">:</span></pre></td></tr><tr><td data-num="7"></td><td><pre>                <span class="token keyword">if</span> s<span class="token punctuation">[</span>i<span class="token punctuation">]</span> <span class="token operator">==</span> s<span class="token punctuation">[</span>j<span class="token punctuation">]</span><span class="token punctuation">:</span> dp<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">[</span>j<span class="token punctuation">]</span> <span class="token operator">=</span> dp<span class="token punctuation">[</span>i<span class="token operator">+</span><span class="token number">1</span><span class="token punctuation">]</span><span class="token punctuation">[</span>j<span class="token operator">-</span><span class="token number">1</span><span class="token punctuation">]</span></pre></td></tr><tr><td data-num="8"></td><td><pre>                <span class="token keyword">else</span><span class="token punctuation">:</span> dp<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">[</span>j<span class="token punctuation">]</span> <span class="token operator">=</span> <span class="token builtin">min</span><span class="token punctuation">(</span>dp<span class="token punctuation">[</span>i<span class="token operator">+</span><span class="token number">1</span><span class="token punctuation">]</span><span class="token punctuation">[</span>j<span class="token punctuation">]</span><span class="token punctuation">,</span> dp<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">[</span>j<span class="token operator">-</span><span class="token number">1</span><span class="token punctuation">]</span><span class="token punctuation">)</span> <span class="token operator">+</span> <span class="token number">1</span></pre></td></tr><tr><td data-num="9"></td><td><pre>        <span class="token keyword">return</span> dp<span class="token punctuation">[</span><span class="token number">0</span><span class="token punctuation">]</span><span class="token punctuation">[</span>n<span class="token operator">-</span><span class="token number">1</span><span class="token punctuation">]</span></pre></td></tr></table></figure></div>]]></content>
      
      
      <categories>
          
          <category> Coding </category>
          
          <category> Leetcode </category>
          
          <category> Hard </category>
          
      </categories>
      
      
        <tags>
            
            <tag> String </tag>
            
            <tag> Leetcode </tag>
            
            <tag> Dynamic Programming </tag>
            
            <tag> Hard </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>uva 630 - Anagrams (II)</title>
      <link href="/2023/04/21/Coding/uva/Star1/uva%20630/"/>
      <url>/2023/04/21/Coding/uva/Star1/uva%20630/</url>
      
        <content type="html"><![CDATA[<p>⭐️</p><h2 id="題目連結"><a class="anchor" href="#題目連結">#</a> 題目連結</h2><ul><li><span class="exturl" data-url="aHR0cHM6Ly96ZXJvanVkZ2UudHcvU2hvd1Byb2JsZW0/cHJvYmxlbWlkPWU2MDg=">ZeroJudge</span></li><li><span class="exturl" data-url="aHR0cHM6Ly9vbmxpbmVqdWRnZS5vcmcvZXh0ZXJuYWwvNi9wNjMwLnBkZg==">題目連結</span></li><li><span class="exturl" data-url="aHR0cHM6Ly9vbmxpbmVqdWRnZS5vcmcvaW5kZXgucGhwP29wdGlvbj1jb21fb25saW5lanVkZ2UmYW1wO0l0ZW1pZD04JmFtcDtjYXRlZ29yeT04JmFtcDtwYWdlPXNob3dfcHJvYmxlbSZhbXA7cHJvYmxlbT01NzE=">Online Judge</span></li><li><span class="exturl" data-url="aHR0cHM6Ly93d3cudWRlYnVnLmNvbS9VVmEvNjMw">uDebug</span></li></ul><h2 id="題目敘述"><a class="anchor" href="#題目敘述">#</a> 題目敘述</h2><p>One of the preferred kinds of entertainment of people living in final stages of XX century is filling in the <a href="#%E8%A8%BB%E8%A7%A3">crosswords<sub>1</sub></a>. Almost every newspaper and magazine has a column dedicated to entertainment but only <a href="#%E8%A8%BB%E8%A7%A3">amateurs<sub>2</sub></a> have enough after solving one crossword. Real professionals require more than one crossword for a week. And it is so dull — just crosswords and crosswords — while so many other <a href="#%E8%A8%BB%E8%A7%A3">riddles<sub>3</sub></a> are waiting out there. For those are special, dedicated magazines. There are also quite a few competitions to take part in, even reaching the level of World Championships. Anyway — a lot.</p><p>You were taken on by such a professional for whom riddle solving competing is just a job. He had a brilliant idea to use a computer in work not just to play games. Somehow anagrams found themselves first in the line. You are to write a program which searches for anagrams of given words, using a given vocabulary, <a href="#%E8%A8%BB%E8%A7%A3">tediously<sub>4</sub></a> filled with new words by yours employer.</p><h2 id="input"><a class="anchor" href="#input">#</a> Input</h2><p>The first line contains  <code>T</code>  the number of test cases. There is a blank line after this. Then,  <code>T</code>  test cases follow — each separated by a blank line. Each test case has the following structure:</p><p><em>&lt; number of words in vocabulary &gt;</em><br><em>&lt; word 1 &gt;</em><br>…<br><em>&lt; word N &gt;</em><br><em>&lt; test word 1 &gt;</em><br>…<br><em>&lt; test word k &gt;</em><br><strong>END</strong></p><p><em>&lt; number of words in vocabulary &gt;</em> is an integer number  <code>N &lt; 1000</code> . <em>&lt; word 1 &gt;</em> up to <em>&lt; word N &gt;</em> are words from the vocabulary. <em>&lt; test word 1 &gt;</em> up to <em>&lt; test word k &gt;</em> are the words to find <a href="#%E8%A8%BB%E8%A7%A3">anagrams<sub>5</sub></a> for. All words are lowercase (word <strong>‘END’</strong> means end of data — it is <strong>NOT</strong> a test word). You can assume all words are not longer than 20 characters.</p><h2 id="output"><a class="anchor" href="#output">#</a> Output</h2><p>For each <em>&lt; test word &gt;</em> — in the order in which it appeared — list the found anagrams in the following way:<br><strong>Anagrams for:</strong> <em>&lt; test word &gt;</em><br><em>&lt; No &gt;</em>) <em>&lt; anagram &gt;</em><br>…<br><em>&lt; No &gt;</em> should be printed on 3 chars.</p><p>In case of failing to find any anagrams your output should look like this:<br><strong>Anagrams for:</strong> <em>&lt; test word &gt;</em><br><strong>No anagrams for: <em><test word></em></strong></p><p>Print a blank line between datasets.</p><h2 id="sample-input"><a class="anchor" href="#sample-input">#</a> Sample Input</h2><blockquote><p>1<br>8<br>atol<br>lato<br>microphotographics<br>rata<br>rola<br>tara<br>tola<br>pies<br>tola<br>kola<br>aatr<br>photomicrographics<br>END</p></blockquote><h2 id="sample-output"><a class="anchor" href="#sample-output">#</a> Sample Output</h2><blockquote><p>Anagrams for: tola<br>1) atol<br>2) lato<br>3) tola<br>Anagrams for: kola<br>No anagrams for: kola<br>Anagrams for: aatr<br>1) rata<br>2) tara<br>Anagrams for: photomicrographics<br>1) microphotographics</p></blockquote><h2 id="solution"><a class="anchor" href="#solution">#</a> Solution</h2><figure class="highlight cpp"><figcaption data-lang="C++"></figcaption><table><tr><td data-num="1"></td><td><pre><span class="token macro property"><span class="token directive-hash">#</span><span class="token directive keyword">include</span> <span class="token string">&lt;bits/stdc++.h></span></span></pre></td></tr><tr><td data-num="2"></td><td><pre></pre></td></tr><tr><td data-num="3"></td><td><pre><span class="token keyword">using</span> <span class="token keyword">namespace</span> std<span class="token punctuation">;</span></pre></td></tr><tr><td data-num="4"></td><td><pre></pre></td></tr><tr><td data-num="5"></td><td><pre><span class="token keyword">int</span> <span class="token function">main</span> <span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span></pre></td></tr><tr><td data-num="6"></td><td><pre>    <span class="token keyword">int</span> T<span class="token punctuation">;</span> cin <span class="token operator">>></span> T<span class="token punctuation">;</span></pre></td></tr><tr><td data-num="7"></td><td><pre>    <span class="token keyword">while</span> <span class="token punctuation">(</span>T<span class="token operator">--</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span></pre></td></tr><tr><td data-num="8"></td><td><pre>        <span class="token keyword">int</span> n<span class="token punctuation">;</span> cin <span class="token operator">>></span> n<span class="token punctuation">;</span></pre></td></tr><tr><td data-num="9"></td><td><pre>        vector<span class="token operator">&lt;</span>pair<span class="token operator">&lt;</span>string<span class="token punctuation">,</span> vector<span class="token operator">&lt;</span><span class="token keyword">char</span><span class="token operator">>></span><span class="token operator">></span> vocab<span class="token punctuation">;</span></pre></td></tr><tr><td data-num="10"></td><td><pre>        string str<span class="token punctuation">;</span></pre></td></tr><tr><td data-num="11"></td><td><pre>        vector<span class="token operator">&lt;</span><span class="token keyword">char</span><span class="token operator">></span> tmp<span class="token punctuation">;</span></pre></td></tr><tr><td data-num="12"></td><td><pre>        <span class="token keyword">for</span> <span class="token punctuation">(</span><span class="token keyword">int</span> i<span class="token operator">=</span><span class="token number">0</span><span class="token punctuation">;</span> i<span class="token operator">&lt;</span>n<span class="token punctuation">;</span> i<span class="token operator">++</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span></pre></td></tr><tr><td data-num="13"></td><td><pre>            cin <span class="token operator">>></span> str<span class="token punctuation">;</span></pre></td></tr><tr><td data-num="14"></td><td><pre>            tmp<span class="token punctuation">.</span><span class="token function">clear</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span></pre></td></tr><tr><td data-num="15"></td><td><pre>            <span class="token keyword">for</span> <span class="token punctuation">(</span><span class="token keyword">char</span> c <span class="token operator">:</span> str<span class="token punctuation">)</span> tmp<span class="token punctuation">.</span><span class="token function">push_back</span><span class="token punctuation">(</span>c<span class="token punctuation">)</span><span class="token punctuation">;</span></pre></td></tr><tr><td data-num="16"></td><td><pre>            <span class="token function">sort</span><span class="token punctuation">(</span>tmp<span class="token punctuation">.</span><span class="token function">begin</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">,</span> tmp<span class="token punctuation">.</span><span class="token function">end</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span></pre></td></tr><tr><td data-num="17"></td><td><pre>            vocab<span class="token punctuation">.</span><span class="token function">push_back</span><span class="token punctuation">(</span><span class="token function">make_pair</span><span class="token punctuation">(</span>str<span class="token punctuation">,</span> tmp<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span></pre></td></tr><tr><td data-num="18"></td><td><pre>        <span class="token punctuation">&#125;</span></pre></td></tr><tr><td data-num="19"></td><td><pre></pre></td></tr><tr><td data-num="20"></td><td><pre>        <span class="token keyword">while</span> <span class="token punctuation">(</span>cin <span class="token operator">>></span> str<span class="token punctuation">)</span> <span class="token punctuation">&#123;</span></pre></td></tr><tr><td data-num="21"></td><td><pre>            <span class="token keyword">if</span> <span class="token punctuation">(</span>str <span class="token operator">==</span> <span class="token string">"END"</span><span class="token punctuation">)</span> <span class="token keyword">break</span><span class="token punctuation">;</span></pre></td></tr><tr><td data-num="22"></td><td><pre>            vector<span class="token operator">&lt;</span><span class="token keyword">char</span><span class="token operator">></span> v<span class="token punctuation">;</span></pre></td></tr><tr><td data-num="23"></td><td><pre>            v<span class="token punctuation">.</span><span class="token function">clear</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>  </pre></td></tr><tr><td data-num="24"></td><td><pre>            <span class="token keyword">for</span> <span class="token punctuation">(</span><span class="token keyword">char</span> c <span class="token operator">:</span> str<span class="token punctuation">)</span> v<span class="token punctuation">.</span><span class="token function">push_back</span><span class="token punctuation">(</span>c<span class="token punctuation">)</span><span class="token punctuation">;</span></pre></td></tr><tr><td data-num="25"></td><td><pre>            <span class="token function">sort</span><span class="token punctuation">(</span>v<span class="token punctuation">.</span><span class="token function">begin</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">,</span> v<span class="token punctuation">.</span><span class="token function">end</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span></pre></td></tr><tr><td data-num="26"></td><td><pre>            <span class="token keyword">bool</span> hasAnagram <span class="token operator">=</span> <span class="token boolean">false</span><span class="token punctuation">;</span></pre></td></tr><tr><td data-num="27"></td><td><pre>            <span class="token keyword">int</span> cnt <span class="token operator">=</span> <span class="token number">1</span><span class="token punctuation">;</span></pre></td></tr><tr><td data-num="28"></td><td><pre>            cout <span class="token operator">&lt;&lt;</span> <span class="token string">"Anagrams for: "</span> <span class="token operator">&lt;&lt;</span> str <span class="token operator">&lt;&lt;</span> <span class="token string">"\n"</span><span class="token punctuation">;</span></pre></td></tr><tr><td data-num="29"></td><td><pre>            <span class="token keyword">for</span> <span class="token punctuation">(</span><span class="token keyword">auto</span> p <span class="token operator">:</span> vocab<span class="token punctuation">)</span> <span class="token punctuation">&#123;</span></pre></td></tr><tr><td data-num="30"></td><td><pre>                <span class="token keyword">if</span> <span class="token punctuation">(</span>p<span class="token punctuation">.</span>second <span class="token operator">==</span> v<span class="token punctuation">)</span> <span class="token punctuation">&#123;</span></pre></td></tr><tr><td data-num="31"></td><td><pre>                    cout <span class="token operator">&lt;&lt;</span> <span class="token string">"  "</span> <span class="token operator">&lt;&lt;</span> cnt<span class="token operator">++</span> <span class="token operator">&lt;&lt;</span><span class="token string">") "</span> <span class="token operator">&lt;&lt;</span> p<span class="token punctuation">.</span>first <span class="token operator">&lt;&lt;</span> <span class="token string">"\n"</span><span class="token punctuation">;</span></pre></td></tr><tr><td data-num="32"></td><td><pre>                    hasAnagram <span class="token operator">=</span> <span class="token boolean">true</span><span class="token punctuation">;</span> </pre></td></tr><tr><td data-num="33"></td><td><pre>                <span class="token punctuation">&#125;</span></pre></td></tr><tr><td data-num="34"></td><td><pre>            <span class="token punctuation">&#125;</span></pre></td></tr><tr><td data-num="35"></td><td><pre>            <span class="token keyword">if</span> <span class="token punctuation">(</span><span class="token operator">!</span>hasAnagram<span class="token punctuation">)</span> cout <span class="token operator">&lt;&lt;</span> <span class="token string">"No anagrams for: "</span> <span class="token operator">&lt;&lt;</span> str <span class="token operator">&lt;&lt;</span> <span class="token string">"\n"</span><span class="token punctuation">;</span></pre></td></tr><tr><td data-num="36"></td><td><pre>        <span class="token punctuation">&#125;</span></pre></td></tr><tr><td data-num="37"></td><td><pre>        <span class="token keyword">if</span> <span class="token punctuation">(</span>T <span class="token operator">!=</span> <span class="token number">0</span><span class="token punctuation">)</span> cout <span class="token operator">&lt;&lt;</span> <span class="token string">"\n"</span><span class="token punctuation">;</span></pre></td></tr><tr><td data-num="38"></td><td><pre>    <span class="token punctuation">&#125;</span></pre></td></tr><tr><td data-num="39"></td><td><pre>    <span class="token keyword">return</span> <span class="token number">0</span><span class="token punctuation">;</span></pre></td></tr><tr><td data-num="40"></td><td><pre><span class="token punctuation">&#125;</span></pre></td></tr></table></figure><h2 id="註解"><a class="anchor" href="#註解">#</a> 註解</h2><ol><li><a href="#%E9%A1%8C%E7%9B%AE%E6%95%98%E8%BF%B0">crossword <em>n. 縱橫填字遊戲</em></a></li></ol><blockquote><p>A game in which you write words that are the answers to questions in a pattern of black and white squares.<br><strong>ex.</strong> <em>I do the Times crossword every morning.</em></p></blockquote><ol start="2"><li><a href="#%E9%A1%8C%E7%9B%AE%E6%95%98%E8%BF%B0">amateurs</a></li></ol><blockquote><ul><li><em>adj. 業餘愛好的，非職業的</em><br> Taking part in an activity for pleasure, not as a job.<br><strong>ex.</strong> <em>He was an amateur singer until the age of 40, when he turned professional.</em></li><li><em>n. 外行；粗通（某一行）的人</em><br> Someone who does not have much skill in what they do.<br><strong>ex.</strong> <em>I won’t be giving them any more work - they’re a bunch of amateurs.</em></li></ul></blockquote><ol start="3"><li><a href="#%E9%A1%8C%E7%9B%AE%E6%95%98%E8%BF%B0">riddle</a></li></ol><blockquote><ul><li><em>n. 謎；謎語</em><br> A type of question that describes something in a difficult and confusing way and has a clever or funny answer, often asked as a game.</li><li><em>n. 奧秘；費解之事</em><br> Something that is confusing, or a problem that is difficult to solve.<br><strong>ex.</strong> <em>Scientists may have solved the riddle of Saturn’s rings.</em></li><li><em>v. 使布滿洞孔</em><br> To make a lot of holes in something.<br><strong>ex.</strong> <em>The anti-aircraft guns riddled the plane’s wings with bullets.</em></li></ul></blockquote><ol start="4"><li><a href="#%E9%A1%8C%E7%9B%AE%E6%95%98%E8%BF%B0">tediously <em>adv. 單調乏味地，無趣地</em></a></li></ol><blockquote><p>In a boring way that continues for a long time.<br><strong>ex.</strong> <em>Many people work tediously at a boring job for many years.</em></p></blockquote><ol start="5"><li><a href="#input">anagram <em>n. 相同字母異序詞</em></a></li></ol><blockquote><p>A word or phrase made by using the letters of another word or phrase in a different order<br><strong>ex.</strong> <em>“Neat” is an anagram of “a net”.</em></p></blockquote>]]></content>
      
      
      <categories>
          
          <category> Coding </category>
          
          <category> UVA </category>
          
          <category> Star1 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> Star1 </tag>
            
            <tag> CPE </tag>
            
            <tag> UVA </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>C++ - vector</title>
      <link href="/2023/04/21/programming/CPP/cpp%20vector/"/>
      <url>/2023/04/21/programming/CPP/cpp%20vector/</url>
      
        <content type="html"><![CDATA[<p>C++ vector 是一個可以改變陣列大小的序列容器。C++ vector 是陣列的升級版，主要因為 vector 能高效地對記憶體進行管理以及動態增長。vector 其實就是將陣列和方法封裝形成的一個類別。</p><p>C++ 要使用 vector 容器的話，<strong>需要引入的標頭檔： <code>&lt;vector&gt;</code> </strong></p><h2 id="vector-初始化"><a class="anchor" href="#vector-初始化">#</a> vector 初始化</h2><p>這樣是宣告一個 int 整數類型的 vector，裡面沒有任何元素 (空)，size 為 0 表示 vector 容器中沒有任何元素，capacity 也是 0。</p><figure class="highlight cpp"><figcaption data-lang="C++"></figcaption><table><tr><td data-num="1"></td><td><pre><span class="token macro property"><span class="token directive-hash">#</span><span class="token directive keyword">include</span> <span class="token string">&lt;vector></span></span></pre></td></tr><tr class="marked"><td data-num="2"></td><td><pre>vector<span class="token operator">&lt;</span><span class="token keyword">int</span><span class="token operator">></span> v<span class="token punctuation">;</span></pre></td></tr></table></figure><h3 id="push_back"><a class="anchor" href="#push_back">#</a> push_back()</h3><p>先宣告一個空的 vector，再透過  <code>push_back()</code>  將資料一直推進去。</p><figure class="highlight cpp"><figcaption data-lang="C++"></figcaption><table><tr><td data-num="1"></td><td><pre>vector<span class="token operator">&lt;</span><span class="token keyword">int</span><span class="token operator">></span> v<span class="token punctuation">;</span></pre></td></tr><tr class="marked"><td data-num="2"></td><td><pre>v<span class="token punctuation">.</span><span class="token function">push_back</span><span class="token punctuation">(</span><span class="token number">1</span><span class="token punctuation">)</span><span class="token punctuation">;</span></pre></td></tr><tr class="marked"><td data-num="3"></td><td><pre>v<span class="token punctuation">.</span><span class="token function">push_back</span><span class="token punctuation">(</span><span class="token number">2</span><span class="token punctuation">)</span><span class="token punctuation">;</span></pre></td></tr></table></figure><p>也可以寫成一行，但這語法需要<strong>編譯器 C++11</strong> 支援。</p><figure class="highlight cpp"><figcaption data-lang="C++"></figcaption><table><tr><td data-num="1"></td><td><pre>vector<span class="token operator">&lt;</span><span class="token keyword">int</span><span class="token operator">></span> v <span class="token operator">=</span> <span class="token punctuation">&#123;</span><span class="token number">1</span><span class="token punctuation">,</span> <span class="token number">2</span><span class="token punctuation">,</span> <span class="token number">3</span><span class="token punctuation">&#125;</span><span class="token punctuation">;</span></pre></td></tr><tr><td data-num="2"></td><td><pre><span class="token comment">// or</span></pre></td></tr><tr><td data-num="3"></td><td><pre>vector<span class="token operator">&lt;</span><span class="token keyword">int</span><span class="token operator">></span> <span class="token function">v</span><span class="token punctuation">(</span><span class="token punctuation">&#123;</span><span class="token number">1</span><span class="token punctuation">,</span> <span class="token number">2</span><span class="token punctuation">,</span> <span class="token number">3</span><span class="token punctuation">&#125;</span><span class="token punctuation">)</span><span class="token punctuation">;</span></pre></td></tr></table></figure><h3 id="複製容器"><a class="anchor" href="#複製容器">#</a> 複製容器</h3><p>假如要從另外一個 vector 容器複製資料過來當作初始值的話可以這樣寫。</p><figure class="highlight cpp"><figcaption data-lang="C++"></figcaption><table><tr><td data-num="1"></td><td><pre>vector<span class="token operator">&lt;</span><span class="token keyword">int</span><span class="token operator">></span> v1 <span class="token operator">=</span> <span class="token punctuation">&#123;</span><span class="token number">1</span><span class="token punctuation">,</span> <span class="token number">2</span><span class="token punctuation">,</span> <span class="token number">3</span><span class="token punctuation">&#125;</span><span class="token punctuation">;</span></pre></td></tr><tr class="marked"><td data-num="2"></td><td><pre>vector<span class="token operator">&lt;</span><span class="token keyword">int</span><span class="token operator">></span> v2 <span class="token operator">=</span> v1<span class="token punctuation">;</span></pre></td></tr><tr><td data-num="3"></td><td><pre><span class="token comment">// or</span></pre></td></tr><tr><td data-num="4"></td><td><pre>vector<span class="token operator">&lt;</span><span class="token keyword">int</span><span class="token operator">></span> v1 <span class="token operator">=</span> <span class="token punctuation">&#123;</span><span class="token number">1</span><span class="token punctuation">,</span> <span class="token number">2</span><span class="token punctuation">,</span> <span class="token number">3</span><span class="token punctuation">&#125;</span><span class="token punctuation">;</span></pre></td></tr><tr class="marked"><td data-num="5"></td><td><pre>vector<span class="token operator">&lt;</span><span class="token keyword">int</span><span class="token operator">></span> <span class="token function">v2</span><span class="token punctuation">(</span>v1<span class="token punctuation">)</span><span class="token punctuation">;</span></pre></td></tr></table></figure><p>也可以從傳統陣列裡複製過來當作初始值。</p><figure class="highlight cpp"><figcaption data-lang="C++"></figcaption><table><tr><td data-num="1"></td><td><pre><span class="token keyword">int</span> n<span class="token punctuation">[</span><span class="token number">3</span><span class="token punctuation">]</span> <span class="token operator">=</span> <span class="token punctuation">&#123;</span><span class="token number">1</span><span class="token punctuation">,</span> <span class="token number">2</span><span class="token punctuation">,</span> <span class="token number">3</span><span class="token punctuation">&#125;</span><span class="token punctuation">;</span></pre></td></tr><tr class="marked"><td data-num="2"></td><td><pre>vector<span class="token operator">&lt;</span><span class="token keyword">int</span><span class="token operator">></span> <span class="token function">v</span><span class="token punctuation">(</span>n<span class="token punctuation">,</span> n<span class="token operator">+</span><span class="token number">3</span><span class="token punctuation">)</span><span class="token punctuation">;</span></pre></td></tr></table></figure><p>不想複製來源 vector 全部的資料，想要指定複製 vector 的範圍的話也可以，例如我要複製 v1 vector 的第三個元素到倒數第二個元素。</p><figure class="highlight cpp"><figcaption data-lang="C++"></figcaption><table><tr><td data-num="1"></td><td><pre>vector<span class="token operator">&lt;</span><span class="token keyword">int</span><span class="token operator">></span> v1 <span class="token operator">=</span> <span class="token punctuation">&#123;</span><span class="token number">1</span><span class="token punctuation">,</span> <span class="token number">2</span><span class="token punctuation">,</span> <span class="token number">3</span><span class="token punctuation">,</span> <span class="token number">4</span><span class="token punctuation">,</span> <span class="token number">5</span><span class="token punctuation">&#125;</span><span class="token punctuation">;</span></pre></td></tr><tr class="marked"><td data-num="2"></td><td><pre>vector<span class="token operator">&lt;</span><span class="token keyword">int</span><span class="token operator">></span> <span class="token function">v2</span><span class="token punctuation">(</span>v1<span class="token punctuation">.</span><span class="token function">begin</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">+</span> <span class="token number">2</span><span class="token punctuation">,</span> v1<span class="token punctuation">.</span><span class="token function">end</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">-</span> <span class="token number">1</span><span class="token punctuation">)</span><span class="token punctuation">;</span></pre></td></tr></table></figure><p>如果是指定複製傳統陣列的範圍的話，可以這樣寫。</p><figure class="highlight cpp"><figcaption data-lang="C++"></figcaption><table><tr><td data-num="1"></td><td><pre><span class="token keyword">int</span> n<span class="token punctuation">[</span><span class="token number">5</span><span class="token punctuation">]</span> <span class="token operator">=</span> <span class="token punctuation">&#123;</span><span class="token number">1</span><span class="token punctuation">,</span> <span class="token number">2</span><span class="token punctuation">,</span> <span class="token number">3</span><span class="token punctuation">,</span> <span class="token number">4</span><span class="token punctuation">,</span> <span class="token number">5</span><span class="token punctuation">&#125;</span><span class="token punctuation">;</span></pre></td></tr><tr class="marked"><td data-num="2"></td><td><pre>vector<span class="token operator">&lt;</span><span class="token keyword">int</span><span class="token operator">></span> <span class="token function">v</span><span class="token punctuation">(</span>n <span class="token operator">+</span> <span class="token number">2</span><span class="token punctuation">,</span> n <span class="token operator">+</span> <span class="token number">4</span><span class="token punctuation">)</span><span class="token punctuation">;</span></pre></td></tr></table></figure><h2 id="存取-vector-元素"><a class="anchor" href="#存取-vector-元素">#</a> 存取 vector 元素</h2><p>vector 用  <code>[]</code>  來隨機存取元素，第一個元素為  <code>v[0]</code> ，索引值是  <code>0</code> ，第二個元素為  <code>v[1]</code> ，索引值是  <code>1</code> ，依此類推， <code>[]</code>  <strong>不只可以讀取元素也可以用來修改元素</strong>。</p><figure class="highlight cpp"><figcaption data-lang="C++"></figcaption><table><tr><td data-num="1"></td><td><pre>vector<span class="token operator">&lt;</span><span class="token keyword">int</span><span class="token operator">></span> v <span class="token operator">=</span> <span class="token punctuation">&#123;</span><span class="token number">1</span><span class="token punctuation">,</span> <span class="token number">2</span><span class="token punctuation">,</span> <span class="token number">3</span><span class="token punctuation">&#125;</span><span class="token punctuation">;</span></pre></td></tr><tr><td data-num="2"></td><td><pre>cout <span class="token operator">&lt;&lt;</span> <span class="token string">"v[0] = "</span> <span class="token operator">&lt;&lt;</span> v<span class="token punctuation">[</span><span class="token number">0</span><span class="token punctuation">]</span> <span class="token operator">&lt;&lt;</span> endl<span class="token punctuation">;</span></pre></td></tr><tr class="marked"><td data-num="3"></td><td><pre>v<span class="token punctuation">[</span><span class="token number">0</span><span class="token punctuation">]</span> <span class="token operator">=</span> <span class="token number">4</span><span class="token punctuation">;</span></pre></td></tr><tr><td data-num="4"></td><td><pre>cout <span class="token operator">&lt;&lt;</span> <span class="token string">"v[0] = "</span> <span class="token operator">&lt;&lt;</span> v<span class="token punctuation">[</span><span class="token number">0</span><span class="token punctuation">]</span> <span class="token operator">&lt;&lt;</span> endl<span class="token punctuation">;</span></pre></td></tr></table></figure><blockquote><p>v[0] = 1<br>v[0] = 4</p></blockquote><h2 id="在-vector-尾巴新增元素"><a class="anchor" href="#在-vector-尾巴新增元素">#</a> 在 vector 尾巴新增元素</h2><p>要在 vector 尾巴新增元素，要使用前面提到的  <code>push_back()</code> ，它會把元素加在 vector 的尾巴。</p><figure class="highlight cpp"><figcaption data-lang="C++"></figcaption><table><tr><td data-num="1"></td><td><pre>vector<span class="token operator">&lt;</span><span class="token keyword">int</span><span class="token operator">></span> v<span class="token punctuation">;</span></pre></td></tr><tr class="marked"><td data-num="2"></td><td><pre>v<span class="token punctuation">.</span><span class="token function">push_back</span><span class="token punctuation">(</span><span class="token number">0</span><span class="token punctuation">)</span><span class="token punctuation">;</span></pre></td></tr></table></figure><h2 id="在-vector-尾巴移除元素"><a class="anchor" href="#在-vector-尾巴移除元素">#</a> 在 vector 尾巴移除元素</h2><p>移除 vector 容器尾巴的元素用  <code>pop_back()</code> ，<strong>一次只能從尾端移除一個元素，不能指定移除的數量</strong>。</p><figure class="highlight cpp"><figcaption data-lang="C++"></figcaption><table><tr><td data-num="1"></td><td><pre>vector<span class="token operator">&lt;</span><span class="token keyword">int</span><span class="token operator">></span> v <span class="token operator">=</span> <span class="token punctuation">&#123;</span><span class="token number">1</span><span class="token punctuation">,</span> <span class="token number">2</span><span class="token punctuation">,</span> <span class="token number">3</span><span class="token punctuation">&#125;</span><span class="token punctuation">;</span></pre></td></tr><tr class="marked"><td data-num="2"></td><td><pre>v<span class="token punctuation">.</span><span class="token function">pop_back</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment">// [1, 2]</span></pre></td></tr></table></figure><h2 id="迴圈遍歷-vector"><a class="anchor" href="#迴圈遍歷-vector">#</a> 迴圈遍歷 vector</h2><p>第一種是常見的用法，</p><figure class="highlight cpp"><figcaption data-lang="C++"></figcaption><table><tr><td data-num="1"></td><td><pre>vector<span class="token operator">&lt;</span><span class="token keyword">int</span><span class="token operator">></span> vec <span class="token operator">=</span> <span class="token punctuation">&#123;</span><span class="token number">1</span><span class="token punctuation">,</span> <span class="token number">2</span><span class="token punctuation">,</span> <span class="token number">3</span><span class="token punctuation">&#125;</span><span class="token punctuation">;</span></pre></td></tr><tr class="marked"><td data-num="2"></td><td><pre><span class="token keyword">for</span> <span class="token punctuation">(</span><span class="token keyword">int</span> i<span class="token operator">=</span><span class="token number">0</span><span class="token punctuation">;</span> i<span class="token operator">&lt;</span>vec<span class="token punctuation">.</span><span class="token function">size</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span> i<span class="token operator">++</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span></pre></td></tr><tr><td data-num="3"></td><td><pre>    cout <span class="token operator">&lt;&lt;</span> vec<span class="token punctuation">[</span>i<span class="token punctuation">]</span> <span class="token operator">&lt;&lt;</span> <span class="token char">' '</span><span class="token punctuation">;</span></pre></td></tr><tr><td data-num="4"></td><td><pre><span class="token punctuation">&#125;</span></pre></td></tr></table></figure><blockquote><p>1 2 3</p></blockquote><p>第二種是使用 <strong>iterator 迭代器</strong>來印出 vector 內所有內容，其中  <code>vector&lt;int&gt;::iterator it</code>  可以簡化寫成  <code>auto it</code>  這樣</p><figure class="highlight cpp"><figcaption data-lang="C++"></figcaption><table><tr><td data-num="1"></td><td><pre>vector<span class="token operator">&lt;</span><span class="token keyword">int</span><span class="token operator">></span> vec <span class="token operator">=</span> <span class="token punctuation">&#123;</span><span class="token number">1</span><span class="token punctuation">,</span> <span class="token number">2</span><span class="token punctuation">,</span> <span class="token number">3</span><span class="token punctuation">&#125;</span><span class="token punctuation">;</span></pre></td></tr><tr><td data-num="2"></td><td><pre>vector<span class="token operator">&lt;</span><span class="token keyword">int</span><span class="token operator">></span><span class="token double-colon punctuation">::</span>iterator it<span class="token punctuation">;</span></pre></td></tr><tr class="marked"><td data-num="3"></td><td><pre><span class="token keyword">for</span> <span class="token punctuation">(</span>it <span class="token operator">=</span> vec<span class="token punctuation">.</span><span class="token function">begin</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span> it <span class="token operator">!=</span> vec<span class="token punctuation">.</span><span class="token function">end</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span> it<span class="token operator">++</span><span class="token punctuation">)</span> cout <span class="token operator">&lt;&lt;</span> <span class="token operator">*</span>it <span class="token operator">&lt;&lt;</span> <span class="token char">' '</span><span class="token punctuation">;</span></pre></td></tr><tr><td data-num="4"></td><td><pre><span class="token comment">// or</span></pre></td></tr><tr class="marked"><td data-num="5"></td><td><pre><span class="token keyword">for</span> <span class="token punctuation">(</span><span class="token keyword">auto</span> it <span class="token operator">=</span> vec<span class="token punctuation">.</span><span class="token function">begin</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span> it <span class="token operator">!=</span> vec<span class="token punctuation">.</span><span class="token function">end</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span> it<span class="token operator">++</span><span class="token punctuation">)</span> cout <span class="token operator">&lt;&lt;</span> <span class="token operator">*</span>it <span class="token operator">&lt;&lt;</span> <span class="token char">' '</span><span class="token punctuation">;</span></pre></td></tr></table></figure><p>第三種是個很方便的寫法，c++11 才有支援，適合追求快速 (懶惰) 的人，相較於第一種的優點是不用多寫陣列索引去存取，直接就當變數使用。</p><figure class="highlight cpp"><figcaption data-lang="C++"></figcaption><table><tr><td data-num="1"></td><td><pre>vector<span class="token operator">&lt;</span><span class="token keyword">int</span><span class="token operator">></span> vec <span class="token operator">=</span> <span class="token punctuation">&#123;</span><span class="token number">1</span><span class="token punctuation">,</span> <span class="token number">2</span><span class="token punctuation">,</span> <span class="token number">3</span><span class="token punctuation">&#125;</span><span class="token punctuation">;</span></pre></td></tr><tr class="marked"><td data-num="2"></td><td><pre><span class="token keyword">for</span> <span class="token punctuation">(</span><span class="token keyword">auto</span> <span class="token operator">&amp;</span>v<span class="token operator">:</span> vec<span class="token punctuation">)</span> cout <span class="token operator">&lt;&lt;</span> v <span class="token operator">&lt;&lt;</span> <span class="token char">' '</span><span class="token punctuation">;</span></pre></td></tr></table></figure><h2 id="vector-使用-operator-與-at-的差異"><a class="anchor" href="#vector-使用-operator-與-at-的差異">#</a> vector 使用 [] operator 與 at () 的差異</h2><p>另外 vector 還提供了  <code>at()</code>  這個方法也是可以取得元素，那這兩種方式到底有什麼差別？</p><p><code>[]</code>  operator 在回傳元素時是<strong>不會作任何的邊界檢查</strong>，而在  <code>at()</code>  取得元素時<strong>會作邊界的處理</strong>，如果你存取越界時 vector 會拋出一個  <code>out_of_range</code>  例外，所以  <code>at()</code>  提供了較為安全的存取方式。</p><h2 id="vector-size-與-capacity-的差異"><a class="anchor" href="#vector-size-與-capacity-的差異">#</a> vector size () 與 capacity () 的差異</h2><p>vector 使用  <code>size()</code>  是<strong>取得目前 vector 裡的元素個數</strong>，vector 使用  <code>capacity()</code>  是<strong>取得目前 vector 裡的預先配置的空間大小</strong>，當容量 (capacity) 空間不夠使用時 vector 就會重新申請空間，容量 (capacity) 會增加為原來的 <strong>2 倍</strong>或 <strong>1.5 倍</strong>，例如：1、2、4、8、16、32 增長下去，各個編譯器可能不同。</p><h2 id="reserve-預先配置容器大小"><a class="anchor" href="#reserve-預先配置容器大小">#</a> reserve () 預先配置容器大小</h2><p>vector 使用  <code>reserve()</code>  是預留空間的意思，如果我們一開始就知道容器的裡要放置多少個元素的話，可以透過  <code>reserve()</code>  來預先配置容器大小，這樣可以減少一直配置記憶體的機會。</p><p>觀察看看 size 與 capacity 的變化。</p><figure class="highlight cpp"><figcaption data-lang="C++"></figcaption><table><tr><td data-num="1"></td><td><pre>vector<span class="token operator">&lt;</span><span class="token keyword">int</span><span class="token operator">></span> v<span class="token punctuation">;</span></pre></td></tr><tr><td data-num="2"></td><td><pre>cout <span class="token operator">&lt;&lt;</span> <span class="token string">"size = "</span> <span class="token operator">&lt;&lt;</span> v<span class="token punctuation">.</span><span class="token function">size</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">&lt;&lt;</span> <span class="token string">", capacity = "</span> <span class="token operator">&lt;&lt;</span> v<span class="token punctuation">.</span><span class="token function">capacity</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">&lt;&lt;</span> <span class="token string">"\n"</span><span class="token punctuation">;</span></pre></td></tr><tr class="marked"><td data-num="3"></td><td><pre>v<span class="token punctuation">.</span><span class="token function">reserve</span><span class="token punctuation">(</span><span class="token number">5</span><span class="token punctuation">)</span><span class="token punctuation">;</span></pre></td></tr><tr><td data-num="4"></td><td><pre>cout <span class="token operator">&lt;&lt;</span> <span class="token string">"size = "</span> <span class="token operator">&lt;&lt;</span> v<span class="token punctuation">.</span><span class="token function">size</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">&lt;&lt;</span> <span class="token string">", capacity = "</span> <span class="token operator">&lt;&lt;</span> v<span class="token punctuation">.</span><span class="token function">capacity</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">&lt;&lt;</span> <span class="token string">"\n"</span><span class="token punctuation">;</span></pre></td></tr><tr><td data-num="5"></td><td><pre>v<span class="token punctuation">.</span><span class="token function">push_back</span><span class="token punctuation">(</span><span class="token number">1</span><span class="token punctuation">)</span><span class="token punctuation">;</span></pre></td></tr><tr><td data-num="6"></td><td><pre>v<span class="token punctuation">.</span><span class="token function">push_back</span><span class="token punctuation">(</span><span class="token number">2</span><span class="token punctuation">)</span><span class="token punctuation">;</span></pre></td></tr><tr><td data-num="7"></td><td><pre>cout <span class="token operator">&lt;&lt;</span> <span class="token string">"size = "</span> <span class="token operator">&lt;&lt;</span> v<span class="token punctuation">.</span><span class="token function">size</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">&lt;&lt;</span> <span class="token string">", capacity = "</span> <span class="token operator">&lt;&lt;</span> v<span class="token punctuation">.</span><span class="token function">capacity</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">&lt;&lt;</span> <span class="token string">"\n"</span><span class="token punctuation">;</span></pre></td></tr></table></figure><blockquote><p>size = 0, capacity = 0<br>size = 0, capacity = 5<br>size = 2, capacity = 5</p></blockquote><h2 id="shrink_to_fit-收縮的用法"><a class="anchor" href="#shrink_to_fit-收縮的用法">#</a> shrink_to_fit () 收縮的用法</h2><p>呈上述 reserve 例子，這時 vector 再使用  <code>shrink_to_fit()</code>  成員函式的話，會<strong>釋放（free）那些尚未使用的空間</strong>，</p><figure class="highlight cpp"><figcaption data-lang="C++"></figcaption><table><tr><td data-num="1"></td><td><pre>vector<span class="token operator">&lt;</span><span class="token keyword">int</span><span class="token operator">></span> v<span class="token punctuation">;</span></pre></td></tr><tr><td data-num="2"></td><td><pre>v<span class="token punctuation">.</span><span class="token function">reserve</span><span class="token punctuation">(</span><span class="token number">5</span><span class="token punctuation">)</span><span class="token punctuation">;</span></pre></td></tr><tr><td data-num="3"></td><td><pre>cout <span class="token operator">&lt;&lt;</span> <span class="token string">"size = "</span> <span class="token operator">&lt;&lt;</span> v<span class="token punctuation">.</span><span class="token function">size</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">&lt;&lt;</span> <span class="token string">", capacity = "</span> <span class="token operator">&lt;&lt;</span> v<span class="token punctuation">.</span><span class="token function">capacity</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">&lt;&lt;</span> <span class="token string">"\n"</span><span class="token punctuation">;</span></pre></td></tr><tr><td data-num="4"></td><td><pre>v<span class="token punctuation">.</span><span class="token function">push_back</span><span class="token punctuation">(</span><span class="token number">1</span><span class="token punctuation">)</span><span class="token punctuation">;</span></pre></td></tr><tr><td data-num="5"></td><td><pre>v<span class="token punctuation">.</span><span class="token function">push_back</span><span class="token punctuation">(</span><span class="token number">2</span><span class="token punctuation">)</span><span class="token punctuation">;</span></pre></td></tr><tr><td data-num="6"></td><td><pre>cout <span class="token operator">&lt;&lt;</span> <span class="token string">"size = "</span> <span class="token operator">&lt;&lt;</span> v<span class="token punctuation">.</span><span class="token function">size</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">&lt;&lt;</span> <span class="token string">", capacity = "</span> <span class="token operator">&lt;&lt;</span> v<span class="token punctuation">.</span><span class="token function">capacity</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">&lt;&lt;</span> <span class="token string">"\n"</span><span class="token punctuation">;</span></pre></td></tr><tr class="marked"><td data-num="7"></td><td><pre>v<span class="token punctuation">.</span><span class="token function">shrink_to_fit</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span></pre></td></tr><tr><td data-num="8"></td><td><pre>cout <span class="token operator">&lt;&lt;</span> <span class="token string">"size = "</span> <span class="token operator">&lt;&lt;</span> v<span class="token punctuation">.</span><span class="token function">size</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">&lt;&lt;</span> <span class="token string">", capacity = "</span> <span class="token operator">&lt;&lt;</span> v<span class="token punctuation">.</span><span class="token function">capacity</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">&lt;&lt;</span> <span class="token string">"\n"</span><span class="token punctuation">;</span></pre></td></tr></table></figure><blockquote><p>size = 0, capacity = 5<br>size = 2, capacity = 5<br>size = 2, capacity = 2</p></blockquote><p>如果  <code>size()</code>  剛好等於  <code>capacity()</code>  的話，那麼使用  <code>shrink_to_fit()</code>  則不會有空間被釋放。</p><h2 id="resize"><a class="anchor" href="#resize">#</a> resize()</h2><p>vector 使用  <code>resize()</code>  跟  <code>reserve()</code>  不太一樣，resize 變大時會把<strong>多的元素補 0</strong>。</p><figure class="highlight cpp"><figcaption data-lang="C++"></figcaption><table><tr><td data-num="1"></td><td><pre>vector<span class="token operator">&lt;</span><span class="token keyword">int</span><span class="token operator">></span> v<span class="token punctuation">;</span></pre></td></tr><tr class="marked"><td data-num="2"></td><td><pre>v<span class="token punctuation">.</span><span class="token function">resize</span><span class="token punctuation">(</span><span class="token number">5</span><span class="token punctuation">)</span><span class="token punctuation">;</span></pre></td></tr><tr><td data-num="3"></td><td><pre>cout <span class="token operator">&lt;&lt;</span> <span class="token string">"size ="</span> <span class="token operator">&lt;&lt;</span> v<span class="token punctuation">.</span><span class="token function">size</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">&lt;&lt;</span> <span class="token string">", capacity ="</span> <span class="token operator">&lt;&lt;</span> v<span class="token punctuation">.</span><span class="token function">capacity</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">&lt;&lt;</span> <span class="token string">"\n"</span><span class="token punctuation">;</span></pre></td></tr><tr><td data-num="4"></td><td><pre><span class="token keyword">for</span> <span class="token punctuation">(</span><span class="token keyword">int</span> i <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span> i <span class="token operator">&lt;</span> v<span class="token punctuation">.</span><span class="token function">size</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span> i<span class="token operator">++</span><span class="token punctuation">)</span> cout <span class="token operator">&lt;&lt;</span> v<span class="token punctuation">[</span>i<span class="token punctuation">]</span> <span class="token operator">&lt;&lt;</span> <span class="token string">" "</span><span class="token punctuation">;</span></pre></td></tr></table></figure><blockquote><p>size = 5, capacity = 5<br>0 0 0 0 0</p></blockquote><p>resize 如果要順便<strong>指定元素初始值</strong>的話，可以將初始值帶入 resize () 的第二個引數。</p><figure class="highlight cpp"><figcaption data-lang="C++"></figcaption><table><tr><td data-num="1"></td><td><pre>vector<span class="token operator">&lt;</span><span class="token keyword">int</span><span class="token operator">></span> v<span class="token punctuation">;</span></pre></td></tr><tr class="marked"><td data-num="2"></td><td><pre>v<span class="token punctuation">.</span><span class="token function">resize</span><span class="token punctuation">(</span><span class="token number">5</span><span class="token punctuation">,</span> <span class="token number">10</span><span class="token punctuation">)</span><span class="token punctuation">;</span></pre></td></tr><tr><td data-num="3"></td><td><pre>cout <span class="token operator">&lt;&lt;</span> <span class="token string">"size ="</span> <span class="token operator">&lt;&lt;</span> v<span class="token punctuation">.</span><span class="token function">size</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">&lt;&lt;</span> <span class="token string">", capacity ="</span> <span class="token operator">&lt;&lt;</span> v<span class="token punctuation">.</span><span class="token function">capacity</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">&lt;&lt;</span> <span class="token string">"\n"</span><span class="token punctuation">;</span></pre></td></tr><tr><td data-num="4"></td><td><pre><span class="token keyword">for</span> <span class="token punctuation">(</span><span class="token keyword">int</span> i <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span> i <span class="token operator">&lt;</span> v<span class="token punctuation">.</span><span class="token function">size</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span> i<span class="token operator">++</span><span class="token punctuation">)</span> cout <span class="token operator">&lt;&lt;</span> v<span class="token punctuation">[</span>i<span class="token punctuation">]</span> <span class="token operator">&lt;&lt;</span> <span class="token string">" "</span><span class="token punctuation">;</span></pre></td></tr></table></figure><blockquote><p>size = 5, capacity = 5<br>10 10 10 10 10</p></blockquote><p>如果 resize 的大小超過 capacity 容量大小會怎麼樣呢？</p><figure class="highlight cpp"><figcaption data-lang="C++"><span>merk:3</span></figcaption><table><tr><td data-num="1"></td><td><pre>vector<span class="token operator">&lt;</span><span class="token keyword">int</span><span class="token operator">></span> v <span class="token operator">=</span> <span class="token punctuation">&#123;</span><span class="token number">1</span><span class="token punctuation">,</span> <span class="token number">2</span><span class="token punctuation">,</span> <span class="token number">3</span><span class="token punctuation">&#125;</span><span class="token punctuation">;</span></pre></td></tr><tr><td data-num="2"></td><td><pre>cout <span class="token operator">&lt;&lt;</span> <span class="token string">"size ="</span> <span class="token operator">&lt;&lt;</span> v<span class="token punctuation">.</span><span class="token function">size</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">&lt;&lt;</span> <span class="token string">", capacity ="</span> <span class="token operator">&lt;&lt;</span> v<span class="token punctuation">.</span><span class="token function">capacity</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">&lt;&lt;</span> <span class="token string">"\n"</span><span class="token punctuation">;</span></pre></td></tr><tr><td data-num="3"></td><td><pre>v<span class="token punctuation">.</span><span class="token function">resize</span><span class="token punctuation">(</span><span class="token number">5</span><span class="token punctuation">)</span><span class="token punctuation">;</span></pre></td></tr><tr><td data-num="4"></td><td><pre>cout <span class="token operator">&lt;&lt;</span> <span class="token string">"size ="</span> <span class="token operator">&lt;&lt;</span> v<span class="token punctuation">.</span><span class="token function">size</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">&lt;&lt;</span> <span class="token string">", capacity ="</span> <span class="token operator">&lt;&lt;</span> v<span class="token punctuation">.</span><span class="token function">capacity</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">&lt;&lt;</span> <span class="token string">"\n"</span><span class="token punctuation">;</span></pre></td></tr><tr><td data-num="5"></td><td><pre><span class="token keyword">for</span> <span class="token punctuation">(</span><span class="token keyword">int</span> i <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span> i <span class="token operator">&lt;</span> v<span class="token punctuation">.</span><span class="token function">size</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span> i<span class="token operator">++</span><span class="token punctuation">)</span> cout <span class="token operator">&lt;&lt;</span> v<span class="token punctuation">[</span>i<span class="token punctuation">]</span> <span class="token operator">&lt;&lt;</span> <span class="token string">" "</span><span class="token punctuation">;</span></pre></td></tr></table></figure><p>輸出如下，原本的  <code>1, 2, 3</code>  元素有保留以外，剩下新增的元素補  <code>0</code> 。</p><blockquote><p>size = 3, capacity = 3<br>size = 5, capacity = 6<br>1 2 3 0 0</p></blockquote><h2 id="vector-的優缺點"><a class="anchor" href="#vector-的優缺點">#</a> vector 的優缺點</h2><h3 id="優點"><a class="anchor" href="#優點">#</a> 優點</h3><ul><li>宣告時可以不用確定大小</li><li>節省空間</li><li>支持隨機訪問  <code>[i]</code></li></ul><h3 id="缺點"><a class="anchor" href="#缺點">#</a> 缺點</h3><ul><li>進行插入刪除時效率低</li><li>只能在末端進行 pop 和 push</li></ul><h2 id="參考資料"><a class="anchor" href="#參考資料">#</a> 參考資料</h2><ul><li><span class="exturl" data-url="aHR0cHM6Ly9zaGVuZ3l1NzY5Ny5naXRodWIuaW8vc3RkLXZlY3Rvci8=">https://shengyu7697.github.io/std-vector/</span></li></ul>]]></content>
      
      
      <categories>
          
          <category> Programming </category>
          
          <category> C/C++ </category>
          
      </categories>
      
      
        <tags>
            
            <tag> C/C++ </tag>
            
            <tag> vector </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>uva 591 - Box of Bricks</title>
      <link href="/2023/04/21/Coding/uva/Star1/uva%20591/"/>
      <url>/2023/04/21/Coding/uva/Star1/uva%20591/</url>
      
        <content type="html"><![CDATA[<p>⭐️</p><h2 id="題目連結"><a class="anchor" href="#題目連結">#</a> 題目連結</h2><ul><li><span class="exturl" data-url="aHR0cHM6Ly96ZXJvanVkZ2UudHcvU2hvd1Byb2JsZW0/cHJvYmxlbWlkPWMwNjc=">ZeroJudge</span></li><li><span class="exturl" data-url="aHR0cHM6Ly9vbmxpbmVqdWRnZS5vcmcvZXh0ZXJuYWwvNS9wNTkxLnBkZg==">題目連結</span></li><li><span class="exturl" data-url="aHR0cHM6Ly9vbmxpbmVqdWRnZS5vcmcvaW5kZXgucGhwP29wdGlvbj1jb21fb25saW5lanVkZ2UmYW1wO0l0ZW1pZD04JmFtcDtjYXRlZ29yeT03JmFtcDtwYWdlPXNob3dfcHJvYmxlbSZhbXA7cHJvYmxlbT01MzI=">Online Judge</span></li><li><span class="exturl" data-url="aHR0cHM6Ly93d3cudWRlYnVnLmNvbS9VVmEvNTkx">uDebug</span></li></ul><h2 id="題目敘述"><a class="anchor" href="#題目敘述">#</a> 題目敘述</h2><p>Little Bob likes playing with his box of bricks. He puts the bricks one upon another and builds stacks of different height. “Look, I’ve built a wall!”, he tells his older sister Alice. “Nah, you should make all stacks the same height. Then you would have a real wall.”, she <a href="#%E8%A8%BB%E8%A7%A3">retorts<sub>1</sub></a>. After a little consideration, Bob sees that she is right. So he sets out to rearrange the bricks, one by one, such that all stacks are the same height afterwards. But since Bob is lazy he wants to do this with the minimum number of bricks moved. Can you help?</p><p><img data-src="https://i.imgur.com/1NIlkjf.png" alt=""></p><h2 id="input"><a class="anchor" href="#input">#</a> Input</h2><p>The input consists of several data sets. Each set begins with a line containing the number  <code>n</code>  of stacks Bob has built. The next line contains  <code>n</code>  numbers, the heights  <code>hi</code>  of the  <code>n</code>  stacks. You may assume  <code>1 ≤ n ≤ 50</code>  and  <code>1 ≤ hi ≤ 100</code> .</p><p>The total number of bricks will be divisible by the number of stacks. Thus, it is always possible torearrange the bricks such that all stacks have the same height.</p><p>The input is terminated by a set starting with  <code>n = 0</code> . This set should not be processed.</p><h2 id="output"><a class="anchor" href="#output">#</a> Output</h2><p>For each set, first print the number of the set, as shown in the sample output. Then print the line ‘The minimum number of moves is  <code>k</code> .’, where  <code>k</code>  is the minimum number of bricks that have to be moved in order to make all the stacks the same height.</p><p><em>Output a blank line after each set</em>.</p><h2 id="sample-input"><a class="anchor" href="#sample-input">#</a> Sample Input</h2><blockquote><p>6<br>5 2 4 1 7 5<br>0</p></blockquote><h2 id="sample-output"><a class="anchor" href="#sample-output">#</a> Sample Output</h2><blockquote><p>Set #1<br>The minimum number of moves is 5.</p></blockquote><h2 id="解題思路"><a class="anchor" href="#解題思路">#</a> 解題思路</h2><p>算出全部的平均，將大於平均的堆分配給其他小於平均的堆。</p><h2 id="solution"><a class="anchor" href="#solution">#</a> Solution</h2><figure class="highlight cpp"><figcaption data-lang="C++"></figcaption><table><tr><td data-num="1"></td><td><pre><span class="token macro property"><span class="token directive-hash">#</span><span class="token directive keyword">include</span> <span class="token string">&lt;bits/stdc++.h></span></span></pre></td></tr><tr><td data-num="2"></td><td><pre><span class="token keyword">using</span> <span class="token keyword">namespace</span> std<span class="token punctuation">;</span></pre></td></tr><tr><td data-num="3"></td><td><pre></pre></td></tr><tr><td data-num="4"></td><td><pre><span class="token keyword">int</span> <span class="token function">main</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span></pre></td></tr><tr><td data-num="5"></td><td><pre>    <span class="token keyword">int</span> n<span class="token punctuation">,</span> set <span class="token operator">=</span> <span class="token number">1</span><span class="token punctuation">;</span></pre></td></tr><tr><td data-num="6"></td><td><pre>    <span class="token keyword">while</span> <span class="token punctuation">(</span>cin <span class="token operator">>></span> n<span class="token punctuation">)</span> <span class="token punctuation">&#123;</span></pre></td></tr><tr><td data-num="7"></td><td><pre>        <span class="token keyword">if</span> <span class="token punctuation">(</span>n <span class="token operator">==</span> <span class="token number">0</span><span class="token punctuation">)</span> <span class="token keyword">break</span><span class="token punctuation">;</span></pre></td></tr><tr><td data-num="8"></td><td><pre>        vector<span class="token operator">&lt;</span><span class="token keyword">int</span><span class="token operator">></span> <span class="token function">stacks</span><span class="token punctuation">(</span>n<span class="token punctuation">,</span> <span class="token number">0</span><span class="token punctuation">)</span><span class="token punctuation">;</span></pre></td></tr><tr><td data-num="9"></td><td><pre>        <span class="token keyword">for</span> <span class="token punctuation">(</span><span class="token keyword">int</span> i<span class="token operator">=</span><span class="token number">0</span><span class="token punctuation">;</span> i<span class="token operator">&lt;</span>n<span class="token punctuation">;</span> i<span class="token operator">++</span><span class="token punctuation">)</span> cin <span class="token operator">>></span> stacks<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">;</span></pre></td></tr><tr><td data-num="10"></td><td><pre></pre></td></tr><tr><td data-num="11"></td><td><pre>        <span class="token keyword">int</span> sum <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">,</span> res <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span></pre></td></tr><tr><td data-num="12"></td><td><pre>        <span class="token keyword">for</span> <span class="token punctuation">(</span><span class="token keyword">int</span> s <span class="token operator">:</span> stacks<span class="token punctuation">)</span> sum <span class="token operator">+=</span> s<span class="token punctuation">;</span></pre></td></tr><tr><td data-num="13"></td><td><pre>        <span class="token keyword">int</span> avg <span class="token operator">=</span> sum <span class="token operator">/</span> n<span class="token punctuation">;</span></pre></td></tr><tr><td data-num="14"></td><td><pre>        <span class="token keyword">for</span> <span class="token punctuation">(</span><span class="token keyword">int</span> s <span class="token operator">:</span> stacks<span class="token punctuation">)</span> <span class="token punctuation">&#123;</span></pre></td></tr><tr><td data-num="15"></td><td><pre>            <span class="token keyword">if</span> <span class="token punctuation">(</span>s <span class="token operator">></span> avg<span class="token punctuation">)</span> res <span class="token operator">+=</span> s <span class="token operator">-</span> avg<span class="token punctuation">;</span></pre></td></tr><tr><td data-num="16"></td><td><pre>        <span class="token punctuation">&#125;</span></pre></td></tr><tr><td data-num="17"></td><td><pre></pre></td></tr><tr><td data-num="18"></td><td><pre>        cout <span class="token operator">&lt;&lt;</span> <span class="token string">"Set #"</span> <span class="token operator">&lt;&lt;</span> set<span class="token operator">++</span> <span class="token operator">&lt;&lt;</span> <span class="token string">"\n"</span><span class="token punctuation">;</span></pre></td></tr><tr><td data-num="19"></td><td><pre>        cout <span class="token operator">&lt;&lt;</span> <span class="token string">"The minimum number of moves is "</span> <span class="token operator">&lt;&lt;</span> res <span class="token operator">&lt;&lt;</span> <span class="token string">".\n"</span><span class="token punctuation">;</span></pre></td></tr><tr><td data-num="20"></td><td><pre>        cout <span class="token operator">&lt;&lt;</span> <span class="token string">"\n"</span><span class="token punctuation">;</span></pre></td></tr><tr><td data-num="21"></td><td><pre>    <span class="token punctuation">&#125;</span></pre></td></tr><tr><td data-num="22"></td><td><pre><span class="token punctuation">&#125;</span></pre></td></tr></table></figure><h2 id="註解"><a class="anchor" href="#註解">#</a> 註解</h2><ol><li><a href="#%E9%A1%8C%E7%9B%AE%E6%95%98%E8%BF%B0">retorts <em>v. 反駁，回嘴</em></a></li></ol><blockquote><p>To answer someone quickly in an angry or funny way.<br><strong>ex.</strong> <em>“That doesn’t concern you!” she <strong>retorted</strong>.</em></p></blockquote>]]></content>
      
      
      <categories>
          
          <category> Coding </category>
          
          <category> UVA </category>
          
          <category> Star1 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> Star1 </tag>
            
            <tag> CPE </tag>
            
            <tag> UVA </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>879. Profitable Schemes</title>
      <link href="/2023/04/21/Coding/leetcode/Hard/879%20Profitable%20Schemes/"/>
      <url>/2023/04/21/Coding/leetcode/Hard/879%20Profitable%20Schemes/</url>
      
        <content type="html"><![CDATA[<p>⭐️⭐️⭐️</p><h2 id="題目敘述"><a class="anchor" href="#題目敘述">#</a> <span class="exturl" data-url="aHR0cHM6Ly9sZWV0Y29kZS5jb20vcHJvYmxlbXMvcHJvZml0YWJsZS1zY2hlbWVzLw==">題目敘述</span></h2><p>There is a group of  <code>n</code>  members, and a list of various crimes they could commit. The  <code>ith</code>  crime generates a  <code>profit[i]</code>  and requires  <code>group[i]</code>  members to participate in it. If a member participates in one crime, that member can’t participate in another crime.</p><p>Let’s call a <strong>profitable scheme</strong> any subset of these crimes that generates at least  <code>minProfit</code>  profit, and the total number of members participating in that subset of crimes is at most  <code>n</code> .</p><p>Return the number of schemes that can be chosen. Since the answer may be very large, <strong>return it modulo</strong>  <code>10^9 + 7</code> .</p><h3 id="example-1"><a class="anchor" href="#example-1">#</a> Example 1:</h3><blockquote><p><strong>Input:</strong> n = 5, minProfit = 3, group = [2,2], profit = [2,3]<br><strong>Output:</strong> 2<br><strong>Explanation:</strong> To make a profit of at least 3, the group could either commit crimes 0 and 1, or just crime 1.<br>In total, there are 2 schemes.</p></blockquote><h3 id="example-2"><a class="anchor" href="#example-2">#</a> Example 2:</h3><blockquote><p><strong>Input:</strong> n = 10, minProfit = 5, group = [2,3,5], profit = [6,7,8]<br><strong>Output:</strong> 7<br><strong>Explanation:</strong> To make a profit of at least 5, the group could commit any crimes, as long as they commit one.<br>There are 7 possible schemes: (0), (1), (2), (0,1), (0,2), (1,2), and (0,1,2).</p></blockquote><h2 id="解題思路"><a class="anchor" href="#解題思路">#</a> 解題思路</h2><p>We define  <code>dp[i][j]</code>  as the number of profitable schemes that can be formed with a <strong><span class="blue">minimum profit of  <code>i</code> </span></strong> and a <strong><span class="green">total group size of  <code>j</code> </span></strong>. We can then update the dp array for each group by considering whether or not to include that group in each possible profitable scheme. <strong>The final answer is the sum of  <code>dp[minProfit][j]</code>  for all  <code>j</code>  from  <code>0</code>  to the group size limit</strong>.</p><h2 id="solution"><a class="anchor" href="#solution">#</a> Solution</h2><div class="tab" data-id="code" data-title="C++"><figure class="highlight cpp"><figcaption data-lang="C++"></figcaption><table><tr><td data-num="1"></td><td><pre><span class="token keyword">class</span> <span class="token class-name">Solution</span> <span class="token punctuation">&#123;</span></pre></td></tr><tr><td data-num="2"></td><td><pre><span class="token keyword">public</span><span class="token operator">:</span></pre></td></tr><tr><td data-num="3"></td><td><pre>    <span class="token keyword">int</span> <span class="token function">profitableSchemes</span><span class="token punctuation">(</span><span class="token keyword">int</span> n<span class="token punctuation">,</span> <span class="token keyword">int</span> minProfit<span class="token punctuation">,</span> vector<span class="token operator">&lt;</span><span class="token keyword">int</span><span class="token operator">></span><span class="token operator">&amp;</span> group<span class="token punctuation">,</span> vector<span class="token operator">&lt;</span><span class="token keyword">int</span><span class="token operator">></span><span class="token operator">&amp;</span> profit<span class="token punctuation">)</span> <span class="token punctuation">&#123;</span></pre></td></tr><tr><td data-num="4"></td><td><pre>        <span class="token keyword">int</span> mod <span class="token operator">=</span> <span class="token number">1e9</span> <span class="token operator">+</span> <span class="token number">7</span><span class="token punctuation">;</span></pre></td></tr><tr><td data-num="5"></td><td><pre>        vector<span class="token operator">&lt;</span>vector<span class="token operator">&lt;</span><span class="token keyword">int</span><span class="token operator">>></span> <span class="token function">dp</span><span class="token punctuation">(</span>minProfit <span class="token operator">+</span> <span class="token number">1</span><span class="token punctuation">,</span> <span class="token generic-function"><span class="token function">vector</span><span class="token generic class-name"><span class="token operator">&lt;</span><span class="token keyword">int</span><span class="token operator">></span></span></span><span class="token punctuation">(</span>n <span class="token operator">+</span> <span class="token number">1</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span></pre></td></tr><tr><td data-num="6"></td><td><pre>        dp<span class="token punctuation">[</span><span class="token number">0</span><span class="token punctuation">]</span><span class="token punctuation">[</span><span class="token number">0</span><span class="token punctuation">]</span> <span class="token operator">=</span> <span class="token number">1</span><span class="token punctuation">;</span></pre></td></tr><tr><td data-num="7"></td><td><pre>        <span class="token keyword">for</span> <span class="token punctuation">(</span><span class="token keyword">int</span> k<span class="token operator">=</span><span class="token number">0</span><span class="token punctuation">;</span> k<span class="token operator">&lt;</span>group<span class="token punctuation">.</span><span class="token function">size</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span> k<span class="token operator">++</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span></pre></td></tr><tr><td data-num="8"></td><td><pre>            <span class="token keyword">int</span> g <span class="token operator">=</span> group<span class="token punctuation">[</span>k<span class="token punctuation">]</span><span class="token punctuation">,</span> p <span class="token operator">=</span> profit<span class="token punctuation">[</span>k<span class="token punctuation">]</span><span class="token punctuation">;</span></pre></td></tr><tr><td data-num="9"></td><td><pre>            <span class="token keyword">for</span> <span class="token punctuation">(</span><span class="token keyword">int</span> i<span class="token operator">=</span>minProfit<span class="token punctuation">;</span> i<span class="token operator">>=</span><span class="token number">0</span><span class="token punctuation">;</span> i<span class="token operator">--</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span></pre></td></tr><tr><td data-num="10"></td><td><pre>                <span class="token keyword">for</span> <span class="token punctuation">(</span><span class="token keyword">int</span> j<span class="token operator">=</span>n<span class="token operator">-</span>g<span class="token punctuation">;</span> j<span class="token operator">>=</span><span class="token number">0</span><span class="token punctuation">;</span> j<span class="token operator">--</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span></pre></td></tr><tr><td data-num="11"></td><td><pre>                    <span class="token keyword">int</span> newProfit <span class="token operator">=</span> <span class="token function">min</span><span class="token punctuation">(</span>minProfit<span class="token punctuation">,</span> p <span class="token operator">+</span> i<span class="token punctuation">)</span><span class="token punctuation">;</span></pre></td></tr><tr><td data-num="12"></td><td><pre>                    dp<span class="token punctuation">[</span>newProfit<span class="token punctuation">]</span><span class="token punctuation">[</span>j <span class="token operator">+</span> g<span class="token punctuation">]</span> <span class="token operator">+=</span> dp<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">[</span>j<span class="token punctuation">]</span><span class="token punctuation">;</span></pre></td></tr><tr><td data-num="13"></td><td><pre>                    dp<span class="token punctuation">[</span>newProfit<span class="token punctuation">]</span><span class="token punctuation">[</span>j <span class="token operator">+</span> g<span class="token punctuation">]</span> <span class="token operator">%=</span> mod<span class="token punctuation">;</span></pre></td></tr><tr><td data-num="14"></td><td><pre>                <span class="token punctuation">&#125;</span></pre></td></tr><tr><td data-num="15"></td><td><pre>            <span class="token punctuation">&#125;</span></pre></td></tr><tr><td data-num="16"></td><td><pre>        <span class="token punctuation">&#125;</span></pre></td></tr><tr><td data-num="17"></td><td><pre>        <span class="token keyword">int</span> res <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span></pre></td></tr><tr><td data-num="18"></td><td><pre>        <span class="token keyword">for</span> <span class="token punctuation">(</span><span class="token keyword">int</span> i<span class="token operator">=</span><span class="token number">0</span><span class="token punctuation">;</span> i<span class="token operator">&lt;=</span>n<span class="token punctuation">;</span> i<span class="token operator">++</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span></pre></td></tr><tr><td data-num="19"></td><td><pre>            res <span class="token operator">+=</span> dp<span class="token punctuation">[</span>minProfit<span class="token punctuation">]</span><span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">;</span></pre></td></tr><tr><td data-num="20"></td><td><pre>            res <span class="token operator">%=</span> mod<span class="token punctuation">;</span></pre></td></tr><tr><td data-num="21"></td><td><pre>        <span class="token punctuation">&#125;</span></pre></td></tr><tr><td data-num="22"></td><td><pre>        <span class="token keyword">return</span> res<span class="token punctuation">;</span></pre></td></tr><tr><td data-num="23"></td><td><pre>    <span class="token punctuation">&#125;</span></pre></td></tr><tr><td data-num="24"></td><td><pre><span class="token punctuation">&#125;</span><span class="token punctuation">;</span></pre></td></tr></table></figure></div><div class="tab" data-id="code" data-title="Java"><pre><code class="language-java"></code></pre></div><div class="tab" data-id="code" data-title="Python"><figure class="highlight python"><figcaption data-lang="python"></figcaption><table><tr><td data-num="1"></td><td><pre><span class="token keyword">class</span> <span class="token class-name">Solution</span><span class="token punctuation">:</span></pre></td></tr><tr><td data-num="2"></td><td><pre>    <span class="token keyword">def</span> <span class="token function">profitableSchemes</span><span class="token punctuation">(</span>self<span class="token punctuation">,</span> n<span class="token punctuation">:</span> <span class="token builtin">int</span><span class="token punctuation">,</span> minProfit<span class="token punctuation">:</span> <span class="token builtin">int</span><span class="token punctuation">,</span> group<span class="token punctuation">:</span> List<span class="token punctuation">[</span><span class="token builtin">int</span><span class="token punctuation">]</span><span class="token punctuation">,</span> profit<span class="token punctuation">:</span> List<span class="token punctuation">[</span><span class="token builtin">int</span><span class="token punctuation">]</span><span class="token punctuation">)</span> <span class="token operator">-</span><span class="token operator">></span> <span class="token builtin">int</span><span class="token punctuation">:</span></pre></td></tr><tr><td data-num="3"></td><td><pre>        mod <span class="token operator">=</span> <span class="token number">10</span><span class="token operator">**</span><span class="token number">9</span> <span class="token operator">+</span> <span class="token number">7</span></pre></td></tr><tr><td data-num="4"></td><td><pre>        dp <span class="token operator">=</span> <span class="token punctuation">[</span><span class="token punctuation">[</span><span class="token number">0</span><span class="token punctuation">]</span> <span class="token operator">*</span> <span class="token punctuation">(</span>n <span class="token operator">+</span> <span class="token number">1</span><span class="token punctuation">)</span> <span class="token keyword">for</span> _ <span class="token keyword">in</span> <span class="token builtin">range</span><span class="token punctuation">(</span>minProfit <span class="token operator">+</span> <span class="token number">1</span><span class="token punctuation">)</span><span class="token punctuation">]</span></pre></td></tr><tr><td data-num="5"></td><td><pre>        dp<span class="token punctuation">[</span><span class="token number">0</span><span class="token punctuation">]</span><span class="token punctuation">[</span><span class="token number">0</span><span class="token punctuation">]</span> <span class="token operator">=</span> <span class="token number">1</span></pre></td></tr><tr><td data-num="6"></td><td><pre>        <span class="token keyword">for</span> g<span class="token punctuation">,</span> p <span class="token keyword">in</span> <span class="token builtin">zip</span><span class="token punctuation">(</span>group<span class="token punctuation">,</span> profit<span class="token punctuation">)</span><span class="token punctuation">:</span></pre></td></tr><tr><td data-num="7"></td><td><pre>            <span class="token keyword">for</span> i <span class="token keyword">in</span> <span class="token builtin">range</span><span class="token punctuation">(</span>minProfit<span class="token punctuation">,</span> <span class="token operator">-</span><span class="token number">1</span><span class="token punctuation">,</span> <span class="token operator">-</span><span class="token number">1</span><span class="token punctuation">)</span><span class="token punctuation">:</span></pre></td></tr><tr><td data-num="8"></td><td><pre>                <span class="token keyword">for</span> j <span class="token keyword">in</span> <span class="token builtin">range</span><span class="token punctuation">(</span>n<span class="token operator">-</span>g<span class="token punctuation">,</span> <span class="token operator">-</span><span class="token number">1</span><span class="token punctuation">,</span> <span class="token operator">-</span><span class="token number">1</span><span class="token punctuation">)</span><span class="token punctuation">:</span>    </pre></td></tr><tr><td data-num="9"></td><td><pre>                    dp<span class="token punctuation">[</span><span class="token builtin">min</span><span class="token punctuation">(</span>minProfit<span class="token punctuation">,</span> p <span class="token operator">+</span> i<span class="token punctuation">)</span><span class="token punctuation">]</span><span class="token punctuation">[</span>j <span class="token operator">+</span> g<span class="token punctuation">]</span> <span class="token operator">+=</span> dp<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">[</span>j<span class="token punctuation">]</span></pre></td></tr><tr><td data-num="10"></td><td><pre>                    dp<span class="token punctuation">[</span><span class="token builtin">min</span><span class="token punctuation">(</span>minProfit<span class="token punctuation">,</span> p <span class="token operator">+</span> i<span class="token punctuation">)</span><span class="token punctuation">]</span><span class="token punctuation">[</span>j <span class="token operator">+</span> g<span class="token punctuation">]</span> <span class="token operator">%=</span> mod</pre></td></tr><tr><td data-num="11"></td><td><pre>        <span class="token keyword">return</span> <span class="token builtin">sum</span><span class="token punctuation">(</span>dp<span class="token punctuation">[</span>minProfit<span class="token punctuation">]</span><span class="token punctuation">)</span> <span class="token operator">%</span> mod</pre></td></tr></table></figure></div>]]></content>
      
      
      <categories>
          
          <category> Coding </category>
          
          <category> Leetcode </category>
          
          <category> Hard </category>
          
      </categories>
      
      
        <tags>
            
            <tag> Leetcode </tag>
            
            <tag> Array </tag>
            
            <tag> Dynamic Programming </tag>
            
            <tag> Hard </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>uva 579 - Clock Hands</title>
      <link href="/2023/04/20/Coding/uva/Star1/uva%20579/"/>
      <url>/2023/04/20/Coding/uva/Star1/uva%20579/</url>
      
        <content type="html"><![CDATA[<p>⭐️</p><h2 id="題目連結"><a class="anchor" href="#題目連結">#</a> 題目連結</h2><ul><li><span class="exturl" data-url="aHR0cHM6Ly96ZXJvanVkZ2UudHcvU2hvd1Byb2JsZW0/cHJvYmxlbWlkPWQwOTU=">ZeroJudge</span></li><li><span class="exturl" data-url="aHR0cHM6Ly9vbmxpbmVqdWRnZS5vcmcvZXh0ZXJuYWwvNS9wNTc5LnBkZg==">題目連結</span></li><li><span class="exturl" data-url="aHR0cHM6Ly9vbmxpbmVqdWRnZS5vcmcvaW5kZXgucGhwP29wdGlvbj1jb21fb25saW5lanVkZ2UmYW1wO0l0ZW1pZD04JmFtcDtjYXRlZ29yeT03JmFtcDtwYWdlPXNob3dfcHJvYmxlbSZhbXA7cHJvYmxlbT01MjA=">Online Judge</span></li><li><span class="exturl" data-url="aHR0cHM6Ly93d3cudWRlYnVnLmNvbS9VVmEvNTc5">uDebug</span></li></ul><h2 id="題目敘述"><a class="anchor" href="#題目敘述">#</a> 題目敘述</h2><p>The <a href="#%E8%A8%BB%E8%A7%A3">medieval<sub>1</sub></a> interest in <a href="#%E8%A8%BB%E8%A7%A3">mechanical contrivances<sub>2</sub></a> is well illustrated by the development of the mechanical<br>clock, the oldest of which is driven by weights and controlled by a verge, an <a href="#%E8%A8%BB%E8%A7%A3">oscillating<sub>3</sub></a> arm engaging<br>with a <a href="#%E8%A8%BB%E8%A7%A3">gear<sub>4</sub></a> wheel. It dates back to 1386.</p><p>Clocks driven by springs had appeared by the mid-15th century, making it possible to con- struct<br>more compact mechanisms and preparing the way for the portable clock.</p><p>English spring-driven pendulum clocks were first commonly kept on a small wall bracket and later<br>on a shelf. Many bracket clocks contained a drawer to hold the winding key. The earliest bracket clocks,<br>made for a period after 1660, were of architectural design, with pillars at the sides and a pediment on<br>top.</p><p>In 17th- and 18th-century France, the table clock became an object of monumental design, the best<br>examples of which are minor works of sculpture.</p><p>The longcase clocks (also called grandfather clocks) are tall pendulum clock enclosed in a wooden<br>case that stands upon the floor and is typically from 6 to 7.5 feet (1.8 to 2.3 m) in height. Later, the<br>name “grandfather clock” became popular after the popular song “My Grandfather’s Clock,” written<br>in 1876 by Henry Clay Work.</p><p>One of the first atomic clocks was an ammonia-controlled clock. It was built in 1949 at the National<br>Bureau of Standards, Washington, D.C.; in this clock the frequency did not vary by more than one<br>part in <span class="katex"><span class="katex-mathml"><math xmlns="http://www.w3.org/1998/Math/MathML"><semantics><mrow><mn>1</mn><msup><mn>0</mn><mn>8</mn></msup></mrow><annotation encoding="application/x-tex">10^8</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:0.8141079999999999em;vertical-align:0em;"></span><span class="mord">1</span><span class="mord"><span class="mord">0</span><span class="msupsub"><span class="vlist-t"><span class="vlist-r"><span class="vlist" style="height:0.8141079999999999em;"><span style="top:-3.063em;margin-right:0.05em;"><span class="pstrut" style="height:2.7em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mtight">8</span></span></span></span></span></span></span></span></span></span></span>.</p><p>Nuclear clocks are built using two clocks. The aggregate of atoms that emit the gamma radiation of<br>precise frequency may be called the emitter clock; the group of atoms that absorb this radiation is the<br>absorber clock. One pair of these nuclear clocks can detect energy changes of one part in 1014, being<br>about 1,000 times more sensitive than the best atomic clock.</p><p>The cesium clock is the most accurate type of clock yet developed. This device makes use of<br>transitions between the spin states of the cesium nucleus and produces a frequency which is so regular<br>that it has been adopted for establishing the time standard.</p><p>The history of clocks is fascinating, but unrelated to this problem. In this problem, you are asked<br>to find the angle between the minute hand and the hour hand on a regular analog clock. Assume that<br>the second hand, if there were one, would be pointing straight up at the 12. Give all angles as the<br>smallest positive angles. For example 9:00 is 90 degrees; not -90 or 270 degrees.</p><h2 id="input"><a class="anchor" href="#input">#</a> Input</h2><p>The input is a list of times in the form ‘H:M’, each on their own line, with  <code>1 ≤ H ≤ 12</code>  and<br> <code>00 ≤ M ≤ 59</code> . The input is terminated with the time ‘0:00’. Note that  <code>H</code>  may be represented with 1<br>or 2 digits (for 1–9 or 10–12, respectively);  <code>M</code>  is always represented with 2 digits (the input times are<br>what you typically see on a digital clock).</p><h2 id="output"><a class="anchor" href="#output">#</a> Output</h2><p>The output <strong>displays the smallest positive angle in degrees between the hands for each time</strong>. The answer<br>should between 0 degrees and 180 degrees for all input times. Display each angle on a line by itself in<br>the same order as the input. The output should be rounded to the nearest 1/1000, i.e., three places<br>after the decimal point should be printed.</p><h2 id="sample-input"><a class="anchor" href="#sample-input">#</a> Sample Input</h2><blockquote><p>12:00<br>9:00<br>8:10<br>0:00</p></blockquote><h2 id="sample-output"><a class="anchor" href="#sample-output">#</a> Sample Output</h2><blockquote><p>0.000<br>90.000<br>175.000</p></blockquote><h2 id="code"><a class="anchor" href="#code">#</a> Code</h2><figure class="highlight cpp"><figcaption data-lang="C++"></figcaption><table><tr><td data-num="1"></td><td><pre><span class="token macro property"><span class="token directive-hash">#</span><span class="token directive keyword">include</span> <span class="token string">&lt;bits/stdc++.h></span></span></pre></td></tr><tr><td data-num="2"></td><td><pre></pre></td></tr><tr><td data-num="3"></td><td><pre><span class="token keyword">using</span> <span class="token keyword">namespace</span> std<span class="token punctuation">;</span></pre></td></tr><tr><td data-num="4"></td><td><pre></pre></td></tr><tr><td data-num="5"></td><td><pre><span class="token keyword">int</span> <span class="token function">main</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span></pre></td></tr><tr><td data-num="6"></td><td><pre>    <span class="token keyword">double</span> deg<span class="token punctuation">[</span><span class="token number">13</span><span class="token punctuation">]</span> <span class="token operator">=</span> <span class="token punctuation">&#123;</span><span class="token number">0</span><span class="token punctuation">,</span> <span class="token number">30</span><span class="token punctuation">,</span> <span class="token number">60</span><span class="token punctuation">,</span> <span class="token number">90</span><span class="token punctuation">,</span> <span class="token number">120</span><span class="token punctuation">,</span> <span class="token number">150</span><span class="token punctuation">,</span> <span class="token number">180</span><span class="token punctuation">,</span> <span class="token number">210</span><span class="token punctuation">,</span> <span class="token number">240</span><span class="token punctuation">,</span> <span class="token number">270</span><span class="token punctuation">,</span> <span class="token number">300</span><span class="token punctuation">,</span> <span class="token number">330</span><span class="token punctuation">,</span> <span class="token number">0</span><span class="token punctuation">&#125;</span><span class="token punctuation">;</span></pre></td></tr><tr><td data-num="7"></td><td><pre>    string str<span class="token punctuation">;</span></pre></td></tr><tr><td data-num="8"></td><td><pre>    <span class="token keyword">int</span> hr<span class="token punctuation">,</span> min<span class="token punctuation">;</span></pre></td></tr><tr><td data-num="9"></td><td><pre>    <span class="token keyword">while</span><span class="token punctuation">(</span><span class="token function">getline</span><span class="token punctuation">(</span>cin<span class="token punctuation">,</span> str<span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span></pre></td></tr><tr><td data-num="10"></td><td><pre>        <span class="token keyword">if</span> <span class="token punctuation">(</span>str <span class="token operator">==</span> <span class="token string">"0:00"</span><span class="token punctuation">)</span> <span class="token keyword">break</span><span class="token punctuation">;</span></pre></td></tr><tr><td data-num="11"></td><td><pre>        stringstream <span class="token function">ss</span><span class="token punctuation">(</span>str<span class="token punctuation">)</span><span class="token punctuation">;</span></pre></td></tr><tr><td data-num="12"></td><td><pre>        string tok<span class="token punctuation">;</span></pre></td></tr><tr><td data-num="13"></td><td><pre>        <span class="token function">getline</span><span class="token punctuation">(</span>ss<span class="token punctuation">,</span> tok<span class="token punctuation">,</span> <span class="token char">':'</span><span class="token punctuation">)</span><span class="token punctuation">;</span></pre></td></tr><tr><td data-num="14"></td><td><pre>        hr <span class="token operator">=</span> <span class="token function">stoi</span><span class="token punctuation">(</span>tok<span class="token punctuation">)</span><span class="token punctuation">;</span></pre></td></tr><tr><td data-num="15"></td><td><pre>        <span class="token function">getline</span><span class="token punctuation">(</span>ss<span class="token punctuation">,</span> tok<span class="token punctuation">)</span><span class="token punctuation">;</span></pre></td></tr><tr><td data-num="16"></td><td><pre>        min <span class="token operator">=</span> <span class="token function">stoi</span><span class="token punctuation">(</span>tok<span class="token punctuation">)</span><span class="token punctuation">;</span></pre></td></tr><tr><td data-num="17"></td><td><pre></pre></td></tr><tr><td data-num="18"></td><td><pre>        <span class="token keyword">double</span> res <span class="token operator">=</span> min <span class="token operator">*</span> <span class="token number">6.0</span> <span class="token operator">-</span> <span class="token punctuation">(</span><span class="token punctuation">(</span>min <span class="token operator">/</span> <span class="token number">12.0</span><span class="token punctuation">)</span> <span class="token operator">*</span> <span class="token number">6</span> <span class="token operator">+</span> deg<span class="token punctuation">[</span>hr<span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token punctuation">;</span></pre></td></tr><tr><td data-num="19"></td><td><pre>        <span class="token keyword">if</span> <span class="token punctuation">(</span>res <span class="token operator">&lt;</span> <span class="token number">0</span><span class="token punctuation">)</span> res <span class="token operator">*=</span> <span class="token operator">-</span><span class="token number">1.0</span><span class="token punctuation">;</span></pre></td></tr><tr><td data-num="20"></td><td><pre>        <span class="token keyword">if</span> <span class="token punctuation">(</span>res <span class="token operator">></span> <span class="token number">180</span><span class="token punctuation">)</span> res <span class="token operator">=</span> <span class="token number">360.0</span> <span class="token operator">-</span> res<span class="token punctuation">;</span></pre></td></tr><tr><td data-num="21"></td><td><pre>        <span class="token function">printf</span><span class="token punctuation">(</span><span class="token string">"%.3f\n"</span><span class="token punctuation">,</span> res<span class="token punctuation">)</span><span class="token punctuation">;</span></pre></td></tr><tr><td data-num="22"></td><td><pre>    <span class="token punctuation">&#125;</span></pre></td></tr><tr><td data-num="23"></td><td><pre><span class="token punctuation">&#125;</span></pre></td></tr></table></figure><h2 id="註解"><a class="anchor" href="#註解">#</a> 註解</h2><ol><li><a href="#%E9%A1%8C%E7%9B%AE%E6%95%98%E8%BF%B0">medieval 中世紀</a></li><li><a href="#%E9%A1%8C%E7%9B%AE%E6%95%98%E8%BF%B0">mechanical contrivances 機械裝置</a></li><li><a href="#%E9%A1%8C%E7%9B%AE%E6%95%98%E8%BF%B0">oscillating 擺動的</a></li><li><a href="#%E9%A1%8C%E7%9B%AE%E6%95%98%E8%BF%B0">gear 齒輪</a></li></ol>]]></content>
      
      
      <categories>
          
          <category> Coding </category>
          
          <category> UVA </category>
          
          <category> Star1 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> Star1 </tag>
            
            <tag> CPE </tag>
            
            <tag> UVA </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>uva 499 - What’s The Frequency, Kenneth?</title>
      <link href="/2023/04/20/Coding/uva/Star1/uva%20499/"/>
      <url>/2023/04/20/Coding/uva/Star1/uva%20499/</url>
      
        <content type="html"><![CDATA[<p>⭐️</p><h2 id="題目連結"><a class="anchor" href="#題目連結">#</a> 題目連結</h2><ul><li><span class="exturl" data-url="aHR0cHM6Ly96ZXJvanVkZ2UudHcvU2hvd1Byb2JsZW0/cHJvYmxlbWlkPWU1MDM=">ZeroJudge</span></li><li><span class="exturl" data-url="aHR0cHM6Ly9vbmxpbmVqdWRnZS5vcmcvZXh0ZXJuYWwvNC9wNDk5LnBkZg==">題目連結</span></li><li><span class="exturl" data-url="aHR0cHM6Ly9vbmxpbmVqdWRnZS5vcmcvaW5kZXgucGhwP29wdGlvbj1jb21fb25saW5lanVkZ2UmYW1wO0l0ZW1pZD04JmFtcDtjYXRlZ29yeT02JmFtcDtwYWdlPXNob3dfcHJvYmxlbSZhbXA7cHJvYmxlbT00NDA=">Online Judge</span></li><li><span class="exturl" data-url="aHR0cHM6Ly93d3cudWRlYnVnLmNvbS9VVmEvNDk5">uDebug</span></li></ul><h2 id="題目敘述"><a class="anchor" href="#題目敘述">#</a> 題目敘述</h2><p>#include &lt;stdio.h&gt;<br>main() {<br>int i;<br>char *suffix[]= { “st”, “nd”, “rd” };<br>char *item[]= { “Unix” , “cat”, “sed”, “awk”, “grep”, “ed”, “vi”};<br>printf(“In the beginning, there was nothing.\n”);<br>for (i= 0; i &lt; 7; i++)<br>printf(“And on the %d%s day, God created %s. And it was good.\n”,<br>i + 1, (i &lt; 3) ? suffix[i] : “th”, item[i]);<br>}</p><p>But then God saw that vi led people into temptation. Instead of choosing the righteous ways of<br>make, dbx, and RCS, people used long command lines, printf(), and tape backups.<br>So God decreed, “I see that Engineers have thus defiled my vi. And so, I shall create emacs, an<br>editor more powerful than words. Further, for each instantiation vi hitherto, the Engineer responsible<br>shalt perform Penance. And lo, the Penance wilt be painful; there will be much wailing and gnushingof<br>teeth. The Engineer will read many lines of text. For each line of text, the Engineer must tell me which<br>letters occur the most frequently.”<br>“I charge you all with My Golden Rule: ’Friends shalt not let friends use vi’.”</p><h2 id="input"><a class="anchor" href="#input">#</a> Input</h2><p>The input file consists of a lot of lines of text.</p><h2 id="output"><a class="anchor" href="#output">#</a> Output</h2><p>A line of output should contain a list of <strong>letters that all occured with the highest frequency</strong> in the<br>corresponding input line, followed by the frequency.<br>The list of letters should be an alphabetical list of upper case letters followed by an alphabetical<br>list of lower case letters.</p><h2 id="sample-input"><a class="anchor" href="#sample-input">#</a> Sample Input</h2><blockquote><p>When riding your bicycle backwards down a one-way street, if the<br>wheel falls of a canoe, how many ball bearings does it take to fill<br>up a water buffalo?<br>Hello Howard.</p></blockquote><h2 id="sample-output"><a class="anchor" href="#sample-output">#</a> Sample Output</h2><blockquote><p>e 6<br>al 7<br>a 3<br>Hlo 2</p></blockquote><h2 id="code"><a class="anchor" href="#code">#</a> Code</h2><figure class="highlight cpp"><figcaption data-lang="C++"></figcaption><table><tr><td data-num="1"></td><td><pre><span class="token macro property"><span class="token directive-hash">#</span><span class="token directive keyword">include</span> <span class="token string">&lt;bits/stdc++.h></span></span></pre></td></tr><tr><td data-num="2"></td><td><pre></pre></td></tr><tr><td data-num="3"></td><td><pre><span class="token keyword">using</span> <span class="token keyword">namespace</span> std<span class="token punctuation">;</span></pre></td></tr><tr><td data-num="4"></td><td><pre></pre></td></tr><tr><td data-num="5"></td><td><pre><span class="token keyword">int</span> <span class="token function">main</span> <span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span></pre></td></tr><tr><td data-num="6"></td><td><pre>    string str<span class="token punctuation">;</span></pre></td></tr><tr><td data-num="7"></td><td><pre>    <span class="token keyword">while</span> <span class="token punctuation">(</span><span class="token function">getline</span><span class="token punctuation">(</span>cin<span class="token punctuation">,</span> str<span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span></pre></td></tr><tr><td data-num="8"></td><td><pre>        map<span class="token operator">&lt;</span><span class="token keyword">char</span><span class="token punctuation">,</span> <span class="token keyword">int</span><span class="token operator">></span> mp<span class="token punctuation">;</span></pre></td></tr><tr><td data-num="9"></td><td><pre>        <span class="token keyword">for</span> <span class="token punctuation">(</span><span class="token keyword">char</span> c <span class="token operator">:</span> str<span class="token punctuation">)</span> <span class="token punctuation">&#123;</span></pre></td></tr><tr><td data-num="10"></td><td><pre>            <span class="token keyword">if</span> <span class="token punctuation">(</span><span class="token operator">!</span><span class="token function">isalpha</span><span class="token punctuation">(</span>c<span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token keyword">continue</span><span class="token punctuation">;</span></pre></td></tr><tr><td data-num="11"></td><td><pre>            mp<span class="token punctuation">[</span>c<span class="token punctuation">]</span> <span class="token operator">++</span><span class="token punctuation">;</span>   </pre></td></tr><tr><td data-num="12"></td><td><pre>        <span class="token punctuation">&#125;</span></pre></td></tr><tr><td data-num="13"></td><td><pre>        map<span class="token operator">&lt;</span><span class="token keyword">int</span><span class="token punctuation">,</span> string<span class="token operator">></span> rc<span class="token punctuation">;</span></pre></td></tr><tr><td data-num="14"></td><td><pre>        <span class="token keyword">int</span> mx <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span></pre></td></tr><tr><td data-num="15"></td><td><pre>        <span class="token keyword">for</span> <span class="token punctuation">(</span><span class="token keyword">auto</span> m <span class="token operator">:</span> mp<span class="token punctuation">)</span> <span class="token punctuation">&#123;</span></pre></td></tr><tr><td data-num="16"></td><td><pre>            mx <span class="token operator">=</span> <span class="token function">max</span><span class="token punctuation">(</span>mx<span class="token punctuation">,</span> m<span class="token punctuation">.</span>second<span class="token punctuation">)</span><span class="token punctuation">;</span></pre></td></tr><tr><td data-num="17"></td><td><pre>            rc<span class="token punctuation">[</span>m<span class="token punctuation">.</span>second<span class="token punctuation">]</span> <span class="token operator">=</span> <span class="token string">""</span> <span class="token operator">+</span> rc<span class="token punctuation">[</span>m<span class="token punctuation">.</span>second<span class="token punctuation">]</span> <span class="token operator">+</span> m<span class="token punctuation">.</span>first<span class="token punctuation">;</span> </pre></td></tr><tr><td data-num="18"></td><td><pre>        <span class="token punctuation">&#125;</span></pre></td></tr><tr><td data-num="19"></td><td><pre>        cout <span class="token operator">&lt;&lt;</span> rc<span class="token punctuation">[</span>mx<span class="token punctuation">]</span> <span class="token operator">&lt;&lt;</span> <span class="token char">' '</span> <span class="token operator">&lt;&lt;</span> mx <span class="token operator">&lt;&lt;</span> <span class="token string">"\n"</span><span class="token punctuation">;</span></pre></td></tr><tr><td data-num="20"></td><td><pre>    <span class="token punctuation">&#125;</span></pre></td></tr><tr><td data-num="21"></td><td><pre><span class="token punctuation">&#125;</span></pre></td></tr></table></figure>]]></content>
      
      
      <categories>
          
          <category> Coding </category>
          
          <category> UVA </category>
          
          <category> Star1 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> Star1 </tag>
            
            <tag> CPE </tag>
            
            <tag> UVA </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>C++ - queue</title>
      <link href="/2023/04/20/programming/CPP/cpp%20queue/"/>
      <url>/2023/04/20/programming/CPP/cpp%20queue/</url>
      
        <content type="html"><![CDATA[<p><code>queue</code>  是具有 <strong>FIFO (First In, First Out)</strong> 特性的容器配接器，應用在有<strong>先進先出</strong>的情形。<br><strong>需要引入的標頭檔： <code>&lt;queue&gt;</code> </strong></p><h2 id="初始化-queue"><a class="anchor" href="#初始化-queue">#</a> 初始化 queue</h2><figure class="highlight cpp"><figcaption data-lang="C++"></figcaption><table><tr><td data-num="1"></td><td><pre><span class="token macro property"><span class="token directive-hash">#</span><span class="token directive keyword">include</span> <span class="token string">&lt;queue></span></span></pre></td></tr><tr class="marked"><td data-num="2"></td><td><pre>queue<span class="token operator">&lt;</span><span class="token keyword">int</span><span class="token operator">></span> q<span class="token punctuation">;</span></pre></td></tr></table></figure><h2 id="加入元素"><a class="anchor" href="#加入元素">#</a> 加入元素</h2><p>把元素加進 queue 的尾部使用  <code>push()</code></p><figure class="highlight cpp"><figcaption data-lang="C++"></figcaption><table><tr><td data-num="1"></td><td><pre>queue<span class="token operator">&lt;</span><span class="token keyword">int</span><span class="token operator">></span> q<span class="token punctuation">;</span></pre></td></tr><tr class="marked"><td data-num="2"></td><td><pre>q<span class="token punctuation">.</span><span class="token function">push</span><span class="token punctuation">(</span><span class="token number">1</span><span class="token punctuation">)</span><span class="token punctuation">;</span></pre></td></tr><tr><td data-num="3"></td><td><pre>q<span class="token punctuation">.</span><span class="token function">push</span><span class="token punctuation">(</span><span class="token number">2</span><span class="token punctuation">)</span><span class="token punctuation">;</span></pre></td></tr><tr><td data-num="4"></td><td><pre>q<span class="token punctuation">.</span><span class="token function">push</span><span class="token punctuation">(</span><span class="token number">3</span><span class="token punctuation">)</span><span class="token punctuation">;</span></pre></td></tr></table></figure><blockquote><p>q = [1, 2, 3]</p></blockquote><h2 id="取出元素"><a class="anchor" href="#取出元素">#</a> 取出元素</h2><p>把元素從 queue 頭部取出用  <code>pop()</code> ，注意<strong>取出會將該元素從 queue 移除</strong>。</p><figure class="highlight cpp"><figcaption data-lang="C++"></figcaption><table><tr><td data-num="1"></td><td><pre>queue<span class="token operator">&lt;</span><span class="token keyword">int</span><span class="token operator">></span> q<span class="token punctuation">;</span></pre></td></tr><tr><td data-num="2"></td><td><pre>q<span class="token punctuation">.</span><span class="token function">push</span><span class="token punctuation">(</span><span class="token number">1</span><span class="token punctuation">)</span><span class="token punctuation">;</span></pre></td></tr><tr><td data-num="3"></td><td><pre>q<span class="token punctuation">.</span><span class="token function">push</span><span class="token punctuation">(</span><span class="token number">2</span><span class="token punctuation">)</span><span class="token punctuation">;</span></pre></td></tr><tr><td data-num="4"></td><td><pre>q<span class="token punctuation">.</span><span class="token function">push</span><span class="token punctuation">(</span><span class="token number">3</span><span class="token punctuation">)</span><span class="token punctuation">;</span></pre></td></tr><tr class="marked"><td data-num="5"></td><td><pre>q<span class="token punctuation">.</span><span class="token function">pop</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span></pre></td></tr></table></figure><blockquote><p>q = [2, 3]</p></blockquote><h2 id="取得元素"><a class="anchor" href="#取得元素">#</a> 取得元素</h2><h3 id="front"><a class="anchor" href="#front">#</a> front()</h3><p>取得 queue 的最頭部的元素使用  <code>front()</code> ，注意<strong>取得並不會將該元素從 queue 移除</strong>。</p><figure class="highlight cpp"><figcaption data-lang="C++"></figcaption><table><tr><td data-num="1"></td><td><pre>queue<span class="token operator">&lt;</span><span class="token keyword">int</span><span class="token operator">></span> q<span class="token punctuation">;</span></pre></td></tr><tr><td data-num="2"></td><td><pre>q<span class="token punctuation">.</span><span class="token function">push</span><span class="token punctuation">(</span><span class="token number">1</span><span class="token punctuation">)</span><span class="token punctuation">;</span></pre></td></tr><tr><td data-num="3"></td><td><pre>q<span class="token punctuation">.</span><span class="token function">push</span><span class="token punctuation">(</span><span class="token number">2</span><span class="token punctuation">)</span><span class="token punctuation">;</span></pre></td></tr><tr><td data-num="4"></td><td><pre>q<span class="token punctuation">.</span><span class="token function">push</span><span class="token punctuation">(</span><span class="token number">3</span><span class="token punctuation">)</span><span class="token punctuation">;</span></pre></td></tr><tr><td data-num="5"></td><td><pre>cout <span class="token operator">&lt;&lt;</span> <span class="token string">"front: "</span> <span class="token operator">&lt;&lt;</span> q<span class="token punctuation">.</span><span class="token function">front</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span></pre></td></tr></table></figure><blockquote><p>front: 1</p></blockquote><h3 id="back"><a class="anchor" href="#back">#</a> back()</h3><p>取得 queue 的最尾巴的元素使用  <code>back()</code> 。</p><figure class="highlight cpp"><figcaption data-lang="C++"></figcaption><table><tr><td data-num="1"></td><td><pre>queue<span class="token operator">&lt;</span><span class="token keyword">int</span><span class="token operator">></span> q<span class="token punctuation">;</span></pre></td></tr><tr><td data-num="2"></td><td><pre>q<span class="token punctuation">.</span><span class="token function">push</span><span class="token punctuation">(</span><span class="token number">1</span><span class="token punctuation">)</span><span class="token punctuation">;</span></pre></td></tr><tr><td data-num="3"></td><td><pre>q<span class="token punctuation">.</span><span class="token function">push</span><span class="token punctuation">(</span><span class="token number">2</span><span class="token punctuation">)</span><span class="token punctuation">;</span></pre></td></tr><tr><td data-num="4"></td><td><pre>q<span class="token punctuation">.</span><span class="token function">push</span><span class="token punctuation">(</span><span class="token number">3</span><span class="token punctuation">)</span><span class="token punctuation">;</span></pre></td></tr><tr><td data-num="5"></td><td><pre>cout <span class="token operator">&lt;&lt;</span> <span class="token string">"back: "</span> <span class="token operator">&lt;&lt;</span> q<span class="token punctuation">.</span><span class="token function">back</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span></pre></td></tr></table></figure><blockquote><p>back: 3</p></blockquote><h2 id="取得-queue-長度"><a class="anchor" href="#取得-queue-長度">#</a> 取得 queue 長度</h2><p>取得 queue 目前裡面有幾個元素使用  <code>size()</code> 。</p><figure class="highlight cpp"><figcaption data-lang="C++"></figcaption><table><tr><td data-num="1"></td><td><pre>queue<span class="token operator">&lt;</span><span class="token keyword">int</span><span class="token operator">></span> q<span class="token punctuation">;</span></pre></td></tr><tr><td data-num="2"></td><td><pre>q<span class="token punctuation">.</span><span class="token function">push</span><span class="token punctuation">(</span><span class="token number">1</span><span class="token punctuation">)</span><span class="token punctuation">;</span></pre></td></tr><tr><td data-num="3"></td><td><pre>q<span class="token punctuation">.</span><span class="token function">push</span><span class="token punctuation">(</span><span class="token number">2</span><span class="token punctuation">)</span><span class="token punctuation">;</span></pre></td></tr><tr><td data-num="4"></td><td><pre>q<span class="token punctuation">.</span><span class="token function">push</span><span class="token punctuation">(</span><span class="token number">3</span><span class="token punctuation">)</span><span class="token punctuation">;</span></pre></td></tr><tr class="marked"><td data-num="5"></td><td><pre>cout <span class="token operator">&lt;&lt;</span> <span class="token string">"size: "</span> <span class="token operator">&lt;&lt;</span> q<span class="token punctuation">.</span><span class="token function">size</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span></pre></td></tr></table></figure><blockquote><p>size: 3</p></blockquote><h2 id="清空-queue"><a class="anchor" href="#清空-queue">#</a> 清空 queue</h2><figure class="highlight cpp"><figcaption data-lang="C++"></figcaption><table><tr><td data-num="1"></td><td><pre>queue<span class="token operator">&lt;</span><span class="token keyword">int</span><span class="token operator">></span> q<span class="token punctuation">;</span></pre></td></tr><tr class="marked"><td data-num="2"></td><td><pre>q<span class="token punctuation">.</span><span class="token function">clear</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span></pre></td></tr></table></figure><h2 id="確認-queue-是否為空"><a class="anchor" href="#確認-queue-是否為空">#</a> 確認 queue 是否為空</h2><p>確認 queue 是否為空使用  <code>empty()</code></p><figure class="highlight cpp"><figcaption data-lang="C++"></figcaption><table><tr><td data-num="1"></td><td><pre>queue<span class="token operator">&lt;</span><span class="token keyword">int</span><span class="token operator">></span> q<span class="token punctuation">;</span></pre></td></tr><tr><td data-num="2"></td><td><pre>q<span class="token punctuation">.</span><span class="token function">clear</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span></pre></td></tr><tr class="marked"><td data-num="3"></td><td><pre><span class="token keyword">if</span> <span class="token punctuation">(</span>q<span class="token punctuation">.</span><span class="token function">empty</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span> cout <span class="token operator">&lt;&lt;</span> <span class="token string">"empty"</span><span class="token punctuation">;</span></pre></td></tr><tr><td data-num="4"></td><td><pre><span class="token keyword">else</span> cout <span class="token operator">&lt;&lt;</span> <span class="token string">"Not empty"</span><span class="token punctuation">;</span></pre></td></tr></table></figure><blockquote><p>empty</p></blockquote><h2 id="參考資料"><a class="anchor" href="#參考資料">#</a> 參考資料</h2><ul><li><span class="exturl" data-url="aHR0cHM6Ly9zaGVuZ3l1NzY5Ny5naXRodWIuaW8vc3RkLXF1ZXVlLw==">https://shengyu7697.github.io/std-queue/</span></li></ul>]]></content>
      
      
      <categories>
          
          <category> Programming </category>
          
          <category> C/C++ </category>
          
      </categories>
      
      
        <tags>
            
            <tag> Data Structure </tag>
            
            <tag> C/C++ </tag>
            
            <tag> queue </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>662. Maximum Width of Binary Tree</title>
      <link href="/2023/04/20/Coding/leetcode/Medium/662%20Maximum%20Width%20of%20Binary%20Tree/"/>
      <url>/2023/04/20/Coding/leetcode/Medium/662%20Maximum%20Width%20of%20Binary%20Tree/</url>
      
        <content type="html"><![CDATA[<p>⭐️⭐️</p><h2 id="題目敘述"><a class="anchor" href="#題目敘述">#</a> <span class="exturl" data-url="aHR0cHM6Ly9sZWV0Y29kZS5jb20vcHJvYmxlbXMvbWF4aW11bS13aWR0aC1vZi1iaW5hcnktdHJlZS8=">題目敘述</span></h2><p>Given the  <code>root</code>  of a binary tree, return <em>the maximum width of the given tree</em>.</p><p>The <strong>maximum width</strong> of a tree is the maximum <strong>width</strong> among all levels.</p><p>The <strong>width</strong> of one level is defined as the length between the end-nodes (the leftmost and rightmost non-null nodes), where the null nodes between the end-nodes that would be present in a complete binary tree extending down to that level are also counted into the length calculation.</p><p>It is <strong>guaranteed</strong> that the answer will in the range of a <strong>32-bit</strong> signed integer.</p><h3 id="example-1"><a class="anchor" href="#example-1">#</a> Example 1:</h3><p><img data-src="https://i.imgur.com/BjIsiaN.png" alt=""></p><blockquote><p><strong>Input:</strong> root = [1,3,2,5,3,null,9]<br><strong>Output:</strong> 4<br><strong>Explanation:</strong> The maximum width exists in the third level with length 4 (5,3,null,9).</p></blockquote><h3 id="example-2"><a class="anchor" href="#example-2">#</a> Example 2:</h3><p><img data-src="https://i.imgur.com/uRAtVHp.png" alt=""></p><blockquote><p><strong>Input:</strong> root = [1,3,2,5,null,null,9,6,null,7]<br><strong>Output:</strong> 7<br><strong>Explanation:</strong> The maximum width exists in the fourth level with length 7 (6,null,null,null,null,null,7).</p></blockquote><h3 id="example-3"><a class="anchor" href="#example-3">#</a> Example 3:</h3><p><img data-src="https://i.imgur.com/ykiXotC.png" alt=""></p><blockquote><p><strong>Input:</strong> root = [1,3,2,5]<br><strong>Output:</strong> 2<br><strong>Explanation:</strong> The maximum width exists in the second level with length 2 (3,2).</p></blockquote><h2 id="解題思路"><a class="anchor" href="#解題思路">#</a> 解題思路</h2><h2 id="code"><a class="anchor" href="#code">#</a> Code</h2><div class="tab" data-id="id" data-title="C++"><figure class="highlight cpp"><figcaption data-lang="C++"></figcaption><table><tr><td data-num="1"></td><td><pre><span class="token keyword">class</span> <span class="token class-name">Solution</span> <span class="token punctuation">&#123;</span></pre></td></tr><tr><td data-num="2"></td><td><pre><span class="token keyword">public</span><span class="token operator">:</span></pre></td></tr><tr><td data-num="3"></td><td><pre>    <span class="token keyword">int</span> <span class="token function">widthOfBinaryTree</span><span class="token punctuation">(</span>TreeNode<span class="token operator">*</span> root<span class="token punctuation">)</span> <span class="token punctuation">&#123;</span></pre></td></tr><tr><td data-num="4"></td><td><pre>        <span class="token keyword">if</span> <span class="token punctuation">(</span><span class="token operator">!</span>root<span class="token punctuation">)</span> <span class="token keyword">return</span> <span class="token number">0</span><span class="token punctuation">;</span></pre></td></tr><tr><td data-num="5"></td><td><pre></pre></td></tr><tr><td data-num="6"></td><td><pre>        <span class="token keyword">int</span> res <span class="token operator">=</span> <span class="token number">1</span><span class="token punctuation">;</span></pre></td></tr><tr><td data-num="7"></td><td><pre>        queue<span class="token operator">&lt;</span>pair<span class="token operator">&lt;</span>TreeNode<span class="token operator">*</span><span class="token punctuation">,</span> <span class="token keyword">int</span><span class="token operator">>></span> q<span class="token punctuation">;</span></pre></td></tr><tr><td data-num="8"></td><td><pre>        q<span class="token punctuation">.</span><span class="token function">push</span><span class="token punctuation">(</span><span class="token punctuation">&#123;</span>root<span class="token punctuation">,</span> <span class="token number">0</span><span class="token punctuation">&#125;</span><span class="token punctuation">)</span><span class="token punctuation">;</span></pre></td></tr><tr><td data-num="9"></td><td><pre></pre></td></tr><tr><td data-num="10"></td><td><pre>        <span class="token keyword">while</span> <span class="token punctuation">(</span><span class="token operator">!</span>q<span class="token punctuation">.</span><span class="token function">empty</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span></pre></td></tr><tr><td data-num="11"></td><td><pre>            <span class="token keyword">int</span> len <span class="token operator">=</span> q<span class="token punctuation">.</span><span class="token function">size</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span></pre></td></tr><tr><td data-num="12"></td><td><pre>            <span class="token keyword">int</span> start <span class="token operator">=</span> q<span class="token punctuation">.</span><span class="token function">front</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span>second<span class="token punctuation">,</span> end <span class="token operator">=</span> q<span class="token punctuation">.</span><span class="token function">back</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span>second<span class="token punctuation">;</span></pre></td></tr><tr><td data-num="13"></td><td><pre>            res <span class="token operator">=</span> <span class="token function">max</span><span class="token punctuation">(</span>res<span class="token punctuation">,</span> end <span class="token operator">-</span> start <span class="token operator">+</span> <span class="token number">1</span><span class="token punctuation">)</span><span class="token punctuation">;</span></pre></td></tr><tr><td data-num="14"></td><td><pre></pre></td></tr><tr><td data-num="15"></td><td><pre>            <span class="token keyword">for</span> <span class="token punctuation">(</span><span class="token keyword">int</span> i<span class="token operator">=</span><span class="token number">0</span><span class="token punctuation">;</span> i<span class="token operator">&lt;</span>len<span class="token punctuation">;</span> i<span class="token operator">++</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span></pre></td></tr><tr><td data-num="16"></td><td><pre>                <span class="token keyword">auto</span> p <span class="token operator">=</span> q<span class="token punctuation">.</span><span class="token function">front</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span></pre></td></tr><tr><td data-num="17"></td><td><pre>                q<span class="token punctuation">.</span><span class="token function">pop</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span></pre></td></tr><tr><td data-num="18"></td><td><pre>                TreeNode<span class="token operator">*</span> tmp <span class="token operator">=</span> p<span class="token punctuation">.</span>first<span class="token punctuation">;</span></pre></td></tr><tr><td data-num="19"></td><td><pre>                <span class="token keyword">int</span> idx <span class="token operator">=</span> p<span class="token punctuation">.</span>second<span class="token punctuation">;</span></pre></td></tr><tr><td data-num="20"></td><td><pre></pre></td></tr><tr><td data-num="21"></td><td><pre>                <span class="token keyword">if</span> <span class="token punctuation">(</span>tmp<span class="token operator">-></span>left<span class="token punctuation">)</span> q<span class="token punctuation">.</span><span class="token function">push</span><span class="token punctuation">(</span><span class="token punctuation">&#123;</span>tmp<span class="token operator">-></span>left<span class="token punctuation">,</span> <span class="token punctuation">(</span><span class="token punctuation">(</span><span class="token keyword">long</span><span class="token punctuation">)</span><span class="token number">2</span> <span class="token operator">*</span> idx <span class="token operator">+</span> <span class="token number">1</span><span class="token punctuation">)</span><span class="token punctuation">&#125;</span><span class="token punctuation">)</span><span class="token punctuation">;</span></pre></td></tr><tr><td data-num="22"></td><td><pre>                <span class="token keyword">if</span> <span class="token punctuation">(</span>tmp<span class="token operator">-></span>right<span class="token punctuation">)</span> q<span class="token punctuation">.</span><span class="token function">push</span><span class="token punctuation">(</span><span class="token punctuation">&#123;</span>tmp<span class="token operator">-></span>right<span class="token punctuation">,</span> <span class="token punctuation">(</span><span class="token punctuation">(</span><span class="token keyword">long</span><span class="token punctuation">)</span><span class="token number">2</span> <span class="token operator">*</span> idx <span class="token operator">+</span> <span class="token number">2</span><span class="token punctuation">)</span><span class="token punctuation">&#125;</span><span class="token punctuation">)</span><span class="token punctuation">;</span></pre></td></tr><tr><td data-num="23"></td><td><pre>            <span class="token punctuation">&#125;</span></pre></td></tr><tr><td data-num="24"></td><td><pre>        <span class="token punctuation">&#125;</span></pre></td></tr><tr><td data-num="25"></td><td><pre>        <span class="token keyword">return</span> res<span class="token punctuation">;</span></pre></td></tr><tr><td data-num="26"></td><td><pre>    <span class="token punctuation">&#125;</span></pre></td></tr><tr><td data-num="27"></td><td><pre><span class="token punctuation">&#125;</span><span class="token punctuation">;</span></pre></td></tr></table></figure></div><div class="tab" data-id="id" data-title="Java"><figure class="highlight java"><figcaption data-lang="java"></figcaption><table><tr><td data-num="1"></td><td><pre><span class="token keyword">import</span> <span class="token import"><span class="token namespace">java<span class="token punctuation">.</span>util<span class="token punctuation">.</span></span><span class="token class-name">LinkedList</span></span><span class="token punctuation">;</span></pre></td></tr><tr><td data-num="2"></td><td><pre><span class="token keyword">import</span> <span class="token import"><span class="token namespace">java<span class="token punctuation">.</span>util<span class="token punctuation">.</span></span><span class="token class-name">Queue</span></span><span class="token punctuation">;</span></pre></td></tr><tr><td data-num="3"></td><td><pre></pre></td></tr><tr><td data-num="4"></td><td><pre><span class="token keyword">class</span> <span class="token class-name">Solution</span> <span class="token punctuation">&#123;</span></pre></td></tr><tr><td data-num="5"></td><td><pre>    <span class="token keyword">public</span> <span class="token keyword">int</span> <span class="token function">widthOfBinaryTree</span><span class="token punctuation">(</span><span class="token class-name">TreeNode</span> root<span class="token punctuation">)</span> <span class="token punctuation">&#123;</span></pre></td></tr><tr><td data-num="6"></td><td><pre>        <span class="token keyword">if</span> <span class="token punctuation">(</span>root <span class="token operator">==</span> <span class="token keyword">null</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span></pre></td></tr><tr><td data-num="7"></td><td><pre>            <span class="token keyword">return</span> <span class="token number">0</span><span class="token punctuation">;</span></pre></td></tr><tr><td data-num="8"></td><td><pre>        <span class="token punctuation">&#125;</span></pre></td></tr><tr><td data-num="9"></td><td><pre>        </pre></td></tr><tr><td data-num="10"></td><td><pre>        <span class="token class-name">Queue</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token class-name">Pair</span><span class="token punctuation">&lt;</span><span class="token class-name">TreeNode</span><span class="token punctuation">,</span> <span class="token class-name">Integer</span><span class="token punctuation">></span><span class="token punctuation">></span></span> queue <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">LinkedList</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token punctuation">></span></span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span></pre></td></tr><tr><td data-num="11"></td><td><pre>        queue<span class="token punctuation">.</span><span class="token function">add</span><span class="token punctuation">(</span><span class="token keyword">new</span> <span class="token class-name">Pair</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token punctuation">></span></span><span class="token punctuation">(</span>root<span class="token punctuation">,</span> <span class="token number">0</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span></pre></td></tr><tr><td data-num="12"></td><td><pre>        <span class="token keyword">int</span> maxWidth <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span></pre></td></tr><tr><td data-num="13"></td><td><pre>        </pre></td></tr><tr><td data-num="14"></td><td><pre>        <span class="token keyword">while</span> <span class="token punctuation">(</span><span class="token operator">!</span>queue<span class="token punctuation">.</span><span class="token function">isEmpty</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span></pre></td></tr><tr><td data-num="15"></td><td><pre>            <span class="token keyword">int</span> levelLength <span class="token operator">=</span> queue<span class="token punctuation">.</span><span class="token function">size</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span></pre></td></tr><tr><td data-num="16"></td><td><pre>            <span class="token keyword">int</span> levelStart <span class="token operator">=</span> queue<span class="token punctuation">.</span><span class="token function">peek</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">getValue</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span></pre></td></tr><tr><td data-num="17"></td><td><pre>            <span class="token keyword">int</span> index <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span></pre></td></tr><tr><td data-num="18"></td><td><pre>            </pre></td></tr><tr><td data-num="19"></td><td><pre>            <span class="token keyword">for</span> <span class="token punctuation">(</span><span class="token keyword">int</span> i <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span> i <span class="token operator">&lt;</span> levelLength<span class="token punctuation">;</span> i<span class="token operator">++</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span></pre></td></tr><tr><td data-num="20"></td><td><pre>                <span class="token class-name">Pair</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token class-name">TreeNode</span><span class="token punctuation">,</span> <span class="token class-name">Integer</span><span class="token punctuation">></span></span> pair <span class="token operator">=</span> queue<span class="token punctuation">.</span><span class="token function">poll</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span></pre></td></tr><tr><td data-num="21"></td><td><pre>                <span class="token class-name">TreeNode</span> node <span class="token operator">=</span> pair<span class="token punctuation">.</span><span class="token function">getKey</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span></pre></td></tr><tr><td data-num="22"></td><td><pre>                index <span class="token operator">=</span> pair<span class="token punctuation">.</span><span class="token function">getValue</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span></pre></td></tr><tr><td data-num="23"></td><td><pre>                </pre></td></tr><tr><td data-num="24"></td><td><pre>                <span class="token keyword">if</span> <span class="token punctuation">(</span>node<span class="token punctuation">.</span>left <span class="token operator">!=</span> <span class="token keyword">null</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span></pre></td></tr><tr><td data-num="25"></td><td><pre>                    queue<span class="token punctuation">.</span><span class="token function">add</span><span class="token punctuation">(</span><span class="token keyword">new</span> <span class="token class-name">Pair</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token punctuation">></span></span><span class="token punctuation">(</span>node<span class="token punctuation">.</span>left<span class="token punctuation">,</span> <span class="token number">2</span><span class="token operator">*</span>index<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span></pre></td></tr><tr><td data-num="26"></td><td><pre>                <span class="token punctuation">&#125;</span></pre></td></tr><tr><td data-num="27"></td><td><pre>                </pre></td></tr><tr><td data-num="28"></td><td><pre>                <span class="token keyword">if</span> <span class="token punctuation">(</span>node<span class="token punctuation">.</span>right <span class="token operator">!=</span> <span class="token keyword">null</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span></pre></td></tr><tr><td data-num="29"></td><td><pre>                    queue<span class="token punctuation">.</span><span class="token function">add</span><span class="token punctuation">(</span><span class="token keyword">new</span> <span class="token class-name">Pair</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token punctuation">></span></span><span class="token punctuation">(</span>node<span class="token punctuation">.</span>right<span class="token punctuation">,</span> <span class="token number">2</span><span class="token operator">*</span>index<span class="token operator">+</span><span class="token number">1</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span></pre></td></tr><tr><td data-num="30"></td><td><pre>                <span class="token punctuation">&#125;</span></pre></td></tr><tr><td data-num="31"></td><td><pre>            <span class="token punctuation">&#125;</span></pre></td></tr><tr><td data-num="32"></td><td><pre>            </pre></td></tr><tr><td data-num="33"></td><td><pre>            maxWidth <span class="token operator">=</span> <span class="token class-name">Math</span><span class="token punctuation">.</span><span class="token function">max</span><span class="token punctuation">(</span>maxWidth<span class="token punctuation">,</span> index <span class="token operator">-</span> levelStart <span class="token operator">+</span> <span class="token number">1</span><span class="token punctuation">)</span><span class="token punctuation">;</span></pre></td></tr><tr><td data-num="34"></td><td><pre>        <span class="token punctuation">&#125;</span></pre></td></tr><tr><td data-num="35"></td><td><pre>        </pre></td></tr><tr><td data-num="36"></td><td><pre>        <span class="token keyword">return</span> maxWidth<span class="token punctuation">;</span></pre></td></tr><tr><td data-num="37"></td><td><pre>    <span class="token punctuation">&#125;</span></pre></td></tr><tr><td data-num="38"></td><td><pre><span class="token punctuation">&#125;</span></pre></td></tr></table></figure></div><div class="tab" data-id="id" data-title="Python"><figure class="highlight python"><figcaption data-lang="python"></figcaption><table><tr><td data-num="1"></td><td><pre><span class="token keyword">class</span> <span class="token class-name">Solution</span><span class="token punctuation">:</span></pre></td></tr><tr><td data-num="2"></td><td><pre>    <span class="token keyword">def</span> <span class="token function">widthOfBinaryTree</span><span class="token punctuation">(</span>self<span class="token punctuation">,</span> root<span class="token punctuation">:</span> Optional<span class="token punctuation">[</span>TreeNode<span class="token punctuation">]</span><span class="token punctuation">)</span> <span class="token operator">-</span><span class="token operator">></span> <span class="token builtin">int</span><span class="token punctuation">:</span></pre></td></tr><tr><td data-num="3"></td><td><pre>        <span class="token keyword">if</span> <span class="token keyword">not</span> root<span class="token punctuation">:</span> <span class="token keyword">return</span> <span class="token number">0</span></pre></td></tr><tr><td data-num="4"></td><td><pre></pre></td></tr><tr><td data-num="5"></td><td><pre>        q <span class="token operator">=</span> deque<span class="token punctuation">(</span><span class="token punctuation">[</span><span class="token punctuation">(</span>root<span class="token punctuation">,</span> <span class="token number">0</span><span class="token punctuation">)</span><span class="token punctuation">]</span><span class="token punctuation">)</span></pre></td></tr><tr><td data-num="6"></td><td><pre>        res <span class="token operator">=</span> <span class="token number">0</span></pre></td></tr><tr><td data-num="7"></td><td><pre></pre></td></tr><tr><td data-num="8"></td><td><pre>        <span class="token keyword">while</span> q<span class="token punctuation">:</span></pre></td></tr><tr><td data-num="9"></td><td><pre>            l <span class="token operator">=</span> <span class="token builtin">len</span><span class="token punctuation">(</span>q<span class="token punctuation">)</span></pre></td></tr><tr><td data-num="10"></td><td><pre>            _<span class="token punctuation">,</span> start <span class="token operator">=</span> q<span class="token punctuation">[</span><span class="token number">0</span><span class="token punctuation">]</span></pre></td></tr><tr><td data-num="11"></td><td><pre></pre></td></tr><tr><td data-num="12"></td><td><pre>            <span class="token keyword">for</span> i <span class="token keyword">in</span> <span class="token builtin">range</span><span class="token punctuation">(</span>l<span class="token punctuation">)</span><span class="token punctuation">:</span></pre></td></tr><tr><td data-num="13"></td><td><pre>                node<span class="token punctuation">,</span> idx <span class="token operator">=</span> q<span class="token punctuation">.</span>popleft<span class="token punctuation">(</span><span class="token punctuation">)</span></pre></td></tr><tr><td data-num="14"></td><td><pre></pre></td></tr><tr><td data-num="15"></td><td><pre>                <span class="token keyword">if</span> node<span class="token punctuation">.</span>left<span class="token punctuation">:</span> q<span class="token punctuation">.</span>append<span class="token punctuation">(</span><span class="token punctuation">(</span>node<span class="token punctuation">.</span>left<span class="token punctuation">,</span> <span class="token number">2</span> <span class="token operator">*</span> idx<span class="token punctuation">)</span><span class="token punctuation">)</span></pre></td></tr><tr><td data-num="16"></td><td><pre>                <span class="token keyword">if</span> node<span class="token punctuation">.</span>right<span class="token punctuation">:</span> q<span class="token punctuation">.</span>append<span class="token punctuation">(</span><span class="token punctuation">(</span>node<span class="token punctuation">.</span>right<span class="token punctuation">,</span> <span class="token number">2</span> <span class="token operator">*</span> idx <span class="token operator">+</span> <span class="token number">1</span><span class="token punctuation">)</span><span class="token punctuation">)</span></pre></td></tr><tr><td data-num="17"></td><td><pre>            res <span class="token operator">=</span> <span class="token builtin">max</span><span class="token punctuation">(</span>res<span class="token punctuation">,</span> idx <span class="token operator">-</span> start <span class="token operator">+</span> <span class="token number">1</span><span class="token punctuation">)</span></pre></td></tr><tr><td data-num="18"></td><td><pre>        <span class="token keyword">return</span> res</pre></td></tr></table></figure></div>]]></content>
      
      
      <categories>
          
          <category> Coding </category>
          
          <category> Leetcode </category>
          
          <category> Medium </category>
          
      </categories>
      
      
        <tags>
            
            <tag> Leetcode </tag>
            
            <tag> Medium </tag>
            
            <tag> Depth-First Search </tag>
            
            <tag> Breadth-First Search </tag>
            
            <tag> Tree </tag>
            
            <tag> Binary Tree </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>C++ - Set</title>
      <link href="/2023/04/19/programming/CPP/cpp%20set/"/>
      <url>/2023/04/19/programming/CPP/cpp%20set/</url>
      
        <content type="html"><![CDATA[<p>C++  <code>set</code>  是一個關聯式容器， <code>set</code>  容器裡面的元素是<strong>唯一</strong>的，具有<strong>不重複</strong>的特性，而且是<strong>有排序</strong>的容器， <code>set</code>  容器裡面元素的值是<strong>不可修改</strong>，但 set 容器<strong>可以插入或刪除</strong>元素， <code>set</code>  的實作方式通常是用紅黑樹 (red-black tree) 實作的。</p><h2 id="set-初始化"><a class="anchor" href="#set-初始化">#</a> set 初始化</h2><p>C++ set 初始化用法如下，<br> 需要引入  <code>include&lt;set&gt;</code>  標頭檔</p><figure class="highlight cpp"><figcaption data-lang="C++"></figcaption><table><tr><td data-num="1"></td><td><pre>set<span class="token operator">&lt;</span><span class="token keyword">int</span><span class="token operator">></span> st<span class="token punctuation">&#123;</span><span class="token number">1</span><span class="token punctuation">,</span> <span class="token number">2</span><span class="token punctuation">,</span> <span class="token number">3</span><span class="token punctuation">,</span> <span class="token number">4</span><span class="token punctuation">,</span> <span class="token number">5</span><span class="token punctuation">&#125;</span><span class="token punctuation">;</span></pre></td></tr></table></figure><p>從 c-style 陣列來初始化</p><figure class="highlight cpp"><figcaption data-lang="C++"></figcaption><table><tr><td data-num="1"></td><td><pre><span class="token keyword">int</span> arr<span class="token punctuation">[</span><span class="token punctuation">]</span> <span class="token operator">=</span> <span class="token punctuation">&#123;</span><span class="token number">1</span><span class="token punctuation">,</span> <span class="token number">2</span><span class="token punctuation">,</span> <span class="token number">3</span><span class="token punctuation">,</span> <span class="token number">4</span><span class="token punctuation">,</span> <span class="token number">5</span><span class="token punctuation">&#125;</span><span class="token punctuation">;</span></pre></td></tr><tr><td data-num="2"></td><td><pre>set<span class="token operator">&lt;</span><span class="token keyword">int</span><span class="token operator">></span> <span class="token function">st</span><span class="token punctuation">(</span>arr<span class="token punctuation">,</span> arr <span class="token operator">+</span> <span class="token number">5</span><span class="token punctuation">)</span><span class="token punctuation">;</span></pre></td></tr></table></figure><h2 id="set-插入元素"><a class="anchor" href="#set-插入元素">#</a> set 插入元素</h2><p>set 使用  <code>insert()</code>  來插入元素。<br>用法如下，</p><figure class="highlight cpp"><figcaption data-lang="C++"></figcaption><table><tr><td data-num="1"></td><td><pre>set<span class="token operator">&lt;</span><span class="token keyword">int</span><span class="token operator">></span> st<span class="token punctuation">;</span></pre></td></tr><tr><td data-num="2"></td><td><pre>st<span class="token punctuation">.</span><span class="token function">insert</span><span class="token punctuation">(</span><span class="token number">1</span><span class="token punctuation">)</span><span class="token punctuation">;</span></pre></td></tr><tr><td data-num="3"></td><td><pre>st<span class="token punctuation">.</span><span class="token function">insert</span><span class="token punctuation">(</span><span class="token number">2</span><span class="token punctuation">)</span><span class="token punctuation">;</span></pre></td></tr><tr><td data-num="4"></td><td><pre>st<span class="token punctuation">.</span><span class="token function">insert</span><span class="token punctuation">(</span><span class="token number">3</span><span class="token punctuation">)</span><span class="token punctuation">;</span></pre></td></tr><tr><td data-num="5"></td><td><pre>st<span class="token punctuation">.</span><span class="token function">insert</span><span class="token punctuation">(</span><span class="token number">4</span><span class="token punctuation">)</span><span class="token punctuation">;</span></pre></td></tr><tr><td data-num="6"></td><td><pre>st<span class="token punctuation">.</span><span class="token function">insert</span><span class="token punctuation">(</span><span class="token number">5</span><span class="token punctuation">)</span><span class="token punctuation">;</span></pre></td></tr></table></figure><h2 id="set-讀取元素"><a class="anchor" href="#set-讀取元素">#</a> set 讀取元素</h2><p>由於 set 容器中沒有  <code>at()</code>  成員函數，也沒有  <code>operator[]</code> ，set 無法單純地隨機讀取某元素，但能透過 iterator 來讀取元素。</p><h3 id="迴圈遍歷-set-容器"><a class="anchor" href="#迴圈遍歷-set-容器">#</a> 迴圈遍歷 set 容器</h3><p>迴圈遍歷 set 容器的方式有幾種，<br>以下先介紹使用 range-based for loop 來遍歷 set 容器並且印出來，這邊故意將元素不按順序初始化以及插入，然後我們再來觀察看看是不是 set 會將其排序，同時看看是不是具有不重複性，</p><figure class="highlight cpp"><figcaption data-lang="C++"></figcaption><table><tr><td data-num="1"></td><td><pre>set<span class="token operator">&lt;</span><span class="token keyword">int</span><span class="token operator">></span> st <span class="token operator">=</span> <span class="token punctuation">&#123;</span><span class="token number">3</span><span class="token punctuation">,</span> <span class="token number">1</span><span class="token punctuation">&#125;</span><span class="token punctuation">;</span></pre></td></tr><tr><td data-num="2"></td><td><pre>st<span class="token punctuation">.</span><span class="token function">insert</span><span class="token punctuation">(</span><span class="token number">2</span><span class="token punctuation">)</span><span class="token punctuation">;</span></pre></td></tr><tr><td data-num="3"></td><td><pre>st<span class="token punctuation">.</span><span class="token function">insert</span><span class="token punctuation">(</span><span class="token number">5</span><span class="token punctuation">)</span><span class="token punctuation">;</span></pre></td></tr><tr><td data-num="4"></td><td><pre>st<span class="token punctuation">.</span><span class="token function">insert</span><span class="token punctuation">(</span><span class="token number">4</span><span class="token punctuation">)</span><span class="token punctuation">;</span></pre></td></tr><tr><td data-num="5"></td><td><pre>st<span class="token punctuation">.</span><span class="token function">insert</span><span class="token punctuation">(</span><span class="token number">5</span><span class="token punctuation">)</span><span class="token punctuation">;</span></pre></td></tr><tr><td data-num="6"></td><td><pre>st<span class="token punctuation">.</span><span class="token function">insert</span><span class="token punctuation">(</span><span class="token number">4</span><span class="token punctuation">)</span><span class="token punctuation">;</span></pre></td></tr><tr><td data-num="7"></td><td><pre></pre></td></tr><tr><td data-num="8"></td><td><pre><span class="token keyword">for</span> <span class="token punctuation">(</span><span class="token keyword">auto</span><span class="token operator">&amp;</span> s<span class="token operator">:</span> st<span class="token punctuation">)</span> cout <span class="token operator">&lt;&lt;</span> s <span class="token operator">&lt;&lt;</span> <span class="token string">" "</span><span class="token punctuation">;</span></pre></td></tr></table></figure><p>輸出內容如下，從這個輸出結果發現是元素是<strong>由小到大排列</strong>，所以 set 容器裡面真的是會幫你排序的，在<strong>插入元素的同時會根據元素來進行排序</strong>，並且沒有元素重複。</p><blockquote><p>1 2 3 4 5</p></blockquote><p>迴圈也可以使用<strong>迭代器</strong>的方式，用法如下，</p><figure class="highlight cpp"><figcaption data-lang="C++"></figcaption><table><tr class="marked"><td data-num="1"></td><td><pre><span class="token keyword">for</span> <span class="token punctuation">(</span>set<span class="token operator">&lt;</span><span class="token keyword">int</span><span class="token operator">></span><span class="token double-colon punctuation">::</span>iterator it <span class="token operator">=</span> st<span class="token punctuation">.</span><span class="token function">begin</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span> it <span class="token operator">!=</span> st<span class="token punctuation">.</span><span class="token function">end</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span> it<span class="token operator">++</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span></pre></td></tr><tr><td data-num="2"></td><td><pre>    cout <span class="token operator">&lt;&lt;</span> <span class="token operator">*</span>it <span class="token operator">&lt;&lt;</span> <span class="token string">" "</span><span class="token punctuation">;</span></pre></td></tr><tr><td data-num="3"></td><td><pre><span class="token punctuation">&#125;</span></pre></td></tr><tr><td data-num="4"></td><td><pre></pre></td></tr><tr><td data-num="5"></td><td><pre><span class="token comment">// or</span></pre></td></tr><tr><td data-num="6"></td><td><pre></pre></td></tr><tr class="marked"><td data-num="7"></td><td><pre><span class="token keyword">for</span> <span class="token punctuation">(</span><span class="token keyword">auto</span> it <span class="token operator">=</span> st<span class="token punctuation">.</span><span class="token function">begin</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span> it <span class="token operator">!=</span> st<span class="token punctuation">.</span><span class="token function">end</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span> it<span class="token operator">++</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span></pre></td></tr><tr><td data-num="8"></td><td><pre>    cout <span class="token operator">&lt;&lt;</span> <span class="token operator">*</span>it <span class="token operator">&lt;&lt;</span> <span class="token string">" "</span><span class="token punctuation">;</span></pre></td></tr><tr><td data-num="9"></td><td><pre><span class="token punctuation">&#125;</span></pre></td></tr></table></figure><p>如果要從後面印到前面的話，可以使用<strong>反向迭代器</strong>，如果嫌 iterator 迭代器名稱太長的話可以善用  <code>auto</code>  關鍵字讓編譯器去推導該變數類型，用法如下</p><figure class="highlight cpp"><figcaption data-lang="C++"></figcaption><table><tr><td data-num="1"></td><td><pre><span class="token keyword">for</span> <span class="token punctuation">(</span><span class="token keyword">auto</span> it <span class="token operator">=</span> st<span class="token punctuation">.</span><span class="token function">rbegin</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span> it <span class="token operator">!=</span> st<span class="token punctuation">.</span><span class="token function">rend</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span> it<span class="token operator">++</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span></pre></td></tr><tr><td data-num="2"></td><td><pre>    cout <span class="token operator">&lt;&lt;</span> <span class="token operator">*</span>it <span class="token operator">&lt;&lt;</span> <span class="token string">" "</span><span class="token punctuation">;</span></pre></td></tr><tr><td data-num="3"></td><td><pre><span class="token punctuation">&#125;</span></pre></td></tr></table></figure><p>使用反向迭代器的輸出結果如下</p><blockquote><p>5 4 3 2 1</p></blockquote><h2 id="set-刪除指定元素"><a class="anchor" href="#set-刪除指定元素">#</a> set 刪除指定元素</h2><p>set 刪除指定元素要使用  <code>erase()</code></p><figure class="highlight cpp"><figcaption data-lang="C++"></figcaption><table><tr><td data-num="1"></td><td><pre>set<span class="token operator">&lt;</span><span class="token keyword">int</span><span class="token operator">></span> st<span class="token punctuation">&#123;</span><span class="token number">2</span><span class="token punctuation">,</span> <span class="token number">4</span><span class="token punctuation">,</span> <span class="token number">6</span><span class="token punctuation">,</span> <span class="token number">8</span><span class="token punctuation">&#125;</span><span class="token punctuation">;</span></pre></td></tr><tr><td data-num="2"></td><td><pre></pre></td></tr><tr class="marked"><td data-num="3"></td><td><pre>st<span class="token punctuation">.</span><span class="token function">erase</span><span class="token punctuation">(</span><span class="token number">2</span><span class="token punctuation">)</span><span class="token punctuation">;</span></pre></td></tr><tr><td data-num="4"></td><td><pre><span class="token keyword">for</span> <span class="token punctuation">(</span><span class="token keyword">auto</span><span class="token operator">&amp;</span> s<span class="token operator">:</span> st<span class="token punctuation">)</span> cout <span class="token operator">&lt;&lt;</span> s <span class="token operator">&lt;&lt;</span> <span class="token string">" "</span><span class="token punctuation">;</span></pre></td></tr></table></figure><p>結果如下，</p><blockquote><p>4 6 8</p></blockquote><p>那 set 刪除不存在的元素呢？</p><figure class="highlight cpp"><figcaption data-lang="C++"></figcaption><table><tr><td data-num="1"></td><td><pre>set<span class="token operator">&lt;</span><span class="token keyword">int</span><span class="token operator">></span> st<span class="token punctuation">&#123;</span><span class="token number">2</span><span class="token punctuation">,</span> <span class="token number">4</span><span class="token punctuation">,</span> <span class="token number">6</span><span class="token punctuation">,</span> <span class="token number">8</span><span class="token punctuation">&#125;</span><span class="token punctuation">;</span></pre></td></tr><tr><td data-num="2"></td><td><pre><span class="token keyword">auto</span> ret <span class="token operator">=</span> st<span class="token punctuation">.</span><span class="token function">erase</span><span class="token punctuation">(</span><span class="token number">2</span><span class="token punctuation">)</span><span class="token punctuation">;</span></pre></td></tr><tr><td data-num="3"></td><td><pre>cout <span class="token operator">&lt;&lt;</span> ret <span class="token operator">&lt;&lt;</span> endl<span class="token punctuation">;</span></pre></td></tr><tr><td data-num="4"></td><td><pre><span class="token keyword">for</span> <span class="token punctuation">(</span><span class="token keyword">auto</span><span class="token operator">&amp;</span> s <span class="token operator">:</span> st<span class="token punctuation">)</span> cout <span class="token operator">&lt;&lt;</span> s <span class="token operator">&lt;&lt;</span> <span class="token char">' '</span><span class="token punctuation">;</span></pre></td></tr><tr><td data-num="5"></td><td><pre></pre></td></tr><tr class="marked"><td data-num="6"></td><td><pre>ret <span class="token operator">=</span> st<span class="token punctuation">.</span><span class="token function">erase</span><span class="token punctuation">(</span><span class="token number">3</span><span class="token punctuation">)</span><span class="token punctuation">;</span></pre></td></tr><tr><td data-num="7"></td><td><pre>cout <span class="token operator">&lt;&lt;</span> endl <span class="token operator">&lt;&lt;</span> ret <span class="token operator">&lt;&lt;</span> endl<span class="token punctuation">;</span></pre></td></tr><tr><td data-num="8"></td><td><pre><span class="token keyword">for</span> <span class="token punctuation">(</span><span class="token keyword">auto</span><span class="token operator">&amp;</span> s <span class="token operator">:</span> st<span class="token punctuation">)</span> cout <span class="token operator">&lt;&lt;</span> s <span class="token operator">&lt;&lt;</span> <span class="token char">' '</span><span class="token punctuation">;</span></pre></td></tr></table></figure><p>結果是可以這麼作的，不會發生什麼事。另外  <code>erase()</code>  <strong>會回傳告訴你刪除了幾個元素</strong>。</p><blockquote><p>1<br>4 6 8<br>0<br>4 6 8</p></blockquote><h2 id="清空-set-元素"><a class="anchor" href="#清空-set-元素">#</a> 清空 set 元素</h2><p>要清空 set 容器的的話，要使用  <code>clear()</code> ，</p><figure class="highlight cpp"><figcaption data-lang="C++"></figcaption><table><tr><td data-num="1"></td><td><pre>set<span class="token operator">&lt;</span><span class="token keyword">int</span><span class="token operator">></span> st<span class="token punctuation">&#123;</span><span class="token number">1</span><span class="token punctuation">,</span> <span class="token number">2</span><span class="token punctuation">,</span> <span class="token number">3</span><span class="token punctuation">&#125;</span><span class="token punctuation">;</span></pre></td></tr><tr class="marked"><td data-num="2"></td><td><pre>st<span class="token punctuation">.</span><span class="token function">clear</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span></pre></td></tr></table></figure><h2 id="set-判斷元素是否存在"><a class="anchor" href="#set-判斷元素是否存在">#</a> set 判斷元素是否存在</h2><p>set 要判斷指定元素是否存在的話有兩種方法，</p><h3 id="count"><a class="anchor" href="#count">#</a> count()</h3><p>第一種方法是使用  <code>count()</code>  成員函式，<strong> <code>count()</code>  存在該元素的話回傳  <code>1</code> ，不存在的話回傳  <code>0</code> </strong>，</p><figure class="highlight cpp"><figcaption data-lang="C++"></figcaption><table><tr><td data-num="1"></td><td><pre>set<span class="token operator">&lt;</span><span class="token keyword">int</span><span class="token operator">></span> st<span class="token punctuation">&#123;</span><span class="token number">2</span><span class="token punctuation">,</span> <span class="token number">4</span><span class="token punctuation">,</span> <span class="token number">6</span><span class="token punctuation">&#125;</span><span class="token punctuation">;</span></pre></td></tr><tr class="marked"><td data-num="2"></td><td><pre>cout <span class="token operator">&lt;&lt;</span> st<span class="token punctuation">.</span><span class="token function">count</span><span class="token punctuation">(</span><span class="token number">4</span><span class="token punctuation">)</span> <span class="token operator">&lt;&lt;</span> <span class="token string">", "</span><span class="token punctuation">;</span></pre></td></tr><tr class="marked"><td data-num="3"></td><td><pre>cout <span class="token operator">&lt;&lt;</span> st<span class="token punctuation">.</span><span class="token function">count</span><span class="token punctuation">(</span><span class="token number">8</span><span class="token punctuation">)</span><span class="token punctuation">;</span></pre></td></tr></table></figure><p>結果如下，</p><blockquote><p>1, 0</p></blockquote><h3 id="find"><a class="anchor" href="#find">#</a> find()</h3><p>第二種方法是使用  <code>find()</code>  成員函式來判斷指定元素是否存在，<br>與  <code>count()</code>  不同的是  <code>find()</code>  <strong>有找到該指定元素的話會回傳指向該特定元素的 iterator，否則回傳 past-the-end (end ()) iterator</strong></p><figure class="highlight cpp"><figcaption data-lang="C++"></figcaption><table><tr><td data-num="1"></td><td><pre>set<span class="token operator">&lt;</span><span class="token keyword">int</span><span class="token operator">></span> st <span class="token operator">=</span> <span class="token punctuation">&#123;</span><span class="token number">2</span><span class="token punctuation">,</span> <span class="token number">4</span><span class="token punctuation">,</span> <span class="token number">6</span><span class="token punctuation">&#125;</span><span class="token punctuation">;</span></pre></td></tr><tr class="marked"><td data-num="2"></td><td><pre><span class="token keyword">auto</span> search <span class="token operator">=</span> st<span class="token punctuation">.</span><span class="token function">find</span><span class="token punctuation">(</span><span class="token number">2</span><span class="token punctuation">)</span><span class="token punctuation">;</span></pre></td></tr><tr><td data-num="3"></td><td><pre><span class="token keyword">if</span> <span class="token punctuation">(</span>search <span class="token operator">!=</span> st<span class="token punctuation">.</span><span class="token function">end</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span> cout <span class="token operator">&lt;&lt;</span> <span class="token string">"Found "</span> <span class="token operator">&lt;&lt;</span> <span class="token operator">*</span>search <span class="token operator">&lt;&lt;</span> endl<span class="token punctuation">;</span></pre></td></tr><tr><td data-num="4"></td><td><pre><span class="token keyword">else</span> cout <span class="token operator">&lt;&lt;</span> <span class="token string">"Not found\n"</span><span class="token punctuation">;</span></pre></td></tr></table></figure><blockquote><p>Found 2</p></blockquote><h2 id="判斷-set-容器是否為空"><a class="anchor" href="#判斷-set-容器是否為空">#</a> 判斷 set 容器是否為空</h2><p>要判斷 set 是否為空或是裡面有沒有元素的話，可以用  <code>empty()</code></p><figure class="highlight cpp"><figcaption data-lang="C++"></figcaption><table><tr><td data-num="1"></td><td><pre>set<span class="token operator">&lt;</span><span class="token keyword">int</span><span class="token operator">></span> st<span class="token punctuation">;</span></pre></td></tr><tr><td data-num="2"></td><td><pre>st<span class="token punctuation">.</span><span class="token function">clear</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span></pre></td></tr><tr><td data-num="3"></td><td><pre></pre></td></tr><tr class="marked"><td data-num="4"></td><td><pre><span class="token keyword">if</span> <span class="token punctuation">(</span>st<span class="token punctuation">.</span><span class="token function">empty</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span> cout <span class="token operator">&lt;&lt;</span> <span class="token string">"Empty\n"</span><span class="token punctuation">;</span></pre></td></tr><tr><td data-num="5"></td><td><pre><span class="token keyword">else</span> cout <span class="token operator">&lt;&lt;</span> <span class="token string">"Not empty"</span><span class="token punctuation">;</span></pre></td></tr></table></figure><blockquote><p>Empty</p></blockquote><h2 id="set-vs-vector"><a class="anchor" href="#set-vs-vector">#</a> set vs. vector</h2><ul><li>唯一性<ul><li>set 跟 vector 不同之處是 <strong>set 容器裡面的元素是唯一的</strong>，具有不重複的特性，vector 則沒有這個限制。</li></ul></li><li>不可修改性<ul><li>vector 可以修改元素的值，但 <strong>set 容器裡面元素的值是不可修改的</strong>。</li></ul></li><li>順序性<ul><li><strong>set 是有序的</strong>，也就是裡面的元素會按照特定順序擺放，跟插入順序無關，vector 則不是。</li></ul></li></ul><h2 id="參考資料"><a class="anchor" href="#參考資料">#</a> 參考資料</h2><ul><li><span class="exturl" data-url="aHR0cHM6Ly9zaGVuZ3l1NzY5Ny5naXRodWIuaW8vc3RkLXNldC8=">https://shengyu7697.github.io/std-set/</span></li></ul>]]></content>
      
      
      <categories>
          
          <category> Programming </category>
          
          <category> C/C++ </category>
          
      </categories>
      
      
        <tags>
            
            <tag> Data Structure </tag>
            
            <tag> C/C++ </tag>
            
            <tag> Set </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>C/C++ - String Split</title>
      <link href="/2023/04/19/programming/CPP/cpp%20string%20split/"/>
      <url>/2023/04/19/programming/CPP/cpp%20string%20split/</url>
      
        <content type="html"><![CDATA[<h2 id="c-語言的-strtok"><a class="anchor" href="#c-語言的-strtok">#</a> C 語言的 strtok</h2><p>C 語言要字串分割通常會使用 strtok，要使用 strtok 的話需要引入的標頭檔  <code>&lt;string.h&gt;</code> ，如果要使用 C++ 的標頭檔則是引入  <code>&lt;cstring&gt;</code> ，</p><p>strtok 函式原型為</p><figure class="highlight c"><figcaption data-lang="c"><span>strtok</span></figcaption><table><tr><td data-num="1"></td><td><pre><span class="token keyword">char</span><span class="token operator">*</span> <span class="token function">strtok</span><span class="token punctuation">(</span><span class="token keyword">char</span><span class="token operator">*</span> str<span class="token punctuation">,</span> <span class="token keyword">const</span> <span class="token keyword">char</span><span class="token operator">*</span> delimiters<span class="token punctuation">)</span><span class="token punctuation">;</span></pre></td></tr></table></figure><p><code>strtok()</code>  會將  <code>str</code>  依據給入的  <code>delimiters</code>  (分割符號 / 分隔符號) 進行字串分割，如果<strong>成功的話會回傳指向分割結果的字串開頭</strong>，<strong>否則會回傳 NULL</strong>。</p><h3 id="example"><a class="anchor" href="#example">#</a> Example</h3><p><code>d</code>  是分割符號 / 分隔符號，這邊示範用<em>空格</em>與<em>逗號</em>進行分割，如果有需要的話還可以在 delimiters 加入更多的分割符號，<br> <code>p</code>  是<strong>指向每次分割的結果</strong>，</p><div class="note danger no-icon"><p>要注意的是<strong>除了第一次是將 str 帶入 strtok 分割以外，第二次以上都是將 NULL 帶入 strtok 繼續作字串分割</strong></p></div><figure class="highlight c"><figcaption data-lang="c"><span>strtok()</span><a href="https://chienikao.github.io">Home</a></figcaption><table><tr><td data-num="1"></td><td><pre><span class="token macro property"><span class="token directive-hash">#</span><span class="token directive keyword">include</span> <span class="token string">&lt;stdio.h></span></span></pre></td></tr><tr><td data-num="2"></td><td><pre><span class="token macro property"><span class="token directive-hash">#</span><span class="token directive keyword">include</span> <span class="token string">&lt;stdlib.h></span></span></pre></td></tr><tr class="marked"><td data-num="3"></td><td><pre><span class="token macro property"><span class="token directive-hash">#</span><span class="token directive keyword">include</span> <span class="token string">&lt;string.h></span></span></pre></td></tr><tr><td data-num="4"></td><td><pre></pre></td></tr><tr><td data-num="5"></td><td><pre>ing <span class="token function">main</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span></pre></td></tr><tr><td data-num="6"></td><td><pre>    <span class="token keyword">char</span> str<span class="token punctuation">[</span><span class="token punctuation">]</span> <span class="token operator">=</span> <span class="token string">"Hello world, nice to meet you"</span><span class="token punctuation">;</span></pre></td></tr><tr><td data-num="7"></td><td><pre>    <span class="token keyword">const</span> <span class="token keyword">char</span><span class="token operator">*</span> d <span class="token operator">=</span> <span class="token string">" ,"</span><span class="token punctuation">;</span></pre></td></tr><tr><td data-num="8"></td><td><pre>    <span class="token keyword">char</span><span class="token operator">*</span> p<span class="token punctuation">;</span></pre></td></tr><tr class="marked"><td data-num="9"></td><td><pre>    p <span class="token operator">=</span> <span class="token function">strtok</span><span class="token punctuation">(</span>str<span class="token punctuation">,</span> d<span class="token punctuation">)</span><span class="token punctuation">;</span></pre></td></tr><tr><td data-num="10"></td><td><pre></pre></td></tr><tr><td data-num="11"></td><td><pre>    <span class="token keyword">while</span> <span class="token punctuation">(</span>p <span class="token operator">!=</span> <span class="token constant">NULL</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span></pre></td></tr><tr><td data-num="12"></td><td><pre>        <span class="token function">printf</span><span class="token punctuation">(</span><span class="token string">"%s\n"</span><span class="token punctuation">,</span> p<span class="token punctuation">)</span><span class="token punctuation">;</span></pre></td></tr><tr class="marked"><td data-num="13"></td><td><pre>        p <span class="token operator">=</span> <span class="token function">strtok</span><span class="token punctuation">(</span><span class="token constant">NULL</span><span class="token punctuation">,</span> d<span class="token punctuation">)</span><span class="token punctuation">;</span></pre></td></tr><tr><td data-num="14"></td><td><pre>    <span class="token punctuation">&#125;</span></pre></td></tr><tr><td data-num="15"></td><td><pre><span class="token punctuation">&#125;</span></pre></td></tr></table></figure><p>結果如下，</p><blockquote><p>Hello<br>world<br>nice<br>to<br>meet<br>you</p></blockquote><div class="note danger no-icon"><p>因為 strtok 的實做原理是發現分割字元時，就把字元改為  <code>\0</code>  字元，意味著使用  <code>strtok()</code>  完後，<strong>原字串會被修改</strong>，<br>修改後的結果是  <code>Hello\nworld\n\nnice\nto\nmeet\nyou</code>  這樣的形式，所以原本的字串如果之後另有用途的話，記得先複製一份。</p></div><h2 id="c-find-substr"><a class="anchor" href="#c-find-substr">#</a> C++ find() &amp; substr()</h2><p><code>std::string::find()</code>  可以用來作<strong>字串搜尋</strong>的功能，再將每次找到的位置搭配  <code>std::string::substr()</code>  取出子字串並放入  <code>std::vector</code>  裡，最後再回傳這個結果  <code>std::vector&lt;std::string&gt; result</code> ，這種方式的好處是原字串不會被修改。</p><figure class="highlight cpp"><figcaption data-lang="C++"><span>find() & substr()</span><a href="https://chienikao.github.io">Home</a></figcaption><table><tr><td data-num="1"></td><td><pre><span class="token macro property"><span class="token directive-hash">#</span><span class="token directive keyword">include</span> <span class="token string">&lt;iostream></span></span></pre></td></tr><tr><td data-num="2"></td><td><pre><span class="token macro property"><span class="token directive-hash">#</span><span class="token directive keyword">include</span> <span class="token string">&lt;vector></span></span></pre></td></tr><tr><td data-num="3"></td><td><pre><span class="token macro property"><span class="token directive-hash">#</span><span class="token directive keyword">include</span> <span class="token string">&lt;cstring></span></span></pre></td></tr><tr><td data-num="4"></td><td><pre></pre></td></tr><tr><td data-num="5"></td><td><pre><span class="token keyword">using</span> <span class="token keyword">namespace</span> std<span class="token punctuation">;</span></pre></td></tr><tr><td data-num="6"></td><td><pre></pre></td></tr><tr class="marked"><td data-num="7"></td><td><pre><span class="token keyword">const</span> vector<span class="token operator">&lt;</span>string<span class="token operator">></span> <span class="token function">split</span><span class="token punctuation">(</span><span class="token keyword">const</span> string<span class="token operator">&amp;</span> str<span class="token punctuation">,</span> <span class="token keyword">const</span> string<span class="token operator">&amp;</span> pattern<span class="token punctuation">)</span> <span class="token punctuation">&#123;</span></pre></td></tr><tr><td data-num="8"></td><td><pre>    vector<span class="token operator">&lt;</span>string<span class="token operator">></span> res<span class="token punctuation">;</span></pre></td></tr><tr><td data-num="9"></td><td><pre>    string<span class="token double-colon punctuation">::</span>size_type begin<span class="token punctuation">,</span> end<span class="token punctuation">;</span></pre></td></tr><tr><td data-num="10"></td><td><pre></pre></td></tr><tr><td data-num="11"></td><td><pre>    end <span class="token operator">=</span> str<span class="token punctuation">.</span><span class="token function">find</span><span class="token punctuation">(</span>pattern<span class="token punctuation">)</span><span class="token punctuation">;</span></pre></td></tr><tr><td data-num="12"></td><td><pre>    begin <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span></pre></td></tr><tr><td data-num="13"></td><td><pre></pre></td></tr><tr><td data-num="14"></td><td><pre>    <span class="token keyword">while</span> <span class="token punctuation">(</span>end <span class="token operator">!=</span> string<span class="token double-colon punctuation">::</span>npos<span class="token punctuation">)</span> <span class="token punctuation">&#123;</span></pre></td></tr><tr><td data-num="15"></td><td><pre>        <span class="token keyword">if</span> <span class="token punctuation">(</span>end <span class="token operator">-</span> begin <span class="token operator">!=</span> <span class="token number">0</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span></pre></td></tr><tr><td data-num="16"></td><td><pre>            res<span class="token punctuation">.</span><span class="token function">push_back</span><span class="token punctuation">(</span>str<span class="token punctuation">.</span><span class="token function">substr</span><span class="token punctuation">(</span>begin<span class="token punctuation">,</span> end <span class="token operator">-</span> begin<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span></pre></td></tr><tr><td data-num="17"></td><td><pre>        <span class="token punctuation">&#125;</span></pre></td></tr><tr><td data-num="18"></td><td><pre>        begin <span class="token operator">=</span> end <span class="token operator">+</span> pattern<span class="token punctuation">.</span><span class="token function">size</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span></pre></td></tr><tr><td data-num="19"></td><td><pre>        end <span class="token operator">=</span> str<span class="token punctuation">.</span><span class="token function">find</span><span class="token punctuation">(</span>pattern<span class="token punctuation">,</span> begin<span class="token punctuation">)</span><span class="token punctuation">;</span></pre></td></tr><tr><td data-num="20"></td><td><pre>    <span class="token punctuation">&#125;</span></pre></td></tr><tr><td data-num="21"></td><td><pre></pre></td></tr><tr><td data-num="22"></td><td><pre>    <span class="token keyword">if</span> <span class="token punctuation">(</span>begin <span class="token operator">!=</span> str<span class="token punctuation">.</span><span class="token function">length</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span></pre></td></tr><tr><td data-num="23"></td><td><pre>        res<span class="token punctuation">.</span><span class="token function">push_back</span><span class="token punctuation">(</span>str<span class="token punctuation">.</span><span class="token function">substr</span><span class="token punctuation">(</span>begin<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span></pre></td></tr><tr><td data-num="24"></td><td><pre>    <span class="token punctuation">&#125;</span></pre></td></tr><tr><td data-num="25"></td><td><pre>    <span class="token keyword">return</span> res<span class="token punctuation">;</span></pre></td></tr><tr><td data-num="26"></td><td><pre><span class="token punctuation">&#125;</span></pre></td></tr><tr><td data-num="27"></td><td><pre></pre></td></tr><tr><td data-num="28"></td><td><pre><span class="token keyword">int</span> <span class="token function">main</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span></pre></td></tr><tr><td data-num="29"></td><td><pre>    string str <span class="token operator">=</span> <span class="token string">"This is a C++ string"</span><span class="token punctuation">;</span></pre></td></tr><tr><td data-num="30"></td><td><pre>    string pattern <span class="token operator">=</span> <span class="token string">" "</span><span class="token punctuation">;</span></pre></td></tr><tr><td data-num="31"></td><td><pre></pre></td></tr><tr><td data-num="32"></td><td><pre>    vector<span class="token operator">&lt;</span>string<span class="token operator">></span> v <span class="token operator">=</span> <span class="token function">split</span><span class="token punctuation">(</span>str<span class="token punctuation">,</span> pattern<span class="token punctuation">)</span><span class="token punctuation">;</span></pre></td></tr><tr><td data-num="33"></td><td><pre></pre></td></tr><tr><td data-num="34"></td><td><pre>    <span class="token keyword">for</span> <span class="token punctuation">(</span><span class="token keyword">auto</span><span class="token operator">&amp;</span> s <span class="token operator">:</span> v<span class="token punctuation">)</span> cout <span class="token operator">&lt;&lt;</span> s <span class="token operator">&lt;&lt;</span> endl<span class="token punctuation">;</span></pre></td></tr><tr><td data-num="35"></td><td><pre><span class="token punctuation">&#125;</span></pre></td></tr></table></figure><p>結果如下，</p><blockquote><p>This<br>is<br>a<br>C++<br>string</p></blockquote><h2 id="c-getline"><a class="anchor" href="#c-getline">#</a> C++ getline()</h2><p>先將  <code>string</code>  建立  <code>stringstream</code> ，再用  <code>getline()</code>  來處理  <code>stringstream</code> ，將每一次取出的字串放到  <code>vector</code> ，最後再回傳這個結果  <code>vector&lt;string&gt; result</code> ，這種方式的好處是原字串不會被修改。</p><figure class="highlight cpp"><figcaption data-lang="C++"><span>getline()</span><a href="https://chienikao.github.io">Home</a></figcaption><table><tr><td data-num="1"></td><td><pre><span class="token macro property"><span class="token directive-hash">#</span><span class="token directive keyword">include</span> <span class="token string">&lt;iostream></span></span></pre></td></tr><tr><td data-num="2"></td><td><pre><span class="token macro property"><span class="token directive-hash">#</span><span class="token directive keyword">include</span> <span class="token string">&lt;vector></span></span></pre></td></tr><tr class="marked"><td data-num="3"></td><td><pre><span class="token macro property"><span class="token directive-hash">#</span><span class="token directive keyword">include</span> <span class="token string">&lt;sstream></span></span></pre></td></tr><tr><td data-num="4"></td><td><pre><span class="token macro property"><span class="token directive-hash">#</span><span class="token directive keyword">include</span> <span class="token string">&lt;string></span></span></pre></td></tr><tr><td data-num="5"></td><td><pre></pre></td></tr><tr><td data-num="6"></td><td><pre><span class="token keyword">using</span> <span class="token keyword">namespace</span> std<span class="token punctuation">;</span></pre></td></tr><tr><td data-num="7"></td><td><pre></pre></td></tr><tr class="marked"><td data-num="8"></td><td><pre><span class="token keyword">const</span> vector<span class="token operator">&lt;</span>string<span class="token operator">></span> <span class="token function">split</span><span class="token punctuation">(</span><span class="token keyword">const</span> string<span class="token operator">&amp;</span> str<span class="token punctuation">,</span> <span class="token keyword">const</span> <span class="token keyword">char</span><span class="token operator">&amp;</span> delimiter<span class="token punctuation">)</span> <span class="token punctuation">&#123;</span></pre></td></tr><tr><td data-num="9"></td><td><pre>    vector<span class="token operator">&lt;</span>string<span class="token operator">></span> res<span class="token punctuation">;</span></pre></td></tr><tr><td data-num="10"></td><td><pre>    stringstream <span class="token function">ss</span><span class="token punctuation">(</span>str<span class="token punctuation">)</span><span class="token punctuation">;</span></pre></td></tr><tr><td data-num="11"></td><td><pre>    string tok<span class="token punctuation">;</span></pre></td></tr><tr><td data-num="12"></td><td><pre></pre></td></tr><tr><td data-num="13"></td><td><pre>    <span class="token keyword">while</span> <span class="token punctuation">(</span><span class="token function">getline</span><span class="token punctuation">(</span>ss<span class="token punctuation">,</span> tok<span class="token punctuation">,</span> delimiter<span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span></pre></td></tr><tr><td data-num="14"></td><td><pre>        res<span class="token punctuation">.</span><span class="token function">push_back</span><span class="token punctuation">(</span>tok<span class="token punctuation">)</span><span class="token punctuation">;</span></pre></td></tr><tr><td data-num="15"></td><td><pre>    <span class="token punctuation">&#125;</span></pre></td></tr><tr><td data-num="16"></td><td><pre>    <span class="token keyword">return</span> res<span class="token punctuation">;</span></pre></td></tr><tr><td data-num="17"></td><td><pre><span class="token punctuation">&#125;</span></pre></td></tr><tr><td data-num="18"></td><td><pre></pre></td></tr><tr><td data-num="19"></td><td><pre><span class="token keyword">int</span> <span class="token function">main</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span></pre></td></tr><tr><td data-num="20"></td><td><pre>    string str <span class="token operator">=</span> <span class="token string">"This is a C++ string"</span><span class="token punctuation">;</span></pre></td></tr><tr><td data-num="21"></td><td><pre>    vector<span class="token operator">&lt;</span>string<span class="token operator">></span> v <span class="token operator">=</span> <span class="token function">split</span><span class="token punctuation">(</span>str<span class="token punctuation">,</span> <span class="token char">' '</span><span class="token punctuation">)</span><span class="token punctuation">;</span></pre></td></tr><tr><td data-num="22"></td><td><pre></pre></td></tr><tr><td data-num="23"></td><td><pre>    <span class="token keyword">for</span> <span class="token punctuation">(</span><span class="token keyword">auto</span><span class="token operator">&amp;</span> s<span class="token operator">:</span> v<span class="token punctuation">)</span> cout <span class="token operator">&lt;&lt;</span> s <span class="token operator">&lt;&lt;</span> endl<span class="token punctuation">;</span></pre></td></tr><tr><td data-num="24"></td><td><pre><span class="token punctuation">&#125;</span></pre></td></tr></table></figure><p>結果如下，</p><blockquote><p>This<br>is<br>a<br>C++<br>string</p></blockquote><h2 id="參考資料"><a class="anchor" href="#參考資料">#</a> 參考資料</h2><ul><li><span class="exturl" data-url="aHR0cHM6Ly9zaGVuZ3l1NzY5Ny5naXRodWIuaW8vY3BwLXN0cmluZy1zcGxpdC8=">https://shengyu7697.github.io/cpp-string-split/</span></li></ul>]]></content>
      
      
      <categories>
          
          <category> Programming </category>
          
          <category> C/C++ </category>
          
      </categories>
      
      
        <tags>
            
            <tag> C/C++ </tag>
            
            <tag> String </tag>
            
            <tag> split </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>uva 496 - Simply Subsets</title>
      <link href="/2023/04/19/Coding/uva/Star1/uva%20496%20/"/>
      <url>/2023/04/19/Coding/uva/Star1/uva%20496%20/</url>
      
        <content type="html"><![CDATA[<p>⭐️</p><p><strong>Time limit: 3.000 seconds</strong></p><h2 id="題目連結"><a class="anchor" href="#題目連結">#</a> 題目連結</h2><ul><li><span class="exturl" data-url="aHR0cHM6Ly96ZXJvanVkZ2UudHcvU2hvd1Byb2JsZW0/cHJvYmxlbWlkPWQ2OTE=">ZeroJudge</span></li><li><span class="exturl" data-url="aHR0cHM6Ly9vbmxpbmVqdWRnZS5vcmcvZXh0ZXJuYWwvNC9wNDk2LnBkZg==">題目連結</span></li><li><span class="exturl" data-url="aHR0cHM6Ly9vbmxpbmVqdWRnZS5vcmcvaW5kZXgucGhwP29wdGlvbj1jb21fb25saW5lanVkZ2UmYW1wO0l0ZW1pZD04JmFtcDtjYXRlZ29yeT02JmFtcDtwYWdlPXNob3dfcHJvYmxlbSZhbXA7cHJvYmxlbT00Mzc=">Online Judge</span></li><li><span class="exturl" data-url="aHR0cHM6Ly93d3cudWRlYnVnLmNvbS9VVmEvNDk2">uDebug</span></li></ul><h2 id="題目敘述"><a class="anchor" href="#題目敘述">#</a> 題目敘述</h2><div class="note default no-icon"><p>在數學的定義中，一個集合裡有 0 或多個元素。  在本問題中要請你判斷 2 個集合的關係。</p></div><h2 id="input"><a class="anchor" href="#input">#</a> Input</h2><div class="note success no-icon"><p>輸入包含很多組測試資料，每組測試資料有 2 列。 第一列代表第一個集合 A，第二列代表第二個集合 B。 每個集合至多 100 個數字，數字間以一個空格分開。</p></div><h2 id="output"><a class="anchor" href="#output">#</a> Output</h2><div class="note info no-icon"><p>對每筆輸入資料你應該要輸出以下其中一種情況：</p><ul><li>A is a proper subset of B （A 是 B 的子集合）</li><li>B is a proper subset of A （B 是 A 的子集合）</li><li>A equals B （A、B 是相同集合）</li><li>A and B are disjoint （A、B 完全沒有交集）</li><li>I’m confused! （A、B 有部分交集）</li></ul></div><h2 id="sample-input"><a class="anchor" href="#sample-input">#</a> Sample Input</h2><blockquote><p>55 27<br>55 27<br>9 24 1995<br>9 24<br>1 2 3<br>1 2 3 4<br>1 2 3<br>4 5 6<br>1 2<br>2 3</p></blockquote><h2 id="sample-output"><a class="anchor" href="#sample-output">#</a> Sample Output</h2><blockquote><p>A equals B<br>B is a proper subset of A<br>A is a proper subset of B<br>A and B are disjoint<br>I’m confused!</p></blockquote><h2 id="code"><a class="anchor" href="#code">#</a> Code</h2><figure class="highlight cpp"><figcaption data-lang="C++"></figcaption><table><tr><td data-num="1"></td><td><pre><span class="token macro property"><span class="token directive-hash">#</span><span class="token directive keyword">include</span> <span class="token string">&lt;bits/stdc++.h></span></span></pre></td></tr><tr><td data-num="2"></td><td><pre><span class="token keyword">using</span> <span class="token keyword">namespace</span> std<span class="token punctuation">;</span></pre></td></tr><tr><td data-num="3"></td><td><pre></pre></td></tr><tr><td data-num="4"></td><td><pre><span class="token keyword">int</span> <span class="token function">main</span> <span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span></pre></td></tr><tr><td data-num="5"></td><td><pre>    string a<span class="token punctuation">,</span> b<span class="token punctuation">,</span> tok<span class="token punctuation">;</span></pre></td></tr><tr><td data-num="6"></td><td><pre>    <span class="token keyword">while</span> <span class="token punctuation">(</span><span class="token function">getline</span><span class="token punctuation">(</span>cin<span class="token punctuation">,</span> a<span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span></pre></td></tr><tr><td data-num="7"></td><td><pre>        <span class="token function">getline</span><span class="token punctuation">(</span>cin<span class="token punctuation">,</span> b<span class="token punctuation">)</span><span class="token punctuation">;</span></pre></td></tr><tr><td data-num="8"></td><td><pre>        stringstream <span class="token function">sa</span><span class="token punctuation">(</span>a<span class="token punctuation">)</span><span class="token punctuation">;</span></pre></td></tr><tr><td data-num="9"></td><td><pre>        set<span class="token operator">&lt;</span>string<span class="token operator">></span> setA<span class="token punctuation">,</span> setB<span class="token punctuation">,</span> sum<span class="token punctuation">;</span></pre></td></tr><tr><td data-num="10"></td><td><pre>        <span class="token keyword">while</span> <span class="token punctuation">(</span><span class="token function">getline</span><span class="token punctuation">(</span>sa<span class="token punctuation">,</span> tok<span class="token punctuation">,</span> <span class="token char">' '</span><span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span></pre></td></tr><tr><td data-num="11"></td><td><pre>            setA<span class="token punctuation">.</span><span class="token function">insert</span><span class="token punctuation">(</span>tok<span class="token punctuation">)</span><span class="token punctuation">;</span></pre></td></tr><tr><td data-num="12"></td><td><pre>            sum<span class="token punctuation">.</span><span class="token function">insert</span><span class="token punctuation">(</span>tok<span class="token punctuation">)</span><span class="token punctuation">;</span></pre></td></tr><tr><td data-num="13"></td><td><pre>        <span class="token punctuation">&#125;</span></pre></td></tr><tr><td data-num="14"></td><td><pre>        stringstream <span class="token function">sb</span><span class="token punctuation">(</span>b<span class="token punctuation">)</span><span class="token punctuation">;</span></pre></td></tr><tr><td data-num="15"></td><td><pre>        <span class="token keyword">while</span> <span class="token punctuation">(</span><span class="token function">getline</span><span class="token punctuation">(</span>sb<span class="token punctuation">,</span> tok<span class="token punctuation">,</span> <span class="token char">' '</span><span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span></pre></td></tr><tr><td data-num="16"></td><td><pre>            setB<span class="token punctuation">.</span><span class="token function">insert</span><span class="token punctuation">(</span>tok<span class="token punctuation">)</span><span class="token punctuation">;</span></pre></td></tr><tr><td data-num="17"></td><td><pre>            sum<span class="token punctuation">.</span><span class="token function">insert</span><span class="token punctuation">(</span>tok<span class="token punctuation">)</span><span class="token punctuation">;</span></pre></td></tr><tr><td data-num="18"></td><td><pre>        <span class="token punctuation">&#125;</span></pre></td></tr><tr><td data-num="19"></td><td><pre></pre></td></tr><tr><td data-num="20"></td><td><pre>        <span class="token keyword">int</span> numa <span class="token operator">=</span> setA<span class="token punctuation">.</span><span class="token function">size</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">,</span> numb <span class="token operator">=</span> setB<span class="token punctuation">.</span><span class="token function">size</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span></pre></td></tr><tr><td data-num="21"></td><td><pre>        <span class="token keyword">if</span> <span class="token punctuation">(</span>numa <span class="token operator">==</span> sum<span class="token punctuation">.</span><span class="token function">size</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">&amp;&amp;</span> numb <span class="token operator">==</span> sum<span class="token punctuation">.</span><span class="token function">size</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span> cout <span class="token operator">&lt;&lt;</span> <span class="token string">"A equals B\n"</span><span class="token punctuation">;</span></pre></td></tr><tr><td data-num="22"></td><td><pre>        <span class="token keyword">else</span> <span class="token keyword">if</span> <span class="token punctuation">(</span>numa <span class="token operator">==</span> sum<span class="token punctuation">.</span><span class="token function">size</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span> cout <span class="token operator">&lt;&lt;</span> <span class="token string">"B is a proper subset of A\n"</span><span class="token punctuation">;</span></pre></td></tr><tr><td data-num="23"></td><td><pre>        <span class="token keyword">else</span> <span class="token keyword">if</span> <span class="token punctuation">(</span>numb <span class="token operator">==</span> sum<span class="token punctuation">.</span><span class="token function">size</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span> cout <span class="token operator">&lt;&lt;</span> <span class="token string">"A is a proper subset of B\n"</span><span class="token punctuation">;</span></pre></td></tr><tr><td data-num="24"></td><td><pre>        <span class="token keyword">else</span> <span class="token keyword">if</span> <span class="token punctuation">(</span>sum<span class="token punctuation">.</span><span class="token function">size</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">==</span> numa <span class="token operator">+</span> numb<span class="token punctuation">)</span> cout <span class="token operator">&lt;&lt;</span> <span class="token string">"A and B are disjoint\n"</span><span class="token punctuation">;</span> </pre></td></tr><tr><td data-num="25"></td><td><pre>        <span class="token keyword">else</span> cout <span class="token operator">&lt;&lt;</span> <span class="token string">"I'm confused!\n"</span><span class="token punctuation">;</span></pre></td></tr><tr><td data-num="26"></td><td><pre>    <span class="token punctuation">&#125;</span></pre></td></tr><tr><td data-num="27"></td><td><pre><span class="token punctuation">&#125;</span></pre></td></tr></table></figure>]]></content>
      
      
      <categories>
          
          <category> Coding </category>
          
          <category> UVA </category>
          
          <category> Star1 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> Star1 </tag>
            
            <tag> CPE </tag>
            
            <tag> UVA </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>龜兔賽跑算法</title>
      <link href="/2023/04/19/Algorithm/%E9%BE%9C%E5%85%94%E8%B3%BD%E8%B7%91/"/>
      <url>/2023/04/19/Algorithm/%E9%BE%9C%E5%85%94%E8%B3%BD%E8%B7%91/</url>
      
        <content type="html"><![CDATA[<div class="note info no-icon"><p>假設同時一隻烏龜和一隻兔子從起點開始賽跑，<strong>烏龜一次跑一格，兔子一次跑兩格</strong>，一直跑下去<strong>如果他們能在某個地點會合，代表他們在環形跑道中</strong>。<br><img data-src="https://i.imgur.com/1RI63gz.png" alt=""></p><p>反之如果是直線跑道烏龜永遠追不上兔子。</p><p><img data-src="https://i.imgur.com/V4BoPwR.png" alt=""></p></div><h2 id="floyd-cycle-detection-algorithm-找出環的起點"><a class="anchor" href="#floyd-cycle-detection-algorithm-找出環的起點">#</a> Floyd Cycle Detection Algorithm 找出環的起點</h2><div class="note info no-icon"><p>從起點開始賽跑，兔子一次走兩格、烏龜一次走一格直到他們相遇停止，<strong>此時兔子所走的距離是烏龜的兩倍</strong>。</p></div><p><img data-src="https://i.imgur.com/US27XN9.png" alt=""></p><div class="note info no-icon"><p>假設烏龜與兔子在<span class="katex"><span class="katex-mathml"><math xmlns="http://www.w3.org/1998/Math/MathML"><semantics><mrow><mi>Z</mi></mrow><annotation encoding="application/x-tex">Z</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:0.68333em;vertical-align:0em;"></span><span class="mord mathnormal" style="margin-right:0.07153em;">Z</span></span></span></span> 點第一次相遇，<strong>環周長為<span class="katex"><span class="katex-mathml"><math xmlns="http://www.w3.org/1998/Math/MathML"><semantics><mrow><mi>S</mi></mrow><annotation encoding="application/x-tex">S</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:0.68333em;vertical-align:0em;"></span><span class="mord mathnormal" style="margin-right:0.05764em;">S</span></span></span></span></strong></p><p>烏龜走了<span class="katex"><span class="katex-mathml"><math xmlns="http://www.w3.org/1998/Math/MathML"><semantics><mrow><mi>a</mi><mo>+</mo><mi>b</mi><mo>+</mo><mi>m</mi><mi>S</mi></mrow><annotation encoding="application/x-tex">a + b + mS</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:0.66666em;vertical-align:-0.08333em;"></span><span class="mord mathnormal">a</span><span class="mspace" style="margin-right:0.2222222222222222em;"></span><span class="mbin">+</span><span class="mspace" style="margin-right:0.2222222222222222em;"></span></span><span class="base"><span class="strut" style="height:0.77777em;vertical-align:-0.08333em;"></span><span class="mord mathnormal">b</span><span class="mspace" style="margin-right:0.2222222222222222em;"></span><span class="mbin">+</span><span class="mspace" style="margin-right:0.2222222222222222em;"></span></span><span class="base"><span class="strut" style="height:0.68333em;vertical-align:0em;"></span><span class="mord mathnormal">m</span><span class="mord mathnormal" style="margin-right:0.05764em;">S</span></span></span></span> 的距離，兔子也同樣走了<span class="katex"><span class="katex-mathml"><math xmlns="http://www.w3.org/1998/Math/MathML"><semantics><mrow><mi>m</mi><mi>S</mi></mrow><annotation encoding="application/x-tex">mS</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:0.68333em;vertical-align:0em;"></span><span class="mord mathnormal">m</span><span class="mord mathnormal" style="margin-right:0.05764em;">S</span></span></span></span> 圈但比烏龜多走了<span class="katex"><span class="katex-mathml"><math xmlns="http://www.w3.org/1998/Math/MathML"><semantics><mrow><mi>n</mi><mi>S</mi></mrow><annotation encoding="application/x-tex">nS</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:0.68333em;vertical-align:0em;"></span><span class="mord mathnormal">n</span><span class="mord mathnormal" style="margin-right:0.05764em;">S</span></span></span></span> 圈，所以兔子總共走了<span class="katex"><span class="katex-mathml"><math xmlns="http://www.w3.org/1998/Math/MathML"><semantics><mrow><mi>a</mi><mo>+</mo><mi>b</mi><mo>+</mo><mo stretchy="false">(</mo><mi>m</mi><mo>+</mo><mi>n</mi><mo stretchy="false">)</mo><mi>S</mi></mrow><annotation encoding="application/x-tex">a + b + (m + n)S</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:0.66666em;vertical-align:-0.08333em;"></span><span class="mord mathnormal">a</span><span class="mspace" style="margin-right:0.2222222222222222em;"></span><span class="mbin">+</span><span class="mspace" style="margin-right:0.2222222222222222em;"></span></span><span class="base"><span class="strut" style="height:0.77777em;vertical-align:-0.08333em;"></span><span class="mord mathnormal">b</span><span class="mspace" style="margin-right:0.2222222222222222em;"></span><span class="mbin">+</span><span class="mspace" style="margin-right:0.2222222222222222em;"></span></span><span class="base"><span class="strut" style="height:1em;vertical-align:-0.25em;"></span><span class="mopen">(</span><span class="mord mathnormal">m</span><span class="mspace" style="margin-right:0.2222222222222222em;"></span><span class="mbin">+</span><span class="mspace" style="margin-right:0.2222222222222222em;"></span></span><span class="base"><span class="strut" style="height:1em;vertical-align:-0.25em;"></span><span class="mord mathnormal">n</span><span class="mclose">)</span><span class="mord mathnormal" style="margin-right:0.05764em;">S</span></span></span></span> 的距離，由於兩個都走了<span class="katex"><span class="katex-mathml"><math xmlns="http://www.w3.org/1998/Math/MathML"><semantics><mrow><mi>m</mi><mi>S</mi></mrow><annotation encoding="application/x-tex">mS</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:0.68333em;vertical-align:0em;"></span><span class="mord mathnormal">m</span><span class="mord mathnormal" style="margin-right:0.05764em;">S</span></span></span></span> 圈，所以我們可以把<span class="katex"><span class="katex-mathml"><math xmlns="http://www.w3.org/1998/Math/MathML"><semantics><mrow><mi>m</mi><mi>S</mi></mrow><annotation encoding="application/x-tex">mS</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:0.68333em;vertical-align:0em;"></span><span class="mord mathnormal">m</span><span class="mord mathnormal" style="margin-right:0.05764em;">S</span></span></span></span> 扣掉。</p></div><div class="note danger no-icon"><p><strong>兔子所走的距離是烏龜的兩倍</strong>所以</p><p><span class="katex-display"><span class="katex"><span class="katex-mathml"><math xmlns="http://www.w3.org/1998/Math/MathML" display="block"><semantics><mrow><mn>2</mn><mo stretchy="false">(</mo><mi>a</mi><mo>+</mo><mi>b</mi><mo stretchy="false">)</mo><mo>=</mo><mtext> </mtext><mi>a</mi><mo>+</mo><mi>b</mi><mo>+</mo><mi>n</mi><mi>S</mi><mspace linebreak="newline"></mspace><mi>a</mi><mo>+</mo><mi>b</mi><mo>=</mo><mtext> </mtext><mi>n</mi><mi>S</mi><mspace linebreak="newline"></mspace><mi>a</mi><mo>=</mo><mtext> </mtext><mi>n</mi><mi>S</mi><mo>−</mo><mi>b</mi></mrow><annotation encoding="application/x-tex">2(a + b) = \ a + b + nS \\a + b = \ nS \\a = \ nS - b</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:1em;vertical-align:-0.25em;"></span><span class="mord">2</span><span class="mopen">(</span><span class="mord mathnormal">a</span><span class="mspace" style="margin-right:0.2222222222222222em;"></span><span class="mbin">+</span><span class="mspace" style="margin-right:0.2222222222222222em;"></span></span><span class="base"><span class="strut" style="height:1em;vertical-align:-0.25em;"></span><span class="mord mathnormal">b</span><span class="mclose">)</span><span class="mspace" style="margin-right:0.2777777777777778em;"></span><span class="mrel">=</span><span class="mspace"> </span><span class="mspace" style="margin-right:0.2777777777777778em;"></span></span><span class="base"><span class="strut" style="height:0.66666em;vertical-align:-0.08333em;"></span><span class="mord mathnormal">a</span><span class="mspace" style="margin-right:0.2222222222222222em;"></span><span class="mbin">+</span><span class="mspace" style="margin-right:0.2222222222222222em;"></span></span><span class="base"><span class="strut" style="height:0.77777em;vertical-align:-0.08333em;"></span><span class="mord mathnormal">b</span><span class="mspace" style="margin-right:0.2222222222222222em;"></span><span class="mbin">+</span><span class="mspace" style="margin-right:0.2222222222222222em;"></span></span><span class="base"><span class="strut" style="height:0.68333em;vertical-align:0em;"></span><span class="mord mathnormal">n</span><span class="mord mathnormal" style="margin-right:0.05764em;">S</span></span><span class="mspace newline"></span><span class="base"><span class="strut" style="height:0.66666em;vertical-align:-0.08333em;"></span><span class="mord mathnormal">a</span><span class="mspace" style="margin-right:0.2222222222222222em;"></span><span class="mbin">+</span><span class="mspace" style="margin-right:0.2222222222222222em;"></span></span><span class="base"><span class="strut" style="height:0.69444em;vertical-align:0em;"></span><span class="mord mathnormal">b</span><span class="mspace" style="margin-right:0.2777777777777778em;"></span><span class="mrel">=</span><span class="mspace"> </span><span class="mspace" style="margin-right:0.2777777777777778em;"></span></span><span class="base"><span class="strut" style="height:0.68333em;vertical-align:0em;"></span><span class="mord mathnormal">n</span><span class="mord mathnormal" style="margin-right:0.05764em;">S</span></span><span class="mspace newline"></span><span class="base"><span class="strut" style="height:0.43056em;vertical-align:0em;"></span><span class="mord mathnormal">a</span><span class="mspace" style="margin-right:0.2777777777777778em;"></span><span class="mrel">=</span><span class="mspace"> </span><span class="mspace" style="margin-right:0.2777777777777778em;"></span></span><span class="base"><span class="strut" style="height:0.76666em;vertical-align:-0.08333em;"></span><span class="mord mathnormal">n</span><span class="mord mathnormal" style="margin-right:0.05764em;">S</span><span class="mspace" style="margin-right:0.2222222222222222em;"></span><span class="mbin">−</span><span class="mspace" style="margin-right:0.2222222222222222em;"></span></span><span class="base"><span class="strut" style="height:0.69444em;vertical-align:0em;"></span><span class="mord mathnormal">b</span></span></span></span></span></p><p><span class="katex"><span class="katex-mathml"><math xmlns="http://www.w3.org/1998/Math/MathML"><semantics><mrow><mi>n</mi></mrow><annotation encoding="application/x-tex">n</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:0.43056em;vertical-align:0em;"></span><span class="mord mathnormal">n</span></span></span></span> 代表圈數，不論跑幾圈，每圈的起始點都會在同一個地方<br>所以我們可以先假設<span class="katex"><span class="katex-mathml"><math xmlns="http://www.w3.org/1998/Math/MathML"><semantics><mrow><mi>n</mi><mo>=</mo><mn>1</mn></mrow><annotation encoding="application/x-tex">n = 1</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:0.43056em;vertical-align:0em;"></span><span class="mord mathnormal">n</span><span class="mspace" style="margin-right:0.2777777777777778em;"></span><span class="mrel">=</span><span class="mspace" style="margin-right:0.2777777777777778em;"></span></span><span class="base"><span class="strut" style="height:0.64444em;vertical-align:0em;"></span><span class="mord">1</span></span></span></span></p><p>則<span class="katex"><span class="katex-mathml"><math xmlns="http://www.w3.org/1998/Math/MathML"><semantics><mrow><mi>a</mi><mo>=</mo><mi>S</mi><mo>−</mo><mi>b</mi><mo>=</mo><mi>c</mi></mrow><annotation encoding="application/x-tex">a = S - b = c</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:0.43056em;vertical-align:0em;"></span><span class="mord mathnormal">a</span><span class="mspace" style="margin-right:0.2777777777777778em;"></span><span class="mrel">=</span><span class="mspace" style="margin-right:0.2777777777777778em;"></span></span><span class="base"><span class="strut" style="height:0.76666em;vertical-align:-0.08333em;"></span><span class="mord mathnormal" style="margin-right:0.05764em;">S</span><span class="mspace" style="margin-right:0.2222222222222222em;"></span><span class="mbin">−</span><span class="mspace" style="margin-right:0.2222222222222222em;"></span></span><span class="base"><span class="strut" style="height:0.69444em;vertical-align:0em;"></span><span class="mord mathnormal">b</span><span class="mspace" style="margin-right:0.2777777777777778em;"></span><span class="mrel">=</span><span class="mspace" style="margin-right:0.2777777777777778em;"></span></span><span class="base"><span class="strut" style="height:0.43056em;vertical-align:0em;"></span><span class="mord mathnormal">c</span></span></span></span></p></div><p>此時讓烏龜返回起始點，兩者以相同速度繼續前進，他們就會在 Y 點再次會合，也就是重複的數字。</p>]]></content>
      
      
      <categories>
          
          <category> Algorithm </category>
          
      </categories>
      
      
        <tags>
            
            <tag> Algorithm </tag>
            
            <tag> Data Structure </tag>
            
            <tag> Floyd Cycle Detection Algorithm </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>CSS - Transition</title>
      <link href="/2023/04/19/Web/CSS/CSS%20-%20Transition/"/>
      <url>/2023/04/19/Web/CSS/CSS%20-%20Transition/</url>
      
        <content type="html"><![CDATA[<div class="note info"><ul><li><code>transition</code>  讓我們可以在給定的時間內平滑的改變屬性的值。</li><li>要呈現 <code>transition</code>  效果，必須達成兩件事:<ol><li>要添加效果的 CSS 屬性</li><li>效果的持續時間</li></ol></li></ul></div><div class="note danger"><p><strong>NOTE:</strong> 如果沒有給定持續時間， <code>transition</code>  將不會有效果，因為 default 值為 0。</p></div><figure class="highlight css"><figcaption data-lang="CSS"><span>Example 1</span><span class="exturl" data-url="aHR0cHM6Ly93d3cudzNzY2hvb2xzLmNvbS9jc3MvdHJ5aXQuYXNwP2ZpbGVuYW1lPXRyeWNzczNfdHJhbnNpdGlvbjE=">link</span></figcaption><table><tr><td data-num="1"></td><td><pre><span class="token selector">div</span> <span class="token punctuation">&#123;</span></pre></td></tr><tr><td data-num="2"></td><td><pre>    <span class="token property">width</span><span class="token punctuation">:</span> 100px<span class="token punctuation">;</span></pre></td></tr><tr><td data-num="3"></td><td><pre>    <span class="token property">height</span><span class="token punctuation">:</span> 100px<span class="token punctuation">;</span></pre></td></tr><tr><td data-num="4"></td><td><pre>    <span class="token property">background-color</span><span class="token punctuation">:</span> red<span class="token punctuation">;</span></pre></td></tr><tr><td data-num="5"></td><td><pre>    <span class="token property">transition</span><span class="token punctuation">:</span> width 2s<span class="token punctuation">;</span></pre></td></tr><tr><td data-num="6"></td><td><pre><span class="token punctuation">&#125;</span></pre></td></tr><tr><td data-num="7"></td><td><pre></pre></td></tr><tr><td data-num="8"></td><td><pre><span class="token selector">div:hover</span> <span class="token punctuation">&#123;</span></pre></td></tr><tr><td data-num="9"></td><td><pre>   <span class="token property">width</span><span class="token punctuation">:</span> 300px<span class="token punctuation">;</span> </pre></td></tr><tr><td data-num="10"></td><td><pre><span class="token punctuation">&#125;</span></pre></td></tr></table></figure><figure class="highlight css"><figcaption data-lang="CSS"><span>Example 2</span><span class="exturl" data-url="aHR0cHM6Ly93d3cudzNzY2hvb2xzLmNvbS9jc3MvdHJ5aXQuYXNwP2ZpbGVuYW1lPXRyeWNzczNfdHJhbnNpdGlvbjI=">link</span></figcaption><table><tr><td data-num="1"></td><td><pre><span class="token selector">div</span> <span class="token punctuation">&#123;</span></pre></td></tr><tr><td data-num="2"></td><td><pre>    <span class="token property">width</span><span class="token punctuation">:</span> 100px<span class="token punctuation">;</span></pre></td></tr><tr><td data-num="3"></td><td><pre>    <span class="token property">height</span><span class="token punctuation">:</span> 100px<span class="token punctuation">;</span></pre></td></tr><tr><td data-num="4"></td><td><pre>    <span class="token property">background-color</span><span class="token punctuation">:</span> red<span class="token punctuation">;</span></pre></td></tr><tr><td data-num="5"></td><td><pre>    <span class="token property">transition</span><span class="token punctuation">:</span> width 2s<span class="token punctuation">,</span> height 4s<span class="token punctuation">;</span></pre></td></tr><tr><td data-num="6"></td><td><pre><span class="token punctuation">&#125;</span></pre></td></tr><tr><td data-num="7"></td><td><pre></pre></td></tr><tr><td data-num="8"></td><td><pre><span class="token selector">div:hover</span> <span class="token punctuation">&#123;</span></pre></td></tr><tr><td data-num="9"></td><td><pre>    <span class="token property">width</span><span class="token punctuation">:</span> 300px<span class="token punctuation">;</span></pre></td></tr><tr><td data-num="10"></td><td><pre>    <span class="token property">height</span><span class="token punctuation">:</span> 300px<span class="token punctuation">;</span></pre></td></tr><tr><td data-num="11"></td><td><pre><span class="token punctuation">&#125;</span></pre></td></tr></table></figure><figure class="highlight css"><figcaption data-lang="CSS"><span>Transition + Transformation</span><span class="exturl" data-url="aHR0cHM6Ly93d3cudzNzY2hvb2xzLmNvbS9jc3MvdHJ5aXQuYXNwP2ZpbGVuYW1lPXRyeWNzczNfdHJhbnNpdGlvbl90cmFuc2Zvcm0=">link</span></figcaption><table><tr><td data-num="1"></td><td><pre><span class="token selector">div</span> <span class="token punctuation">&#123;</span></pre></td></tr><tr><td data-num="2"></td><td><pre>    <span class="token property">width</span><span class="token punctuation">:</span> 100px<span class="token punctuation">;</span></pre></td></tr><tr><td data-num="3"></td><td><pre>    <span class="token property">height</span><span class="token punctuation">:</span> 100px<span class="token punctuation">;</span></pre></td></tr><tr><td data-num="4"></td><td><pre>    <span class="token property">background-color</span><span class="token punctuation">:</span> red<span class="token punctuation">;</span></pre></td></tr><tr><td data-num="5"></td><td><pre>    <span class="token property">transition</span><span class="token punctuation">:</span> width 2s<span class="token punctuation">,</span> height 2s<span class="token punctuation">,</span> transform 2s</pre></td></tr><tr><td data-num="6"></td><td><pre><span class="token punctuation">&#125;</span></pre></td></tr><tr><td data-num="7"></td><td><pre></pre></td></tr><tr><td data-num="8"></td><td><pre><span class="token selector">div:hover</span> <span class="token punctuation">&#123;</span></pre></td></tr><tr><td data-num="9"></td><td><pre>    <span class="token property">width</span><span class="token punctuation">:</span> 300px<span class="token punctuation">;</span></pre></td></tr><tr><td data-num="10"></td><td><pre>    <span class="token property">height</span><span class="token punctuation">:</span> 300px<span class="token punctuation">;</span></pre></td></tr><tr><td data-num="11"></td><td><pre>    <span class="token property">transform</span><span class="token punctuation">:</span> <span class="token function">rotate</span><span class="token punctuation">(</span>180deg<span class="token punctuation">)</span><span class="token punctuation">;</span></pre></td></tr><tr><td data-num="12"></td><td><pre><span class="token punctuation">&#125;</span></pre></td></tr></table></figure><h2 id="speed-curve-of-transition"><a class="anchor" href="#speed-curve-of-transition">#</a> Speed curve of Transition</h2><p><code>transition-timing-function</code>  指定了 <code>transition</code>  效果的速度曲線。</p><div class="note danger no-icon"><p><strong>Value</strong></p><ul><li><code>ease</code>  - default(slow start, then fast, then end slowly).</li><li><code>linear</code>  - same speed from start to end.</li><li><code>ease-in</code>  - slow start.</li><li><code>ease-out</code>  - slow end.</li><li><code>ease-in-out</code>  - slow start and end.</li><li><code>cubic-bezier(n, n, n, n)</code>  lets you define your own.</li></ul></div><div class="links"><div class="item" title="Example"><span class="exturl image" data-url="aHR0cHM6Ly93d3cudzNzY2hvb2xzLmNvbS9jc3MvdHJ5aXQuYXNwP2ZpbGVuYW1lPXRyeWNzczNfdHJhbnNpdGlvbl9zcGVlZA==" data-background-image="/images/404.png"></span>          <div class="info">          <span class="exturl title" data-url="aHR0cHM6Ly93d3cudzNzY2hvb2xzLmNvbS9jc3MvdHJ5aXQuYXNwP2ZpbGVuYW1lPXRyeWNzczNfdHJhbnNpdGlvbl9zcGVlZA==">Example</span>          <p class="desc">https://www.w3schools.com/css/tryit.asp?filename=trycss3_transition_speed</p>          </div></div></div><h2 id="transition-delay"><a class="anchor" href="#transition-delay">#</a> Transition Delay</h2><p><code>transition-delay</code>  可以指定效果的延遲 (in seconds)。</p><figure class="highlight css"><figcaption data-lang="CSS"><span>Example</span><span class="exturl" data-url="aHR0cHM6Ly93d3cudzNzY2hvb2xzLmNvbS9jc3MvdHJ5aXQuYXNwP2ZpbGVuYW1lPXRyeWNzczNfdHJhbnNpdGlvbl9kZWxheQ==">link</span></figcaption><table><tr><td data-num="1"></td><td><pre><span class="token comment">/* 1 second delay before starting */</span></pre></td></tr><tr><td data-num="2"></td><td><pre><span class="token selector">div</span> <span class="token punctuation">&#123;</span></pre></td></tr><tr><td data-num="3"></td><td><pre>    <span class="token property">transition-delay</span><span class="token punctuation">:</span> 1s<span class="token punctuation">;</span></pre></td></tr><tr><td data-num="4"></td><td><pre><span class="token punctuation">&#125;</span></pre></td></tr></table></figure>]]></content>
      
      
      <categories>
          
          <category> Web </category>
          
          <category> CSS </category>
          
      </categories>
      
      
        <tags>
            
            <tag> Web </tag>
            
            <tag> CSS </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>CSS - Transform</title>
      <link href="/2023/04/19/Web/CSS/CSS%20-%20Transform/"/>
      <url>/2023/04/19/Web/CSS/CSS%20-%20Transform/</url>
      
        <content type="html"><![CDATA[<h2 id="transform-origin"><a class="anchor" href="#transform-origin">#</a> Transform-origin</h2><div class="note info"><ul><li>預設值為元素<strong>中心點 (50%, 50%)</strong></li><li>位移、旋轉、縮放、傾斜的<strong>參考點</strong></li><li>元素<strong>左上角</strong>座標為 <strong>(x, y) = (0, 0)</strong></li></ul></div><blockquote><p>元素預設座標系統預設位置為左上角 (0,0)，主要用來<strong>排版</strong><br> transform 的預設值為 (50%,50%)，主要用來做<strong>動畫效果</strong></p></blockquote><p><code>transform</code>  讓我們可以<strong>移動、旋轉、縮放或傾斜</strong>元素。</p><h2 id="2d-transform-methods"><a class="anchor" href="#2d-transform-methods">#</a> 2D Transform Methods</h2><div class="note danger no-icon"><ul><li><code>translate()</code></li><li><code>rotate()</code></li><li><code>scaleX()</code></li><li><code>scaleY()</code></li><li><code>scale()</code></li><li><code>skewX()</code></li><li><code>skewY()</code></li><li><code>skew()</code></li><li><code>matrix()</code></li></ul></div><h3 id="translate"><a class="anchor" href="#translate">#</a> Translate()</h3><p><code>translate()</code>  可以根據給定的參數 (<em>X-axis</em>, <em>Y-axis</em>)<strong> 位移</strong>元素。</p><figure class="highlight css"><figcaption data-lang="CSS"><span>Example</span><span class="exturl" data-url="aHR0cHM6Ly93d3cudzNzY2hvb2xzLmNvbS9jc3MvdHJ5aXQuYXNwP2ZpbGVuYW1lPXRyeWNzczNfdHJhbnNmb3JtX3RyYW5zbGF0ZQ==">link</span></figcaption><table><tr><td data-num="1"></td><td><pre><span class="token comment">/* Moves the &lt;div> element 50 pixels to the right, and 100 pixels down from its current position */</span></pre></td></tr><tr><td data-num="2"></td><td><pre><span class="token selector">div</span> <span class="token punctuation">&#123;</span></pre></td></tr><tr><td data-num="3"></td><td><pre>    <span class="token property">transform</span><span class="token punctuation">:</span> <span class="token function">translate</span><span class="token punctuation">(</span>50px<span class="token punctuation">,</span> 100px<span class="token punctuation">)</span><span class="token punctuation">;</span></pre></td></tr><tr><td data-num="4"></td><td><pre><span class="token punctuation">&#125;</span></pre></td></tr></table></figure><h3 id="rotate"><a class="anchor" href="#rotate">#</a> Rotate()</h3><p><code>rotate()</code>  可以根據給定的角度<strong>順時針</strong>或<strong>逆時針旋轉</strong>元素。</p><figure class="highlight css"><figcaption data-lang="CSS"><span>Example 1</span><span class="exturl" data-url="aHR0cHM6Ly93d3cudzNzY2hvb2xzLmNvbS9jc3MvdHJ5aXQuYXNwP2ZpbGVuYW1lPXRyeWNzczNfdHJhbnNmb3JtX3JvdGF0ZQ==">link</span></figcaption><table><tr><td data-num="1"></td><td><pre><span class="token comment">/* Rotates the &lt;div> element clockwise with 20 degrees */</span></pre></td></tr><tr><td data-num="2"></td><td><pre><span class="token selector">div</span> <span class="token punctuation">&#123;</span></pre></td></tr><tr><td data-num="3"></td><td><pre>    <span class="token property">transform</span><span class="token punctuation">:</span> <span class="token function">rotate</span><span class="token punctuation">(</span>20deg<span class="token punctuation">)</span><span class="token punctuation">;</span></pre></td></tr><tr><td data-num="4"></td><td><pre><span class="token punctuation">&#125;</span></pre></td></tr></table></figure><figure class="highlight css"><figcaption data-lang="CSS"><span>Example 2</span><span class="exturl" data-url="aHR0cHM6Ly93d3cudzNzY2hvb2xzLmNvbS9jc3MvdHJ5aXQuYXNwP2ZpbGVuYW1lPXRyeWNzczNfdHJhbnNmb3JtX3JvdGF0ZTI=">link</span></figcaption><table><tr><td data-num="1"></td><td><pre><span class="token comment">/* Rotates the &lt;div> element counter-clockwise with 20 degrees */</span></pre></td></tr><tr><td data-num="2"></td><td><pre><span class="token selector">div</span> <span class="token punctuation">&#123;</span></pre></td></tr><tr><td data-num="3"></td><td><pre>    <span class="token property">transform</span><span class="token punctuation">:</span> <span class="token function">rotate</span><span class="token punctuation">(</span>-20deg<span class="token punctuation">)</span><span class="token punctuation">;</span></pre></td></tr><tr><td data-num="4"></td><td><pre><span class="token punctuation">&#125;</span></pre></td></tr></table></figure><h3 id="scale"><a class="anchor" href="#scale">#</a> Scale()</h3><ul><li><code>scale()</code>  可以根據給定的參數 (<em>width</em>, <em>height</em>)<strong> 縮放</strong>元素的大小。</li><li><code>scaleX()</code>  控制縮放的<strong>寬度 (<em>width</em>)</strong></li><li><code>scaleY()</code>  則控制縮放的<strong>高度 (<em>height</em>)</strong>。</li></ul><figure class="highlight css"><figcaption data-lang="CSS"><span>Example 1</span><span class="exturl" data-url="aHR0cHM6Ly93d3cudzNzY2hvb2xzLmNvbS9jc3MvdHJ5aXQuYXNwP2ZpbGVuYW1lPXRyeWNzczNfdHJhbnNmb3JtX3NjYWxl">link</span></figcaption><table><tr><td data-num="1"></td><td><pre><span class="token comment">/* Increases the &lt;div> element to be two times of its original width, and three times of its original height */</span></pre></td></tr><tr><td data-num="2"></td><td><pre><span class="token selector">div</span> <span class="token punctuation">&#123;</span></pre></td></tr><tr><td data-num="3"></td><td><pre>    <span class="token property">transform</span><span class="token punctuation">:</span> <span class="token function">scale</span><span class="token punctuation">(</span>2<span class="token punctuation">,</span> 3<span class="token punctuation">)</span><span class="token punctuation">;</span></pre></td></tr><tr><td data-num="4"></td><td><pre><span class="token punctuation">&#125;</span></pre></td></tr></table></figure><figure class="highlight css"><figcaption data-lang="CSS"><span>Example 2</span><span class="exturl" data-url="aHR0cHM6Ly93d3cudzNzY2hvb2xzLmNvbS9jc3MvdHJ5aXQuYXNwP2ZpbGVuYW1lPXRyeWNzczNfdHJhbnNmb3JtX3NjYWxlMg==">link</span></figcaption><table><tr><td data-num="1"></td><td><pre><span class="token comment">/* Decreases the &lt;div> element to be half of its original width and height */</span></pre></td></tr><tr><td data-num="2"></td><td><pre><span class="token selector">div</span> <span class="token punctuation">&#123;</span></pre></td></tr><tr><td data-num="3"></td><td><pre>    <span class="token property">transform</span><span class="token punctuation">:</span> <span class="token function">scale</span><span class="token punctuation">(</span>0.5<span class="token punctuation">,</span> 0.5<span class="token punctuation">)</span><span class="token punctuation">;</span></pre></td></tr><tr><td data-num="4"></td><td><pre><span class="token punctuation">&#125;</span></pre></td></tr></table></figure><figure class="highlight css"><figcaption data-lang="CSS"><span>Example 3</span><span class="exturl" data-url="aHR0cHM6Ly93d3cudzNzY2hvb2xzLmNvbS9jc3MvdHJ5aXQuYXNwP2ZpbGVuYW1lPXRyeWNzczNfdHJhbnNmb3JtX3NjYWxlWA==">link</span></figcaption><table><tr><td data-num="1"></td><td><pre><span class="token comment">/* Increases the &lt;div> element to be two times of its original width */</span></pre></td></tr><tr><td data-num="2"></td><td><pre><span class="token selector">div</span> <span class="token punctuation">&#123;</span></pre></td></tr><tr><td data-num="3"></td><td><pre>    <span class="token property">transform</span><span class="token punctuation">:</span> <span class="token function">scaleX</span><span class="token punctuation">(</span>2<span class="token punctuation">)</span><span class="token punctuation">;</span></pre></td></tr><tr><td data-num="4"></td><td><pre><span class="token punctuation">&#125;</span></pre></td></tr></table></figure><figure class="highlight css"><figcaption data-lang="CSS"><span>Example 4</span><span class="exturl" data-url="aHR0cHM6Ly93d3cudzNzY2hvb2xzLmNvbS9jc3MvdHJ5aXQuYXNwP2ZpbGVuYW1lPXRyeWNzczNfdHJhbnNmb3JtX3NjYWxlWTI=">link</span></figcaption><table><tr><td data-num="1"></td><td><pre><span class="token comment">/* Decreases the &lt;div> element to be half of its original height */</span></pre></td></tr><tr><td data-num="2"></td><td><pre><span class="token selector">div</span> <span class="token punctuation">&#123;</span></pre></td></tr><tr><td data-num="3"></td><td><pre>    <span class="token property">transform</span><span class="token punctuation">:</span> <span class="token function">scaleY</span><span class="token punctuation">(</span>0.5<span class="token punctuation">)</span><span class="token punctuation">;</span></pre></td></tr><tr><td data-num="4"></td><td><pre><span class="token punctuation">&#125;</span></pre></td></tr></table></figure><h3 id="skew"><a class="anchor" href="#skew">#</a> Skew()</h3><ul><li><code>skew()</code>  可以根據給定的角度 (<em>X-axis</em>, <em>Y-axis</em>)<strong> 傾斜</strong>元素</li><li><code>skewX()</code>  將元素沿著<em> X-axis</em> 傾斜。</li><li><code>skewY()</code>  將元素沿著<em> Y-axis</em> 傾斜。</li></ul><figure class="highlight css"><figcaption data-lang="CSS"><span>Example 1</span><span class="exturl" data-url="aHR0cHM6Ly93d3cudzNzY2hvb2xzLmNvbS9jc3MvdHJ5aXQuYXNwP2ZpbGVuYW1lPXRyeWNzczNfdHJhbnNmb3JtX3NrZXc=">link</span></figcaption><table><tr><td data-num="1"></td><td><pre><span class="token comment">/* Skews the &lt;div> element 20 degrees along the X-axis, and 10 degrees along the Y-axis */</span></pre></td></tr><tr><td data-num="2"></td><td><pre><span class="token selector">div</span> <span class="token punctuation">&#123;</span></pre></td></tr><tr><td data-num="3"></td><td><pre>    <span class="token property">transform</span><span class="token punctuation">:</span> <span class="token function">skew</span><span class="token punctuation">(</span>20deg<span class="token punctuation">,</span> 10deg<span class="token punctuation">)</span><span class="token punctuation">;</span></pre></td></tr><tr><td data-num="4"></td><td><pre><span class="token punctuation">&#125;</span></pre></td></tr></table></figure><figure class="highlight css"><figcaption data-lang="CSS"><span>Example 2</span><span class="exturl" data-url="aHR0cHM6Ly93d3cudzNzY2hvb2xzLmNvbS9jc3MvdHJ5aXQuYXNwP2ZpbGVuYW1lPXRyeWNzczNfdHJhbnNmb3JtX3NrZXd4">link</span></figcaption><table><tr><td data-num="1"></td><td><pre><span class="token comment">/* Skews the &lt;div> element 20 degrees along the X-axis */</span></pre></td></tr><tr><td data-num="2"></td><td><pre><span class="token selector">div</span> <span class="token punctuation">&#123;</span></pre></td></tr><tr><td data-num="3"></td><td><pre>    <span class="token property">transform</span><span class="token punctuation">:</span> <span class="token function">skewX</span><span class="token punctuation">(</span>20deg<span class="token punctuation">)</span><span class="token punctuation">;</span></pre></td></tr><tr><td data-num="4"></td><td><pre><span class="token punctuation">&#125;</span></pre></td></tr></table></figure><figure class="highlight css"><figcaption data-lang="CSS"><span>Example 3</span><span class="exturl" data-url="aHR0cHM6Ly93d3cudzNzY2hvb2xzLmNvbS9jc3MvdHJ5aXQuYXNwP2ZpbGVuYW1lPXRyeWNzczNfdHJhbnNmb3JtX3NrZXd5">link</span></figcaption><table><tr><td data-num="1"></td><td><pre><span class="token comment">/* Skews the &lt;div> element 20 degrees along the Y-axis */</span></pre></td></tr><tr><td data-num="2"></td><td><pre><span class="token selector">div</span> <span class="token punctuation">&#123;</span></pre></td></tr><tr><td data-num="3"></td><td><pre>    <span class="token property">transform</span><span class="token punctuation">:</span> <span class="token function">skewY</span><span class="token punctuation">(</span>20deg<span class="token punctuation">)</span><span class="token punctuation">;</span></pre></td></tr><tr><td data-num="4"></td><td><pre><span class="token punctuation">&#125;</span></pre></td></tr></table></figure><h3 id="matrix"><a class="anchor" href="#matrix">#</a> Matrix()</h3><p><code>matrix()</code>  整合所有 2D <code>transform</code>  方法。</p><figure class="highlight css"><figcaption data-lang="CSS"></figcaption><table><tr><td data-num="1"></td><td><pre><span class="token function">matrix</span><span class="token punctuation">(</span><span class="token function">scaleX</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">,</span> <span class="token function">skewY</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">,</span> <span class="token function">skewX</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">,</span> <span class="token function">scaleY</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">,</span> <span class="token function">translateX</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">,</span> <span class="token function">translateY</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span></pre></td></tr></table></figure><figure class="highlight css"><figcaption data-lang="CSS"><span>Example</span><span class="exturl" data-url="aHR0cHM6Ly93d3cudzNzY2hvb2xzLmNvbS9jc3MvdHJ5aXQuYXNwP2ZpbGVuYW1lPXRyeWNzczNfdHJhbnNmb3JtX21hdHJpeDE=">link</span></figcaption><table><tr><td data-num="1"></td><td><pre><span class="token selector">div</span> <span class="token punctuation">&#123;</span></pre></td></tr><tr><td data-num="2"></td><td><pre>    <span class="token property">transform</span><span class="token punctuation">:</span> <span class="token function">matrix</span><span class="token punctuation">(</span>1<span class="token punctuation">,</span> -0.3<span class="token punctuation">,</span> 0<span class="token punctuation">,</span> 1<span class="token punctuation">,</span> 0<span class="token punctuation">,</span> 0<span class="token punctuation">)</span><span class="token punctuation">;</span></pre></td></tr><tr><td data-num="3"></td><td><pre><span class="token punctuation">&#125;</span></pre></td></tr></table></figure><h2 id="3d-transform-methods"><a class="anchor" href="#3d-transform-methods">#</a> 3D Transform Methods</h2><div class="note danger"><ul><li>rotateX()</li><li>rotateY()</li><li>rotateZ()</li></ul></div><figure class="highlight css"><figcaption data-lang="CSS"><span>Example 1</span><span class="exturl" data-url="aHR0cHM6Ly93d3cudzNzY2hvb2xzLmNvbS9jc3MvdHJ5aXQuYXNwP2ZpbGVuYW1lPXRyeWNzczNfdHJhbnNmb3JtX3JvdGF0ZVg=">link</span></figcaption><table><tr><td data-num="1"></td><td><pre><span class="token comment">/* Rotates an element around its X-axis at a given degree */</span></pre></td></tr><tr><td data-num="2"></td><td><pre><span class="token selector">div</span> <span class="token punctuation">&#123;</span></pre></td></tr><tr><td data-num="3"></td><td><pre>    <span class="token property">transform</span><span class="token punctuation">:</span> <span class="token function">rotateX</span><span class="token punctuation">(</span>150deg<span class="token punctuation">)</span><span class="token punctuation">;</span></pre></td></tr><tr><td data-num="4"></td><td><pre><span class="token punctuation">&#125;</span></pre></td></tr></table></figure><figure class="highlight css"><figcaption data-lang="CSS"><span>Example 2</span><span class="exturl" data-url="aHR0cHM6Ly93d3cudzNzY2hvb2xzLmNvbS9jc3MvdHJ5aXQuYXNwP2ZpbGVuYW1lPXRyeWNzczNfdHJhbnNmb3JtX3JvdGF0ZVk=">link</span></figcaption><table><tr><td data-num="1"></td><td><pre><span class="token comment">/* Rotates an element around its Y-axis at a given degree */</span></pre></td></tr><tr><td data-num="2"></td><td><pre><span class="token selector">div</span> <span class="token punctuation">&#123;</span></pre></td></tr><tr><td data-num="3"></td><td><pre>    <span class="token property">transform</span><span class="token punctuation">:</span> <span class="token function">rotateY</span><span class="token punctuation">(</span>150deg<span class="token punctuation">)</span><span class="token punctuation">;</span></pre></td></tr><tr><td data-num="4"></td><td><pre><span class="token punctuation">&#125;</span></pre></td></tr></table></figure><figure class="highlight css"><figcaption data-lang="CSS"><span>Example 3</span><span class="exturl" data-url="aHR0cHM6Ly93d3cudzNzY2hvb2xzLmNvbS9jc3MvdHJ5aXQuYXNwP2ZpbGVuYW1lPXRyeWNzczNfdHJhbnNmb3JtX3JvdGF0ZVo=">link</span></figcaption><table><tr><td data-num="1"></td><td><pre><span class="token comment">/* Rotates an element around its Z-axis at a given degree */</span></pre></td></tr><tr><td data-num="2"></td><td><pre><span class="token selector">div</span> <span class="token punctuation">&#123;</span></pre></td></tr><tr><td data-num="3"></td><td><pre>    <span class="token property">transform</span><span class="token punctuation">:</span> <span class="token function">rotateZ</span><span class="token punctuation">(</span>150deg<span class="token punctuation">)</span><span class="token punctuation">;</span></pre></td></tr><tr><td data-num="4"></td><td><pre><span class="token punctuation">&#125;</span></pre></td></tr></table></figure>]]></content>
      
      
      <categories>
          
          <category> Web </category>
          
          <category> CSS </category>
          
      </categories>
      
      
        <tags>
            
            <tag> Web </tag>
            
            <tag> CSS </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>HTML - Forms</title>
      <link href="/2023/04/19/Web/HTML/HTML%20-%20Forms/"/>
      <url>/2023/04/19/Web/HTML/HTML%20-%20Forms/</url>
      
        <content type="html"><![CDATA[<p>HTML 表單通常用於收集用戶輸入，用戶輸入會被蒐集到伺服器處理。<br> <code>&lt;form&gt;</code>  元素用於為用戶輸入創建 HTML 表單。</p><figure class="highlight html"><figcaption data-lang="HTML"></figcaption><table><tr><td data-num="1"></td><td><pre><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>form</span><span class="token punctuation">></span></span></pre></td></tr><tr><td data-num="2"></td><td><pre></pre></td></tr><tr><td data-num="3"></td><td><pre>/* form elements */</pre></td></tr><tr><td data-num="4"></td><td><pre></pre></td></tr><tr><td data-num="5"></td><td><pre><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>form</span><span class="token punctuation">></span></span></pre></td></tr></table></figure><h2 id="the-input-element"><a class="anchor" href="#the-input-element">#</a> The &lt;Input&gt; Element</h2><p><code>&lt;form&gt;</code>  擁有各式各樣的輸入容器，例如：單選、複選或提交按鈕。<br> <code>&lt;input&gt;</code>  的使用樣式取決於我們設定的  <code>type</code>  屬性。</p><p><strong>這裡是常用的樣式:</strong></p><table><thead><tr><th><strong>Type</strong></th><th><strong>Description</strong></th></tr></thead><tbody><tr><td><code>&lt;input type=&quot;text&quot;&gt;</code></td><td>Display a single-line text input field</td></tr><tr><td><code>&lt;input type=&quot;radio&quot;&gt;</code></td><td>Displays a radio button (for selecting one of many choices)</td></tr><tr><td><code>&lt;input type=&quot;checkbox&quot;&gt;</code></td><td>Displays a checkbox (for selecting zero or more of many choices)</td></tr><tr><td><code>&lt;input type=&quot;submit&quot;&gt;</code></td><td>Displays a submit button (for submitting the form)</td></tr><tr><td><code>&lt;input type=&quot;button&quot;&gt;</code></td><td>Displays a clickable button</td></tr></tbody></table><p>請參考這篇 <span class="exturl" data-url="aHR0cHM6Ly9oYWNrbWQuaW8vQENoaWVuSS9odG1sX2lucHV0">HTML - Input</span></p><h2 id="html-form-attributes"><a class="anchor" href="#html-form-attributes">#</a> HTML Form Attributes</h2><h3 id="action-attribute"><a class="anchor" href="#action-attribute">#</a> Action Attribute</h3><p><code>&lt;action&gt;</code>  屬性定義提交表單時要執行的操作。<br>通常，當使用者提交表單後，表單數據會被發送到伺服器上的一個文件中。</p><figure class="highlight html"><figcaption data-lang="HTML"><span>Example</span><span class="exturl" data-url="aHR0cHM6Ly93d3cudzNzY2hvb2xzLmNvbS9odG1sL3RyeWl0LmFzcD9maWxlbmFtZT10cnlodG1sX2Zvcm1fYXR0cmlidXRlc19zdWJtaXQ=">link</span></figcaption><table><tr><td data-num="1"></td><td><pre><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>form</span> <span class="token attr-name">action</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>/action_page.php<span class="token punctuation">"</span></span><span class="token punctuation">></span></span></pre></td></tr><tr><td data-num="2"></td><td><pre>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>label</span> <span class="token attr-name">for</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>fname<span class="token punctuation">"</span></span><span class="token punctuation">></span></span>First name:<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>label</span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>br</span><span class="token punctuation">></span></span></pre></td></tr><tr><td data-num="3"></td><td><pre>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>input</span> <span class="token attr-name">type</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>text<span class="token punctuation">"</span></span> <span class="token attr-name">id</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>fname<span class="token punctuation">"</span></span> <span class="token attr-name">name</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>fname<span class="token punctuation">"</span></span> <span class="token attr-name">value</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>John<span class="token punctuation">"</span></span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>br</span><span class="token punctuation">></span></span></pre></td></tr><tr><td data-num="4"></td><td><pre>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>label</span> <span class="token attr-name">for</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>lname<span class="token punctuation">"</span></span><span class="token punctuation">></span></span>Last name:<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>label</span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>br</span><span class="token punctuation">></span></span></pre></td></tr><tr><td data-num="5"></td><td><pre>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>input</span> <span class="token attr-name">type</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>text<span class="token punctuation">"</span></span> <span class="token attr-name">id</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>lname<span class="token punctuation">"</span></span> <span class="token attr-name">name</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>lname<span class="token punctuation">"</span></span> <span class="token attr-name">value</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>Doe<span class="token punctuation">"</span></span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>br</span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>br</span><span class="token punctuation">></span></span></pre></td></tr><tr><td data-num="6"></td><td><pre>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>input</span> <span class="token attr-name">type</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>submit<span class="token punctuation">"</span></span> <span class="token attr-name">value</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>Submit<span class="token punctuation">"</span></span><span class="token punctuation">></span></span></pre></td></tr><tr><td data-num="7"></td><td><pre><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>form</span><span class="token punctuation">></span></span></pre></td></tr></table></figure><blockquote><p><strong>NOTE: 如果省略  <code>action</code>  欄位，則預設為目前頁面。</strong></p></blockquote><h3 id="target-attribute"><a class="anchor" href="#target-attribute">#</a> Target Attribute</h3><p><code>target</code>  屬性定義在何處顯示提交表單後收到的回應。</p><div class="note danger no-icon"><p><strong> <code>target</code>  has following values:</strong></p><ul><li><code>_blank</code>  - The response is displayed in a <strong>new window or tab</strong>.</li><li><code>_self</code>  - Default value, the response is displayed in the <strong>current window</strong>.</li><li><code>_parent</code>  - The response is displayed in the <strong>parent frame</strong>.</li><li><code>_top</code>  - The response is displayed in the <strong>full body of the window</strong>.</li><li><em>framename</em> - The response is displayed <strong>in a named iframe</strong>.</li></ul></div><figure class="highlight html"><figcaption data-lang="HTML"><span>Example</span><span class="exturl" data-url="aHR0cHM6Ly93d3cudzNzY2hvb2xzLmNvbS9odG1sL3RyeWl0LmFzcD9maWxlbmFtZT10cnlodG1sX2Zvcm1fdGFyZ2V0">link</span></figcaption><table><tr><td data-num="1"></td><td><pre><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>form</span> <span class="token attr-name">action</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>/action_page.php<span class="token punctuation">"</span></span> <span class="token attr-name">target</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>_blank<span class="token punctuation">"</span></span><span class="token punctuation">></span></span></pre></td></tr></table></figure><h3 id="method-attribute"><a class="anchor" href="#method-attribute">#</a> Method Attribute</h3><p><code>method</code>  屬性定義 HTTP 要用何種方式傳送表單資料。</p><div class="note danger no-icon"><ul><li><code>method=&quot;get&quot;</code>  - Sent data as URL variables.</li><li><code>method=&quot;post&quot;</code>  - Sent data as HTTP post transaction.</li></ul><p>The default value is <em><strong>GET</strong></em>.</p></div><figure class="highlight html"><figcaption data-lang="HTML"><span>GET Example</span><span class="exturl" data-url="aHR0cHM6Ly93d3cudzNzY2hvb2xzLmNvbS9odG1sL3RyeWl0LmFzcD9maWxlbmFtZT10cnlodG1sX2Zvcm1fZ2V0">link</span></figcaption><table><tr><td data-num="1"></td><td><pre><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>form</span> <span class="token attr-name">action</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>/action_page.php<span class="token punctuation">"</span></span> <span class="token attr-name">method</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>get<span class="token punctuation">"</span></span><span class="token punctuation">></span></span></pre></td></tr></table></figure><p><img data-src="https://i.imgur.com/1pmMlQ1.png" alt=""></p><blockquote><p><strong>表單資訊會跟隨在網址後面，安全性較差。</strong></p></blockquote><figure class="highlight html"><figcaption data-lang="HTML"><span>POST Example</span><span class="exturl" data-url="aHR0cHM6Ly93d3cudzNzY2hvb2xzLmNvbS9odG1sL3RyeWl0LmFzcD9maWxlbmFtZT10cnlodG1sX2Zvcm1fcG9zdA==">link</span></figcaption><table><tr><td data-num="1"></td><td><pre><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>form</span> <span class="token attr-name">action</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>/action_page.php<span class="token punctuation">"</span></span> <span class="token attr-name">method</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>post<span class="token punctuation">"</span></span><span class="token punctuation">></span></span></pre></td></tr></table></figure><div class="note danger"><p><strong>NOTE on GET:</strong></p><ul><li>提交的表單資料會跟隨在 URL 後面，以 name/value 的形式。</li><li><strong>永遠不要用 GET 發送敏感信息！！！</strong></li><li>URL 的長度限制為 2048 characters。</li><li>對於用戶想要為結果添加書籤的表單提交很有用</li><li>GET 適用於非安全數據，例如 Google 中的查詢字符串</li></ul><p><strong>NOTE on POST:</strong></p><ul><li>在 HTTP 請求的正文中附加表單數據（提交的表單數據未顯示在 URL 中）。</li><li>POST 沒有大小限制，可用於發送大量數據。</li><li>使用 POST 提交的表單不能添加書籤。</li></ul></div><h3 id="autocomplete-attribute"><a class="anchor" href="#autocomplete-attribute">#</a> Autocomplete Attribute</h3><p><code>autocomplete</code>  屬性決定是否開啟表單自動完成功能。<br>啟用自動完成後，瀏覽器會根據用戶之前輸入的值自動完成。</p><figure class="highlight html"><figcaption data-lang="HTML"><span>Example</span><span class="exturl" data-url="aHR0cHM6Ly93d3cudzNzY2hvb2xzLmNvbS9odG1sL3RyeWl0LmFzcD9maWxlbmFtZT10cnlodG1sX2Zvcm1fYXV0b2NvbXBsZXRl">link</span></figcaption><table><tr><td data-num="1"></td><td><pre><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>form</span> <span class="token attr-name">action</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>/action_page.php<span class="token punctuation">"</span></span> <span class="token attr-name">autocomplete</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>on<span class="token punctuation">"</span></span><span class="token punctuation">></span></span></pre></td></tr></table></figure>]]></content>
      
      
      <categories>
          
          <category> Web </category>
          
          <category> HTML </category>
          
      </categories>
      
      
        <tags>
            
            <tag> Web </tag>
            
            <tag> HTML </tag>
            
            <tag> Forms </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>CSS - Float</title>
      <link href="/2023/04/19/Web/CSS/CSS%20-%20Float/"/>
      <url>/2023/04/19/Web/CSS/CSS%20-%20Float/</url>
      
        <content type="html"><![CDATA[<h2 id="float"><a class="anchor" href="#float">#</a> Float</h2><p><code>float</code>  用於定位和格式化內容。例如讓圖像浮動到容器的左側。</p><div class="note danger no-icon"><p><strong>Float contains following values:</strong></p><ul><li><code>left</code>  - 讓元素浮動到容器的左側。</li><li><code>right</code>  - 讓元素浮動到容器的右側。</li><li><code>none</code>  - Default value, 元素不浮動。</li><li><code>inherit</code>  - 繼承父元素的浮動值。</li></ul></div><figure class="highlight css"><figcaption data-lang="CSS"><span>Example - float: right</span><span class="exturl" data-url="aHR0cHM6Ly93d3cudzNzY2hvb2xzLmNvbS9jc3MvdHJ5aXQuYXNwP2ZpbGVuYW1lPXRyeWNzc19sYXlvdXRfZmxvYXQ=">link</span></figcaption><table><tr><td data-num="1"></td><td><pre><span class="token selector">img</span> <span class="token punctuation">&#123;</span><span class="token property">float</span><span class="token punctuation">:</span> right<span class="token punctuation">&#125;</span></pre></td></tr></table></figure><h3 id="float-next-to-each-other"><a class="anchor" href="#float-next-to-each-other">#</a> Float Next to Each Other</h3><p>運用  <code>float: left</code>  我們也可以讓元素水平排列。</p><figure class="highlight css"><figcaption data-lang="CSS"><span>Example</span><span class="exturl" data-url="aHR0cHM6Ly93d3cudzNzY2hvb2xzLmNvbS9jc3MvdHJ5aXQuYXNwP2ZpbGVuYW1lPXRyeWNzc19sYXlvdXRfZmxvYXQz">link</span></figcaption><table><tr><td data-num="1"></td><td><pre><span class="token selector">div</span> <span class="token punctuation">&#123;</span></pre></td></tr><tr><td data-num="2"></td><td><pre>  <span class="token property">float</span><span class="token punctuation">:</span> left<span class="token punctuation">;</span></pre></td></tr><tr><td data-num="3"></td><td><pre>  <span class="token property">padding</span><span class="token punctuation">:</span> 15px<span class="token punctuation">;</span></pre></td></tr><tr><td data-num="4"></td><td><pre><span class="token punctuation">&#125;</span></pre></td></tr><tr><td data-num="5"></td><td><pre><span class="token selector">.div1</span> <span class="token punctuation">&#123;</span><span class="token property">background</span><span class="token punctuation">:</span> red<span class="token punctuation">;</span><span class="token punctuation">&#125;</span></pre></td></tr><tr><td data-num="6"></td><td><pre><span class="token selector">.div2</span> <span class="token punctuation">&#123;</span><span class="token property">background</span><span class="token punctuation">:</span> yellow<span class="token punctuation">;</span><span class="token punctuation">&#125;</span></pre></td></tr><tr><td data-num="7"></td><td><pre><span class="token selector">.div3</span> <span class="token punctuation">&#123;</span><span class="token property">background</span><span class="token punctuation">:</span> green<span class="token punctuation">;</span><span class="token punctuation">&#125;</span></pre></td></tr></table></figure><h2 id="clear"><a class="anchor" href="#clear">#</a> Clear</h2><p><code>clear</code>  指定浮動元素旁邊的元素應該發生什麼。</p><div class="note danger no-icon"><p><strong>Clear contains following values:</strong></p><ul><li><code>none</code>  - Default value, 元素不會被推到左側或右側元素下方。</li><li><code>left</code>  - 元素被推到<strong>左浮動</strong>元素下方。</li><li><code>right</code>  - 元素被推到<strong>右浮動</strong>元素下方。</li><li><code>both</code>  - 元素被推到<strong>左右浮動</strong>元素下方。</li><li><code>inherit</code> - 從其父元素<strong>繼承</strong>清除值。</li></ul></div><p>當我們要清除浮動時，<strong>應將清除值與浮動值匹配:</strong> 如果元素向左浮動，則應向左清除。</p><figure class="highlight css"><figcaption data-lang="CSS"><span>Example</span><span class="exturl" data-url="aHR0cHM6Ly93d3cudzNzY2hvb2xzLmNvbS9jc3MvdHJ5aXQuYXNwP2ZpbGVuYW1lPXRyeWNzc19sYXlvdXRfY2xlYXI=">link</span></figcaption><table><tr><td data-num="1"></td><td><pre><span class="token selector">div1</span> <span class="token punctuation">&#123;</span><span class="token property">float</span><span class="token punctuation">:</span> left<span class="token punctuation">;</span><span class="token punctuation">&#125;</span></pre></td></tr><tr><td data-num="2"></td><td><pre><span class="token selector">div2</span> <span class="token punctuation">&#123;</span><span class="token property">clear</span><span class="token punctuation">:</span> left<span class="token punctuation">;</span><span class="token punctuation">&#125;</span></pre></td></tr></table></figure><h3 id="the-clearfix-hack"><a class="anchor" href="#the-clearfix-hack">#</a> The clearfix Hack</h3><p>如果浮動的元素高於容器時，將會超出邊界，我們可以用<font> <code>overflow: auto</code> </font>來修正。</p><figure class="highlight css"><figcaption data-lang="CSS"><span>Example</span><span class="exturl" data-url="aHR0cHM6Ly93d3cudzNzY2hvb2xzLmNvbS9jc3MvdHJ5aXQuYXNwP2ZpbGVuYW1lPXRyeWNzc19sYXlvdXRfY2xlYXJmaXg=">link</span></figcaption><table><tr><td data-num="1"></td><td><pre><span class="token selector">.clearfix</span> <span class="token punctuation">&#123;</span><span class="token property">overflow</span><span class="token punctuation">:</span> auto<span class="token punctuation">;</span><span class="token punctuation">&#125;</span></pre></td></tr></table></figure><p>而現在較多人用的是以下的代碼。</p><figure class="highlight css"><figcaption data-lang="CSS"><span>Example</span><span class="exturl" data-url="aHR0cHM6Ly93d3cudzNzY2hvb2xzLmNvbS9jc3MvdHJ5aXQuYXNwP2ZpbGVuYW1lPXRyeWNzc19sYXlvdXRfY2xlYXJmaXgy">link</span></figcaption><table><tr><td data-num="1"></td><td><pre><span class="token selector">.clearfix::after</span> <span class="token punctuation">&#123;</span></pre></td></tr><tr><td data-num="2"></td><td><pre>    <span class="token property">content</span><span class="token punctuation">:</span> <span class="token string">""</span><span class="token punctuation">;</span></pre></td></tr><tr><td data-num="3"></td><td><pre>    <span class="token property">clear</span><span class="token punctuation">:</span> both<span class="token punctuation">;</span></pre></td></tr><tr><td data-num="4"></td><td><pre>    <span class="token property">display</span><span class="token punctuation">:</span> table<span class="token punctuation">;</span></pre></td></tr><tr><td data-num="5"></td><td><pre><span class="token punctuation">&#125;</span></pre></td></tr></table></figure><div class="links"><div class="item" title="About clearfix hack" style="--block-color:#ccc;"><span class="exturl image" data-url="aHR0cHM6Ly93d3cucHJvZ3JhbWZhcm1lci5jb20vYXJ0aWNsZXMvc3R5bGUvY3NzLWZsb2F0LWFuZC1mbGV4" data-background-image="/images/404.png"></span>          <div class="info">          <span class="exturl title" data-url="aHR0cHM6Ly93d3cucHJvZ3JhbWZhcm1lci5jb20vYXJ0aWNsZXMvc3R5bGUvY3NzLWZsb2F0LWFuZC1mbGV4">About clearfix hack</span>          <p class="desc">https://www.programfarmer.com/articles/style/css-float-and-flex</p>          </div></div></div>]]></content>
      
      
      <categories>
          
          <category> Web </category>
          
          <category> CSS </category>
          
      </categories>
      
      
        <tags>
            
            <tag> Web </tag>
            
            <tag> CSS </tag>
            
            <tag> Float </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>1372. Longest ZigZag Path in a Binary Tree</title>
      <link href="/2023/04/19/Coding/leetcode/Medium/1372%20Longest%20ZigZag%20Path%20in%20a%20Binary%20Tree/"/>
      <url>/2023/04/19/Coding/leetcode/Medium/1372%20Longest%20ZigZag%20Path%20in%20a%20Binary%20Tree/</url>
      
        <content type="html"><![CDATA[<p>⭐️⭐️</p><h2 id="題目敘述"><a class="anchor" href="#題目敘述">#</a> <span class="exturl" data-url="aHR0cHM6Ly9sZWV0Y29kZS5jb20vcHJvYmxlbXMvbG9uZ2VzdC16aWd6YWctcGF0aC1pbi1hLWJpbmFyeS10cmVlLw==">題目敘述</span></h2><p>You are given the  <code>root</code>  of a binary tree.</p><p>A ZigZag path for a binary tree is defined as follow:</p><ul><li>Choose <strong>any</strong> node in the binary tree and a direction (right or left).</li><li>If the current direction is right, move to the right child of the current node; otherwise, move to the left child.</li><li>Change the direction from right to left or from left to right.</li><li>Repeat the second and third steps until you can’t move in the tree.</li></ul><p>Zigzag length is defined as the number of nodes visited - 1. (A single node has a length of 0).</p><p>Return <em>the longest <strong>ZigZag</strong> path contained in that tree</em>.</p><h3 id="example-1"><a class="anchor" href="#example-1">#</a> Example 1</h3><p><img data-src="https://i.imgur.com/c7mfyjz.png" alt=""></p><blockquote><p><strong>Input</strong>: root = [1,null,1,1,1,null,null,1,1,null,1,null,null,null,1,null,1]<br><strong>Output</strong>: 3<br><strong>Explanation</strong>: Longest ZigZag path in blue nodes (right -&gt; left -&gt; right).</p></blockquote><h3 id="example-2"><a class="anchor" href="#example-2">#</a> Example 2</h3><p><img data-src="https://i.imgur.com/A23S6gD.png" alt=""></p><blockquote><p><strong>Input</strong>: root = [1,1,1,null,1,null,null,1,1,null,1]<br><strong>Output</strong>: 4<br><strong>Explanation</strong>: Longest ZigZag path in blue nodes (left -&gt; right -&gt; left -&gt; right).</p></blockquote><h3 id="example-3"><a class="anchor" href="#example-3">#</a> Example 3:</h3><blockquote><p><strong>Input</strong>: root = [1]<br><strong>Output</strong>: 0</p></blockquote><h2 id="解題思路"><a class="anchor" href="#解題思路">#</a> 解題思路</h2><h2 id="code"><a class="anchor" href="#code">#</a> Code</h2><div class="tab" data-id="id" data-title="C++"><figure class="highlight cpp"><figcaption data-lang="C++"></figcaption><table><tr><td data-num="1"></td><td><pre><span class="token keyword">class</span> <span class="token class-name">Solution</span> <span class="token punctuation">&#123;</span></pre></td></tr><tr><td data-num="2"></td><td><pre><span class="token keyword">public</span><span class="token operator">:</span></pre></td></tr><tr><td data-num="3"></td><td><pre>    vector<span class="token operator">&lt;</span><span class="token keyword">int</span><span class="token operator">></span> <span class="token function">dfs</span> <span class="token punctuation">(</span>TreeNode<span class="token operator">*</span> root<span class="token punctuation">)</span> <span class="token punctuation">&#123;</span></pre></td></tr><tr><td data-num="4"></td><td><pre>        <span class="token keyword">if</span> <span class="token punctuation">(</span><span class="token operator">!</span>root<span class="token punctuation">)</span> <span class="token keyword">return</span> <span class="token punctuation">&#123;</span><span class="token operator">-</span><span class="token number">1</span><span class="token punctuation">,</span> <span class="token operator">-</span><span class="token number">1</span><span class="token punctuation">,</span> <span class="token operator">-</span><span class="token number">1</span><span class="token punctuation">&#125;</span><span class="token punctuation">;</span></pre></td></tr><tr><td data-num="5"></td><td><pre></pre></td></tr><tr><td data-num="6"></td><td><pre>        vector<span class="token operator">&lt;</span><span class="token keyword">int</span><span class="token operator">></span> leftSubtree <span class="token operator">=</span> <span class="token function">dfs</span><span class="token punctuation">(</span>root<span class="token operator">-></span>left<span class="token punctuation">)</span><span class="token punctuation">;</span></pre></td></tr><tr><td data-num="7"></td><td><pre>        vector<span class="token operator">&lt;</span><span class="token keyword">int</span><span class="token operator">></span> rightSubtree <span class="token operator">=</span> <span class="token function">dfs</span><span class="token punctuation">(</span>root<span class="token operator">-></span>right<span class="token punctuation">)</span><span class="token punctuation">;</span></pre></td></tr><tr><td data-num="8"></td><td><pre></pre></td></tr><tr><td data-num="9"></td><td><pre>        <span class="token keyword">int</span> leftlen <span class="token operator">=</span> leftSubtree<span class="token punctuation">[</span><span class="token number">1</span><span class="token punctuation">]</span> <span class="token operator">+</span> <span class="token number">1</span><span class="token punctuation">;</span></pre></td></tr><tr><td data-num="10"></td><td><pre>        <span class="token keyword">int</span> rightlen <span class="token operator">=</span> rightSubtree<span class="token punctuation">[</span><span class="token number">0</span><span class="token punctuation">]</span> <span class="token operator">+</span> <span class="token number">1</span><span class="token punctuation">;</span></pre></td></tr><tr><td data-num="11"></td><td><pre>        <span class="token keyword">int</span> mxlen <span class="token operator">=</span> <span class="token function">max</span><span class="token punctuation">(</span><span class="token punctuation">&#123;</span>leftlen<span class="token punctuation">,</span> rightlen<span class="token punctuation">,</span> leftSubtree<span class="token punctuation">[</span><span class="token number">2</span><span class="token punctuation">]</span><span class="token punctuation">,</span> rightSubtree<span class="token punctuation">[</span><span class="token number">2</span><span class="token punctuation">]</span><span class="token punctuation">&#125;</span><span class="token punctuation">)</span><span class="token punctuation">;</span></pre></td></tr><tr><td data-num="12"></td><td><pre></pre></td></tr><tr><td data-num="13"></td><td><pre>        <span class="token keyword">return</span> <span class="token punctuation">&#123;</span>leftlen<span class="token punctuation">,</span> rightlen<span class="token punctuation">,</span> mxlen<span class="token punctuation">&#125;</span><span class="token punctuation">;</span></pre></td></tr><tr><td data-num="14"></td><td><pre>    <span class="token punctuation">&#125;</span></pre></td></tr><tr><td data-num="15"></td><td><pre>    <span class="token keyword">int</span> <span class="token function">longestZigZag</span><span class="token punctuation">(</span>TreeNode<span class="token operator">*</span> root<span class="token punctuation">)</span> <span class="token punctuation">&#123;</span></pre></td></tr><tr><td data-num="16"></td><td><pre>        vector<span class="token operator">&lt;</span><span class="token keyword">int</span><span class="token operator">></span> res <span class="token operator">=</span> <span class="token function">dfs</span><span class="token punctuation">(</span>root<span class="token punctuation">)</span><span class="token punctuation">;</span></pre></td></tr><tr><td data-num="17"></td><td><pre>        <span class="token keyword">return</span> res<span class="token punctuation">[</span><span class="token number">2</span><span class="token punctuation">]</span><span class="token punctuation">;</span></pre></td></tr><tr><td data-num="18"></td><td><pre>    <span class="token punctuation">&#125;</span></pre></td></tr><tr><td data-num="19"></td><td><pre><span class="token punctuation">&#125;</span><span class="token punctuation">;</span></pre></td></tr></table></figure></div><div class="tab" data-id="id" data-title="Java"><pre><code class="language-java="></code></pre></div><div class="tab" data-id="id" data-title="Python"><figure class="highlight python"><figcaption data-lang="python"></figcaption><table><tr><td data-num="1"></td><td><pre><span class="token keyword">class</span> <span class="token class-name">Solution</span><span class="token punctuation">:</span></pre></td></tr><tr><td data-num="2"></td><td><pre>    <span class="token keyword">def</span> <span class="token function">longestZigZag</span><span class="token punctuation">(</span>self<span class="token punctuation">,</span> root<span class="token punctuation">:</span> Optional<span class="token punctuation">[</span>TreeNode<span class="token punctuation">]</span><span class="token punctuation">)</span> <span class="token operator">-</span><span class="token operator">></span> <span class="token builtin">int</span><span class="token punctuation">:</span></pre></td></tr><tr><td data-num="3"></td><td><pre>        <span class="token keyword">def</span> <span class="token function">dfs</span><span class="token punctuation">(</span>root<span class="token punctuation">)</span><span class="token punctuation">:</span></pre></td></tr><tr><td data-num="4"></td><td><pre>            <span class="token keyword">if</span> <span class="token keyword">not</span> root<span class="token punctuation">:</span> <span class="token keyword">return</span> <span class="token punctuation">[</span><span class="token operator">-</span><span class="token number">1</span><span class="token punctuation">,</span> <span class="token operator">-</span><span class="token number">1</span><span class="token punctuation">,</span> <span class="token operator">-</span><span class="token number">1</span><span class="token punctuation">]</span></pre></td></tr><tr><td data-num="5"></td><td><pre></pre></td></tr><tr><td data-num="6"></td><td><pre>            leftSubtree<span class="token punctuation">,</span> rightSubtree <span class="token operator">=</span> dfs<span class="token punctuation">(</span>root<span class="token punctuation">.</span>left<span class="token punctuation">)</span><span class="token punctuation">,</span> dfs<span class="token punctuation">(</span>root<span class="token punctuation">.</span>right<span class="token punctuation">)</span></pre></td></tr><tr><td data-num="7"></td><td><pre>            <span class="token keyword">return</span> <span class="token punctuation">[</span></pre></td></tr><tr><td data-num="8"></td><td><pre>                leftSubtree<span class="token punctuation">[</span><span class="token number">1</span><span class="token punctuation">]</span> <span class="token operator">+</span> <span class="token number">1</span><span class="token punctuation">,</span></pre></td></tr><tr><td data-num="9"></td><td><pre>                rightSubtree<span class="token punctuation">[</span><span class="token number">0</span><span class="token punctuation">]</span> <span class="token operator">+</span> <span class="token number">1</span><span class="token punctuation">,</span></pre></td></tr><tr><td data-num="10"></td><td><pre>                <span class="token builtin">max</span><span class="token punctuation">(</span>leftSubtree<span class="token punctuation">[</span><span class="token number">1</span><span class="token punctuation">]</span> <span class="token operator">+</span> <span class="token number">1</span><span class="token punctuation">,</span> rightSubtree<span class="token punctuation">[</span><span class="token number">0</span><span class="token punctuation">]</span> <span class="token operator">+</span> <span class="token number">1</span><span class="token punctuation">,</span> leftSubtree<span class="token punctuation">[</span><span class="token number">2</span><span class="token punctuation">]</span><span class="token punctuation">,</span> rightSubtree<span class="token punctuation">[</span><span class="token number">2</span><span class="token punctuation">]</span><span class="token punctuation">)</span></pre></td></tr><tr><td data-num="11"></td><td><pre>            <span class="token punctuation">]</span></pre></td></tr><tr><td data-num="12"></td><td><pre>        <span class="token keyword">return</span> dfs<span class="token punctuation">(</span>root<span class="token punctuation">)</span><span class="token punctuation">[</span><span class="token operator">-</span><span class="token number">1</span><span class="token punctuation">]</span></pre></td></tr></table></figure></div>]]></content>
      
      
      <categories>
          
          <category> Coding </category>
          
          <category> Leetcode </category>
          
          <category> Medium </category>
          
      </categories>
      
      
        <tags>
            
            <tag> Leetcode </tag>
            
            <tag> Dynamic Programming </tag>
            
            <tag> Medium </tag>
            
            <tag> Depth-First Search </tag>
            
            <tag> Tree </tag>
            
            <tag> Binary Tree </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>CSS - Animation</title>
      <link href="/2023/04/18/Web/CSS/CSS%20-%20Animation/"/>
      <url>/2023/04/18/Web/CSS/CSS%20-%20Animation/</url>
      
        <content type="html"><![CDATA[<h1 id="css-animation"><a class="anchor" href="#css-animation">#</a> CSS - Animation</h1><div class="note info"><p>CSS 允許在不使用 <em>Javascript</em> 或 <em>Flash</em> 的情況下對 HTML 元素進行動畫處理。</p></div><h2 id="the-keyframes-rule"><a class="anchor" href="#the-keyframes-rule">#</a> The @Keyframes Rule</h2><div class="note default"><p>當我們在 <code>@keyframes</code>  規則中指定 CSS 樣式時，動畫會在特定時間從目前樣式逐漸變為新樣式。</p><ul><li><code>animation-name</code></li><li><code>animation-duration</code></li></ul></div><figure class="highlight css"><figcaption data-lang="CSS"><span>From - To</span><span class="exturl" data-url="aHR0cHM6Ly93d3cudzNzY2hvb2xzLmNvbS9jc3MvdHJ5aXQuYXNwP2ZpbGVuYW1lPXRyeWNzczNfYW5pbWF0aW9uMQ==">link</span></figcaption><table><tr><td data-num="1"></td><td><pre><span class="token comment">/* The animation will last for 4 seconds, and it will gradually change the background-color of the &lt;div> element from "red" to "yellow" */</span></pre></td></tr><tr><td data-num="2"></td><td><pre><span class="token comment">/* The animation code */</span></pre></td></tr><tr><td data-num="3"></td><td><pre><span class="token atrule"><span class="token rule">@keyframes</span> example</span> <span class="token punctuation">&#123;</span></pre></td></tr><tr><td data-num="4"></td><td><pre>    <span class="token selector">from</span> <span class="token punctuation">&#123;</span><span class="token property">background-color</span><span class="token punctuation">:</span> red<span class="token punctuation">;</span><span class="token punctuation">&#125;</span></pre></td></tr><tr><td data-num="5"></td><td><pre>    <span class="token selector">to</span> <span class="token punctuation">&#123;</span><span class="token property">background-color</span><span class="token punctuation">:</span> yellow<span class="token punctuation">;</span><span class="token punctuation">&#125;</span></pre></td></tr><tr><td data-num="6"></td><td><pre><span class="token punctuation">&#125;</span></pre></td></tr><tr><td data-num="7"></td><td><pre></pre></td></tr><tr><td data-num="8"></td><td><pre><span class="token comment">/* The element to apply the animation to */</span></pre></td></tr><tr><td data-num="9"></td><td><pre><span class="token selector">div</span> <span class="token punctuation">&#123;</span></pre></td></tr><tr><td data-num="10"></td><td><pre>    <span class="token property">width</span><span class="token punctuation">:</span> 100px<span class="token punctuation">;</span></pre></td></tr><tr><td data-num="11"></td><td><pre>    <span class="token property">height</span><span class="token punctuation">:</span> 100px<span class="token punctuation">;</span></pre></td></tr><tr><td data-num="12"></td><td><pre>    <span class="token property">background-color</span><span class="token punctuation">:</span> red<span class="token punctuation">;</span></pre></td></tr><tr><td data-num="13"></td><td><pre>    <span class="token property">animation-name</span><span class="token punctuation">:</span> example<span class="token punctuation">;</span></pre></td></tr><tr><td data-num="14"></td><td><pre>    <span class="token property">animation-duration</span><span class="token punctuation">:</span> 4s<span class="token punctuation">;</span></pre></td></tr><tr><td data-num="15"></td><td><pre><span class="token punctuation">&#125;</span></pre></td></tr></table></figure><div class="note danger"><p><strong>NOTE:</strong>  <code>animation-duration</code>  定義動畫會花多少時間完成，所以如果沒有指定時間，動畫將不會執行，因為 default 值是 0s。</p></div><figure class="highlight css"><figcaption data-lang="CSS"><span>Percent %</span><span class="exturl" data-url="aHR0cHM6Ly93d3cudzNzY2hvb2xzLmNvbS9jc3MvdHJ5aXQuYXNwP2ZpbGVuYW1lPXRyeWNzczNfYW5pbWF0aW9uMw==">link</span></figcaption><table><tr><td data-num="1"></td><td><pre><span class="token comment">/* The animation code */</span></pre></td></tr><tr><td data-num="2"></td><td><pre><span class="token atrule"><span class="token rule">@keyframes</span> example</span> <span class="token punctuation">&#123;</span></pre></td></tr><tr><td data-num="3"></td><td><pre>    <span class="token selector">0%</span> <span class="token punctuation">&#123;</span><span class="token property">background-color</span><span class="token punctuation">:</span> red<span class="token punctuation">;</span> <span class="token property">left</span><span class="token punctuation">:</span> 0px<span class="token punctuation">;</span> <span class="token property">top</span><span class="token punctuation">:</span> 0px<span class="token punctuation">;</span><span class="token punctuation">&#125;</span></pre></td></tr><tr><td data-num="4"></td><td><pre>    <span class="token selector">25%</span> <span class="token punctuation">&#123;</span><span class="token property">background-color</span><span class="token punctuation">:</span> yellow<span class="token punctuation">;</span> <span class="token property">left</span><span class="token punctuation">:</span> 200px<span class="token punctuation">;</span> <span class="token property">top</span><span class="token punctuation">:</span> 0px<span class="token punctuation">;</span><span class="token punctuation">&#125;</span></pre></td></tr><tr><td data-num="5"></td><td><pre>    <span class="token selector">50%</span> <span class="token punctuation">&#123;</span><span class="token property">background-color</span><span class="token punctuation">:</span> blue<span class="token punctuation">;</span> <span class="token property">left</span><span class="token punctuation">:</span> 200px<span class="token punctuation">;</span> <span class="token property">top</span><span class="token punctuation">:</span> 200px<span class="token punctuation">;</span><span class="token punctuation">&#125;</span></pre></td></tr><tr><td data-num="6"></td><td><pre>    <span class="token selector">75%</span> <span class="token punctuation">&#123;</span><span class="token property">background-color</span><span class="token punctuation">:</span> green<span class="token punctuation">;</span> <span class="token property">left</span><span class="token punctuation">:</span> 0px<span class="token punctuation">;</span> <span class="token property">top</span><span class="token punctuation">:</span> 200px<span class="token punctuation">;</span><span class="token punctuation">&#125;</span></pre></td></tr><tr><td data-num="7"></td><td><pre>    <span class="token selector">100%</span> <span class="token punctuation">&#123;</span><span class="token property">background-color</span><span class="token punctuation">:</span> red<span class="token punctuation">;</span> <span class="token property">left</span><span class="token punctuation">:</span> 0px<span class="token punctuation">;</span> <span class="token property">top</span><span class="token punctuation">:</span> 0px<span class="token punctuation">;</span><span class="token punctuation">&#125;</span></pre></td></tr><tr><td data-num="8"></td><td><pre><span class="token punctuation">&#125;</span></pre></td></tr><tr><td data-num="9"></td><td><pre></pre></td></tr><tr><td data-num="10"></td><td><pre><span class="token comment">/* The element to apply the animation to */</span></pre></td></tr><tr><td data-num="11"></td><td><pre><span class="token selector">div</span> <span class="token punctuation">&#123;</span></pre></td></tr><tr><td data-num="12"></td><td><pre>    <span class="token property">width</span><span class="token punctuation">:</span> 100px<span class="token punctuation">;</span></pre></td></tr><tr><td data-num="13"></td><td><pre>    <span class="token property">height</span><span class="token punctuation">:</span> 100px<span class="token punctuation">;</span></pre></td></tr><tr><td data-num="14"></td><td><pre>    <span class="token property">background-color</span><span class="token punctuation">:</span> red<span class="token punctuation">;</span></pre></td></tr><tr><td data-num="15"></td><td><pre>    <span class="token property">position</span><span class="token punctuation">:</span> relative<span class="token punctuation">;</span></pre></td></tr><tr><td data-num="16"></td><td><pre>    <span class="token property">animation-name</span><span class="token punctuation">:</span> example<span class="token punctuation">;</span></pre></td></tr><tr><td data-num="17"></td><td><pre>    <span class="token property">animation-duration</span><span class="token punctuation">:</span> 4s<span class="token punctuation">;</span></pre></td></tr><tr><td data-num="18"></td><td><pre><span class="token punctuation">&#125;</span></pre></td></tr></table></figure><h2 id="delay-an-animation"><a class="anchor" href="#delay-an-animation">#</a> Delay an Animation</h2><div class="note info"><p><code>animation-delay</code>  定義動畫延遲開始的時間。</p></div><figure class="highlight css"><figcaption data-lang="CSS"><span>Example 1</span><span class="exturl" data-url="aHR0cHM6Ly93d3cudzNzY2hvb2xzLmNvbS9jc3MvdHJ5aXQuYXNwP2ZpbGVuYW1lPXRyeWNzczNfYW5pbWF0aW9uX2RlbGF5">link</span></figcaption><table><tr><td data-num="1"></td><td><pre><span class="token selector">div</span> <span class="token punctuation">&#123;</span></pre></td></tr><tr><td data-num="2"></td><td><pre>    <span class="token property">width</span><span class="token punctuation">:</span> 100px<span class="token punctuation">;</span></pre></td></tr><tr><td data-num="3"></td><td><pre>    <span class="token property">height</span><span class="token punctuation">:</span> 100px<span class="token punctuation">;</span></pre></td></tr><tr><td data-num="4"></td><td><pre>    <span class="token property">background-color</span><span class="token punctuation">:</span> red<span class="token punctuation">;</span></pre></td></tr><tr><td data-num="5"></td><td><pre>    <span class="token property">position</span><span class="token punctuation">:</span> relative<span class="token punctuation">;</span></pre></td></tr><tr><td data-num="6"></td><td><pre>    <span class="token property">animation-name</span><span class="token punctuation">:</span> example<span class="token punctuation">;</span></pre></td></tr><tr><td data-num="7"></td><td><pre>    <span class="token property">animation-duration</span><span class="token punctuation">:</span> 4s<span class="token punctuation">;</span></pre></td></tr><tr><td data-num="8"></td><td><pre>    <span class="token property">animation-delay</span><span class="token punctuation">:</span> 2s<span class="token punctuation">;</span></pre></td></tr><tr><td data-num="9"></td><td><pre><span class="token punctuation">&#125;</span></pre></td></tr></table></figure><p><strong>負數也可以執行，動畫會從它像是已經跑了 Ns 開始</strong></p><figure class="highlight css"><figcaption data-lang="CSS"><span>Example 2</span><span class="exturl" data-url="aHR0cHM6Ly93d3cudzNzY2hvb2xzLmNvbS9jc3MvdHJ5aXQuYXNwP2ZpbGVuYW1lPXRyeWNzczNfYW5pbWF0aW9uX2RlbGF5Mg==">link</span></figcaption><table><tr><td data-num="1"></td><td><pre><span class="token selector">div</span> <span class="token punctuation">&#123;</span></pre></td></tr><tr><td data-num="2"></td><td><pre>    <span class="token property">width</span><span class="token punctuation">:</span> 100px<span class="token punctuation">;</span></pre></td></tr><tr><td data-num="3"></td><td><pre>    <span class="token property">height</span><span class="token punctuation">:</span> 100px<span class="token punctuation">;</span></pre></td></tr><tr><td data-num="4"></td><td><pre>    <span class="token property">background-color</span><span class="token punctuation">:</span> red<span class="token punctuation">;</span></pre></td></tr><tr><td data-num="5"></td><td><pre>    <span class="token property">position</span><span class="token punctuation">:</span> relative<span class="token punctuation">;</span></pre></td></tr><tr><td data-num="6"></td><td><pre>    <span class="token property">animation-name</span><span class="token punctuation">:</span> example<span class="token punctuation">;</span></pre></td></tr><tr><td data-num="7"></td><td><pre>    <span class="token property">animation-duration</span><span class="token punctuation">:</span> 4s<span class="token punctuation">;</span></pre></td></tr><tr><td data-num="8"></td><td><pre>    <span class="token property">animation-delay</span><span class="token punctuation">:</span> -2s<span class="token punctuation">;</span></pre></td></tr><tr><td data-num="9"></td><td><pre><span class="token punctuation">&#125;</span></pre></td></tr></table></figure><h2 id="set-how-many-times-an-animation-should-run"><a class="anchor" href="#set-how-many-times-an-animation-should-run">#</a> Set How Many Times an Animation Should Run</h2><div class="note info"><p><code>animation-iteration-count</code>  指定動畫須執行幾次。</p></div><figure class="highlight css"><figcaption data-lang="CSS"><span>Example 1</span><span class="exturl" data-url="aHR0cHM6Ly93d3cudzNzY2hvb2xzLmNvbS9jc3MvdHJ5aXQuYXNwP2ZpbGVuYW1lPXRyeWNzczNfYW5pbWF0aW9uX2NvdW50">link</span></figcaption><table><tr><td data-num="1"></td><td><pre><span class="token comment">/* Example will run the animation 3 times before it stops */</span></pre></td></tr><tr><td data-num="2"></td><td><pre><span class="token selector">div</span> <span class="token punctuation">&#123;</span></pre></td></tr><tr><td data-num="3"></td><td><pre>    <span class="token property">width</span><span class="token punctuation">:</span> 100px<span class="token punctuation">;</span></pre></td></tr><tr><td data-num="4"></td><td><pre>    <span class="token property">height</span><span class="token punctuation">:</span> 100px<span class="token punctuation">;</span></pre></td></tr><tr><td data-num="5"></td><td><pre>    <span class="token property">background-color</span><span class="token punctuation">:</span> red<span class="token punctuation">;</span></pre></td></tr><tr><td data-num="6"></td><td><pre>    <span class="token property">animation-name</span><span class="token punctuation">:</span> example<span class="token punctuation">;</span></pre></td></tr><tr><td data-num="7"></td><td><pre>    <span class="token property">animation-duration</span><span class="token punctuation">:</span> 4s<span class="token punctuation">;</span></pre></td></tr><tr><td data-num="8"></td><td><pre>    <span class="token property">animation-iteration-count</span><span class="token punctuation">:</span> 3<span class="token punctuation">;</span></pre></td></tr><tr><td data-num="9"></td><td><pre><span class="token punctuation">&#125;</span></pre></td></tr></table></figure><figure class="highlight css"><figcaption data-lang="CSS"><span>Example 2</span><span class="exturl" data-url="aHR0cHM6Ly93d3cudzNzY2hvb2xzLmNvbS9jc3MvdHJ5aXQuYXNwP2ZpbGVuYW1lPXRyeWNzczNfYW5pbWF0aW9uX2NvdW50Mg==">link</span></figcaption><table><tr><td data-num="1"></td><td><pre><span class="token comment">/* Example uses the value "infinite" to make the animation continue for ever */</span></pre></td></tr><tr><td data-num="2"></td><td><pre><span class="token selector">div</span> <span class="token punctuation">&#123;</span></pre></td></tr><tr><td data-num="3"></td><td><pre>    <span class="token property">width</span><span class="token punctuation">:</span> 100px<span class="token punctuation">;</span></pre></td></tr><tr><td data-num="4"></td><td><pre>    <span class="token property">height</span><span class="token punctuation">:</span> 100px<span class="token punctuation">;</span></pre></td></tr><tr><td data-num="5"></td><td><pre>    <span class="token property">background-color</span><span class="token punctuation">:</span> red<span class="token punctuation">;</span></pre></td></tr><tr><td data-num="6"></td><td><pre>    <span class="token property">animation-name</span><span class="token punctuation">:</span> example<span class="token punctuation">;</span></pre></td></tr><tr><td data-num="7"></td><td><pre>    <span class="token property">animation-duration</span><span class="token punctuation">:</span> 4s<span class="token punctuation">;</span></pre></td></tr><tr><td data-num="8"></td><td><pre>    <span class="token property">animation-iteration-count</span><span class="token punctuation">:</span> infinite<span class="token punctuation">;</span></pre></td></tr><tr><td data-num="9"></td><td><pre><span class="token punctuation">&#125;</span></pre></td></tr></table></figure><h2 id="run-animation-in-reverse-direction-or-alternate-cycles"><a class="anchor" href="#run-animation-in-reverse-direction-or-alternate-cycles">#</a> Run Animation in Reverse Direction or Alternate Cycles</h2><div class="note info"><p><code>animation-direction</code>  指定動畫要依什麼方向移動。</p></div><div class="note danger"><p><strong>The animation-direction values:</strong></p><ul><li><code>normal</code>  - Default, the animation is played as <strong>normal(forwards)</strong>.</li><li><code>reverse</code>  - The animation is played in <strong>reverse</strong> direction(backwards).</li><li><code>alternate</code>  - The animation is played <strong>forwards first, then backwards</strong>.</li><li><code>alternate-reverse</code>  - The animation is played <strong>backwards first, then forwards</strong>.</li></ul></div><figure class="highlight css"><figcaption data-lang="CSS"><span>Example 1</span><span class="exturl" data-url="aHR0cHM6Ly93d3cudzNzY2hvb2xzLmNvbS9jc3MvdHJ5aXQuYXNwP2ZpbGVuYW1lPXRyeWNzczNfYW5pbWF0aW9uX2RpcmVjdGlvbg==">link</span></figcaption><table><tr><td data-num="1"></td><td><pre><span class="token selector">div</span> <span class="token punctuation">&#123;</span></pre></td></tr><tr><td data-num="2"></td><td><pre>    <span class="token property">width</span><span class="token punctuation">:</span> 100px<span class="token punctuation">;</span></pre></td></tr><tr><td data-num="3"></td><td><pre>    <span class="token property">height</span><span class="token punctuation">:</span> 100px<span class="token punctuation">;</span></pre></td></tr><tr><td data-num="4"></td><td><pre>    <span class="token property">background-color</span><span class="token punctuation">:</span> red<span class="token punctuation">;</span></pre></td></tr><tr><td data-num="5"></td><td><pre>    <span class="token property">position</span><span class="token punctuation">:</span> relative<span class="token punctuation">;</span></pre></td></tr><tr><td data-num="6"></td><td><pre>    <span class="token property">animation-name</span><span class="token punctuation">:</span> example<span class="token punctuation">;</span></pre></td></tr><tr><td data-num="7"></td><td><pre>    <span class="token property">animation-duration</span><span class="token punctuation">:</span> 4s<span class="token punctuation">;</span></pre></td></tr><tr><td data-num="8"></td><td><pre>    <span class="token property">animation-direction</span><span class="token punctuation">:</span> reverse<span class="token punctuation">;</span></pre></td></tr><tr><td data-num="9"></td><td><pre><span class="token punctuation">&#125;</span></pre></td></tr></table></figure><div class="links"><div class="item" title="Example 2" style="--block-color:#e9546b;"><span class="exturl image" data-url="aHR0cHM6Ly93d3cudzNzY2hvb2xzLmNvbS9jc3MvdHJ5aXQuYXNwP2ZpbGVuYW1lPXRyeWNzczNfYW5pbWF0aW9uX2RpcmVjdGlvbjI=" data-background-image="/images/404.png"></span>          <div class="info">          <span class="exturl title" data-url="aHR0cHM6Ly93d3cudzNzY2hvb2xzLmNvbS9jc3MvdHJ5aXQuYXNwP2ZpbGVuYW1lPXRyeWNzczNfYW5pbWF0aW9uX2RpcmVjdGlvbjI=">Example 2</span>          <p class="desc">https://www.w3schools.com/css/tryit.asp?filename=trycss3_animation_direction2</p>          </div></div><div class="item" title="Example 3" style="--block-color:#9d5b8b;"><span class="exturl image" data-url="aHR0cHM6Ly93d3cudzNzY2hvb2xzLmNvbS9jc3MvdHJ5aXQuYXNwP2ZpbGVuYW1lPXRyeWNzczNfYW5pbWF0aW9uX2RpcmVjdGlvbjM=" data-background-image="/images/404.png"></span>          <div class="info">          <span class="exturl title" data-url="aHR0cHM6Ly93d3cudzNzY2hvb2xzLmNvbS9jc3MvdHJ5aXQuYXNwP2ZpbGVuYW1lPXRyeWNzczNfYW5pbWF0aW9uX2RpcmVjdGlvbjM=">Example 3</span>          <p class="desc">https://www.w3schools.com/css/tryit.asp?filename=trycss3_animation_direction3</p>          </div></div></div><h2 id="the-speed-curve-of-the-animation"><a class="anchor" href="#the-speed-curve-of-the-animation">#</a> The Speed Curve of the Animation</h2><div class="note info"><p><code>animation-timing-function</code>  指定動畫的速度曲線。</p></div><div class="note danger"><p><strong>Value</strong></p><ul><li><code>ease</code>  - default(slow start, then fast, then end slowly).</li><li><code>linear</code>  - same speed from start to end.</li><li><code>ease-in</code>  - slow start.</li><li><code>ease-out</code>  - slow end.</li><li><code>ease-in-out</code>  - slow start and end.</li><li><code>cubic-bezier(n, n, n, n)</code>  lets you define your own.</li></ul></div><div class="links"><div class="item" title="Example"><span class="exturl image" data-url="aHR0cHM6Ly93d3cudzNzY2hvb2xzLmNvbS9jc3MvdHJ5aXQuYXNwP2ZpbGVuYW1lPXRyeWNzczNfYW5pbWF0aW9uX3NwZWVk" data-background-image="/images/404.png"></span>          <div class="info">          <span class="exturl title" data-url="aHR0cHM6Ly93d3cudzNzY2hvb2xzLmNvbS9jc3MvdHJ5aXQuYXNwP2ZpbGVuYW1lPXRyeWNzczNfYW5pbWF0aW9uX3NwZWVk">Example</span>          <p class="desc">https://www.w3schools.com/css/tryit.asp?filename=trycss3_animation_speed</p>          </div></div></div><h2 id="the-fill-mode-for-an-animation"><a class="anchor" href="#the-fill-mode-for-an-animation">#</a> The fill-mode For an Animation</h2><div class="note info"><p>在播放第一個 <code>@keyframes</code>  之前或播放最後一個 <code>@keyframes</code>  之後，CSS 動畫不會影響元素。 <code>animation-fill-mode</code>  可以覆蓋此行為。</p><p><code>animation-fill-mode</code>  指定動畫未播放時 (開始前、結束後或兩者) 目標元素的樣式。</p></div><div class="note danger"><p><strong>Value</strong></p><ul><li><code>none</code>  - Default value. 動畫在執行前後不會對元素應用任何樣式。</li><li><code>forwards</code>  - 元素將保留最後一個 <code>@keyframes</code>  設置的樣式值 (取決於動畫方向和動畫迭代次數)。</li><li><code>backwards</code>  - 元素將獲得第一個 <code>@keyframes</code>  設置的樣式值（取決於動畫方向），並在動畫延遲期間保留它。</li><li><code>both</code>  - 動畫將遵循向前和向後的規則，在兩個方向上擴展動畫屬性。</li></ul></div><div class="links"><div class="item" title="Example 1"><span class="exturl image" data-url="aHR0cHM6Ly93d3cudzNzY2hvb2xzLmNvbS9jc3MvdHJ5aXQuYXNwP2ZpbGVuYW1lPXRyeWNzczNfYW5pbWF0aW9uX2ZpbGwtbW9kZQ==" data-background-image="/images/404.png"></span>          <div class="info">          <span class="exturl title" data-url="aHR0cHM6Ly93d3cudzNzY2hvb2xzLmNvbS9jc3MvdHJ5aXQuYXNwP2ZpbGVuYW1lPXRyeWNzczNfYW5pbWF0aW9uX2ZpbGwtbW9kZQ==">Example 1</span>          <p class="desc">讓元素保留最後一個動畫樣式</p>          </div></div><div class="item" title="Example 2"><span class="exturl image" data-url="aHR0cHM6Ly93d3cudzNzY2hvb2xzLmNvbS9jc3MvdHJ5aXQuYXNwP2ZpbGVuYW1lPXRyeWNzczNfYW5pbWF0aW9uX2ZpbGwtbW9kZTI=" data-background-image="/images/404.png"></span>          <div class="info">          <span class="exturl title" data-url="aHR0cHM6Ly93d3cudzNzY2hvb2xzLmNvbS9jc3MvdHJ5aXQuYXNwP2ZpbGVuYW1lPXRyeWNzczNfYW5pbWF0aW9uX2ZpbGwtbW9kZTI=">Example 2</span>          <p class="desc">讓元素獲得最後一個動畫樣式</p>          </div></div><div class="item" title="Example 3"><span class="exturl image" data-url="aHR0cHM6Ly93d3cudzNzY2hvb2xzLmNvbS9jc3MvdHJ5aXQuYXNwP2ZpbGVuYW1lPXRyeWNzczNfYW5pbWF0aW9uX2ZpbGwtbW9kZTM=" data-background-image="/images/404.png"></span>          <div class="info">          <span class="exturl title" data-url="aHR0cHM6Ly93d3cudzNzY2hvb2xzLmNvbS9jc3MvdHJ5aXQuYXNwP2ZpbGVuYW1lPXRyeWNzczNfYW5pbWF0aW9uX2ZpbGwtbW9kZTM=">Example 3</span>          <p class="desc">讓元素在動畫開始前獲取第一個設置的樣式，並在動畫結束時保留最後一個樣式</p>          </div></div></div><h2 id="animation-shorthand-property"><a class="anchor" href="#animation-shorthand-property">#</a> Animation Shorthand Property</h2><figure class="highlight css"><figcaption data-lang="CSS"></figcaption><table><tr><td data-num="1"></td><td><pre><span class="token property">animation</span><span class="token punctuation">:</span> animation-name animation-duration animation-timing-function animation-delay animation-iteration-count animation-direction<span class="token punctuation">;</span></pre></td></tr><tr><td data-num="2"></td><td><pre></pre></td></tr><tr><td data-num="3"></td><td><pre><span class="token selector">div</span> <span class="token punctuation">&#123;</span></pre></td></tr><tr><td data-num="4"></td><td><pre>    <span class="token property">animation</span><span class="token punctuation">:</span> example 5s linear 2s infinite alternate<span class="token punctuation">;</span></pre></td></tr><tr><td data-num="5"></td><td><pre><span class="token punctuation">&#125;</span></pre></td></tr></table></figure>]]></content>
      
      
      <categories>
          
          <category> Web </category>
          
          <category> CSS </category>
          
      </categories>
      
      
        <tags>
            
            <tag> Web </tag>
            
            <tag> CSS </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>CSS - RWD (Responsive Web Design)</title>
      <link href="/2023/04/18/Web/CSS/CSS%20-%20RWD%20(Responsive%20Web%20Design)/"/>
      <url>/2023/04/18/Web/CSS/CSS%20-%20RWD%20(Responsive%20Web%20Design)/</url>
      
        <content type="html"><![CDATA[<div class="note info"><p><strong>RWD (響應式網頁)</strong> 讓我們的網頁在各裝置都能漂亮的呈現，能夠適應不同大小的螢幕。</p></div><h2 id="rwd-viewport"><a class="anchor" href="#rwd-viewport">#</a> RWD Viewport</h2><div class="note info"><p>就是視窗的意思，使用者能看到的頁面範圍。</p></div><h3 id="setting-the-viewport"><a class="anchor" href="#setting-the-viewport">#</a> Setting the Viewport</h3><p>使用 HTML <font> <code>&lt;meta&gt;</code> </font> 標籤。</p><figure class="highlight css"><figcaption data-lang="CSS"></figcaption><table><tr><td data-num="1"></td><td><pre>&lt;meta name=<span class="token string">"viewport"</span> content=<span class="token string">"width=device-width, initial-scale=1.0"</span>></pre></td></tr></table></figure><div class="note danger no-icon"><ul><li><font> <code>width=device-width</code> </font> 設定視窗的寬度跟隨裝置的螢幕寬度。</li><li><font> <code>initial-scale=1.0</code> </font> 設定初始的視窗縮放比例，1 表示為 100%。</li></ul></div><h2 id="grid-view"><a class="anchor" href="#grid-view">#</a> Grid View</h2><div class="links"><div class="item" title="grid 小遊戲"><span class="exturl image" data-url="aHR0cHM6Ly9jc3NncmlkZ2FyZGVuLmNvbS8jemgtdHc=" data-background-image="/images/404.png"></span>          <div class="info">          <span class="exturl title" data-url="aHR0cHM6Ly9jc3NncmlkZ2FyZGVuLmNvbS8jemgtdHc=">grid 小遊戲</span>          <p class="desc">https://cssgridgarden.com/#zh-tw</p>          </div></div></div><p>我們將網頁分成<strong>網格 (rows, Columns)</strong> 來看，這讓我們更方便的排版。</p><p><img data-src="https://i.imgur.com/fKyOOXR.png" alt=""></p><blockquote><p><span class="exturl" data-url="aHR0cHM6Ly93d3cudzNzY2hvb2xzLmNvbS9jc3MvdHJ5cmVzcG9uc2l2ZV9ncmlkLmh0bQ==">A responsive grid-view often has 12 columns, and has a total width of 100%, and will shrink and expand as you resize the browser window.</span></p></blockquote><h3 id="building-a-responsive-grid-view"><a class="anchor" href="#building-a-responsive-grid-view">#</a> Building a Responsive Grid-View</h3><p>首先，將所有 HTML 元素都設置成 <font> <code>border-box</code> </font>，確保 <em><strong>padding</strong></em> 和 <em><strong>border</strong></em> 都將算在總寬度和總高度內。</p><figure class="highlight css"><figcaption data-lang="CSS"></figcaption><table><tr><td data-num="1"></td><td><pre><span class="token selector">*</span> <span class="token punctuation">&#123;</span></pre></td></tr><tr><td data-num="2"></td><td><pre>    <span class="token property">box-sizing</span><span class="token punctuation">:</span> border-box<span class="token punctuation">;</span></pre></td></tr><tr><td data-num="3"></td><td><pre><span class="token punctuation">&#125;</span></pre></td></tr></table></figure><p>設置 12 行的方法如下:</p><ul><li>每行寬度: 100% / 12 columns = 8.33%</li><li>建立一個類別定義 12 種寬度 <font> <code>class = &quot;col-&quot;</code> </font>，用數字編號來代表要延伸幾格。</li></ul><p><span class="exturl" data-url="aHR0cHM6Ly93d3cudzNzY2hvb2xzLmNvbS9jc3MvdHJ5aXQuYXNwP2ZpbGVuYW1lPXRyeXJlc3BvbnNpdmVfY29scw==">Example</span></p><p>一次定義好每個寬度都要有的樣式。</p><figure class="highlight css"><figcaption data-lang="CSS"></figcaption><table><tr><td data-num="1"></td><td><pre><span class="token selector">[class*="col-"]</span> <span class="token punctuation">&#123;</span></pre></td></tr><tr><td data-num="2"></td><td><pre>  <span class="token property">float</span><span class="token punctuation">:</span> left<span class="token punctuation">;</span></pre></td></tr><tr><td data-num="3"></td><td><pre>  <span class="token property">padding</span><span class="token punctuation">:</span> 15px<span class="token punctuation">;</span></pre></td></tr><tr><td data-num="4"></td><td><pre>  <span class="token property">border</span><span class="token punctuation">:</span> 1px solid red<span class="token punctuation">;</span></pre></td></tr><tr><td data-num="5"></td><td><pre><span class="token punctuation">&#125;</span></pre></td></tr></table></figure><p>數字編號表示拓展幾格。</p><figure class="highlight css"><figcaption data-lang="CSS"></figcaption><table><tr><td data-num="1"></td><td><pre><span class="token selector">.col-1</span> <span class="token punctuation">&#123;</span><span class="token property">width</span><span class="token punctuation">:</span> 8.33%<span class="token punctuation">;</span><span class="token punctuation">&#125;</span></pre></td></tr><tr><td data-num="2"></td><td><pre><span class="token selector">.col-2</span> <span class="token punctuation">&#123;</span><span class="token property">width</span><span class="token punctuation">:</span> 16.66%<span class="token punctuation">;</span><span class="token punctuation">&#125;</span></pre></td></tr><tr><td data-num="3"></td><td><pre><span class="token selector">.col-3</span> <span class="token punctuation">&#123;</span><span class="token property">width</span><span class="token punctuation">:</span> 25%<span class="token punctuation">;</span><span class="token punctuation">&#125;</span></pre></td></tr><tr><td data-num="4"></td><td><pre><span class="token selector">.col-4</span> <span class="token punctuation">&#123;</span><span class="token property">width</span><span class="token punctuation">:</span> 33.33%<span class="token punctuation">;</span><span class="token punctuation">&#125;</span></pre></td></tr><tr><td data-num="5"></td><td><pre><span class="token selector">.col-5</span> <span class="token punctuation">&#123;</span><span class="token property">width</span><span class="token punctuation">:</span> 41.66%<span class="token punctuation">;</span><span class="token punctuation">&#125;</span></pre></td></tr><tr><td data-num="6"></td><td><pre><span class="token selector">.col-6</span> <span class="token punctuation">&#123;</span><span class="token property">width</span><span class="token punctuation">:</span> 50%<span class="token punctuation">;</span><span class="token punctuation">&#125;</span></pre></td></tr><tr><td data-num="7"></td><td><pre><span class="token selector">.col-7</span> <span class="token punctuation">&#123;</span><span class="token property">width</span><span class="token punctuation">:</span> 58.33%<span class="token punctuation">;</span><span class="token punctuation">&#125;</span></pre></td></tr><tr><td data-num="8"></td><td><pre><span class="token selector">.col-8</span> <span class="token punctuation">&#123;</span><span class="token property">width</span><span class="token punctuation">:</span> 66.66%<span class="token punctuation">;</span><span class="token punctuation">&#125;</span></pre></td></tr><tr><td data-num="9"></td><td><pre><span class="token selector">.col-9</span> <span class="token punctuation">&#123;</span><span class="token property">width</span><span class="token punctuation">:</span> 75%<span class="token punctuation">;</span><span class="token punctuation">&#125;</span></pre></td></tr><tr><td data-num="10"></td><td><pre><span class="token selector">.col-10</span> <span class="token punctuation">&#123;</span><span class="token property">width</span><span class="token punctuation">:</span> 83.33%<span class="token punctuation">;</span><span class="token punctuation">&#125;</span></pre></td></tr><tr><td data-num="11"></td><td><pre><span class="token selector">.col-11</span> <span class="token punctuation">&#123;</span><span class="token property">width</span><span class="token punctuation">:</span> 91.66%<span class="token punctuation">;</span><span class="token punctuation">&#125;</span></pre></td></tr><tr><td data-num="12"></td><td><pre><span class="token selector">.col-12</span> <span class="token punctuation">&#123;</span><span class="token property">width</span><span class="token punctuation">:</span> 100%<span class="token punctuation">;</span><span class="token punctuation">&#125;</span></pre></td></tr></table></figure><p>由於 columns 都設置了 <font> <code>floating: left</code> </font> 的關係，其他元素將會當他們不存在。為了避免這種狀況，我們設置以下樣式來<span class="exturl" data-url="aHR0cHM6Ly9oYWNrbWQuaW8vQENoaWVuSS9jc3NfZmxvYXQjVGhlLWNsZWFyZml4LUhhY2s=">清除浮動</span>。</p><figure class="highlight css"><figcaption data-lang="CSS"></figcaption><table><tr><td data-num="1"></td><td><pre><span class="token selector">row::after</span> <span class="token punctuation">&#123;</span></pre></td></tr><tr><td data-num="2"></td><td><pre>    <span class="token property">content</span><span class="token punctuation">:</span> <span class="token string">""</span><span class="token punctuation">;</span></pre></td></tr><tr><td data-num="3"></td><td><pre>    <span class="token property">clear</span><span class="token punctuation">:</span> both<span class="token punctuation">;</span></pre></td></tr><tr><td data-num="4"></td><td><pre>    <span class="token property">display</span><span class="token punctuation">:</span> table<span class="token punctuation">;</span></pre></td></tr><tr><td data-num="5"></td><td><pre><span class="token punctuation">&#125;</span></pre></td></tr></table></figure><p><span class="exturl" data-url="aHR0cHM6Ly93d3cudzNzY2hvb2xzLmNvbS9jc3MvdHJ5aXQuYXNwP2ZpbGVuYW1lPXRyeXJlc3BvbnNpdmVfc3R5bGVz">Example</span></p><h2 id="media-query"><a class="anchor" href="#media-query">#</a> Media Query</h2><p><font> <code>@media</code> </font> 區塊定義某些條件下要套用的 CSS 樣式。</p><figure class="highlight css"><figcaption data-lang="CSS"><span>Example</span><span class="exturl" data-url="aHR0cHM6Ly93d3cudzNzY2hvb2xzLmNvbS9jc3MvdHJ5aXQuYXNwP2ZpbGVuYW1lPXRyeXJlc3BvbnNpdmVfbWVkaWFxdWVyeQ==">links</span></figcaption><table><tr><td data-num="1"></td><td><pre><span class="token atrule"><span class="token rule">@media</span> <span class="token keyword">only</span> screen <span class="token keyword">and</span> <span class="token punctuation">(</span><span class="token property">max-width</span><span class="token punctuation">:</span> 600px<span class="token punctuation">)</span></span> <span class="token punctuation">&#123;</span></pre></td></tr><tr><td data-num="2"></td><td><pre>    <span class="token selector">body</span> <span class="token punctuation">&#123;</span></pre></td></tr><tr><td data-num="3"></td><td><pre>        <span class="token property">background-color</span><span class="token punctuation">:</span> lightblue<span class="token punctuation">;</span></pre></td></tr><tr><td data-num="4"></td><td><pre>    <span class="token punctuation">&#125;</span></pre></td></tr><tr><td data-num="5"></td><td><pre><span class="token punctuation">&#125;</span></pre></td></tr></table></figure><h3 id="add-a-breakpoint"><a class="anchor" href="#add-a-breakpoint">#</a> Add a Breakpoint</h3><p>設置<strong>中斷點</strong>來區隔不同裝置上要套用的樣式。</p><figure class="highlight css"><figcaption data-lang="CSS"><span>Example</span><span class="exturl" data-url="aHR0cHM6Ly93d3cudzNzY2hvb2xzLmNvbS9jc3MvdHJ5aXQuYXNwP2ZpbGVuYW1lPXRyeXJlc3BvbnNpdmVfYnJlYWtwb2ludHM=">links</span></figcaption><table><tr><td data-num="1"></td><td><pre><span class="token comment">/* For desktop: */</span></pre></td></tr><tr><td data-num="2"></td><td><pre><span class="token selector">.col-1</span> <span class="token punctuation">&#123;</span><span class="token property">width</span><span class="token punctuation">:</span> 8.33%<span class="token punctuation">;</span><span class="token punctuation">&#125;</span></pre></td></tr><tr><td data-num="3"></td><td><pre><span class="token selector">.col-2</span> <span class="token punctuation">&#123;</span><span class="token property">width</span><span class="token punctuation">:</span> 16.66%<span class="token punctuation">;</span><span class="token punctuation">&#125;</span></pre></td></tr><tr><td data-num="4"></td><td><pre><span class="token selector">.col-3</span> <span class="token punctuation">&#123;</span><span class="token property">width</span><span class="token punctuation">:</span> 25%<span class="token punctuation">;</span><span class="token punctuation">&#125;</span></pre></td></tr><tr><td data-num="5"></td><td><pre><span class="token selector">.col-4</span> <span class="token punctuation">&#123;</span><span class="token property">width</span><span class="token punctuation">:</span> 33.33%<span class="token punctuation">;</span><span class="token punctuation">&#125;</span></pre></td></tr><tr><td data-num="6"></td><td><pre><span class="token selector">.col-5</span> <span class="token punctuation">&#123;</span><span class="token property">width</span><span class="token punctuation">:</span> 41.66%<span class="token punctuation">;</span><span class="token punctuation">&#125;</span></pre></td></tr><tr><td data-num="7"></td><td><pre><span class="token selector">.col-6</span> <span class="token punctuation">&#123;</span><span class="token property">width</span><span class="token punctuation">:</span> 50%<span class="token punctuation">;</span><span class="token punctuation">&#125;</span></pre></td></tr><tr><td data-num="8"></td><td><pre><span class="token selector">.col-7</span> <span class="token punctuation">&#123;</span><span class="token property">width</span><span class="token punctuation">:</span> 58.33%<span class="token punctuation">;</span><span class="token punctuation">&#125;</span></pre></td></tr><tr><td data-num="9"></td><td><pre><span class="token selector">.col-8</span> <span class="token punctuation">&#123;</span><span class="token property">width</span><span class="token punctuation">:</span> 66.66%<span class="token punctuation">;</span><span class="token punctuation">&#125;</span></pre></td></tr><tr><td data-num="10"></td><td><pre><span class="token selector">.col-9</span> <span class="token punctuation">&#123;</span><span class="token property">width</span><span class="token punctuation">:</span> 75%<span class="token punctuation">;</span><span class="token punctuation">&#125;</span></pre></td></tr><tr><td data-num="11"></td><td><pre><span class="token selector">.col-10</span> <span class="token punctuation">&#123;</span><span class="token property">width</span><span class="token punctuation">:</span> 83.33%<span class="token punctuation">;</span><span class="token punctuation">&#125;</span></pre></td></tr><tr><td data-num="12"></td><td><pre><span class="token selector">.col-11</span> <span class="token punctuation">&#123;</span><span class="token property">width</span><span class="token punctuation">:</span> 91.66%<span class="token punctuation">;</span><span class="token punctuation">&#125;</span></pre></td></tr><tr><td data-num="13"></td><td><pre><span class="token selector">.col-12</span> <span class="token punctuation">&#123;</span><span class="token property">width</span><span class="token punctuation">:</span> 100%<span class="token punctuation">;</span><span class="token punctuation">&#125;</span></pre></td></tr><tr><td data-num="14"></td><td><pre></pre></td></tr><tr><td data-num="15"></td><td><pre><span class="token atrule"><span class="token rule">@media</span> <span class="token keyword">only</span> screen <span class="token keyword">and</span> <span class="token punctuation">(</span><span class="token property">max-width</span><span class="token punctuation">:</span> 768px<span class="token punctuation">)</span></span> <span class="token punctuation">&#123;</span></pre></td></tr><tr><td data-num="16"></td><td><pre>  <span class="token comment">/* For mobile phones: */</span></pre></td></tr><tr><td data-num="17"></td><td><pre>  <span class="token selector">[class*="col-"]</span> <span class="token punctuation">&#123;</span></pre></td></tr><tr><td data-num="18"></td><td><pre>    <span class="token property">width</span><span class="token punctuation">:</span> 100%<span class="token punctuation">;</span></pre></td></tr><tr><td data-num="19"></td><td><pre>  <span class="token punctuation">&#125;</span></pre></td></tr><tr><td data-num="20"></td><td><pre><span class="token punctuation">&#125;</span></pre></td></tr></table></figure><p>我們也可以設置多個中斷點來適應更多不同的裝置。</p><figure class="highlight css"><figcaption data-lang="CSS"><span>Example</span><span class="exturl" data-url="aHR0cHM6Ly93d3cudzNzY2hvb2xzLmNvbS9jc3MvdHJ5aXQuYXNwP2ZpbGVuYW1lPXRyeXJlc3BvbnNpdmVfY29sLXM=">links</span></figcaption><table><tr><td data-num="1"></td><td><pre><span class="token comment">/* For mobile phones: */</span></pre></td></tr><tr><td data-num="2"></td><td><pre><span class="token selector">[class*="col-"]</span> <span class="token punctuation">&#123;</span></pre></td></tr><tr><td data-num="3"></td><td><pre>  <span class="token property">width</span><span class="token punctuation">:</span> 100%<span class="token punctuation">;</span></pre></td></tr><tr><td data-num="4"></td><td><pre><span class="token punctuation">&#125;</span></pre></td></tr><tr><td data-num="5"></td><td><pre></pre></td></tr><tr><td data-num="6"></td><td><pre><span class="token atrule"><span class="token rule">@media</span> <span class="token keyword">only</span> screen <span class="token keyword">and</span> <span class="token punctuation">(</span><span class="token property">min-width</span><span class="token punctuation">:</span> 600px<span class="token punctuation">)</span></span> <span class="token punctuation">&#123;</span></pre></td></tr><tr><td data-num="7"></td><td><pre>  <span class="token comment">/* For tablets: */</span></pre></td></tr><tr><td data-num="8"></td><td><pre>  <span class="token selector">.col-s-1</span> <span class="token punctuation">&#123;</span><span class="token property">width</span><span class="token punctuation">:</span> 8.33%<span class="token punctuation">;</span><span class="token punctuation">&#125;</span></pre></td></tr><tr><td data-num="9"></td><td><pre>  <span class="token selector">.col-s-2</span> <span class="token punctuation">&#123;</span><span class="token property">width</span><span class="token punctuation">:</span> 16.66%<span class="token punctuation">;</span><span class="token punctuation">&#125;</span></pre></td></tr><tr><td data-num="10"></td><td><pre>  <span class="token selector">.col-s-3</span> <span class="token punctuation">&#123;</span><span class="token property">width</span><span class="token punctuation">:</span> 25%<span class="token punctuation">;</span><span class="token punctuation">&#125;</span></pre></td></tr><tr><td data-num="11"></td><td><pre>  <span class="token selector">.col-s-4</span> <span class="token punctuation">&#123;</span><span class="token property">width</span><span class="token punctuation">:</span> 33.33%<span class="token punctuation">;</span><span class="token punctuation">&#125;</span></pre></td></tr><tr><td data-num="12"></td><td><pre>  <span class="token selector">.col-s-5</span> <span class="token punctuation">&#123;</span><span class="token property">width</span><span class="token punctuation">:</span> 41.66%<span class="token punctuation">;</span><span class="token punctuation">&#125;</span></pre></td></tr><tr><td data-num="13"></td><td><pre>  <span class="token selector">.col-s-6</span> <span class="token punctuation">&#123;</span><span class="token property">width</span><span class="token punctuation">:</span> 50%<span class="token punctuation">;</span><span class="token punctuation">&#125;</span></pre></td></tr><tr><td data-num="14"></td><td><pre>  <span class="token selector">.col-s-7</span> <span class="token punctuation">&#123;</span><span class="token property">width</span><span class="token punctuation">:</span> 58.33%<span class="token punctuation">;</span><span class="token punctuation">&#125;</span></pre></td></tr><tr><td data-num="15"></td><td><pre>  <span class="token selector">.col-s-8</span> <span class="token punctuation">&#123;</span><span class="token property">width</span><span class="token punctuation">:</span> 66.66%<span class="token punctuation">;</span><span class="token punctuation">&#125;</span></pre></td></tr><tr><td data-num="16"></td><td><pre>  <span class="token selector">.col-s-9</span> <span class="token punctuation">&#123;</span><span class="token property">width</span><span class="token punctuation">:</span> 75%<span class="token punctuation">;</span><span class="token punctuation">&#125;</span></pre></td></tr><tr><td data-num="17"></td><td><pre>  <span class="token selector">.col-s-10</span> <span class="token punctuation">&#123;</span><span class="token property">width</span><span class="token punctuation">:</span> 83.33%<span class="token punctuation">;</span><span class="token punctuation">&#125;</span></pre></td></tr><tr><td data-num="18"></td><td><pre>  <span class="token selector">.col-s-11</span> <span class="token punctuation">&#123;</span><span class="token property">width</span><span class="token punctuation">:</span> 91.66%<span class="token punctuation">;</span><span class="token punctuation">&#125;</span></pre></td></tr><tr><td data-num="19"></td><td><pre>  <span class="token selector">.col-s-12</span> <span class="token punctuation">&#123;</span><span class="token property">width</span><span class="token punctuation">:</span> 100%<span class="token punctuation">;</span><span class="token punctuation">&#125;</span></pre></td></tr><tr><td data-num="20"></td><td><pre><span class="token punctuation">&#125;</span></pre></td></tr><tr><td data-num="21"></td><td><pre></pre></td></tr><tr><td data-num="22"></td><td><pre><span class="token atrule"><span class="token rule">@media</span> <span class="token keyword">only</span> screen <span class="token keyword">and</span> <span class="token punctuation">(</span><span class="token property">min-width</span><span class="token punctuation">:</span> 768px<span class="token punctuation">)</span></span> <span class="token punctuation">&#123;</span></pre></td></tr><tr><td data-num="23"></td><td><pre>  <span class="token comment">/* For desktop: */</span></pre></td></tr><tr><td data-num="24"></td><td><pre>  <span class="token selector">.col-1</span> <span class="token punctuation">&#123;</span><span class="token property">width</span><span class="token punctuation">:</span> 8.33%<span class="token punctuation">;</span><span class="token punctuation">&#125;</span></pre></td></tr><tr><td data-num="25"></td><td><pre>  <span class="token selector">.col-2</span> <span class="token punctuation">&#123;</span><span class="token property">width</span><span class="token punctuation">:</span> 16.66%<span class="token punctuation">;</span><span class="token punctuation">&#125;</span></pre></td></tr><tr><td data-num="26"></td><td><pre>  <span class="token selector">.col-3</span> <span class="token punctuation">&#123;</span><span class="token property">width</span><span class="token punctuation">:</span> 25%<span class="token punctuation">;</span><span class="token punctuation">&#125;</span></pre></td></tr><tr><td data-num="27"></td><td><pre>  <span class="token selector">.col-4</span> <span class="token punctuation">&#123;</span><span class="token property">width</span><span class="token punctuation">:</span> 33.33%<span class="token punctuation">;</span><span class="token punctuation">&#125;</span></pre></td></tr><tr><td data-num="28"></td><td><pre>  <span class="token selector">.col-5</span> <span class="token punctuation">&#123;</span><span class="token property">width</span><span class="token punctuation">:</span> 41.66%<span class="token punctuation">;</span><span class="token punctuation">&#125;</span></pre></td></tr><tr><td data-num="29"></td><td><pre>  <span class="token selector">.col-6</span> <span class="token punctuation">&#123;</span><span class="token property">width</span><span class="token punctuation">:</span> 50%<span class="token punctuation">;</span><span class="token punctuation">&#125;</span></pre></td></tr><tr><td data-num="30"></td><td><pre>  <span class="token selector">.col-7</span> <span class="token punctuation">&#123;</span><span class="token property">width</span><span class="token punctuation">:</span> 58.33%<span class="token punctuation">;</span><span class="token punctuation">&#125;</span></pre></td></tr><tr><td data-num="31"></td><td><pre>  <span class="token selector">.col-8</span> <span class="token punctuation">&#123;</span><span class="token property">width</span><span class="token punctuation">:</span> 66.66%<span class="token punctuation">;</span><span class="token punctuation">&#125;</span></pre></td></tr><tr><td data-num="32"></td><td><pre>  <span class="token selector">.col-9</span> <span class="token punctuation">&#123;</span><span class="token property">width</span><span class="token punctuation">:</span> 75%<span class="token punctuation">;</span><span class="token punctuation">&#125;</span></pre></td></tr><tr><td data-num="33"></td><td><pre>  <span class="token selector">.col-10</span> <span class="token punctuation">&#123;</span><span class="token property">width</span><span class="token punctuation">:</span> 83.33%<span class="token punctuation">;</span><span class="token punctuation">&#125;</span></pre></td></tr><tr><td data-num="34"></td><td><pre>  <span class="token selector">.col-11</span> <span class="token punctuation">&#123;</span><span class="token property">width</span><span class="token punctuation">:</span> 91.66%<span class="token punctuation">;</span><span class="token punctuation">&#125;</span></pre></td></tr><tr><td data-num="35"></td><td><pre>  <span class="token selector">.col-12</span> <span class="token punctuation">&#123;</span><span class="token property">width</span><span class="token punctuation">:</span> 100%<span class="token punctuation">;</span><span class="token punctuation">&#125;</span></pre></td></tr><tr><td data-num="36"></td><td><pre><span class="token punctuation">&#125;</span></pre></td></tr></table></figure><h3 id="typical-device-breakpoints"><a class="anchor" href="#typical-device-breakpoints">#</a> Typical Device Breakpoints</h3><p>市面上大大小小的裝置太多了，很難準確定義出精準的中斷點，這裡有五個比較簡單區分的中斷點。</p><figure class="highlight css"><figcaption data-lang="CSS"><span>Example</span><span class="exturl" data-url="aHR0cHM6Ly93d3cudzNzY2hvb2xzLmNvbS9jc3MvdHJ5aXQuYXNwP2ZpbGVuYW1lPXRyeXJlc3BvbnNpdmVfbWVkaWFxdWVyeV9icmVha3BvaW50cw==">links</span></figcaption><table><tr><td data-num="1"></td><td><pre><span class="token comment">/* Extra small devices (phones, 600px and down) */</span></pre></td></tr><tr><td data-num="2"></td><td><pre><span class="token atrule"><span class="token rule">@media</span> <span class="token keyword">only</span> screen <span class="token keyword">and</span> <span class="token punctuation">(</span><span class="token property">max-width</span><span class="token punctuation">:</span> 600px<span class="token punctuation">)</span></span> <span class="token punctuation">&#123;</span>...<span class="token punctuation">&#125;</span></pre></td></tr><tr><td data-num="3"></td><td><pre></pre></td></tr><tr><td data-num="4"></td><td><pre><span class="token comment">/* Small devices (portrait tablets and large phones, 600px and up) */</span></pre></td></tr><tr><td data-num="5"></td><td><pre><span class="token atrule"><span class="token rule">@media</span> <span class="token keyword">only</span> screen <span class="token keyword">and</span> <span class="token punctuation">(</span><span class="token property">min-width</span><span class="token punctuation">:</span> 600px<span class="token punctuation">)</span></span> <span class="token punctuation">&#123;</span>...<span class="token punctuation">&#125;</span></pre></td></tr><tr><td data-num="6"></td><td><pre></pre></td></tr><tr><td data-num="7"></td><td><pre><span class="token comment">/* Medium devices (landscape tablets, 768px and up) */</span></pre></td></tr><tr><td data-num="8"></td><td><pre><span class="token atrule"><span class="token rule">@media</span> <span class="token keyword">only</span> screen <span class="token keyword">and</span> <span class="token punctuation">(</span><span class="token property">min-width</span><span class="token punctuation">:</span> 768px<span class="token punctuation">)</span></span> <span class="token punctuation">&#123;</span>...<span class="token punctuation">&#125;</span></pre></td></tr><tr><td data-num="9"></td><td><pre></pre></td></tr><tr><td data-num="10"></td><td><pre><span class="token comment">/* Large devices (laptops/desktops, 992px and up) */</span></pre></td></tr><tr><td data-num="11"></td><td><pre><span class="token atrule"><span class="token rule">@media</span> <span class="token keyword">only</span> screen <span class="token keyword">and</span> <span class="token punctuation">(</span><span class="token property">min-width</span><span class="token punctuation">:</span> 992px<span class="token punctuation">)</span></span> <span class="token punctuation">&#123;</span>...<span class="token punctuation">&#125;</span></pre></td></tr><tr><td data-num="12"></td><td><pre></pre></td></tr><tr><td data-num="13"></td><td><pre><span class="token comment">/* Extra large devices (large laptops and desktops, 1200px and up) */</span></pre></td></tr><tr><td data-num="14"></td><td><pre><span class="token atrule"><span class="token rule">@media</span> <span class="token keyword">only</span> screen <span class="token keyword">and</span> <span class="token punctuation">(</span><span class="token property">min-width</span><span class="token punctuation">:</span> 1200px<span class="token punctuation">)</span></span> <span class="token punctuation">&#123;</span>...<span class="token punctuation">&#125;</span></pre></td></tr></table></figure><h3 id="orientation-portrait-landscape"><a class="anchor" href="#orientation-portrait-landscape">#</a> Orientation: Portrait / Landscape</h3><div class="note info"><ul><li><font> <code>portrait</code> </font> : 當螢幕的<strong>寬度小於高度</strong>的時候套用。</li><li><font> <code>landscape</code> </font> : 當螢幕的<strong>寬度大於高度</strong>的時候套用。</li></ul></div><figure class="highlight css"><figcaption data-lang="CSS"><span>Example</span><span class="exturl" data-url="aHR0cHM6Ly93d3cudzNzY2hvb2xzLmNvbS9jc3MvdHJ5aXQuYXNwP2ZpbGVuYW1lPXRyeXJlc3BvbnNpdmVfbWVkaWFxdWVyeV9vcmllbnRhdGlvbjI=">links</span></figcaption><table><tr><td data-num="1"></td><td><pre><span class="token atrule"><span class="token rule">@media</span> <span class="token keyword">only</span> screen <span class="token keyword">and</span> <span class="token punctuation">(</span><span class="token property">orientation</span><span class="token punctuation">:</span> landscape<span class="token punctuation">)</span></span> <span class="token punctuation">&#123;</span></pre></td></tr><tr><td data-num="2"></td><td><pre>  <span class="token selector">body</span> <span class="token punctuation">&#123;</span></pre></td></tr><tr><td data-num="3"></td><td><pre>    <span class="token property">background-color</span><span class="token punctuation">:</span> lightblue<span class="token punctuation">;</span></pre></td></tr><tr><td data-num="4"></td><td><pre>  <span class="token punctuation">&#125;</span></pre></td></tr><tr><td data-num="5"></td><td><pre><span class="token punctuation">&#125;</span></pre></td></tr></table></figure><h3 id="hide-elements"><a class="anchor" href="#hide-elements">#</a> Hide Elements</h3><ul><li>另一個常用的方法就是在不同螢幕大小下，<strong>顯示 / 隱藏</strong>元素。</li><li>利用 <font> <code>display</code> </font>。</li></ul><figure class="highlight css"><figcaption data-lang="CSS"><span>Example</span><span class="exturl" data-url="aHR0cHM6Ly93d3cudzNzY2hvb2xzLmNvbS9jc3MvdHJ5aXQuYXNwP2ZpbGVuYW1lPXRyeWNzc19tZWRpYXF1ZXJpZXNfaGlkZTI=">links</span></figcaption><table><tr><td data-num="1"></td><td><pre><span class="token comment">/* If the screen size is 600px wide or less, hide the element */</span></pre></td></tr><tr><td data-num="2"></td><td><pre><span class="token atrule"><span class="token rule">@media</span> <span class="token keyword">only</span> screen <span class="token keyword">and</span> <span class="token punctuation">(</span><span class="token property">max-width</span><span class="token punctuation">:</span> 600px<span class="token punctuation">)</span></span> <span class="token punctuation">&#123;</span></pre></td></tr><tr><td data-num="3"></td><td><pre>  <span class="token selector">div.example</span> <span class="token punctuation">&#123;</span></pre></td></tr><tr><td data-num="4"></td><td><pre>    <span class="token property">display</span><span class="token punctuation">:</span> none<span class="token punctuation">;</span></pre></td></tr><tr><td data-num="5"></td><td><pre>  <span class="token punctuation">&#125;</span></pre></td></tr><tr><td data-num="6"></td><td><pre><span class="token punctuation">&#125;</span></pre></td></tr></table></figure><h3 id="change-font-size"><a class="anchor" href="#change-font-size">#</a> Change Font Size</h3><p>當然，調整字體大小也是一定要的。</p><figure class="highlight css"><figcaption data-lang="CSS"><span>Example</span><span class="exturl" data-url="aHR0cHM6Ly93d3cudzNzY2hvb2xzLmNvbS9jc3MvdHJ5aXQuYXNwP2ZpbGVuYW1lPXRyeWNzc19tZWRpYXF1ZXJpZXNfZm9udHNpemUy">links</span></figcaption><table><tr><td data-num="1"></td><td><pre><span class="token comment">/* If the screen size is 601px or more, set the font-size of &lt;div> to 80px */</span></pre></td></tr><tr><td data-num="2"></td><td><pre><span class="token atrule"><span class="token rule">@media</span> <span class="token keyword">only</span> screen <span class="token keyword">and</span> <span class="token punctuation">(</span><span class="token property">min-width</span><span class="token punctuation">:</span> 601px<span class="token punctuation">)</span></span> <span class="token punctuation">&#123;</span></pre></td></tr><tr><td data-num="3"></td><td><pre>  <span class="token selector">div.example</span> <span class="token punctuation">&#123;</span></pre></td></tr><tr><td data-num="4"></td><td><pre>    <span class="token property">font-size</span><span class="token punctuation">:</span> 80px<span class="token punctuation">;</span></pre></td></tr><tr><td data-num="5"></td><td><pre>  <span class="token punctuation">&#125;</span></pre></td></tr><tr><td data-num="6"></td><td><pre><span class="token punctuation">&#125;</span></pre></td></tr><tr><td data-num="7"></td><td><pre></pre></td></tr><tr><td data-num="8"></td><td><pre><span class="token comment">/* If the screen size is 600px or less, set the font-size of &lt;div> to 30px */</span></pre></td></tr><tr><td data-num="9"></td><td><pre><span class="token atrule"><span class="token rule">@media</span> <span class="token keyword">only</span> screen <span class="token keyword">and</span> <span class="token punctuation">(</span><span class="token property">max-width</span><span class="token punctuation">:</span> 600px<span class="token punctuation">)</span></span> <span class="token punctuation">&#123;</span></pre></td></tr><tr><td data-num="10"></td><td><pre>  <span class="token selector">div.example</span> <span class="token punctuation">&#123;</span></pre></td></tr><tr><td data-num="11"></td><td><pre>    <span class="token property">font-size</span><span class="token punctuation">:</span> 30px<span class="token punctuation">;</span></pre></td></tr><tr><td data-num="12"></td><td><pre>  <span class="token punctuation">&#125;</span></pre></td></tr><tr><td data-num="13"></td><td><pre><span class="token punctuation">&#125;</span></pre></td></tr></table></figure>]]></content>
      
      
      <categories>
          
          <category> Web </category>
          
          <category> CSS </category>
          
      </categories>
      
      
        <tags>
            
            <tag> Web </tag>
            
            <tag> CSS </tag>
            
            <tag> RWD </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>uva 1587 - Box</title>
      <link href="/2023/04/18/Coding/uva/Star1/uva%201587/"/>
      <url>/2023/04/18/Coding/uva/Star1/uva%201587/</url>
      
        <content type="html"><![CDATA[<p>⭐️</p><p><strong>Time limit: 3.000 seconds</strong></p><h2 id="題目連結"><a class="anchor" href="#題目連結">#</a> 題目連結</h2><ul><li><span class="exturl" data-url="aHR0cHM6Ly96ZXJvanVkZ2UudHcvU2hvd1Byb2JsZW0/cHJvYmxlbWlkPWU1MzQ=">ZeroJudge</span></li><li><span class="exturl" data-url="aHR0cHM6Ly9vbmxpbmVqdWRnZS5vcmcvZXh0ZXJuYWwvMTUvcDE1ODcucGRm">題目連結</span></li><li><span class="exturl" data-url="aHR0cHM6Ly9vbmxpbmVqdWRnZS5vcmcvaW5kZXgucGhwP29wdGlvbj1jb21fb25saW5lanVkZ2UmYW1wO0l0ZW1pZD04JmFtcDtjYXRlZ29yeT00NDgmYW1wO3BhZ2U9c2hvd19wcm9ibGVtJmFtcDtwcm9ibGVtPTQ0NjI=">Online Judge</span></li><li><span class="exturl" data-url="aHR0cHM6Ly93d3cudWRlYnVnLmNvbS9VVmEvMTU4Nw==">uDebug</span></li></ul><h2 id="解題技巧"><a class="anchor" href="#解題技巧">#</a> 解題技巧</h2><h2 id="solution"><a class="anchor" href="#solution">#</a> Solution</h2><p><span class="exturl" data-url="aHR0cHM6Ly9kb2NzLmdvb2dsZS5jb20vc3ByZWFkc2hlZXRzL2QvMWo3NEdFQ2ZuTTBMM042TEpwNEY0Q2FfLXljY3hFNlJpaWp0YmZDLWRNamcvZWRpdD91c3A9c2hhcmluZw==">解題 / 紀錄</span></p><figure class="highlight cpp"><figcaption data-lang="C++"></figcaption><table><tr><td data-num="1"></td><td><pre><span class="token macro property"><span class="token directive-hash">#</span><span class="token directive keyword">include</span> <span class="token string">&lt;bits/stdc++.h></span></span></pre></td></tr><tr><td data-num="2"></td><td><pre><span class="token keyword">using</span> <span class="token keyword">namespace</span> std<span class="token punctuation">;</span></pre></td></tr><tr><td data-num="3"></td><td><pre></pre></td></tr><tr><td data-num="4"></td><td><pre><span class="token keyword">struct</span> <span class="token class-name">Box</span> <span class="token punctuation">&#123;</span></pre></td></tr><tr><td data-num="5"></td><td><pre>    <span class="token keyword">int</span> wid<span class="token punctuation">,</span> hgt<span class="token punctuation">;</span></pre></td></tr><tr><td data-num="6"></td><td><pre><span class="token punctuation">&#125;</span> box<span class="token punctuation">[</span><span class="token number">6</span><span class="token punctuation">]</span><span class="token punctuation">;</span></pre></td></tr><tr><td data-num="7"></td><td><pre></pre></td></tr><tr><td data-num="8"></td><td><pre><span class="token keyword">bool</span> <span class="token function">cmp</span><span class="token punctuation">(</span>Box a<span class="token punctuation">,</span> Box b<span class="token punctuation">)</span> <span class="token punctuation">&#123;</span></pre></td></tr><tr><td data-num="9"></td><td><pre>    <span class="token keyword">if</span> <span class="token punctuation">(</span>a<span class="token punctuation">.</span>wid <span class="token operator">!=</span> b<span class="token punctuation">.</span>wid<span class="token punctuation">)</span> <span class="token keyword">return</span> a<span class="token punctuation">.</span>wid <span class="token operator">&lt;</span> b<span class="token punctuation">.</span>wid<span class="token punctuation">;</span></pre></td></tr><tr><td data-num="10"></td><td><pre>    <span class="token keyword">return</span> a<span class="token punctuation">.</span>hgt <span class="token operator">&lt;</span> b<span class="token punctuation">.</span>hgt<span class="token punctuation">;</span></pre></td></tr><tr><td data-num="11"></td><td><pre><span class="token punctuation">&#125;</span></pre></td></tr><tr><td data-num="12"></td><td><pre></pre></td></tr><tr><td data-num="13"></td><td><pre><span class="token keyword">int</span> <span class="token function">main</span> <span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span></pre></td></tr><tr><td data-num="14"></td><td><pre>    <span class="token keyword">int</span> w<span class="token punctuation">,</span> h<span class="token punctuation">;</span></pre></td></tr><tr><td data-num="15"></td><td><pre>    <span class="token keyword">while</span> <span class="token punctuation">(</span>cin <span class="token operator">>></span> w <span class="token operator">>></span> h<span class="token punctuation">)</span> <span class="token punctuation">&#123;</span></pre></td></tr><tr><td data-num="16"></td><td><pre>        box<span class="token punctuation">[</span><span class="token number">0</span><span class="token punctuation">]</span><span class="token punctuation">.</span>wid <span class="token operator">=</span> <span class="token function">min</span><span class="token punctuation">(</span>w<span class="token punctuation">,</span> h<span class="token punctuation">)</span><span class="token punctuation">,</span> box<span class="token punctuation">[</span><span class="token number">0</span><span class="token punctuation">]</span><span class="token punctuation">.</span>hgt <span class="token operator">=</span> <span class="token function">max</span><span class="token punctuation">(</span>w<span class="token punctuation">,</span> h<span class="token punctuation">)</span><span class="token punctuation">;</span></pre></td></tr><tr><td data-num="17"></td><td><pre>        <span class="token keyword">for</span> <span class="token punctuation">(</span><span class="token keyword">int</span> i<span class="token operator">=</span><span class="token number">1</span><span class="token punctuation">;</span> i<span class="token operator">&lt;</span><span class="token number">6</span><span class="token punctuation">;</span> i<span class="token operator">++</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span></pre></td></tr><tr><td data-num="18"></td><td><pre>            cin <span class="token operator">>></span> w <span class="token operator">>></span> h<span class="token punctuation">;</span></pre></td></tr><tr><td data-num="19"></td><td><pre>            box<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">.</span>wid <span class="token operator">=</span> <span class="token function">min</span><span class="token punctuation">(</span>w<span class="token punctuation">,</span> h<span class="token punctuation">)</span><span class="token punctuation">,</span> box<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">.</span>hgt <span class="token operator">=</span> <span class="token function">max</span><span class="token punctuation">(</span>w<span class="token punctuation">,</span> h<span class="token punctuation">)</span><span class="token punctuation">;</span></pre></td></tr><tr><td data-num="20"></td><td><pre>        <span class="token punctuation">&#125;</span></pre></td></tr><tr><td data-num="21"></td><td><pre>        <span class="token function">sort</span><span class="token punctuation">(</span>box<span class="token punctuation">,</span> box <span class="token operator">+</span> <span class="token number">6</span><span class="token punctuation">,</span> cmp<span class="token punctuation">)</span><span class="token punctuation">;</span></pre></td></tr><tr><td data-num="22"></td><td><pre>        <span class="token keyword">if</span> <span class="token punctuation">(</span>box<span class="token punctuation">[</span><span class="token number">0</span><span class="token punctuation">]</span><span class="token punctuation">.</span>wid <span class="token operator">==</span> box<span class="token punctuation">[</span><span class="token number">1</span><span class="token punctuation">]</span><span class="token punctuation">.</span>wid <span class="token operator">&amp;&amp;</span> box<span class="token punctuation">[</span><span class="token number">1</span><span class="token punctuation">]</span><span class="token punctuation">.</span>wid <span class="token operator">==</span> box<span class="token punctuation">[</span><span class="token number">2</span><span class="token punctuation">]</span><span class="token punctuation">.</span>wid <span class="token operator">&amp;&amp;</span> box<span class="token punctuation">[</span><span class="token number">2</span><span class="token punctuation">]</span><span class="token punctuation">.</span>wid <span class="token operator">==</span> box<span class="token punctuation">[</span><span class="token number">3</span><span class="token punctuation">]</span><span class="token punctuation">.</span>wid <span class="token operator">&amp;&amp;</span></pre></td></tr><tr><td data-num="23"></td><td><pre>            box<span class="token punctuation">[</span><span class="token number">2</span><span class="token punctuation">]</span><span class="token punctuation">.</span>hgt <span class="token operator">==</span> box<span class="token punctuation">[</span><span class="token number">3</span><span class="token punctuation">]</span><span class="token punctuation">.</span>hgt <span class="token operator">&amp;&amp;</span> box<span class="token punctuation">[</span><span class="token number">3</span><span class="token punctuation">]</span><span class="token punctuation">.</span>hgt <span class="token operator">==</span> box<span class="token punctuation">[</span><span class="token number">4</span><span class="token punctuation">]</span><span class="token punctuation">.</span>hgt <span class="token operator">&amp;&amp;</span> box<span class="token punctuation">[</span><span class="token number">4</span><span class="token punctuation">]</span><span class="token punctuation">.</span>hgt <span class="token operator">==</span> box<span class="token punctuation">[</span><span class="token number">5</span><span class="token punctuation">]</span><span class="token punctuation">.</span>hgt <span class="token operator">&amp;&amp;</span></pre></td></tr><tr><td data-num="24"></td><td><pre>            box<span class="token punctuation">[</span><span class="token number">0</span><span class="token punctuation">]</span><span class="token punctuation">.</span>hgt <span class="token operator">==</span> box<span class="token punctuation">[</span><span class="token number">1</span><span class="token punctuation">]</span><span class="token punctuation">.</span>hgt <span class="token operator">&amp;&amp;</span> box<span class="token punctuation">[</span><span class="token number">1</span><span class="token punctuation">]</span><span class="token punctuation">.</span>hgt <span class="token operator">==</span> box<span class="token punctuation">[</span><span class="token number">4</span><span class="token punctuation">]</span><span class="token punctuation">.</span>wid <span class="token operator">&amp;&amp;</span> box<span class="token punctuation">[</span><span class="token number">4</span><span class="token punctuation">]</span><span class="token punctuation">.</span>wid <span class="token operator">==</span> box<span class="token punctuation">[</span><span class="token number">5</span><span class="token punctuation">]</span><span class="token punctuation">.</span>wid<span class="token punctuation">)</span> <span class="token punctuation">&#123;</span></pre></td></tr><tr><td data-num="25"></td><td><pre>            cout <span class="token operator">&lt;&lt;</span> <span class="token string">"POSSIBLE\n"</span><span class="token punctuation">;</span></pre></td></tr><tr><td data-num="26"></td><td><pre>        <span class="token punctuation">&#125;</span> <span class="token keyword">else</span> <span class="token punctuation">&#123;</span></pre></td></tr><tr><td data-num="27"></td><td><pre>            cout <span class="token operator">&lt;&lt;</span> <span class="token string">"IMPOSSIBLE\n"</span><span class="token punctuation">;</span></pre></td></tr><tr><td data-num="28"></td><td><pre>        <span class="token punctuation">&#125;</span></pre></td></tr><tr><td data-num="29"></td><td><pre>    <span class="token punctuation">&#125;</span></pre></td></tr><tr><td data-num="30"></td><td><pre><span class="token punctuation">&#125;</span></pre></td></tr></table></figure>]]></content>
      
      
      <categories>
          
          <category> Coding </category>
          
          <category> UVA </category>
          
          <category> Star1 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> Star1 </tag>
            
            <tag> CPE </tag>
            
            <tag> UVA </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>1768. Merge Strings Alternately</title>
      <link href="/2023/04/18/Coding/leetcode/Easy/1768%20Merge%20Strings%20Alternately/"/>
      <url>/2023/04/18/Coding/leetcode/Easy/1768%20Merge%20Strings%20Alternately/</url>
      
        <content type="html"><![CDATA[<p>⭐️</p><h2 id="題目敘述"><a class="anchor" href="#題目敘述">#</a> <span class="exturl" data-url="aHR0cHM6Ly9sZWV0Y29kZS5jb20vcHJvYmxlbXMvbWVyZ2Utc3RyaW5ncy1hbHRlcm5hdGVseS8=">題目敘述</span></h2><p>You are given two strings  <code>word1</code>  and  <code>word2</code> . Merge the strings by adding letters in alternating order, starting with  <code>word1</code> . If a string is longer than the other, append the additional letters onto the end of the merged string.</p><p>Return <em>the merged string</em>.</p><h3 id="example-1"><a class="anchor" href="#example-1">#</a> Example 1</h3><blockquote><p><strong>Input</strong>: word1 = “abc”, word2 = “pqr”<br><strong>Output</strong>: “apbqcr”<br><strong>Explanation</strong>: The merged string will be merged as so:<br>word1:  a   b   c<br>word2:    p   q   r<br>merged: a p b q c r</p></blockquote><h3 id="example-2"><a class="anchor" href="#example-2">#</a> Example 2</h3><blockquote><p><strong>Input</strong>: word1 = “ab”, word2 = “pqrs”<br><strong>Output</strong>: “apbqrs”<br><strong>Explanation</strong>: Notice that as word2 is longer, “rs” is appended to the end.<br>word1:  a   b<br>word2:    p   q   r   s<br>merged: a p b q   r   s</p></blockquote><h3 id="example-3"><a class="anchor" href="#example-3">#</a> Example 3</h3><blockquote><p><strong>Input</strong>: word1 = “abcd”, word2 = “pq”<br><strong>Output</strong>: “apbqcd”<br><strong>Explanation</strong>: Notice that as word1 is longer, “cd” is appended to the end.<br>word1:  a   b   c   d<br>word2:    p   q<br>merged: a p b q c   d</p></blockquote><h2 id="程式碼"><a class="anchor" href="#程式碼">#</a> 程式碼</h2><div class="tab" data-id="code" data-title="cpp"><figure class="highlight cpp"><figcaption data-lang="C++"></figcaption><table><tr><td data-num="1"></td><td><pre><span class="token keyword">class</span> <span class="token class-name">Solution</span> <span class="token punctuation">&#123;</span></pre></td></tr><tr><td data-num="2"></td><td><pre><span class="token keyword">public</span><span class="token operator">:</span></pre></td></tr><tr><td data-num="3"></td><td><pre>    string <span class="token function">mergeAlternately</span><span class="token punctuation">(</span>string word1<span class="token punctuation">,</span> string word2<span class="token punctuation">)</span> <span class="token punctuation">&#123;</span></pre></td></tr><tr><td data-num="4"></td><td><pre>       string res <span class="token operator">=</span> <span class="token string">""</span><span class="token punctuation">;</span></pre></td></tr><tr><td data-num="5"></td><td><pre>       <span class="token keyword">int</span> m <span class="token operator">=</span> word1<span class="token punctuation">.</span><span class="token function">size</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">,</span> n <span class="token operator">=</span> word2<span class="token punctuation">.</span><span class="token function">size</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span> </pre></td></tr><tr><td data-num="6"></td><td><pre>       <span class="token keyword">int</span> i <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">,</span> j <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span></pre></td></tr><tr><td data-num="7"></td><td><pre>       <span class="token keyword">while</span> <span class="token punctuation">(</span>i <span class="token operator">&lt;</span> m <span class="token operator">&amp;&amp;</span> j <span class="token operator">&lt;</span> n<span class="token punctuation">)</span> <span class="token punctuation">&#123;</span></pre></td></tr><tr><td data-num="8"></td><td><pre>           res <span class="token operator">+=</span> word1<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">;</span></pre></td></tr><tr><td data-num="9"></td><td><pre>           i<span class="token operator">++</span><span class="token punctuation">;</span></pre></td></tr><tr><td data-num="10"></td><td><pre>           res <span class="token operator">+=</span> word2<span class="token punctuation">[</span>j<span class="token punctuation">]</span><span class="token punctuation">;</span></pre></td></tr><tr><td data-num="11"></td><td><pre>           j<span class="token operator">++</span><span class="token punctuation">;</span></pre></td></tr><tr><td data-num="12"></td><td><pre>       <span class="token punctuation">&#125;</span></pre></td></tr><tr><td data-num="13"></td><td><pre>       <span class="token keyword">if</span> <span class="token punctuation">(</span>i <span class="token operator">!=</span> m<span class="token punctuation">)</span> <span class="token punctuation">&#123;</span></pre></td></tr><tr><td data-num="14"></td><td><pre>           <span class="token keyword">for</span> <span class="token punctuation">(</span><span class="token punctuation">;</span> i<span class="token operator">&lt;</span>m<span class="token punctuation">;</span> i<span class="token operator">++</span><span class="token punctuation">)</span> res <span class="token operator">+=</span> word1<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">;</span></pre></td></tr><tr><td data-num="15"></td><td><pre>       <span class="token punctuation">&#125;</span> <span class="token keyword">else</span> <span class="token punctuation">&#123;</span></pre></td></tr><tr><td data-num="16"></td><td><pre>           <span class="token keyword">for</span> <span class="token punctuation">(</span><span class="token punctuation">;</span> j<span class="token operator">&lt;</span>n<span class="token punctuation">;</span> j<span class="token operator">++</span><span class="token punctuation">)</span> res <span class="token operator">+=</span> word2<span class="token punctuation">[</span>j<span class="token punctuation">]</span><span class="token punctuation">;</span></pre></td></tr><tr><td data-num="17"></td><td><pre>       <span class="token punctuation">&#125;</span></pre></td></tr><tr><td data-num="18"></td><td><pre>       <span class="token keyword">return</span> res<span class="token punctuation">;</span></pre></td></tr><tr><td data-num="19"></td><td><pre>    <span class="token punctuation">&#125;</span></pre></td></tr><tr><td data-num="20"></td><td><pre><span class="token punctuation">&#125;</span><span class="token punctuation">;</span></pre></td></tr></table></figure></div><div class="tab" data-id="code" data-title="python"><figure class="highlight python"><figcaption data-lang="python"></figcaption><table><tr><td data-num="1"></td><td><pre><span class="token keyword">class</span> <span class="token class-name">Solution</span><span class="token punctuation">:</span></pre></td></tr><tr><td data-num="2"></td><td><pre>    <span class="token keyword">def</span> <span class="token function">mergeAlternately</span><span class="token punctuation">(</span>self<span class="token punctuation">,</span> word1<span class="token punctuation">:</span> <span class="token builtin">str</span><span class="token punctuation">,</span> word2<span class="token punctuation">:</span> <span class="token builtin">str</span><span class="token punctuation">)</span> <span class="token operator">-</span><span class="token operator">></span> <span class="token builtin">str</span><span class="token punctuation">:</span></pre></td></tr><tr><td data-num="3"></td><td><pre>        m<span class="token punctuation">,</span> n <span class="token operator">=</span> <span class="token builtin">len</span><span class="token punctuation">(</span>word1<span class="token punctuation">)</span><span class="token punctuation">,</span> <span class="token builtin">len</span><span class="token punctuation">(</span>word2<span class="token punctuation">)</span></pre></td></tr><tr><td data-num="4"></td><td><pre>        res <span class="token operator">=</span> <span class="token string">""</span></pre></td></tr><tr><td data-num="5"></td><td><pre>        i<span class="token punctuation">,</span> j <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">,</span> <span class="token number">0</span></pre></td></tr><tr><td data-num="6"></td><td><pre>        <span class="token keyword">while</span> i <span class="token operator">&lt;</span> m <span class="token keyword">and</span> j <span class="token operator">&lt;</span> n<span class="token punctuation">:</span></pre></td></tr><tr><td data-num="7"></td><td><pre>            res <span class="token operator">+=</span> word1<span class="token punctuation">[</span>i<span class="token punctuation">]</span></pre></td></tr><tr><td data-num="8"></td><td><pre>            i <span class="token operator">+=</span> <span class="token number">1</span></pre></td></tr><tr><td data-num="9"></td><td><pre>            res <span class="token operator">+=</span> word2<span class="token punctuation">[</span>j<span class="token punctuation">]</span></pre></td></tr><tr><td data-num="10"></td><td><pre>            j <span class="token operator">+=</span> <span class="token number">1</span></pre></td></tr><tr><td data-num="11"></td><td><pre>        <span class="token keyword">if</span> i <span class="token operator">!=</span> m<span class="token punctuation">:</span></pre></td></tr><tr><td data-num="12"></td><td><pre>            <span class="token keyword">while</span> i <span class="token operator">&lt;</span> m<span class="token punctuation">:</span></pre></td></tr><tr><td data-num="13"></td><td><pre>                res <span class="token operator">+=</span> word1<span class="token punctuation">[</span>i<span class="token punctuation">]</span></pre></td></tr><tr><td data-num="14"></td><td><pre>                i <span class="token operator">+=</span> <span class="token number">1</span></pre></td></tr><tr><td data-num="15"></td><td><pre>        <span class="token keyword">else</span> <span class="token punctuation">:</span></pre></td></tr><tr><td data-num="16"></td><td><pre>            <span class="token keyword">while</span> j <span class="token operator">&lt;</span> n<span class="token punctuation">:</span></pre></td></tr><tr><td data-num="17"></td><td><pre>                res <span class="token operator">+=</span> word2<span class="token punctuation">[</span>j<span class="token punctuation">]</span></pre></td></tr><tr><td data-num="18"></td><td><pre>                j <span class="token operator">+=</span> <span class="token number">1</span></pre></td></tr><tr><td data-num="19"></td><td><pre>        <span class="token keyword">return</span> res</pre></td></tr></table></figure></div><div class="tab" data-id="code" data-title="java"><figure class="highlight java"><figcaption data-lang="java"></figcaption><table><tr><td data-num="1"></td><td><pre><span class="token keyword">class</span> <span class="token class-name">Solution</span> <span class="token punctuation">&#123;</span></pre></td></tr><tr><td data-num="2"></td><td><pre>    <span class="token keyword">public</span> <span class="token class-name">String</span> <span class="token function">mergeAlternately</span><span class="token punctuation">(</span><span class="token class-name">String</span> word1<span class="token punctuation">,</span> <span class="token class-name">String</span> word2<span class="token punctuation">)</span> <span class="token punctuation">&#123;</span></pre></td></tr><tr><td data-num="3"></td><td><pre>        <span class="token class-name">String</span> res <span class="token operator">=</span> <span class="token string">""</span><span class="token punctuation">;</span></pre></td></tr><tr><td data-num="4"></td><td><pre>        <span class="token keyword">int</span> m <span class="token operator">=</span> word1<span class="token punctuation">.</span><span class="token function">length</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">,</span> n <span class="token operator">=</span> word2<span class="token punctuation">.</span><span class="token function">length</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span></pre></td></tr><tr><td data-num="5"></td><td><pre>        <span class="token keyword">int</span> i <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">,</span> j <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span></pre></td></tr><tr><td data-num="6"></td><td><pre>        <span class="token keyword">while</span> <span class="token punctuation">(</span>i <span class="token operator">&lt;</span> m <span class="token operator">&amp;&amp;</span> j <span class="token operator">&lt;</span> n<span class="token punctuation">)</span> <span class="token punctuation">&#123;</span></pre></td></tr><tr><td data-num="7"></td><td><pre>            res <span class="token operator">+=</span> word1<span class="token punctuation">.</span><span class="token function">charAt</span><span class="token punctuation">(</span>i<span class="token punctuation">)</span><span class="token punctuation">;</span></pre></td></tr><tr><td data-num="8"></td><td><pre>            i<span class="token operator">++</span><span class="token punctuation">;</span></pre></td></tr><tr><td data-num="9"></td><td><pre>            res <span class="token operator">+=</span> word2<span class="token punctuation">.</span><span class="token function">charAt</span><span class="token punctuation">(</span>j<span class="token punctuation">)</span><span class="token punctuation">;</span></pre></td></tr><tr><td data-num="10"></td><td><pre>            j<span class="token operator">++</span><span class="token punctuation">;</span></pre></td></tr><tr><td data-num="11"></td><td><pre>        <span class="token punctuation">&#125;</span></pre></td></tr><tr><td data-num="12"></td><td><pre>        <span class="token keyword">if</span> <span class="token punctuation">(</span>i <span class="token operator">!=</span> m<span class="token punctuation">)</span> <span class="token punctuation">&#123;</span></pre></td></tr><tr><td data-num="13"></td><td><pre>            <span class="token keyword">for</span> <span class="token punctuation">(</span><span class="token punctuation">;</span> i <span class="token operator">&lt;</span>m<span class="token punctuation">;</span> i<span class="token operator">++</span><span class="token punctuation">)</span> res <span class="token operator">+=</span> word1<span class="token punctuation">.</span><span class="token function">charAt</span><span class="token punctuation">(</span>i<span class="token punctuation">)</span><span class="token punctuation">;</span></pre></td></tr><tr><td data-num="14"></td><td><pre>        <span class="token punctuation">&#125;</span> <span class="token keyword">else</span> <span class="token punctuation">&#123;</span></pre></td></tr><tr><td data-num="15"></td><td><pre>            <span class="token keyword">for</span> <span class="token punctuation">(</span><span class="token punctuation">;</span> j<span class="token operator">&lt;</span>n<span class="token punctuation">;</span> j<span class="token operator">++</span><span class="token punctuation">)</span> res <span class="token operator">+=</span> word2<span class="token punctuation">.</span><span class="token function">charAt</span><span class="token punctuation">(</span>j<span class="token punctuation">)</span><span class="token punctuation">;</span></pre></td></tr><tr><td data-num="16"></td><td><pre>        <span class="token punctuation">&#125;</span></pre></td></tr><tr><td data-num="17"></td><td><pre>        <span class="token keyword">return</span> res<span class="token punctuation">;</span></pre></td></tr><tr><td data-num="18"></td><td><pre>    <span class="token punctuation">&#125;</span></pre></td></tr><tr><td data-num="19"></td><td><pre><span class="token punctuation">&#125;</span></pre></td></tr></table></figure></div>]]></content>
      
      
      <categories>
          
          <category> Coding </category>
          
          <category> Leetcode </category>
          
          <category> Easy </category>
          
      </categories>
      
      
        <tags>
            
            <tag> String </tag>
            
            <tag> Easy </tag>
            
            <tag> Two Pointers </tag>
            
        </tags>
      
    </entry>
    
    
  
  
</search>
